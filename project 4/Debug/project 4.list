
project 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006110  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800632c  0800632c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800632c  0800632c  0001632c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006334  08006334  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006334  08006334  00016334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006338  08006338  00016338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800633c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008190  20000078  080063b4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008208  080063b4  00028208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017999  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a02  00000000  00000000  00037a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0003a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b9b  00000000  00000000  0003c9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b7d  00000000  00000000  0006658b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108fcc  00000000  00000000  0007b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001840d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d4  00000000  00000000  00184128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006288 	.word	0x08006288

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006288 	.word	0x08006288

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <print>:
static void MX_DAC1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void print(void){
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b09e      	sub	sp, #120	; 0x78
 800056c:	af02      	add	r7, sp, #8
	char msg[100];
	int x = get_cnt();
 800056e:	f000 fb77 	bl	8000c60 <get_cnt>
 8000572:	66f8      	str	r0, [r7, #108]	; 0x6c
	if(HAL_GetTick()<1000 || (HAL_GetTick()<11000 && HAL_GetTick()>10000)){//while(get_cnt() == x && get_idx()){
 8000574:	f000 fd9a 	bl	80010ac <HAL_GetTick>
 8000578:	4603      	mov	r3, r0
 800057a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800057e:	d30d      	bcc.n	800059c <print+0x34>
 8000580:	f000 fd94 	bl	80010ac <HAL_GetTick>
 8000584:	4603      	mov	r3, r0
 8000586:	f642 22f7 	movw	r2, #10999	; 0x2af7
 800058a:	4293      	cmp	r3, r2
 800058c:	d81f      	bhi.n	80005ce <print+0x66>
 800058e:	f000 fd8d 	bl	80010ac <HAL_GetTick>
 8000592:	4603      	mov	r3, r0
 8000594:	f242 7210 	movw	r2, #10000	; 0x2710
 8000598:	4293      	cmp	r3, r2
 800059a:	d918      	bls.n	80005ce <print+0x66>
		int len = sprintf(msg, "%d, %d, %lu\r\n", get_dac(), get_adc(),HAL_GetTick());
 800059c:	f000 fb34 	bl	8000c08 <get_dac>
 80005a0:	4604      	mov	r4, r0
 80005a2:	f000 fb47 	bl	8000c34 <get_adc>
 80005a6:	4605      	mov	r5, r0
 80005a8:	f000 fd80 	bl	80010ac <HAL_GetTick>
 80005ac:	4603      	mov	r3, r0
 80005ae:	1d38      	adds	r0, r7, #4
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	462b      	mov	r3, r5
 80005b4:	4622      	mov	r2, r4
 80005b6:	4908      	ldr	r1, [pc, #32]	; (80005d8 <print+0x70>)
 80005b8:	f005 fa38 	bl	8005a2c <siprintf>
 80005bc:	66b8      	str	r0, [r7, #104]	; 0x68
		USART_Write(huart2.Instance, msg, len);
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <print+0x74>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fcac 	bl	8000f24 <USART_Write>
	}
	return;
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
}
 80005d0:	3770      	adds	r7, #112	; 0x70
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bdb0      	pop	{r4, r5, r7, pc}
 80005d6:	bf00      	nop
 80005d8:	080062a0 	.word	0x080062a0
 80005dc:	2000016c 	.word	0x2000016c

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fcf9 	bl	8000fda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f98e 	bl	800090c <MX_GPIO_Init>
  MX_DAC1_Init();
 80005f0:	f000 f8de 	bl	80007b0 <MX_DAC1_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f95a 	bl	80008ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005f8:	f000 f90c 	bl	8000814 <MX_TIM2_Init>
  MX_ADC1_Init();
 80005fc:	f000 f862 	bl	80006c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  populate_array();
 8000600:	f000 fb3a 	bl	8000c78 <populate_array>
  HAL_TIM_Base_Start_IT(&htim2);
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <main+0x38>)
 8000606:	f004 f93d 	bl	8004884 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <main+0x3c>)
 800060e:	f002 fac4 	bl	8002b9a <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 print();
 8000612:	f7ff ffa9 	bl	8000568 <print>
 8000616:	e7fc      	b.n	8000612 <main+0x32>
 8000618:	20000120 	.word	0x20000120
 800061c:	200000a8 	.word	0x200000a8

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b096      	sub	sp, #88	; 0x58
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2244      	movs	r2, #68	; 0x44
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 f9f4 	bl	8005a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000642:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000646:	f002 fdc7 	bl	80031d8 <HAL_PWREx_ControlVoltageScaling>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000650:	f000 f980 	bl	8000954 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000654:	2310      	movs	r3, #16
 8000656:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000660:	2360      	movs	r3, #96	; 0x60
 8000662:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000668:	2301      	movs	r3, #1
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066c:	2301      	movs	r3, #1
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000670:	2320      	movs	r3, #32
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000674:	2307      	movs	r3, #7
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fdfd 	bl	8003284 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000690:	f000 f960 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2303      	movs	r3, #3
 800069a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	2103      	movs	r1, #3
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 f9cf 	bl	8003a50 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b8:	f000 f94c 	bl	8000954 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3758      	adds	r7, #88	; 0x58
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <MX_ADC1_Init+0xe0>)
 80006e8:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <MX_ADC1_Init+0xe4>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_ADC1_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <MX_ADC1_Init+0xe0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_ADC1_Init+0xe0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fe:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <MX_ADC1_Init+0xe0>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_ADC1_Init+0xe0>)
 8000706:	2204      	movs	r2, #4
 8000708:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_ADC1_Init+0xe0>)
 800070c:	2200      	movs	r2, #0
 800070e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <MX_ADC1_Init+0xe0>)
 8000712:	2200      	movs	r2, #0
 8000714:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_ADC1_Init+0xe0>)
 8000718:	2201      	movs	r2, #1
 800071a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_ADC1_Init+0xe0>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_ADC1_Init+0xe0>)
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_ADC1_Init+0xe0>)
 800072c:	2200      	movs	r2, #0
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_ADC1_Init+0xe0>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_ADC1_Init+0xe0>)
 800073a:	2200      	movs	r2, #0
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_ADC1_Init+0xe0>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000746:	4817      	ldr	r0, [pc, #92]	; (80007a4 <MX_ADC1_Init+0xe0>)
 8000748:	f000 fed6 	bl	80014f8 <HAL_ADC_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000752:	f000 f8ff 	bl	8000954 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <MX_ADC1_Init+0xe0>)
 8000762:	f002 f837 	bl	80027d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800076c:	f000 f8f2 	bl	8000954 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_ADC1_Init+0xe8>)
 8000772:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000774:	2306      	movs	r3, #6
 8000776:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800077c:	237f      	movs	r3, #127	; 0x7f
 800077e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000780:	2304      	movs	r3, #4
 8000782:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_ADC1_Init+0xe0>)
 800078e:	f001 fb77 	bl	8001e80 <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000798:	f000 f8dc 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000bc 	.word	0x200000bc
 80007a8:	50040000 	.word	0x50040000
 80007ac:	04300002 	.word	0x04300002

080007b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2224      	movs	r2, #36	; 0x24
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f005 f92d 	bl	8005a1c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_DAC1_Init+0x5c>)
 80007c4:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_DAC1_Init+0x60>)
 80007c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007c8:	4810      	ldr	r0, [pc, #64]	; (800080c <MX_DAC1_Init+0x5c>)
 80007ca:	f002 f9c4 	bl	8002b56 <HAL_DAC_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007d4:	f000 f8be 	bl	8000954 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_DAC1_Init+0x5c>)
 80007f4:	f002 fa1e 	bl	8002c34 <HAL_DAC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f8a9 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000a8 	.word	0x200000a8
 8000810:	40007400 	.word	0x40007400

08000814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000838:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 88;
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_TIM2_Init+0x94>)
 800083c:	2258      	movs	r2, #88	; 0x58
 800083e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 88;
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000848:	2258      	movs	r2, #88	; 0x58
 800084a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_TIM2_Init+0x94>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000858:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_TIM2_Init+0x94>)
 800085a:	f003 ffbb 	bl	80047d4 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000864:	f000 f876 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000876:	f004 f994 	bl	8004ba2 <HAL_TIM_ConfigClockSource>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 f868 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000884:	2320      	movs	r3, #32
 8000886:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_TIM2_Init+0x94>)
 8000892:	f004 fbb3 	bl	8004ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 f85a 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000120 	.word	0x20000120

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <MX_USART2_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008f0:	f004 fc2a 	bl	8005148 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f82b 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000016c 	.word	0x2000016c
 8000908:	40004400 	.word	0x40004400

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_GPIO_Init+0x44>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <MX_GPIO_Init+0x44>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_GPIO_Init+0x44>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_GPIO_Init+0x44>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <MX_GPIO_Init+0x44>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_GPIO_Init+0x44>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6613      	str	r3, [r2, #96]	; 0x60
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6593      	str	r3, [r2, #88]	; 0x58
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0ac      	sub	sp, #176	; 0xb0
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2288      	movs	r2, #136	; 0x88
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f005 f827 	bl	8005a1c <memset>
  if(hadc->Instance==ADC1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a2b      	ldr	r2, [pc, #172]	; (8000a80 <HAL_ADC_MspInit+0xd8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d14e      	bne.n	8000a76 <HAL_ADC_MspInit+0xce>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80009ee:	2310      	movs	r3, #16
 80009f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009f2:	2307      	movs	r3, #7
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 fa27 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a14:	f7ff ff9e 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <HAL_ADC_MspInit+0xdc>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <HAL_ADC_MspInit+0xdc>)
 8000a1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_ADC_MspInit+0xdc>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_ADC_MspInit+0xdc>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <HAL_ADC_MspInit+0xdc>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_ADC_MspInit+0xdc>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a4e:	230b      	movs	r3, #11
 8000a50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <HAL_ADC_MspInit+0xe0>)
 8000a62:	f002 fa01 	bl	8002e68 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2012      	movs	r0, #18
 8000a6c:	f002 f83d 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a70:	2012      	movs	r0, #18
 8000a72:	f002 f856 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a76:	bf00      	nop
 8000a78:	37b0      	adds	r7, #176	; 0xb0
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	50040000 	.word	0x50040000
 8000a84:	40021000 	.word	0x40021000
 8000a88:	48000800 	.word	0x48000800

08000a8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <HAL_DAC_MspInit+0x74>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d124      	bne.n	8000af8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_DAC_MspInit+0x78>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <HAL_DAC_MspInit+0x78>)
 8000ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_DAC_MspInit+0x78>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_DAC_MspInit+0x78>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_DAC_MspInit+0x78>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_DAC_MspInit+0x78>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f002 f9b8 	bl	8002e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40007400 	.word	0x40007400
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b18:	d113      	bne.n	8000b42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_TIM_Base_MspInit+0x44>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <HAL_TIM_Base_MspInit+0x44>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6593      	str	r3, [r2, #88]	; 0x58
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_TIM_Base_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	201c      	movs	r0, #28
 8000b38:	f001 ffd7 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b3c:	201c      	movs	r0, #28
 8000b3e:	f001 fff0 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0ac      	sub	sp, #176	; 0xb0
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2288      	movs	r2, #136	; 0x88
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 ff53 	bl	8005a1c <memset>
  if(huart->Instance==USART2)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a21      	ldr	r2, [pc, #132]	; (8000c00 <HAL_UART_MspInit+0xb0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d13b      	bne.n	8000bf8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f003 f965 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b98:	f7ff fedc 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_UART_MspInit+0xb4>)
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba0:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <HAL_UART_MspInit+0xb4>)
 8000ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_UART_MspInit+0xb4>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_UART_MspInit+0xb4>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb8:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <HAL_UART_MspInit+0xb4>)
 8000bba:	f043 0301 	orr.w	r3, r3, #1
 8000bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_UART_MspInit+0xb4>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bcc:	230c      	movs	r3, #12
 8000bce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be4:	2307      	movs	r3, #7
 8000be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f002 f938 	bl	8002e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	37b0      	adds	r7, #176	; 0xb0
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40021000 	.word	0x40021000

08000c08 <get_dac>:

int get_idx(void){
	return idx;
}

int get_dac(void){
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	return dac_data[idx - 1];
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <get_dac+0x24>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <get_dac+0x28>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	881b      	ldrh	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	200081f0 	.word	0x200081f0

08000c34 <get_adc>:

int get_adc(void){
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	return adc_data[idx - 1];
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <get_adc+0x24>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <get_adc+0x28>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000c44:	3b01      	subs	r3, #1
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	881b      	ldrh	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000004 	.word	0x20000004
 8000c5c:	200081f0 	.word	0x200081f0

08000c60 <get_cnt>:

int get_cnt(void){
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	return cnt;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <get_cnt+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000098 	.word	0x20000098

08000c78 <populate_array>:

void populate_array(void){
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
	for(int i = 0; i <= 8190; i++){
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	e017      	b.n	8000cb4 <populate_array+0x3c>
		if(i < 4096){
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c8a:	da06      	bge.n	8000c9a <populate_array+0x22>
			buffer[i] = (uint16_t)(i);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	b299      	uxth	r1, r3
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <populate_array+0x54>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c98:	e009      	b.n	8000cae <populate_array+0x36>
		}
		else{
			buffer[i] = (uint16_t)(8190 - i);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	f5c3 53ff 	rsb	r3, r3, #8160	; 0x1fe0
 8000ca2:	331e      	adds	r3, #30
 8000ca4:	b299      	uxth	r1, r3
 8000ca6:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <populate_array+0x54>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i <= 8190; i++){
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	dde2      	ble.n	8000c84 <populate_array+0xc>
		}
	}
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	200041f0 	.word	0x200041f0

08000cd0 <write_dac>:

void write_dac(int idx){
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	DAC1->DHR12R1 = dac_data[idx];
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <write_dac+0x24>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <write_dac+0x28>)
 8000ce6:	609a      	str	r2, [r3, #8]
	return;
 8000ce8:	bf00      	nop
}
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	40007400 	.word	0x40007400

08000cfc <read_adc>:

void read_adc(int idx, int value){
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
	adc_data[idx] = value;
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <read_adc+0x28>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	b292      	uxth	r2, r2
 8000d14:	801a      	strh	r2, [r3, #0]
	return;
 8000d16:	bf00      	nop
}
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	uint16_t AD_RES = HAL_ADC_GetValue(hadc);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 fe69 	bl	8001a08 <HAL_ADC_GetValue>
 8000d36:	4603      	mov	r3, r0
 8000d38:	81fb      	strh	r3, [r7, #14]
	if(idx2 < BUFFER_SIZE){
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_ADC_ConvCpltCallback+0x40>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f641 72fd 	movw	r2, #8189	; 0x1ffd
 8000d42:	4293      	cmp	r3, r2
 8000d44:	dc0b      	bgt.n	8000d5e <HAL_ADC_ConvCpltCallback+0x36>
		read_adc(idx2, AD_RES);
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_ADC_ConvCpltCallback+0x40>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	89fa      	ldrh	r2, [r7, #14]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ffd4 	bl	8000cfc <read_adc>
		idx2++;
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <HAL_ADC_ConvCpltCallback+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <HAL_ADC_ConvCpltCallback+0x40>)
 8000d5c:	6013      	str	r3, [r2, #0]
	}
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000094 	.word	0x20000094

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f964 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <ADC1_2_IRQHandler+0x10>)
 8000dc6:	f000 fe2d 	bl	8001a24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000bc 	.word	0x200000bc

08000dd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dda:	4817      	ldr	r0, [pc, #92]	; (8000e38 <TIM2_IRQHandler+0x64>)
 8000ddc:	f003 fdc2 	bl	8004964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(idx >= BUFFER_SIZE){
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <TIM2_IRQHandler+0x68>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f641 72fd 	movw	r2, #8189	; 0x1ffd
 8000de8:	4293      	cmp	r3, r2
 8000dea:	dd0f      	ble.n	8000e0c <TIM2_IRQHandler+0x38>
  	  idx = 0;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <TIM2_IRQHandler+0x68>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
  	  idx2 = 0;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <TIM2_IRQHandler+0x6c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
  	  uint16_t* temp = dac_data; //temporary buffer in case they need to be switched
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <TIM2_IRQHandler+0x70>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	607b      	str	r3, [r7, #4]
  	  dac_data = adc_data;
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <TIM2_IRQHandler+0x74>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <TIM2_IRQHandler+0x70>)
 8000e04:	6013      	str	r3, [r2, #0]
  	  adc_data = temp;
 8000e06:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <TIM2_IRQHandler+0x74>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6013      	str	r3, [r2, #0]
    }
	  write_dac(idx);
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <TIM2_IRQHandler+0x68>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <write_dac>
	  HAL_ADC_Start_IT(&hadc1); //start an adc conversion
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <TIM2_IRQHandler+0x78>)
 8000e18:	f000 fcc4 	bl	80017a4 <HAL_ADC_Start_IT>
	  cnt++;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <TIM2_IRQHandler+0x7c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <TIM2_IRQHandler+0x7c>)
 8000e24:	6013      	str	r3, [r2, #0]
	  idx++;
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <TIM2_IRQHandler+0x68>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <TIM2_IRQHandler+0x68>)
 8000e2e:	6013      	str	r3, [r2, #0]
  //use buffer to write to DAC register
  /* USER CODE END TIM2_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000120 	.word	0x20000120
 8000e3c:	200081f0 	.word	0x200081f0
 8000e40:	20000094 	.word	0x20000094
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	200000bc 	.word	0x200000bc
 8000e50:	20000098 	.word	0x20000098

08000e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <_sbrk+0x5c>)
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <_sbrk+0x60>)
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d102      	bne.n	8000e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <_sbrk+0x64>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <_sbrk+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d207      	bcs.n	8000e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e84:	f004 fda0 	bl	80059c8 <__errno>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	e009      	b.n	8000ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <_sbrk+0x64>)
 8000ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20018000 	.word	0x20018000
 8000eb4:	00000400 	.word	0x00000400
 8000eb8:	2000009c 	.word	0x2000009c
 8000ebc:	20008208 	.word	0x20008208

08000ec0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <SystemInit+0x5c>)
 8000ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <SystemInit+0x5c>)
 8000ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <SystemInit+0x60>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <SystemInit+0x60>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <SystemInit+0x60>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <SystemInit+0x60>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <SystemInit+0x60>)
 8000eec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ef0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ef4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <SystemInit+0x60>)
 8000ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000efc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <SystemInit+0x60>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <SystemInit+0x60>)
 8000f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <SystemInit+0x60>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00
 8000f20:	40021000 	.word	0x40021000

08000f24 <USART_Write>:
// USART resets the RXNE flag automatically after reading DR
return ((uint8_t)(USARTx->RDR & 0xFF));
// Reading USART_DR automatically clears the RXNE flag
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data egister), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e010      	b.n	8000f58 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8000f36:	bf00      	nop
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f9      	beq.n	8000f38 <USART_Write+0x14>
;    	// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF; // writing USART_TDR automatically clears the TXE flag
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8ea      	bhi.n	8000f36 <USART_Write+0x12>
		}
	while (!(USARTx->ISR & USART_ISR_TC))
 8000f60:	bf00      	nop
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f9      	beq.n	8000f62 <USART_Write+0x3e>
		;  // wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	61da      	str	r2, [r3, #28]
}
 8000f7a:	bf00      	nop
 8000f7c:	371c      	adds	r7, #28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f8c:	f7ff ff98 	bl	8000ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f92:	e003      	b.n	8000f9c <LoopCopyDataInit>

08000f94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f9a:	3104      	adds	r1, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fa0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fa2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fa4:	d3f6      	bcc.n	8000f94 <CopyDataInit>
	ldr	r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fa8:	e002      	b.n	8000fb0 <LoopFillZerobss>

08000faa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000faa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fac:	f842 3b04 	str.w	r3, [r2], #4

08000fb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000fb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fb4:	d3f9      	bcc.n	8000faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f004 fd0d 	bl	80059d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fba:	f7ff fb11 	bl	80005e0 <main>

08000fbe <LoopForever>:

LoopForever:
    b LoopForever
 8000fbe:	e7fe      	b.n	8000fbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fc4:	0800633c 	.word	0x0800633c
	ldr	r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fcc:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8000fd0:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8000fd4:	20008208 	.word	0x20008208

08000fd8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC3_IRQHandler>

08000fda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f001 fd75 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 f80e 	bl	800100c <HAL_InitTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	e001      	b.n	8001000 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ffc:	f7ff fcb0 	bl	8000960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001000:	79fb      	ldrb	r3, [r7, #7]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_InitTick+0x6c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d023      	beq.n	8001068 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_InitTick+0x70>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_InitTick+0x6c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fd81 	bl	8002b3e <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10f      	bne.n	8001062 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d809      	bhi.n	800105c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f001 fd4b 	bl	8002aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x74>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e007      	b.n	800106c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e004      	b.n	800106c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e001      	b.n	800106c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000010 	.word	0x20000010
 800107c:	20000008 	.word	0x20000008
 8001080:	2000000c 	.word	0x2000000c

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000010 	.word	0x20000010
 80010a8:	200081f4 	.word	0x200081f4

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	200081f4 	.word	0x200081f4

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000010 	.word	0x20000010

0800110c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	431a      	orrs	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	609a      	str	r2, [r3, #8]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	609a      	str	r2, [r3, #8]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3360      	adds	r3, #96	; 0x60
 8001186:	461a      	mov	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <LL_ADC_SetOffset+0x44>)
 8001196:	4013      	ands	r3, r2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	4313      	orrs	r3, r2
 80011a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	03fff000 	.word	0x03fff000

080011bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3360      	adds	r3, #96	; 0x60
 80011ca:	461a      	mov	r2, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3360      	adds	r3, #96	; 0x60
 80011f8:	461a      	mov	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001212:	bf00      	nop
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3330      	adds	r3, #48	; 0x30
 8001254:	461a      	mov	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	4413      	add	r3, r2
 8001262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	f003 031f 	and.w	r3, r3, #31
 800126e:	211f      	movs	r1, #31
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	401a      	ands	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	0e9b      	lsrs	r3, r3, #26
 800127c:	f003 011f 	and.w	r1, r3, #31
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001290:	bf00      	nop
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b087      	sub	sp, #28
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3314      	adds	r3, #20
 80012d2:	461a      	mov	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	0e5b      	lsrs	r3, r3, #25
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	0d1b      	lsrs	r3, r3, #20
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2107      	movs	r1, #7
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	401a      	ands	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	0d1b      	lsrs	r3, r3, #20
 80012fc:	f003 031f 	and.w	r3, r3, #31
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	431a      	orrs	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001330:	43db      	mvns	r3, r3
 8001332:	401a      	ands	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0318 	and.w	r3, r3, #24
 800133a:	4908      	ldr	r1, [pc, #32]	; (800135c <LL_ADC_SetChannelSingleDiff+0x44>)
 800133c:	40d9      	lsrs	r1, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	400b      	ands	r3, r1
 8001342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001346:	431a      	orrs	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	0007ffff 	.word	0x0007ffff

08001360 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 031f 	and.w	r3, r3, #31
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6093      	str	r3, [r2, #8]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013d0:	d101      	bne.n	80013d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001420:	d101      	bne.n	8001426 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001444:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <LL_ADC_IsEnabled+0x18>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <LL_ADC_IsEnabled+0x1a>
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001492:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001496:	f043 0204 	orr.w	r2, r3, #4
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d101      	bne.n	80014c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d101      	bne.n	80014e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e136      	b.n	8001780 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fa41 	bl	80009a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff3f 	bl	80013bc <LL_ADC_IsDeepPowerDownEnabled>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d004      	beq.n	800154e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff25 	bl	8001398 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff5a 	bl	800140c <LL_ADC_IsInternalRegulatorEnabled>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d115      	bne.n	800158a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff3e 	bl	80013e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001568:	4b87      	ldr	r3, [pc, #540]	; (8001788 <HAL_ADC_Init+0x290>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	4a87      	ldr	r2, [pc, #540]	; (800178c <HAL_ADC_Init+0x294>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	3301      	adds	r3, #1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800157c:	e002      	b.n	8001584 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	3b01      	subs	r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f9      	bne.n	800157e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff3c 	bl	800140c <LL_ADC_IsInternalRegulatorEnabled>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10d      	bne.n	80015b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f043 0210 	orr.w	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff75 	bl	80014aa <LL_ADC_REG_IsConversionOngoing>
 80015c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 80cf 	bne.w	800176e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 80cb 	bne.w	800176e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015e0:	f043 0202 	orr.w	r2, r3, #2
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff35 	bl	800145c <LL_ADC_IsEnabled>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d115      	bne.n	8001624 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015f8:	4865      	ldr	r0, [pc, #404]	; (8001790 <HAL_ADC_Init+0x298>)
 80015fa:	f7ff ff2f 	bl	800145c <LL_ADC_IsEnabled>
 80015fe:	4604      	mov	r4, r0
 8001600:	4864      	ldr	r0, [pc, #400]	; (8001794 <HAL_ADC_Init+0x29c>)
 8001602:	f7ff ff2b 	bl	800145c <LL_ADC_IsEnabled>
 8001606:	4603      	mov	r3, r0
 8001608:	431c      	orrs	r4, r3
 800160a:	4863      	ldr	r0, [pc, #396]	; (8001798 <HAL_ADC_Init+0x2a0>)
 800160c:	f7ff ff26 	bl	800145c <LL_ADC_IsEnabled>
 8001610:	4603      	mov	r3, r0
 8001612:	4323      	orrs	r3, r4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4619      	mov	r1, r3
 800161e:	485f      	ldr	r0, [pc, #380]	; (800179c <HAL_ADC_Init+0x2a4>)
 8001620:	f7ff fd74 	bl	800110c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7e5b      	ldrb	r3, [r3, #25]
 8001628:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800162e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001634:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800163a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001642:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d106      	bne.n	8001660 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	3b01      	subs	r3, #1
 8001658:	045b      	lsls	r3, r3, #17
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d009      	beq.n	800167c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_ADC_Init+0x2a8>)
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	430b      	orrs	r3, r1
 800168e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff08 	bl	80014aa <LL_ADC_REG_IsConversionOngoing>
 800169a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff15 	bl	80014d0 <LL_ADC_INJ_IsConversionOngoing>
 80016a6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13d      	bne.n	800172a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d13a      	bne.n	800172a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016b8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d0:	f023 0302 	bic.w	r3, r3, #2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	69b9      	ldr	r1, [r7, #24]
 80016da:	430b      	orrs	r3, r1
 80016dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d118      	bne.n	800171a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016f2:	f023 0304 	bic.w	r3, r3, #4
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016fe:	4311      	orrs	r1, r2
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800170a:	430a      	orrs	r2, r1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	e007      	b.n	800172a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d10c      	bne.n	800174c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f023 010f 	bic.w	r1, r3, #15
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
 800174a:	e007      	b.n	800175c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 020f 	bic.w	r2, r2, #15
 800175a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
 800176c:	e007      	b.n	800177e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800177e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3724      	adds	r7, #36	; 0x24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	20000008 	.word	0x20000008
 800178c:	053e2d63 	.word	0x053e2d63
 8001790:	50040000 	.word	0x50040000
 8001794:	50040100 	.word	0x50040100
 8001798:	50040200 	.word	0x50040200
 800179c:	50040300 	.word	0x50040300
 80017a0:	fff0c007 	.word	0xfff0c007

080017a4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017ac:	4893      	ldr	r0, [pc, #588]	; (80019fc <HAL_ADC_Start_IT+0x258>)
 80017ae:	f7ff fdd7 	bl	8001360 <LL_ADC_GetMultimode>
 80017b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fe76 	bl	80014aa <LL_ADC_REG_IsConversionOngoing>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f040 8111 	bne.w	80019e8 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_ADC_Start_IT+0x30>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e10e      	b.n	80019f2 <HAL_ADC_Start_IT+0x24e>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 ff3f 	bl	8002660 <ADC_Enable>
 80017e2:	4603      	mov	r3, r0
 80017e4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f040 80f8 	bne.w	80019de <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7e      	ldr	r2, [pc, #504]	; (8001a00 <HAL_ADC_Start_IT+0x25c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d002      	beq.n	8001812 <HAL_ADC_Start_IT+0x6e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	e000      	b.n	8001814 <HAL_ADC_Start_IT+0x70>
 8001812:	4b7c      	ldr	r3, [pc, #496]	; (8001a04 <HAL_ADC_Start_IT+0x260>)
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	4293      	cmp	r3, r2
 800181a:	d002      	beq.n	8001822 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	f023 0206 	bic.w	r2, r3, #6
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	659a      	str	r2, [r3, #88]	; 0x58
 8001846:	e002      	b.n	800184e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	221c      	movs	r2, #28
 8001854:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 021c 	bic.w	r2, r2, #28
 800186c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	2b08      	cmp	r3, #8
 8001874:	d108      	bne.n	8001888 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0208 	orr.w	r2, r2, #8
 8001884:	605a      	str	r2, [r3, #4]
          break;
 8001886:	e008      	b.n	800189a <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0204 	orr.w	r2, r2, #4
 8001896:	605a      	str	r2, [r3, #4]
          break;
 8001898:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d107      	bne.n	80018b2 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0210 	orr.w	r2, r2, #16
 80018b0:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a52      	ldr	r2, [pc, #328]	; (8001a00 <HAL_ADC_Start_IT+0x25c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d002      	beq.n	80018c2 <HAL_ADC_Start_IT+0x11e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	e000      	b.n	80018c4 <HAL_ADC_Start_IT+0x120>
 80018c2:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_ADC_Start_IT+0x260>)
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d008      	beq.n	80018de <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d002      	beq.n	80018de <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	2b09      	cmp	r3, #9
 80018dc:	d13b      	bne.n	8001956 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d02d      	beq.n	8001948 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d110      	bne.n	8001926 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0220 	bic.w	r2, r2, #32
 8001912:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001922:	605a      	str	r2, [r3, #4]
              break;
 8001924:	e011      	b.n	800194a <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001934:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0220 	orr.w	r2, r2, #32
 8001944:	605a      	str	r2, [r3, #4]
              break;
 8001946:	e000      	b.n	800194a <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8001948:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fd97 	bl	8001482 <LL_ADC_REG_StartConversion>
 8001954:	e04c      	b.n	80019f0 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <HAL_ADC_Start_IT+0x25c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d002      	beq.n	8001972 <HAL_ADC_Start_IT+0x1ce>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	e000      	b.n	8001974 <HAL_ADC_Start_IT+0x1d0>
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_ADC_Start_IT+0x260>)
 8001974:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d035      	beq.n	80019ee <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800198a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	2b08      	cmp	r3, #8
 8001998:	d110      	bne.n	80019bc <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0220 	bic.w	r2, r2, #32
 80019a8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019b8:	605a      	str	r2, [r3, #4]
              break;
 80019ba:	e019      	b.n	80019f0 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ca:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0220 	orr.w	r2, r2, #32
 80019da:	605a      	str	r2, [r3, #4]
              break;
 80019dc:	e008      	b.n	80019f0 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019e6:	e003      	b.n	80019f0 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
 80019ea:	75fb      	strb	r3, [r7, #23]
 80019ec:	e000      	b.n	80019f0 <HAL_ADC_Start_IT+0x24c>
        }
 80019ee:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	50040300 	.word	0x50040300
 8001a00:	50040100 	.word	0x50040100
 8001a04:	50040000 	.word	0x50040000

08001a08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a40:	4882      	ldr	r0, [pc, #520]	; (8001c4c <HAL_ADC_IRQHandler+0x228>)
 8001a42:	f7ff fc8d 	bl	8001360 <LL_ADC_GetMultimode>
 8001a46:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d017      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x5e>
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d012      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fea3 	bl	80027c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_ADC_IRQHandler+0x72>
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10a      	bne.n	8001aac <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8083 	beq.w	8001ba8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d07d      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d105      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fba8 	bl	800121e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d062      	beq.n	8001b9a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a5d      	ldr	r2, [pc, #372]	; (8001c50 <HAL_ADC_IRQHandler+0x22c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d002      	beq.n	8001ae4 <HAL_ADC_IRQHandler+0xc0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	e000      	b.n	8001ae6 <HAL_ADC_IRQHandler+0xc2>
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_ADC_IRQHandler+0x230>)
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d008      	beq.n	8001b00 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d002      	beq.n	8001b00 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d104      	bne.n	8001b0a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	e00c      	b.n	8001b24 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <HAL_ADC_IRQHandler+0x22c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d002      	beq.n	8001b1a <HAL_ADC_IRQHandler+0xf6>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	e000      	b.n	8001b1c <HAL_ADC_IRQHandler+0xf8>
 8001b1a:	4b4e      	ldr	r3, [pc, #312]	; (8001c54 <HAL_ADC_IRQHandler+0x230>)
 8001b1c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d135      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d12e      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fcb2 	bl	80014aa <LL_ADC_REG_IsConversionOngoing>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d11a      	bne.n	8001b82 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020c 	bic.w	r2, r2, #12
 8001b5a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d112      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001b80:	e00b      	b.n	8001b9a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	f043 0210 	orr.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	f043 0201 	orr.w	r2, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff f8c4 	bl	8000d28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	220c      	movs	r2, #12
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_ADC_IRQHandler+0x198>
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10b      	bne.n	8001bd4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 809f 	beq.w	8001d06 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8099 	beq.w	8001d06 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fb53 	bl	800129c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001bf6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fb0e 	bl	800121e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c02:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_ADC_IRQHandler+0x22c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d002      	beq.n	8001c14 <HAL_ADC_IRQHandler+0x1f0>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	e000      	b.n	8001c16 <HAL_ADC_IRQHandler+0x1f2>
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_ADC_IRQHandler+0x230>)
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d008      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d002      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b07      	cmp	r3, #7
 8001c2e:	d104      	bne.n	8001c3a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	e013      	b.n	8001c62 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_ADC_IRQHandler+0x22c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_ADC_IRQHandler+0x234>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	e007      	b.n	8001c5a <HAL_ADC_IRQHandler+0x236>
 8001c4a:	bf00      	nop
 8001c4c:	50040300 	.word	0x50040300
 8001c50:	50040100 	.word	0x50040100
 8001c54:	50040000 	.word	0x50040000
 8001c58:	4b7d      	ldr	r3, [pc, #500]	; (8001e50 <HAL_ADC_IRQHandler+0x42c>)
 8001c5a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d047      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_ADC_IRQHandler+0x25e>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d03f      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d13a      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8c:	2b40      	cmp	r3, #64	; 0x40
 8001c8e:	d133      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d12e      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fc16 	bl	80014d0 <LL_ADC_INJ_IsConversionOngoing>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d11a      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cb8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d112      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd6:	f043 0201 	orr.w	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
 8001cde:	e00b      	b.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce4:	f043 0210 	orr.w	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fd39 	bl	8002770 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2260      	movs	r2, #96	; 0x60
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d011      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x310>
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f896 	bl	8001e58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d012      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x340>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00d      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fd1f 	bl	8002798 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d012      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x370>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00d      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fd11 	bl	80027ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d036      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x3e8>
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d031      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
 8001db4:	e014      	b.n	8001de0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001dbc:	4825      	ldr	r0, [pc, #148]	; (8001e54 <HAL_ADC_IRQHandler+0x430>)
 8001dbe:	f7ff fadd 	bl	800137c <LL_ADC_GetMultiDMATransfer>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00b      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
 8001dcc:	e008      	b.n	8001de0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10e      	bne.n	8001e04 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f834 	bl	8001e6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2210      	movs	r2, #16
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d018      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x424>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f043 0208 	orr.w	r2, r3, #8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e40:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fc9e 	bl	8002784 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e48:	bf00      	nop
 8001e4a:	3728      	adds	r7, #40	; 0x28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	50040000 	.word	0x50040000
 8001e54:	50040300 	.word	0x50040300

08001e58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b0b6      	sub	sp, #216	; 0xd8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x22>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e3c7      	b.n	8002632 <HAL_ADC_ConfigChannel+0x7b2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fafb 	bl	80014aa <LL_ADC_REG_IsConversionOngoing>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 83a8 	bne.w	800260c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b05      	cmp	r3, #5
 8001ec2:	d824      	bhi.n	8001f0e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	3b02      	subs	r3, #2
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d81b      	bhi.n	8001f06 <HAL_ADC_ConfigChannel+0x86>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <HAL_ADC_ConfigChannel+0x54>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001eed 	.word	0x08001eed
 8001edc:	08001ef5 	.word	0x08001ef5
 8001ee0:	08001efd 	.word	0x08001efd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	605a      	str	r2, [r3, #4]
          break;
 8001eea:	e011      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2212      	movs	r2, #18
 8001ef0:	605a      	str	r2, [r3, #4]
          break;
 8001ef2:	e00d      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2218      	movs	r2, #24
 8001ef8:	605a      	str	r2, [r3, #4]
          break;
 8001efa:	e009      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f02:	605a      	str	r2, [r3, #4]
          break;
 8001f04:	e004      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2206      	movs	r2, #6
 8001f0a:	605a      	str	r2, [r3, #4]
          break;
 8001f0c:	e000      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001f0e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f7ff f991 	bl	8001244 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fabf 	bl	80014aa <LL_ADC_REG_IsConversionOngoing>
 8001f2c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff facb 	bl	80014d0 <LL_ADC_INJ_IsConversionOngoing>
 8001f3a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 81a6 	bne.w	8002294 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f040 81a1 	bne.w	8002294 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f7ff f9af 	bl	80012c2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	08db      	lsrs	r3, r3, #3
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d00a      	beq.n	8001f9c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6919      	ldr	r1, [r3, #16]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f96:	f7ff f8ed 	bl	8001174 <LL_ADC_SetOffset>
 8001f9a:	e17b      	b.n	8002294 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f90a 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10a      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x148>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f8ff 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	0e9b      	lsrs	r3, r3, #26
 8001fc2:	f003 021f 	and.w	r2, r3, #31
 8001fc6:	e01e      	b.n	8002006 <HAL_ADC_ConfigChannel+0x186>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f8f4 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e004      	b.n	8002004 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_ADC_ConfigChannel+0x19e>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	e018      	b.n	8002050 <HAL_ADC_ConfigChannel+0x1d0>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800203a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e004      	b.n	8002050 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002050:	429a      	cmp	r2, r3
 8002052:	d106      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff f8c3 	bl	80011e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2101      	movs	r1, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f8a7 	bl	80011bc <LL_ADC_GetOffsetChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10a      	bne.n	800208e <HAL_ADC_ConfigChannel+0x20e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f89c 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	0e9b      	lsrs	r3, r3, #26
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	e01e      	b.n	80020cc <HAL_ADC_ConfigChannel+0x24c>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff f891 	bl	80011bc <LL_ADC_GetOffsetChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80020ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80020b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e004      	b.n	80020ca <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80020c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x264>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	e018      	b.n	8002116 <HAL_ADC_ConfigChannel+0x296>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e004      	b.n	8002116 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800210c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002116:	429a      	cmp	r2, r3
 8002118:	d106      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	2101      	movs	r1, #1
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f860 	bl	80011e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2102      	movs	r1, #2
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f844 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x2d4>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2102      	movs	r1, #2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff f839 	bl	80011bc <LL_ADC_GetOffsetChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	0e9b      	lsrs	r3, r3, #26
 800214e:	f003 021f 	and.w	r2, r3, #31
 8002152:	e01e      	b.n	8002192 <HAL_ADC_ConfigChannel+0x312>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2102      	movs	r1, #2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f82e 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002172:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800217a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e004      	b.n	8002190 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d105      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x32a>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	e016      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x358>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80021bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80021c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e004      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80021ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021d8:	429a      	cmp	r2, r3
 80021da:	d106      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2200      	movs	r2, #0
 80021e2:	2102      	movs	r1, #2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe ffff 	bl	80011e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2103      	movs	r1, #3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe ffe3 	bl	80011bc <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x396>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2103      	movs	r1, #3
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe ffd8 	bl	80011bc <LL_ADC_GetOffsetChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	e017      	b.n	8002246 <HAL_ADC_ConfigChannel+0x3c6>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2103      	movs	r1, #3
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe ffcd 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800222e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002230:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e003      	b.n	8002244 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800223c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_ADC_ConfigChannel+0x3de>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0e9b      	lsrs	r3, r3, #26
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	e011      	b.n	8002282 <HAL_ADC_ConfigChannel+0x402>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800226c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800226e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e003      	b.n	8002282 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800227a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002282:	429a      	cmp	r2, r3
 8002284:	d106      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	2103      	movs	r1, #3
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe ffaa 	bl	80011e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff f8df 	bl	800145c <LL_ADC_IsEnabled>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 813f 	bne.w	8002524 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6819      	ldr	r1, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f7ff f830 	bl	8001318 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a8e      	ldr	r2, [pc, #568]	; (80024f8 <HAL_ADC_ConfigChannel+0x678>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	f040 8130 	bne.w	8002524 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x46c>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	3301      	adds	r3, #1
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	bf94      	ite	ls
 80022e4:	2301      	movls	r3, #1
 80022e6:	2300      	movhi	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e019      	b.n	8002320 <HAL_ADC_ConfigChannel+0x4a0>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e003      	b.n	8002310 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2b09      	cmp	r3, #9
 8002318:	bf94      	ite	ls
 800231a:	2301      	movls	r3, #1
 800231c:	2300      	movhi	r3, #0
 800231e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002320:	2b00      	cmp	r3, #0
 8002322:	d079      	beq.n	8002418 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x4c0>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	069b      	lsls	r3, r3, #26
 800233a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800233e:	e015      	b.n	800236c <HAL_ADC_ConfigChannel+0x4ec>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800234e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002350:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e003      	b.n	8002364 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800235c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	069b      	lsls	r3, r3, #26
 8002368:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_ADC_ConfigChannel+0x50c>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	3301      	adds	r3, #1
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	e017      	b.n	80023bc <HAL_ADC_ConfigChannel+0x53c>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800239a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800239e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80023a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	ea42 0103 	orr.w	r1, r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x562>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	3301      	adds	r3, #1
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	051b      	lsls	r3, r3, #20
 80023e0:	e018      	b.n	8002414 <HAL_ADC_ConfigChannel+0x594>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e003      	b.n	8002406 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80023fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002414:	430b      	orrs	r3, r1
 8002416:	e080      	b.n	800251a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d107      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x5b4>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	3301      	adds	r3, #1
 800242c:	069b      	lsls	r3, r3, #26
 800242e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002432:	e015      	b.n	8002460 <HAL_ADC_ConfigChannel+0x5e0>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e003      	b.n	8002458 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	069b      	lsls	r3, r3, #26
 800245c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x600>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	3301      	adds	r3, #1
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	2101      	movs	r1, #1
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	e017      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x630>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	61fb      	str	r3, [r7, #28]
  return result;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e003      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	ea42 0103 	orr.w	r1, r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x65c>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	3301      	adds	r3, #1
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	3b1e      	subs	r3, #30
 80024d4:	051b      	lsls	r3, r3, #20
 80024d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024da:	e01d      	b.n	8002518 <HAL_ADC_ConfigChannel+0x698>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	613b      	str	r3, [r7, #16]
  return result;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e005      	b.n	8002504 <HAL_ADC_ConfigChannel+0x684>
 80024f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	3b1e      	subs	r3, #30
 8002512:	051b      	lsls	r3, r3, #20
 8002514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002518:	430b      	orrs	r3, r1
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	6892      	ldr	r2, [r2, #8]
 800251e:	4619      	mov	r1, r3
 8002520:	f7fe fecf 	bl	80012c2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b44      	ldr	r3, [pc, #272]	; (800263c <HAL_ADC_ConfigChannel+0x7bc>)
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d07a      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002530:	4843      	ldr	r0, [pc, #268]	; (8002640 <HAL_ADC_ConfigChannel+0x7c0>)
 8002532:	f7fe fe11 	bl	8001158 <LL_ADC_GetCommonPathInternalCh>
 8002536:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a41      	ldr	r2, [pc, #260]	; (8002644 <HAL_ADC_ConfigChannel+0x7c4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d12c      	bne.n	800259e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d126      	bne.n	800259e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a3c      	ldr	r2, [pc, #240]	; (8002648 <HAL_ADC_ConfigChannel+0x7c8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d004      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x6e4>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a3b      	ldr	r2, [pc, #236]	; (800264c <HAL_ADC_ConfigChannel+0x7cc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d15d      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002568:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800256c:	4619      	mov	r1, r3
 800256e:	4834      	ldr	r0, [pc, #208]	; (8002640 <HAL_ADC_ConfigChannel+0x7c0>)
 8002570:	f7fe fddf 	bl	8001132 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002574:	4b36      	ldr	r3, [pc, #216]	; (8002650 <HAL_ADC_ConfigChannel+0x7d0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	4a36      	ldr	r2, [pc, #216]	; (8002654 <HAL_ADC_ConfigChannel+0x7d4>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800258e:	e002      	b.n	8002596 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3b01      	subs	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f9      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800259c:	e040      	b.n	8002620 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2d      	ldr	r2, [pc, #180]	; (8002658 <HAL_ADC_ConfigChannel+0x7d8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d118      	bne.n	80025da <HAL_ADC_ConfigChannel+0x75a>
 80025a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d112      	bne.n	80025da <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a23      	ldr	r2, [pc, #140]	; (8002648 <HAL_ADC_ConfigChannel+0x7c8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d004      	beq.n	80025c8 <HAL_ADC_ConfigChannel+0x748>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a22      	ldr	r2, [pc, #136]	; (800264c <HAL_ADC_ConfigChannel+0x7cc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d12d      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d0:	4619      	mov	r1, r3
 80025d2:	481b      	ldr	r0, [pc, #108]	; (8002640 <HAL_ADC_ConfigChannel+0x7c0>)
 80025d4:	f7fe fdad 	bl	8001132 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d8:	e024      	b.n	8002624 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_ADC_ConfigChannel+0x7dc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d120      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11a      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <HAL_ADC_ConfigChannel+0x7c8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d115      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002602:	4619      	mov	r1, r3
 8002604:	480e      	ldr	r0, [pc, #56]	; (8002640 <HAL_ADC_ConfigChannel+0x7c0>)
 8002606:	f7fe fd94 	bl	8001132 <LL_ADC_SetCommonPathInternalCh>
 800260a:	e00c      	b.n	8002626 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	f043 0220 	orr.w	r2, r3, #32
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800261e:	e002      	b.n	8002626 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002620:	bf00      	nop
 8002622:	e000      	b.n	8002626 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002624:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800262e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002632:	4618      	mov	r0, r3
 8002634:	37d8      	adds	r7, #216	; 0xd8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	80080000 	.word	0x80080000
 8002640:	50040300 	.word	0x50040300
 8002644:	c7520000 	.word	0xc7520000
 8002648:	50040000 	.word	0x50040000
 800264c:	50040200 	.word	0x50040200
 8002650:	20000008 	.word	0x20000008
 8002654:	053e2d63 	.word	0x053e2d63
 8002658:	cb840000 	.word	0xcb840000
 800265c:	80000001 	.word	0x80000001

08002660 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fef5 	bl	800145c <LL_ADC_IsEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d14d      	bne.n	8002714 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	4b28      	ldr	r3, [pc, #160]	; (8002720 <ADC_Enable+0xc0>)
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f043 0210 	orr.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	f043 0201 	orr.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e039      	b.n	8002716 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fec4 	bl	8001434 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026ac:	f7fe fcfe 	bl	80010ac <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026b2:	e028      	b.n	8002706 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fecf 	bl	800145c <LL_ADC_IsEnabled>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d104      	bne.n	80026ce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe feb3 	bl	8001434 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026ce:	f7fe fced 	bl	80010ac <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d914      	bls.n	8002706 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d00d      	beq.n	8002706 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e007      	b.n	8002716 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d1cf      	bne.n	80026b4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	8000003f 	.word	0x8000003f

08002724 <LL_ADC_IsEnabled>:
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <LL_ADC_IsEnabled+0x18>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <LL_ADC_IsEnabled+0x1a>
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_ADC_REG_IsConversionOngoing>:
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b04      	cmp	r3, #4
 800275c:	d101      	bne.n	8002762 <LL_ADC_REG_IsConversionOngoing+0x18>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b09f      	sub	sp, #124	; 0x7c
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e093      	b.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80027fa:	2300      	movs	r3, #0
 80027fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80027fe:	2300      	movs	r3, #0
 8002800:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a47      	ldr	r2, [pc, #284]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d102      	bne.n	8002812 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800280c:	4b46      	ldr	r3, [pc, #280]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	e001      	b.n	8002816 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10b      	bne.n	8002834 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002820:	f043 0220 	orr.w	r2, r3, #32
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e072      	b.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff87 	bl	800274a <LL_ADC_REG_IsConversionOngoing>
 800283c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff81 	bl	800274a <LL_ADC_REG_IsConversionOngoing>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d154      	bne.n	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800284e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002850:	2b00      	cmp	r3, #0
 8002852:	d151      	bne.n	80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002856:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d02c      	beq.n	80028ba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002872:	035b      	lsls	r3, r3, #13
 8002874:	430b      	orrs	r3, r1
 8002876:	431a      	orrs	r2, r3
 8002878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800287c:	4829      	ldr	r0, [pc, #164]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800287e:	f7ff ff51 	bl	8002724 <LL_ADC_IsEnabled>
 8002882:	4604      	mov	r4, r0
 8002884:	4828      	ldr	r0, [pc, #160]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002886:	f7ff ff4d 	bl	8002724 <LL_ADC_IsEnabled>
 800288a:	4603      	mov	r3, r0
 800288c:	431c      	orrs	r4, r3
 800288e:	4828      	ldr	r0, [pc, #160]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002890:	f7ff ff48 	bl	8002724 <LL_ADC_IsEnabled>
 8002894:	4603      	mov	r3, r0
 8002896:	4323      	orrs	r3, r4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d137      	bne.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800289c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028a4:	f023 030f 	bic.w	r3, r3, #15
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	6811      	ldr	r1, [r2, #0]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028b8:	e028      	b.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028c6:	4817      	ldr	r0, [pc, #92]	; (8002924 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028c8:	f7ff ff2c 	bl	8002724 <LL_ADC_IsEnabled>
 80028cc:	4604      	mov	r4, r0
 80028ce:	4816      	ldr	r0, [pc, #88]	; (8002928 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028d0:	f7ff ff28 	bl	8002724 <LL_ADC_IsEnabled>
 80028d4:	4603      	mov	r3, r0
 80028d6:	431c      	orrs	r4, r3
 80028d8:	4815      	ldr	r0, [pc, #84]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028da:	f7ff ff23 	bl	8002724 <LL_ADC_IsEnabled>
 80028de:	4603      	mov	r3, r0
 80028e0:	4323      	orrs	r3, r4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d112      	bne.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028ee:	f023 030f 	bic.w	r3, r3, #15
 80028f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f6:	e009      	b.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800290a:	e000      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800290c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002916:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800291a:	4618      	mov	r0, r3
 800291c:	377c      	adds	r7, #124	; 0x7c
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	bf00      	nop
 8002924:	50040000 	.word	0x50040000
 8002928:	50040100 	.word	0x50040100
 800292c:	50040300 	.word	0x50040300
 8002930:	50040200 	.word	0x50040200

08002934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002950:	4013      	ands	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800295c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <__NVIC_GetPriorityGrouping+0x18>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 0307 	and.w	r3, r3, #7
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	db0b      	blt.n	80029c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	4907      	ldr	r1, [pc, #28]	; (80029d0 <__NVIC_EnableIRQ+0x38>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2001      	movs	r0, #1
 80029ba:	fa00 f202 	lsl.w	r2, r0, r2
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	db0a      	blt.n	80029fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	490c      	ldr	r1, [pc, #48]	; (8002a20 <__NVIC_SetPriority+0x4c>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	440b      	add	r3, r1
 80029f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029fc:	e00a      	b.n	8002a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4908      	ldr	r1, [pc, #32]	; (8002a24 <__NVIC_SetPriority+0x50>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	440b      	add	r3, r1
 8002a12:	761a      	strb	r2, [r3, #24]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000e100 	.word	0xe000e100
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	bf28      	it	cs
 8002a46:	2304      	movcs	r3, #4
 8002a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d902      	bls.n	8002a58 <NVIC_EncodePriority+0x30>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3b03      	subs	r3, #3
 8002a56:	e000      	b.n	8002a5a <NVIC_EncodePriority+0x32>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43d9      	mvns	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	4313      	orrs	r3, r2
         );
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <SysTick_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aae:	210f      	movs	r1, #15
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f7ff ff8e 	bl	80029d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SysTick_Config+0x40>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <SysTick_Config+0x40>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff29 	bl	8002934 <__NVIC_SetPriorityGrouping>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002afc:	f7ff ff3e 	bl	800297c <__NVIC_GetPriorityGrouping>
 8002b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff8e 	bl	8002a28 <NVIC_EncodePriority>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff5d 	bl	80029d4 <__NVIC_SetPriority>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff31 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffa2 	bl	8002a90 <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e014      	b.n	8002b92 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7fd ff87 	bl	8000a8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2202      	movs	r2, #2
 8002b82:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	795b      	ldrb	r3, [r3, #5]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_DAC_Start+0x16>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e03b      	b.n	8002c28 <HAL_DAC_Start+0x8e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2201      	movs	r2, #1
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10f      	bne.n	8002bfa <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d118      	bne.n	8002c1a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	e00f      	b.n	8002c1a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c08:	d107      	bne.n	8002c1a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0202 	orr.w	r2, r2, #2
 8002c18:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	795b      	ldrb	r3, [r3, #5]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_DAC_ConfigChannel+0x1c>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e107      	b.n	8002e60 <HAL_DAC_ConfigChannel+0x22c>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d174      	bne.n	8002d4e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c64:	f7fe fa22 	bl	80010ac <HAL_GetTick>
 8002c68:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d134      	bne.n	8002cda <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c70:	e011      	b.n	8002c96 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c72:	f7fe fa1b 	bl	80010ac <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d90a      	bls.n	8002c96 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f043 0208 	orr.w	r2, r3, #8
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0e4      	b.n	8002e60 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e6      	bne.n	8002c72 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f7fe fa0d 	bl	80010c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	6992      	ldr	r2, [r2, #24]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
 8002cb4:	e01e      	b.n	8002cf4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cb6:	f7fe f9f9 	bl	80010ac <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d90a      	bls.n	8002cda <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f043 0208 	orr.w	r2, r3, #8
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e0c2      	b.n	8002e60 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	dbe8      	blt.n	8002cb6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f7fe f9ed 	bl	80010c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	6992      	ldr	r2, [r2, #24]
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	ea02 0103 	and.w	r1, r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	21ff      	movs	r1, #255	; 0xff
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	ea02 0103 	and.w	r1, r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	409a      	lsls	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d11d      	bne.n	8002d92 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	221f      	movs	r2, #31
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2207      	movs	r2, #7
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	400a      	ands	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	22c0      	movs	r2, #192	; 0xc0
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	400a      	ands	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e76:	e17f      	b.n	8003178 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	4013      	ands	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8171 	beq.w	8003172 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d00b      	beq.n	8002eb0 <HAL_GPIO_Init+0x48>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d007      	beq.n	8002eb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ea4:	2b11      	cmp	r3, #17
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b12      	cmp	r3, #18
 8002eae:	d130      	bne.n	8002f12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	2203      	movs	r2, #3
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	f003 0201 	and.w	r2, r3, #1
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d118      	bne.n	8002f50 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002f24:	2201      	movs	r2, #1
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	08db      	lsrs	r3, r3, #3
 8002f3a:	f003 0201 	and.w	r2, r3, #1
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d003      	beq.n	8002f90 <HAL_GPIO_Init+0x128>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b12      	cmp	r3, #18
 8002f8e:	d123      	bne.n	8002fd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	08da      	lsrs	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3208      	adds	r2, #8
 8002f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	220f      	movs	r2, #15
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	08da      	lsrs	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3208      	adds	r2, #8
 8002fd2:	6939      	ldr	r1, [r7, #16]
 8002fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0203 	and.w	r2, r3, #3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80ac 	beq.w	8003172 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301a:	4b5f      	ldr	r3, [pc, #380]	; (8003198 <HAL_GPIO_Init+0x330>)
 800301c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301e:	4a5e      	ldr	r2, [pc, #376]	; (8003198 <HAL_GPIO_Init+0x330>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6613      	str	r3, [r2, #96]	; 0x60
 8003026:	4b5c      	ldr	r3, [pc, #368]	; (8003198 <HAL_GPIO_Init+0x330>)
 8003028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003032:	4a5a      	ldr	r2, [pc, #360]	; (800319c <HAL_GPIO_Init+0x334>)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	089b      	lsrs	r3, r3, #2
 8003038:	3302      	adds	r3, #2
 800303a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	220f      	movs	r2, #15
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800305c:	d025      	beq.n	80030aa <HAL_GPIO_Init+0x242>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4f      	ldr	r2, [pc, #316]	; (80031a0 <HAL_GPIO_Init+0x338>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01f      	beq.n	80030a6 <HAL_GPIO_Init+0x23e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4e      	ldr	r2, [pc, #312]	; (80031a4 <HAL_GPIO_Init+0x33c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d019      	beq.n	80030a2 <HAL_GPIO_Init+0x23a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a4d      	ldr	r2, [pc, #308]	; (80031a8 <HAL_GPIO_Init+0x340>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0x236>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a4c      	ldr	r2, [pc, #304]	; (80031ac <HAL_GPIO_Init+0x344>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00d      	beq.n	800309a <HAL_GPIO_Init+0x232>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a4b      	ldr	r2, [pc, #300]	; (80031b0 <HAL_GPIO_Init+0x348>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <HAL_GPIO_Init+0x22e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a4a      	ldr	r2, [pc, #296]	; (80031b4 <HAL_GPIO_Init+0x34c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_GPIO_Init+0x22a>
 800308e:	2306      	movs	r3, #6
 8003090:	e00c      	b.n	80030ac <HAL_GPIO_Init+0x244>
 8003092:	2307      	movs	r3, #7
 8003094:	e00a      	b.n	80030ac <HAL_GPIO_Init+0x244>
 8003096:	2305      	movs	r3, #5
 8003098:	e008      	b.n	80030ac <HAL_GPIO_Init+0x244>
 800309a:	2304      	movs	r3, #4
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x244>
 800309e:	2303      	movs	r3, #3
 80030a0:	e004      	b.n	80030ac <HAL_GPIO_Init+0x244>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e002      	b.n	80030ac <HAL_GPIO_Init+0x244>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_GPIO_Init+0x244>
 80030aa:	2300      	movs	r3, #0
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	f002 0203 	and.w	r2, r2, #3
 80030b2:	0092      	lsls	r2, r2, #2
 80030b4:	4093      	lsls	r3, r2
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030bc:	4937      	ldr	r1, [pc, #220]	; (800319c <HAL_GPIO_Init+0x334>)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	3302      	adds	r3, #2
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030ca:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <HAL_GPIO_Init+0x350>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030ee:	4a32      	ldr	r2, [pc, #200]	; (80031b8 <HAL_GPIO_Init+0x350>)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_GPIO_Init+0x350>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003118:	4a27      	ldr	r2, [pc, #156]	; (80031b8 <HAL_GPIO_Init+0x350>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800311e:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <HAL_GPIO_Init+0x350>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003142:	4a1d      	ldr	r2, [pc, #116]	; (80031b8 <HAL_GPIO_Init+0x350>)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_GPIO_Init+0x350>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43db      	mvns	r3, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800316c:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <HAL_GPIO_Init+0x350>)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	3301      	adds	r3, #1
 8003176:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	f47f ae78 	bne.w	8002e78 <HAL_GPIO_Init+0x10>
  }
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	371c      	adds	r7, #28
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	40010000 	.word	0x40010000
 80031a0:	48000400 	.word	0x48000400
 80031a4:	48000800 	.word	0x48000800
 80031a8:	48000c00 	.word	0x48000c00
 80031ac:	48001000 	.word	0x48001000
 80031b0:	48001400 	.word	0x48001400
 80031b4:	48001800 	.word	0x48001800
 80031b8:	40010400 	.word	0x40010400

080031bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40007000 	.word	0x40007000

080031d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e6:	d130      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f4:	d038      	beq.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031fe:	4a1e      	ldr	r2, [pc, #120]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003204:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2232      	movs	r2, #50	; 0x32
 800320c:	fb02 f303 	mul.w	r3, r2, r3
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	0c9b      	lsrs	r3, r3, #18
 8003218:	3301      	adds	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800321c:	e002      	b.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b01      	subs	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003230:	d102      	bne.n	8003238 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f2      	bne.n	800321e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003244:	d110      	bne.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e00f      	b.n	800326a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003256:	d007      	beq.n	8003268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003260:	4a05      	ldr	r2, [pc, #20]	; (8003278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003266:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40007000 	.word	0x40007000
 800327c:	20000008 	.word	0x20000008
 8003280:	431bde83 	.word	0x431bde83

08003284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e3d4      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003296:	4ba1      	ldr	r3, [pc, #644]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a0:	4b9e      	ldr	r3, [pc, #632]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80e4 	beq.w	8003480 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d007      	beq.n	80032ce <HAL_RCC_OscConfig+0x4a>
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	f040 808b 	bne.w	80033dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f040 8087 	bne.w	80033dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032ce:	4b93      	ldr	r3, [pc, #588]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_RCC_OscConfig+0x62>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e3ac      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	4b8c      	ldr	r3, [pc, #560]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_RCC_OscConfig+0x7c>
 80032f6:	4b89      	ldr	r3, [pc, #548]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032fe:	e005      	b.n	800330c <HAL_RCC_OscConfig+0x88>
 8003300:	4b86      	ldr	r3, [pc, #536]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800330c:	4293      	cmp	r3, r2
 800330e:	d223      	bcs.n	8003358 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fd41 	bl	8003d9c <RCC_SetFlashLatencyFromMSIRange>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e38d      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003324:	4b7d      	ldr	r3, [pc, #500]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a7c      	ldr	r2, [pc, #496]	; (800351c <HAL_RCC_OscConfig+0x298>)
 800332a:	f043 0308 	orr.w	r3, r3, #8
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b7a      	ldr	r3, [pc, #488]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4977      	ldr	r1, [pc, #476]	; (800351c <HAL_RCC_OscConfig+0x298>)
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003342:	4b76      	ldr	r3, [pc, #472]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	4972      	ldr	r1, [pc, #456]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
 8003356:	e025      	b.n	80033a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003358:	4b70      	ldr	r3, [pc, #448]	; (800351c <HAL_RCC_OscConfig+0x298>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a6f      	ldr	r2, [pc, #444]	; (800351c <HAL_RCC_OscConfig+0x298>)
 800335e:	f043 0308 	orr.w	r3, r3, #8
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4b6d      	ldr	r3, [pc, #436]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	496a      	ldr	r1, [pc, #424]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003376:	4b69      	ldr	r3, [pc, #420]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	4965      	ldr	r1, [pc, #404]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fd01 	bl	8003d9c <RCC_SetFlashLatencyFromMSIRange>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e34d      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033a4:	f000 fc36 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b5c      	ldr	r3, [pc, #368]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	495a      	ldr	r1, [pc, #360]	; (8003520 <HAL_RCC_OscConfig+0x29c>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
 80033c0:	4a58      	ldr	r2, [pc, #352]	; (8003524 <HAL_RCC_OscConfig+0x2a0>)
 80033c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033c4:	4b58      	ldr	r3, [pc, #352]	; (8003528 <HAL_RCC_OscConfig+0x2a4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fe1f 	bl	800100c <HAL_InitTick>
 80033ce:	4603      	mov	r3, r0
 80033d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d052      	beq.n	800347e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	e331      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d032      	beq.n	800344a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033e4:	4b4d      	ldr	r3, [pc, #308]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a4c      	ldr	r2, [pc, #304]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033f0:	f7fd fe5c 	bl	80010ac <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f8:	f7fd fe58 	bl	80010ac <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e31a      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800340a:	4b44      	ldr	r3, [pc, #272]	; (800351c <HAL_RCC_OscConfig+0x298>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a40      	ldr	r2, [pc, #256]	; (800351c <HAL_RCC_OscConfig+0x298>)
 800341c:	f043 0308 	orr.w	r3, r3, #8
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b3e      	ldr	r3, [pc, #248]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	493b      	ldr	r1, [pc, #236]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003434:	4b39      	ldr	r3, [pc, #228]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	4936      	ldr	r1, [pc, #216]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
 8003448:	e01a      	b.n	8003480 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800344a:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_RCC_OscConfig+0x298>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a33      	ldr	r2, [pc, #204]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003456:	f7fd fe29 	bl	80010ac <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800345e:	f7fd fe25 	bl	80010ac <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e2e7      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003470:	4b2a      	ldr	r3, [pc, #168]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x1da>
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800347e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d074      	beq.n	8003576 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b08      	cmp	r3, #8
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x21a>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d10e      	bne.n	80034b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d10b      	bne.n	80034b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349e:	4b1f      	ldr	r3, [pc, #124]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d064      	beq.n	8003574 <HAL_RCC_OscConfig+0x2f0>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d160      	bne.n	8003574 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e2c4      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x24a>
 80034c0:	4b16      	ldr	r3, [pc, #88]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a15      	ldr	r2, [pc, #84]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	e01d      	b.n	800350a <HAL_RCC_OscConfig+0x286>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d6:	d10c      	bne.n	80034f2 <HAL_RCC_OscConfig+0x26e>
 80034d8:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0f      	ldr	r2, [pc, #60]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80034de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0c      	ldr	r2, [pc, #48]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e00b      	b.n	800350a <HAL_RCC_OscConfig+0x286>
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <HAL_RCC_OscConfig+0x298>)
 80034f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b07      	ldr	r3, [pc, #28]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a06      	ldr	r2, [pc, #24]	; (800351c <HAL_RCC_OscConfig+0x298>)
 8003504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003508:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01c      	beq.n	800354c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fd fdcb 	bl	80010ac <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003518:	e011      	b.n	800353e <HAL_RCC_OscConfig+0x2ba>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	080062b0 	.word	0x080062b0
 8003524:	20000008 	.word	0x20000008
 8003528:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800352c:	f7fd fdbe 	bl	80010ac <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e280      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353e:	4baf      	ldr	r3, [pc, #700]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x2a8>
 800354a:	e014      	b.n	8003576 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd fdae 	bl	80010ac <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003554:	f7fd fdaa 	bl	80010ac <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e26c      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003566:	4ba5      	ldr	r3, [pc, #660]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x2d0>
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d060      	beq.n	8003644 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d005      	beq.n	8003594 <HAL_RCC_OscConfig+0x310>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d119      	bne.n	80035c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d116      	bne.n	80035c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003594:	4b99      	ldr	r3, [pc, #612]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_RCC_OscConfig+0x328>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e249      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b93      	ldr	r3, [pc, #588]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	4990      	ldr	r1, [pc, #576]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c0:	e040      	b.n	8003644 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d023      	beq.n	8003612 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ca:	4b8c      	ldr	r3, [pc, #560]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a8b      	ldr	r2, [pc, #556]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fd fd69 	bl	80010ac <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035de:	f7fd fd65 	bl	80010ac <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e227      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f0:	4b82      	ldr	r3, [pc, #520]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fc:	4b7f      	ldr	r3, [pc, #508]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	497c      	ldr	r1, [pc, #496]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
 8003610:	e018      	b.n	8003644 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003612:	4b7a      	ldr	r3, [pc, #488]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a79      	ldr	r2, [pc, #484]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800361c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7fd fd45 	bl	80010ac <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003626:	f7fd fd41 	bl	80010ac <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e203      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003638:	4b70      	ldr	r3, [pc, #448]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03c      	beq.n	80036ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01c      	beq.n	8003692 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003658:	4b68      	ldr	r3, [pc, #416]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800365a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365e:	4a67      	ldr	r2, [pc, #412]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003668:	f7fd fd20 	bl	80010ac <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003670:	f7fd fd1c 	bl	80010ac <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e1de      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003682:	4b5e      	ldr	r3, [pc, #376]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ef      	beq.n	8003670 <HAL_RCC_OscConfig+0x3ec>
 8003690:	e01b      	b.n	80036ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003692:	4b5a      	ldr	r3, [pc, #360]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003698:	4a58      	ldr	r2, [pc, #352]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a2:	f7fd fd03 	bl	80010ac <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036aa:	f7fd fcff 	bl	80010ac <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1c1      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036bc:	4b4f      	ldr	r3, [pc, #316]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80036be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ef      	bne.n	80036aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80a6 	beq.w	8003824 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036dc:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10d      	bne.n	8003704 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e8:	4b44      	ldr	r3, [pc, #272]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	4a43      	ldr	r2, [pc, #268]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80036ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f2:	6593      	str	r3, [r2, #88]	; 0x58
 80036f4:	4b41      	ldr	r3, [pc, #260]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003700:	2301      	movs	r3, #1
 8003702:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003704:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <HAL_RCC_OscConfig+0x57c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d118      	bne.n	8003742 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003710:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <HAL_RCC_OscConfig+0x57c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3a      	ldr	r2, [pc, #232]	; (8003800 <HAL_RCC_OscConfig+0x57c>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371c:	f7fd fcc6 	bl	80010ac <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003724:	f7fd fcc2 	bl	80010ac <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e184      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003736:	4b32      	ldr	r3, [pc, #200]	; (8003800 <HAL_RCC_OscConfig+0x57c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d108      	bne.n	800375c <HAL_RCC_OscConfig+0x4d8>
 800374a:	4b2c      	ldr	r3, [pc, #176]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800375a:	e024      	b.n	80037a6 <HAL_RCC_OscConfig+0x522>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b05      	cmp	r3, #5
 8003762:	d110      	bne.n	8003786 <HAL_RCC_OscConfig+0x502>
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	4a24      	ldr	r2, [pc, #144]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	4a20      	ldr	r2, [pc, #128]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003784:	e00f      	b.n	80037a6 <HAL_RCC_OscConfig+0x522>
 8003786:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	4a1b      	ldr	r2, [pc, #108]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003796:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	4a17      	ldr	r2, [pc, #92]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 800379e:	f023 0304 	bic.w	r3, r3, #4
 80037a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fd fc7d 	bl	80010ac <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fd fc79 	bl	80010ac <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e139      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_OscConfig+0x578>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ed      	beq.n	80037b6 <HAL_RCC_OscConfig+0x532>
 80037da:	e01a      	b.n	8003812 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fd fc66 	bl	80010ac <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e2:	e00f      	b.n	8003804 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e4:	f7fd fc62 	bl	80010ac <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d906      	bls.n	8003804 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e122      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003804:	4b90      	ldr	r3, [pc, #576]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e8      	bne.n	80037e4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003812:	7ffb      	ldrb	r3, [r7, #31]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d105      	bne.n	8003824 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003818:	4b8b      	ldr	r3, [pc, #556]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	4a8a      	ldr	r2, [pc, #552]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 800381e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003822:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8108 	beq.w	8003a3e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	2b02      	cmp	r3, #2
 8003834:	f040 80d0 	bne.w	80039d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003838:	4b83      	ldr	r3, [pc, #524]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	429a      	cmp	r2, r3
 800384a:	d130      	bne.n	80038ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	3b01      	subs	r3, #1
 8003858:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d127      	bne.n	80038ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003868:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d11f      	bne.n	80038ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003878:	2a07      	cmp	r2, #7
 800387a:	bf14      	ite	ne
 800387c:	2201      	movne	r2, #1
 800387e:	2200      	moveq	r2, #0
 8003880:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003882:	4293      	cmp	r3, r2
 8003884:	d113      	bne.n	80038ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	3b01      	subs	r3, #1
 8003894:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d109      	bne.n	80038ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	3b01      	subs	r3, #1
 80038a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d06e      	beq.n	800398c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b0c      	cmp	r3, #12
 80038b2:	d069      	beq.n	8003988 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038b4:	4b64      	ldr	r3, [pc, #400]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038c0:	4b61      	ldr	r3, [pc, #388]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0b7      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038d0:	4b5d      	ldr	r3, [pc, #372]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5c      	ldr	r2, [pc, #368]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80038d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038dc:	f7fd fbe6 	bl	80010ac <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7fd fbe2 	bl	80010ac <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e0a4      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003902:	4b51      	ldr	r3, [pc, #324]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	4b51      	ldr	r3, [pc, #324]	; (8003a4c <HAL_RCC_OscConfig+0x7c8>)
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003912:	3a01      	subs	r2, #1
 8003914:	0112      	lsls	r2, r2, #4
 8003916:	4311      	orrs	r1, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800391c:	0212      	lsls	r2, r2, #8
 800391e:	4311      	orrs	r1, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003924:	0852      	lsrs	r2, r2, #1
 8003926:	3a01      	subs	r2, #1
 8003928:	0552      	lsls	r2, r2, #21
 800392a:	4311      	orrs	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003930:	0852      	lsrs	r2, r2, #1
 8003932:	3a01      	subs	r2, #1
 8003934:	0652      	lsls	r2, r2, #25
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800393c:	0912      	lsrs	r2, r2, #4
 800393e:	0452      	lsls	r2, r2, #17
 8003940:	430a      	orrs	r2, r1
 8003942:	4941      	ldr	r1, [pc, #260]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003948:	4b3f      	ldr	r3, [pc, #252]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a3e      	ldr	r2, [pc, #248]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003954:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a3b      	ldr	r2, [pc, #236]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003960:	f7fd fba4 	bl	80010ac <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd fba0 	bl	80010ac <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e062      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	4b33      	ldr	r3, [pc, #204]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003986:	e05a      	b.n	8003a3e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e059      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398c:	4b2e      	ldr	r3, [pc, #184]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d152      	bne.n	8003a3e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003998:	4b2b      	ldr	r3, [pc, #172]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 800399e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a4:	4b28      	ldr	r3, [pc, #160]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80039aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039b0:	f7fd fb7c 	bl	80010ac <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fd fb78 	bl	80010ac <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e03a      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x734>
 80039d6:	e032      	b.n	8003a3e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b0c      	cmp	r3, #12
 80039dc:	d02d      	beq.n	8003a3a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80039e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80039ea:	4b17      	ldr	r3, [pc, #92]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039f6:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 80039fc:	f023 0303 	bic.w	r3, r3, #3
 8003a00:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	4a10      	ldr	r2, [pc, #64]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 8003a08:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a10:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a12:	f7fd fb4b 	bl	80010ac <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1a:	f7fd fb47 	bl	80010ac <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e009      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RCC_OscConfig+0x7c4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f0      	bne.n	8003a1a <HAL_RCC_OscConfig+0x796>
 8003a38:	e001      	b.n	8003a3e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	f99d808c 	.word	0xf99d808c

08003a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0c8      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a64:	4b66      	ldr	r3, [pc, #408]	; (8003c00 <HAL_RCC_ClockConfig+0x1b0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d910      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b63      	ldr	r3, [pc, #396]	; (8003c00 <HAL_RCC_ClockConfig+0x1b0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 0207 	bic.w	r2, r3, #7
 8003a7a:	4961      	ldr	r1, [pc, #388]	; (8003c00 <HAL_RCC_ClockConfig+0x1b0>)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <HAL_RCC_ClockConfig+0x1b0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0b0      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d04c      	beq.n	8003b3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b03      	cmp	r3, #3
 8003aa6:	d107      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa8:	4b56      	ldr	r3, [pc, #344]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d121      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e09e      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac0:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d115      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e092      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad8:	4b4a      	ldr	r3, [pc, #296]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e086      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae8:	4b46      	ldr	r3, [pc, #280]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e07e      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003af8:	4b42      	ldr	r3, [pc, #264]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f023 0203 	bic.w	r2, r3, #3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	493f      	ldr	r1, [pc, #252]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0a:	f7fd facf 	bl	80010ac <HAL_GetTick>
 8003b0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b12:	f7fd facb 	bl	80010ac <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e066      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b28:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 020c 	and.w	r2, r3, #12
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d1eb      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b46:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	492c      	ldr	r1, [pc, #176]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b58:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <HAL_RCC_ClockConfig+0x1b0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d210      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b26      	ldr	r3, [pc, #152]	; (8003c00 <HAL_RCC_ClockConfig+0x1b0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 0207 	bic.w	r2, r3, #7
 8003b6e:	4924      	ldr	r1, [pc, #144]	; (8003c00 <HAL_RCC_ClockConfig+0x1b0>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <HAL_RCC_ClockConfig+0x1b0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e036      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4918      	ldr	r1, [pc, #96]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb2:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4910      	ldr	r1, [pc, #64]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bc6:	f000 f825 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <HAL_RCC_ClockConfig+0x1b4>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	490c      	ldr	r1, [pc, #48]	; (8003c08 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	fa22 f303 	lsr.w	r3, r2, r3
 8003be2:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <HAL_RCC_ClockConfig+0x1c0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fd fa0e 	bl	800100c <HAL_InitTick>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bf4:	7afb      	ldrb	r3, [r7, #11]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40022000 	.word	0x40022000
 8003c04:	40021000 	.word	0x40021000
 8003c08:	080062b0 	.word	0x080062b0
 8003c0c:	20000008 	.word	0x20000008
 8003c10:	2000000c 	.word	0x2000000c

08003c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	; 0x24
 8003c18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c22:	4b3e      	ldr	r3, [pc, #248]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x34>
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	d121      	bne.n	8003c86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d11e      	bne.n	8003c86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c48:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c54:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	e005      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c64:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c70:	4a2b      	ldr	r2, [pc, #172]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10d      	bne.n	8003c9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d102      	bne.n	8003c92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	e004      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c98:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b0c      	cmp	r3, #12
 8003ca0:	d134      	bne.n	8003d0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0xa6>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d003      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xac>
 8003cb8:	e005      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cba:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cbc:	617b      	str	r3, [r7, #20]
      break;
 8003cbe:	e005      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cc2:	617b      	str	r3, [r7, #20]
      break;
 8003cc4:	e002      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	617b      	str	r3, [r7, #20]
      break;
 8003cca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ccc:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	fb02 f203 	mul.w	r2, r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	0e5b      	lsrs	r3, r3, #25
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	080062c8 	.word	0x080062c8
 8003d24:	00f42400 	.word	0x00f42400
 8003d28:	007a1200 	.word	0x007a1200

08003d2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000008 	.word	0x20000008

08003d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d48:	f7ff fff0 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4904      	ldr	r1, [pc, #16]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	080062c0 	.word	0x080062c0

08003d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d74:	f7ff ffda 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	0adb      	lsrs	r3, r3, #11
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4904      	ldr	r1, [pc, #16]	; (8003d98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000
 8003d98:	080062c0 	.word	0x080062c0

08003d9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003da8:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003db4:	f7ff fa02 	bl	80031bc <HAL_PWREx_GetVoltageRange>
 8003db8:	6178      	str	r0, [r7, #20]
 8003dba:	e014      	b.n	8003de6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dbc:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	4a24      	ldr	r2, [pc, #144]	; (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc8:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003dd4:	f7ff f9f2 	bl	80031bc <HAL_PWREx_GetVoltageRange>
 8003dd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dda:	4b1e      	ldr	r3, [pc, #120]	; (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dde:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dec:	d10b      	bne.n	8003e06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d919      	bls.n	8003e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2ba0      	cmp	r3, #160	; 0xa0
 8003df8:	d902      	bls.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	e013      	b.n	8003e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e00:	2301      	movs	r3, #1
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	e010      	b.n	8003e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b80      	cmp	r3, #128	; 0x80
 8003e0a:	d902      	bls.n	8003e12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	e00a      	b.n	8003e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b80      	cmp	r3, #128	; 0x80
 8003e16:	d102      	bne.n	8003e1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e18:	2302      	movs	r3, #2
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	e004      	b.n	8003e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b70      	cmp	r3, #112	; 0x70
 8003e22:	d101      	bne.n	8003e28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e24:	2301      	movs	r3, #1
 8003e26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f023 0207 	bic.w	r2, r3, #7
 8003e30:	4909      	ldr	r1, [pc, #36]	; (8003e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d001      	beq.n	8003e4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40022000 	.word	0x40022000

08003e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e64:	2300      	movs	r3, #0
 8003e66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e68:	2300      	movs	r3, #0
 8003e6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d041      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e80:	d02a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e86:	d824      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e8c:	d008      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e92:	d81e      	bhi.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e9c:	d010      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e9e:	e018      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ea0:	4b86      	ldr	r3, [pc, #536]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4a85      	ldr	r2, [pc, #532]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eaa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eac:	e015      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fabb 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ebe:	e00c      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3320      	adds	r3, #32
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fba6 	bl	8004618 <RCCEx_PLLSAI2_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ed0:	e003      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ed6:	e000      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eda:	7cfb      	ldrb	r3, [r7, #19]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ee0:	4b76      	ldr	r3, [pc, #472]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eee:	4973      	ldr	r1, [pc, #460]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ef6:	e001      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	7cfb      	ldrb	r3, [r7, #19]
 8003efa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d041      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f10:	d02a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f16:	d824      	bhi.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f1c:	d008      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f22:	d81e      	bhi.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f2c:	d010      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f2e:	e018      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f30:	4b62      	ldr	r3, [pc, #392]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a61      	ldr	r2, [pc, #388]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f3c:	e015      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3304      	adds	r3, #4
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fa73 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f4e:	e00c      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3320      	adds	r3, #32
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fb5e 	bl	8004618 <RCCEx_PLLSAI2_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f60:	e003      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	74fb      	strb	r3, [r7, #19]
      break;
 8003f66:	e000      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f6a:	7cfb      	ldrb	r3, [r7, #19]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f70:	4b52      	ldr	r3, [pc, #328]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f7e:	494f      	ldr	r1, [pc, #316]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f86:	e001      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80a0 	beq.w	80040da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb4:	4b41      	ldr	r3, [pc, #260]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	4a40      	ldr	r2, [pc, #256]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc0:	4b3e      	ldr	r3, [pc, #248]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd0:	4b3b      	ldr	r3, [pc, #236]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a3a      	ldr	r2, [pc, #232]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fdc:	f7fd f866 	bl	80010ac <HAL_GetTick>
 8003fe0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fe2:	e009      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe4:	f7fd f862 	bl	80010ac <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d902      	bls.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ff6:	e005      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ff8:	4b31      	ldr	r3, [pc, #196]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ef      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d15c      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800400a:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004014:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01f      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	429a      	cmp	r2, r3
 8004026:	d019      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004028:	4b24      	ldr	r3, [pc, #144]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004032:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	4a20      	ldr	r2, [pc, #128]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	4a1c      	ldr	r2, [pc, #112]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004054:	4a19      	ldr	r2, [pc, #100]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7fd f821 	bl	80010ac <HAL_GetTick>
 800406a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800406c:	e00b      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd f81d 	bl	80010ac <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	; 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d902      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	74fb      	strb	r3, [r7, #19]
            break;
 8004084:	e006      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004086:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ec      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10c      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040aa:	4904      	ldr	r1, [pc, #16]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040b2:	e009      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	74bb      	strb	r3, [r7, #18]
 80040b8:	e006      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c8:	7c7b      	ldrb	r3, [r7, #17]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d105      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ce:	4b9e      	ldr	r3, [pc, #632]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	4a9d      	ldr	r2, [pc, #628]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040e6:	4b98      	ldr	r3, [pc, #608]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	f023 0203 	bic.w	r2, r3, #3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	4994      	ldr	r1, [pc, #592]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004108:	4b8f      	ldr	r3, [pc, #572]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 020c 	bic.w	r2, r3, #12
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	498c      	ldr	r1, [pc, #560]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800412a:	4b87      	ldr	r3, [pc, #540]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	4983      	ldr	r1, [pc, #524]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800414c:	4b7e      	ldr	r3, [pc, #504]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	497b      	ldr	r1, [pc, #492]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800416e:	4b76      	ldr	r3, [pc, #472]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417c:	4972      	ldr	r1, [pc, #456]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004190:	4b6d      	ldr	r3, [pc, #436]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419e:	496a      	ldr	r1, [pc, #424]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041b2:	4b65      	ldr	r3, [pc, #404]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	4961      	ldr	r1, [pc, #388]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041d4:	4b5c      	ldr	r3, [pc, #368]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e2:	4959      	ldr	r1, [pc, #356]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041f6:	4b54      	ldr	r3, [pc, #336]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004204:	4950      	ldr	r1, [pc, #320]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004218:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	4948      	ldr	r1, [pc, #288]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800423a:	4b43      	ldr	r3, [pc, #268]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	493f      	ldr	r1, [pc, #252]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d028      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800425c:	4b3a      	ldr	r3, [pc, #232]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426a:	4937      	ldr	r1, [pc, #220]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427a:	d106      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427c:	4b32      	ldr	r3, [pc, #200]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a31      	ldr	r2, [pc, #196]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004286:	60d3      	str	r3, [r2, #12]
 8004288:	e011      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800428e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004292:	d10c      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	2101      	movs	r1, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f8c8 	bl	8004430 <RCCEx_PLLSAI1_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d028      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042ba:	4b23      	ldr	r3, [pc, #140]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	491f      	ldr	r1, [pc, #124]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d8:	d106      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	4a1a      	ldr	r2, [pc, #104]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e4:	60d3      	str	r3, [r2, #12]
 80042e6:	e011      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f0:	d10c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2101      	movs	r1, #1
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 f899 	bl	8004430 <RCCEx_PLLSAI1_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d02b      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004326:	4908      	ldr	r1, [pc, #32]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004336:	d109      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4a02      	ldr	r2, [pc, #8]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004342:	60d3      	str	r3, [r2, #12]
 8004344:	e014      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004354:	d10c      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3304      	adds	r3, #4
 800435a:	2101      	movs	r1, #1
 800435c:	4618      	mov	r0, r3
 800435e:	f000 f867 	bl	8004430 <RCCEx_PLLSAI1_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004366:	7cfb      	ldrb	r3, [r7, #19]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800436c:	7cfb      	ldrb	r3, [r7, #19]
 800436e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02f      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800437c:	4b2b      	ldr	r3, [pc, #172]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800438a:	4928      	ldr	r1, [pc, #160]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800439a:	d10d      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	2102      	movs	r1, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f844 	bl	8004430 <RCCEx_PLLSAI1_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ac:	7cfb      	ldrb	r3, [r7, #19]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d014      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043b2:	7cfb      	ldrb	r3, [r7, #19]
 80043b4:	74bb      	strb	r3, [r7, #18]
 80043b6:	e011      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c0:	d10c      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3320      	adds	r3, #32
 80043c6:	2102      	movs	r1, #2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f925 	bl	8004618 <RCCEx_PLLSAI2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043d2:	7cfb      	ldrb	r3, [r7, #19]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043e8:	4b10      	ldr	r3, [pc, #64]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f6:	490d      	ldr	r1, [pc, #52]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800441a:	4904      	ldr	r1, [pc, #16]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004422:	7cbb      	ldrb	r3, [r7, #18]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000

08004430 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800443e:	4b75      	ldr	r3, [pc, #468]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d018      	beq.n	800447c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800444a:	4b72      	ldr	r3, [pc, #456]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0203 	and.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d10d      	bne.n	8004476 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
       ||
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004462:	4b6c      	ldr	r3, [pc, #432]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
       ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d047      	beq.n	8004506 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	e044      	b.n	8004506 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d018      	beq.n	80044b6 <RCCEx_PLLSAI1_Config+0x86>
 8004484:	2b03      	cmp	r3, #3
 8004486:	d825      	bhi.n	80044d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004488:	2b01      	cmp	r3, #1
 800448a:	d002      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x62>
 800448c:	2b02      	cmp	r3, #2
 800448e:	d009      	beq.n	80044a4 <RCCEx_PLLSAI1_Config+0x74>
 8004490:	e020      	b.n	80044d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004492:	4b60      	ldr	r3, [pc, #384]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11d      	bne.n	80044da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a2:	e01a      	b.n	80044da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a4:	4b5b      	ldr	r3, [pc, #364]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d116      	bne.n	80044de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b4:	e013      	b.n	80044de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044b6:	4b57      	ldr	r3, [pc, #348]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044c2:	4b54      	ldr	r3, [pc, #336]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044d2:	e006      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
      break;
 80044d8:	e004      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044da:	bf00      	nop
 80044dc:	e002      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044de:	bf00      	nop
 80044e0:	e000      	b.n	80044e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044ea:	4b4a      	ldr	r3, [pc, #296]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6819      	ldr	r1, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	430b      	orrs	r3, r1
 8004500:	4944      	ldr	r1, [pc, #272]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d17d      	bne.n	8004608 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800450c:	4b41      	ldr	r3, [pc, #260]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a40      	ldr	r2, [pc, #256]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004512:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004518:	f7fc fdc8 	bl	80010ac <HAL_GetTick>
 800451c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800451e:	e009      	b.n	8004534 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004520:	f7fc fdc4 	bl	80010ac <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d902      	bls.n	8004534 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	73fb      	strb	r3, [r7, #15]
        break;
 8004532:	e005      	b.n	8004540 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004534:	4b37      	ldr	r3, [pc, #220]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ef      	bne.n	8004520 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d160      	bne.n	8004608 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d111      	bne.n	8004570 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800454c:	4b31      	ldr	r3, [pc, #196]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6892      	ldr	r2, [r2, #8]
 800455c:	0211      	lsls	r1, r2, #8
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68d2      	ldr	r2, [r2, #12]
 8004562:	0912      	lsrs	r2, r2, #4
 8004564:	0452      	lsls	r2, r2, #17
 8004566:	430a      	orrs	r2, r1
 8004568:	492a      	ldr	r1, [pc, #168]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	610b      	str	r3, [r1, #16]
 800456e:	e027      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d112      	bne.n	800459c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004576:	4b27      	ldr	r3, [pc, #156]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800457e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6892      	ldr	r2, [r2, #8]
 8004586:	0211      	lsls	r1, r2, #8
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6912      	ldr	r2, [r2, #16]
 800458c:	0852      	lsrs	r2, r2, #1
 800458e:	3a01      	subs	r2, #1
 8004590:	0552      	lsls	r2, r2, #21
 8004592:	430a      	orrs	r2, r1
 8004594:	491f      	ldr	r1, [pc, #124]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004596:	4313      	orrs	r3, r2
 8004598:	610b      	str	r3, [r1, #16]
 800459a:	e011      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800459c:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6892      	ldr	r2, [r2, #8]
 80045ac:	0211      	lsls	r1, r2, #8
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6952      	ldr	r2, [r2, #20]
 80045b2:	0852      	lsrs	r2, r2, #1
 80045b4:	3a01      	subs	r2, #1
 80045b6:	0652      	lsls	r2, r2, #25
 80045b8:	430a      	orrs	r2, r1
 80045ba:	4916      	ldr	r1, [pc, #88]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a13      	ldr	r2, [pc, #76]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fc fd6e 	bl	80010ac <HAL_GetTick>
 80045d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d2:	e009      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045d4:	f7fc fd6a 	bl	80010ac <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d902      	bls.n	80045e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	73fb      	strb	r3, [r7, #15]
          break;
 80045e6:	e005      	b.n	80045f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ef      	beq.n	80045d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	4904      	ldr	r1, [pc, #16]	; (8004614 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000

08004618 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004626:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d018      	beq.n	8004664 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004632:	4b67      	ldr	r3, [pc, #412]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0203 	and.w	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d10d      	bne.n	800465e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
       ||
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800464a:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
       ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d047      	beq.n	80046ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e044      	b.n	80046ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d018      	beq.n	800469e <RCCEx_PLLSAI2_Config+0x86>
 800466c:	2b03      	cmp	r3, #3
 800466e:	d825      	bhi.n	80046bc <RCCEx_PLLSAI2_Config+0xa4>
 8004670:	2b01      	cmp	r3, #1
 8004672:	d002      	beq.n	800467a <RCCEx_PLLSAI2_Config+0x62>
 8004674:	2b02      	cmp	r3, #2
 8004676:	d009      	beq.n	800468c <RCCEx_PLLSAI2_Config+0x74>
 8004678:	e020      	b.n	80046bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800467a:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d11d      	bne.n	80046c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800468a:	e01a      	b.n	80046c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004694:	2b00      	cmp	r3, #0
 8004696:	d116      	bne.n	80046c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800469c:	e013      	b.n	80046c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800469e:	4b4c      	ldr	r3, [pc, #304]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10f      	bne.n	80046ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046aa:	4b49      	ldr	r3, [pc, #292]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046ba:	e006      	b.n	80046ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      break;
 80046c0:	e004      	b.n	80046cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046c2:	bf00      	nop
 80046c4:	e002      	b.n	80046cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046c6:	bf00      	nop
 80046c8:	e000      	b.n	80046cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046d2:	4b3f      	ldr	r3, [pc, #252]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	430b      	orrs	r3, r1
 80046e8:	4939      	ldr	r1, [pc, #228]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d167      	bne.n	80047c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a35      	ldr	r2, [pc, #212]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004700:	f7fc fcd4 	bl	80010ac <HAL_GetTick>
 8004704:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004706:	e009      	b.n	800471c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004708:	f7fc fcd0 	bl	80010ac <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d902      	bls.n	800471c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	73fb      	strb	r3, [r7, #15]
        break;
 800471a:	e005      	b.n	8004728 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800471c:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1ef      	bne.n	8004708 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d14a      	bne.n	80047c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d111      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004734:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800473c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6892      	ldr	r2, [r2, #8]
 8004744:	0211      	lsls	r1, r2, #8
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	68d2      	ldr	r2, [r2, #12]
 800474a:	0912      	lsrs	r2, r2, #4
 800474c:	0452      	lsls	r2, r2, #17
 800474e:	430a      	orrs	r2, r1
 8004750:	491f      	ldr	r1, [pc, #124]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004752:	4313      	orrs	r3, r2
 8004754:	614b      	str	r3, [r1, #20]
 8004756:	e011      	b.n	800477c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004758:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004760:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6892      	ldr	r2, [r2, #8]
 8004768:	0211      	lsls	r1, r2, #8
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6912      	ldr	r2, [r2, #16]
 800476e:	0852      	lsrs	r2, r2, #1
 8004770:	3a01      	subs	r2, #1
 8004772:	0652      	lsls	r2, r2, #25
 8004774:	430a      	orrs	r2, r1
 8004776:	4916      	ldr	r1, [pc, #88]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004778:	4313      	orrs	r3, r2
 800477a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800477c:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004786:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fc fc90 	bl	80010ac <HAL_GetTick>
 800478c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800478e:	e009      	b.n	80047a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004790:	f7fc fc8c 	bl	80010ac <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d902      	bls.n	80047a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	73fb      	strb	r3, [r7, #15]
          break;
 80047a2:	e005      	b.n	80047b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ef      	beq.n	8004790 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	4904      	ldr	r1, [pc, #16]	; (80047d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000

080047d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e049      	b.n	800487a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc f984 	bl	8000b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f000 fabe 	bl	8004d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b01      	cmp	r3, #1
 8004896:	d001      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e04f      	b.n	800493c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a23      	ldr	r2, [pc, #140]	; (8004948 <HAL_TIM_Base_Start_IT+0xc4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01d      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x76>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d018      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x76>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1f      	ldr	r2, [pc, #124]	; (800494c <HAL_TIM_Base_Start_IT+0xc8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x76>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <HAL_TIM_Base_Start_IT+0xcc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x76>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <HAL_TIM_Base_Start_IT+0xd0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x76>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <HAL_TIM_Base_Start_IT+0xd4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x76>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a19      	ldr	r2, [pc, #100]	; (800495c <HAL_TIM_Base_Start_IT+0xd8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d115      	bne.n	8004926 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4b17      	ldr	r3, [pc, #92]	; (8004960 <HAL_TIM_Base_Start_IT+0xdc>)
 8004902:	4013      	ands	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b06      	cmp	r3, #6
 800490a:	d015      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0xb4>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004912:	d011      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	e008      	b.n	8004938 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e000      	b.n	800493a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004938:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40013400 	.word	0x40013400
 800495c:	40014000 	.word	0x40014000
 8004960:	00010007 	.word	0x00010007

08004964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b02      	cmp	r3, #2
 8004978:	d122      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b02      	cmp	r3, #2
 8004986:	d11b      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0202 	mvn.w	r2, #2
 8004990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9d5 	bl	8004d56 <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f9c7 	bl	8004d42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f9d8 	bl	8004d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d122      	bne.n	8004a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d11b      	bne.n	8004a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0204 	mvn.w	r2, #4
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9ab 	bl	8004d56 <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f99d 	bl	8004d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f9ae 	bl	8004d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d122      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d11b      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0208 	mvn.w	r2, #8
 8004a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f981 	bl	8004d56 <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f973 	bl	8004d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f984 	bl	8004d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b10      	cmp	r3, #16
 8004a74:	d122      	bne.n	8004abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d11b      	bne.n	8004abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0210 	mvn.w	r2, #16
 8004a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2208      	movs	r2, #8
 8004a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f957 	bl	8004d56 <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f949 	bl	8004d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f95a 	bl	8004d6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0201 	mvn.w	r2, #1
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f923 	bl	8004d2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b80      	cmp	r3, #128	; 0x80
 8004af4:	d10e      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	2b80      	cmp	r3, #128	; 0x80
 8004b02:	d107      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fb06 	bl	8005120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b22:	d10e      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2e:	2b80      	cmp	r3, #128	; 0x80
 8004b30:	d107      	bne.n	8004b42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 faf9 	bl	8005134 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d10e      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d107      	bne.n	8004b6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f908 	bl	8004d7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d10e      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d107      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f06f 0220 	mvn.w	r2, #32
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fab9 	bl	800510c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_TIM_ConfigClockSource+0x18>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e0b5      	b.n	8004d26 <HAL_TIM_ConfigClockSource+0x184>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bdc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004be4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf6:	d03e      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0xd4>
 8004bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfc:	f200 8087 	bhi.w	8004d0e <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	f000 8085 	beq.w	8004d12 <HAL_TIM_ConfigClockSource+0x170>
 8004c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0c:	d87f      	bhi.n	8004d0e <HAL_TIM_ConfigClockSource+0x16c>
 8004c0e:	2b70      	cmp	r3, #112	; 0x70
 8004c10:	d01a      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0xa6>
 8004c12:	2b70      	cmp	r3, #112	; 0x70
 8004c14:	d87b      	bhi.n	8004d0e <HAL_TIM_ConfigClockSource+0x16c>
 8004c16:	2b60      	cmp	r3, #96	; 0x60
 8004c18:	d050      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0x11a>
 8004c1a:	2b60      	cmp	r3, #96	; 0x60
 8004c1c:	d877      	bhi.n	8004d0e <HAL_TIM_ConfigClockSource+0x16c>
 8004c1e:	2b50      	cmp	r3, #80	; 0x50
 8004c20:	d03c      	beq.n	8004c9c <HAL_TIM_ConfigClockSource+0xfa>
 8004c22:	2b50      	cmp	r3, #80	; 0x50
 8004c24:	d873      	bhi.n	8004d0e <HAL_TIM_ConfigClockSource+0x16c>
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	d058      	beq.n	8004cdc <HAL_TIM_ConfigClockSource+0x13a>
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	d86f      	bhi.n	8004d0e <HAL_TIM_ConfigClockSource+0x16c>
 8004c2e:	2b30      	cmp	r3, #48	; 0x30
 8004c30:	d064      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0x15a>
 8004c32:	2b30      	cmp	r3, #48	; 0x30
 8004c34:	d86b      	bhi.n	8004d0e <HAL_TIM_ConfigClockSource+0x16c>
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d060      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0x15a>
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d867      	bhi.n	8004d0e <HAL_TIM_ConfigClockSource+0x16c>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d05c      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0x15a>
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d05a      	beq.n	8004cfc <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c46:	e062      	b.n	8004d0e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6899      	ldr	r1, [r3, #8]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f000 f9b0 	bl	8004fbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	609a      	str	r2, [r3, #8]
      break;
 8004c74:	e04e      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f000 f999 	bl	8004fbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c98:	609a      	str	r2, [r3, #8]
      break;
 8004c9a:	e03b      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	6859      	ldr	r1, [r3, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f000 f90d 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2150      	movs	r1, #80	; 0x50
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 f966 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004cba:	e02b      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f000 f92c 	bl	8004f26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2160      	movs	r1, #96	; 0x60
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 f956 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004cda:	e01b      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6859      	ldr	r1, [r3, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f000 f8ed 	bl	8004ec8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2140      	movs	r1, #64	; 0x40
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f946 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004cfa:	e00b      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f000 f93d 	bl	8004f86 <TIM_ITRx_SetConfig>
        break;
 8004d0c:	e002      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004d0e:	bf00      	nop
 8004d10:	e000      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004d12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
	...

08004d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a40      	ldr	r2, [pc, #256]	; (8004ea8 <TIM_Base_SetConfig+0x114>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d013      	beq.n	8004dd4 <TIM_Base_SetConfig+0x40>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d00f      	beq.n	8004dd4 <TIM_Base_SetConfig+0x40>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a3d      	ldr	r2, [pc, #244]	; (8004eac <TIM_Base_SetConfig+0x118>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00b      	beq.n	8004dd4 <TIM_Base_SetConfig+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a3c      	ldr	r2, [pc, #240]	; (8004eb0 <TIM_Base_SetConfig+0x11c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a3b      	ldr	r2, [pc, #236]	; (8004eb4 <TIM_Base_SetConfig+0x120>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a3a      	ldr	r2, [pc, #232]	; (8004eb8 <TIM_Base_SetConfig+0x124>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d108      	bne.n	8004de6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2f      	ldr	r2, [pc, #188]	; (8004ea8 <TIM_Base_SetConfig+0x114>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01f      	beq.n	8004e2e <TIM_Base_SetConfig+0x9a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d01b      	beq.n	8004e2e <TIM_Base_SetConfig+0x9a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <TIM_Base_SetConfig+0x118>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d017      	beq.n	8004e2e <TIM_Base_SetConfig+0x9a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2b      	ldr	r2, [pc, #172]	; (8004eb0 <TIM_Base_SetConfig+0x11c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <TIM_Base_SetConfig+0x9a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a2a      	ldr	r2, [pc, #168]	; (8004eb4 <TIM_Base_SetConfig+0x120>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00f      	beq.n	8004e2e <TIM_Base_SetConfig+0x9a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a29      	ldr	r2, [pc, #164]	; (8004eb8 <TIM_Base_SetConfig+0x124>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00b      	beq.n	8004e2e <TIM_Base_SetConfig+0x9a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a28      	ldr	r2, [pc, #160]	; (8004ebc <TIM_Base_SetConfig+0x128>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d007      	beq.n	8004e2e <TIM_Base_SetConfig+0x9a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a27      	ldr	r2, [pc, #156]	; (8004ec0 <TIM_Base_SetConfig+0x12c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <TIM_Base_SetConfig+0x9a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a26      	ldr	r2, [pc, #152]	; (8004ec4 <TIM_Base_SetConfig+0x130>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d108      	bne.n	8004e40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a10      	ldr	r2, [pc, #64]	; (8004ea8 <TIM_Base_SetConfig+0x114>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00f      	beq.n	8004e8c <TIM_Base_SetConfig+0xf8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <TIM_Base_SetConfig+0x124>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00b      	beq.n	8004e8c <TIM_Base_SetConfig+0xf8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <TIM_Base_SetConfig+0x128>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d007      	beq.n	8004e8c <TIM_Base_SetConfig+0xf8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a10      	ldr	r2, [pc, #64]	; (8004ec0 <TIM_Base_SetConfig+0x12c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_Base_SetConfig+0xf8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a0f      	ldr	r2, [pc, #60]	; (8004ec4 <TIM_Base_SetConfig+0x130>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d103      	bne.n	8004e94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40013400 	.word	0x40013400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800

08004ec8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f023 0201 	bic.w	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f023 030a 	bic.w	r3, r3, #10
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	621a      	str	r2, [r3, #32]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b087      	sub	sp, #28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0210 	bic.w	r2, r3, #16
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	031b      	lsls	r3, r3, #12
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f043 0307 	orr.w	r3, r3, #7
 8004fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005010:	2302      	movs	r3, #2
 8005012:	e068      	b.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a2e      	ldr	r2, [pc, #184]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d108      	bne.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800504e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005060:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01d      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005086:	d018      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1b      	ldr	r2, [pc, #108]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1a      	ldr	r2, [pc, #104]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00e      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a18      	ldr	r2, [pc, #96]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d009      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a14      	ldr	r2, [pc, #80]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d10c      	bne.n	80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40013400 	.word	0x40013400
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00
 8005108:	40014000 	.word	0x40014000

0800510c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e040      	b.n	80051dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fb fcf0 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2224      	movs	r2, #36	; 0x24
 8005174:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f82c 	bl	80051e4 <UART_SetConfig>
 800518c:	4603      	mov	r3, r0
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e022      	b.n	80051dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 faaa 	bl	80056f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fb31 	bl	800583c <UART_CheckIdleState>
 80051da:	4603      	mov	r3, r0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e4:	b5b0      	push	{r4, r5, r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	4313      	orrs	r3, r2
 8005206:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4bad      	ldr	r3, [pc, #692]	; (80054c4 <UART_SetConfig+0x2e0>)
 8005210:	4013      	ands	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	69f9      	ldr	r1, [r7, #28]
 8005218:	430b      	orrs	r3, r1
 800521a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4aa2      	ldr	r2, [pc, #648]	; (80054c8 <UART_SetConfig+0x2e4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	4313      	orrs	r3, r2
 800524a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	430a      	orrs	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a99      	ldr	r2, [pc, #612]	; (80054cc <UART_SetConfig+0x2e8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d121      	bne.n	80052ae <UART_SetConfig+0xca>
 800526a:	4b99      	ldr	r3, [pc, #612]	; (80054d0 <UART_SetConfig+0x2ec>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b03      	cmp	r3, #3
 8005276:	d817      	bhi.n	80052a8 <UART_SetConfig+0xc4>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x9c>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	08005291 	.word	0x08005291
 8005284:	0800529d 	.word	0x0800529d
 8005288:	08005297 	.word	0x08005297
 800528c:	080052a3 	.word	0x080052a3
 8005290:	2301      	movs	r3, #1
 8005292:	76fb      	strb	r3, [r7, #27]
 8005294:	e0e7      	b.n	8005466 <UART_SetConfig+0x282>
 8005296:	2302      	movs	r3, #2
 8005298:	76fb      	strb	r3, [r7, #27]
 800529a:	e0e4      	b.n	8005466 <UART_SetConfig+0x282>
 800529c:	2304      	movs	r3, #4
 800529e:	76fb      	strb	r3, [r7, #27]
 80052a0:	e0e1      	b.n	8005466 <UART_SetConfig+0x282>
 80052a2:	2308      	movs	r3, #8
 80052a4:	76fb      	strb	r3, [r7, #27]
 80052a6:	e0de      	b.n	8005466 <UART_SetConfig+0x282>
 80052a8:	2310      	movs	r3, #16
 80052aa:	76fb      	strb	r3, [r7, #27]
 80052ac:	e0db      	b.n	8005466 <UART_SetConfig+0x282>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a88      	ldr	r2, [pc, #544]	; (80054d4 <UART_SetConfig+0x2f0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d132      	bne.n	800531e <UART_SetConfig+0x13a>
 80052b8:	4b85      	ldr	r3, [pc, #532]	; (80054d0 <UART_SetConfig+0x2ec>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	2b0c      	cmp	r3, #12
 80052c4:	d828      	bhi.n	8005318 <UART_SetConfig+0x134>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <UART_SetConfig+0xe8>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005319 	.word	0x08005319
 80052d4:	08005319 	.word	0x08005319
 80052d8:	08005319 	.word	0x08005319
 80052dc:	0800530d 	.word	0x0800530d
 80052e0:	08005319 	.word	0x08005319
 80052e4:	08005319 	.word	0x08005319
 80052e8:	08005319 	.word	0x08005319
 80052ec:	08005307 	.word	0x08005307
 80052f0:	08005319 	.word	0x08005319
 80052f4:	08005319 	.word	0x08005319
 80052f8:	08005319 	.word	0x08005319
 80052fc:	08005313 	.word	0x08005313
 8005300:	2300      	movs	r3, #0
 8005302:	76fb      	strb	r3, [r7, #27]
 8005304:	e0af      	b.n	8005466 <UART_SetConfig+0x282>
 8005306:	2302      	movs	r3, #2
 8005308:	76fb      	strb	r3, [r7, #27]
 800530a:	e0ac      	b.n	8005466 <UART_SetConfig+0x282>
 800530c:	2304      	movs	r3, #4
 800530e:	76fb      	strb	r3, [r7, #27]
 8005310:	e0a9      	b.n	8005466 <UART_SetConfig+0x282>
 8005312:	2308      	movs	r3, #8
 8005314:	76fb      	strb	r3, [r7, #27]
 8005316:	e0a6      	b.n	8005466 <UART_SetConfig+0x282>
 8005318:	2310      	movs	r3, #16
 800531a:	76fb      	strb	r3, [r7, #27]
 800531c:	e0a3      	b.n	8005466 <UART_SetConfig+0x282>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a6d      	ldr	r2, [pc, #436]	; (80054d8 <UART_SetConfig+0x2f4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d120      	bne.n	800536a <UART_SetConfig+0x186>
 8005328:	4b69      	ldr	r3, [pc, #420]	; (80054d0 <UART_SetConfig+0x2ec>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005332:	2b30      	cmp	r3, #48	; 0x30
 8005334:	d013      	beq.n	800535e <UART_SetConfig+0x17a>
 8005336:	2b30      	cmp	r3, #48	; 0x30
 8005338:	d814      	bhi.n	8005364 <UART_SetConfig+0x180>
 800533a:	2b20      	cmp	r3, #32
 800533c:	d009      	beq.n	8005352 <UART_SetConfig+0x16e>
 800533e:	2b20      	cmp	r3, #32
 8005340:	d810      	bhi.n	8005364 <UART_SetConfig+0x180>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <UART_SetConfig+0x168>
 8005346:	2b10      	cmp	r3, #16
 8005348:	d006      	beq.n	8005358 <UART_SetConfig+0x174>
 800534a:	e00b      	b.n	8005364 <UART_SetConfig+0x180>
 800534c:	2300      	movs	r3, #0
 800534e:	76fb      	strb	r3, [r7, #27]
 8005350:	e089      	b.n	8005466 <UART_SetConfig+0x282>
 8005352:	2302      	movs	r3, #2
 8005354:	76fb      	strb	r3, [r7, #27]
 8005356:	e086      	b.n	8005466 <UART_SetConfig+0x282>
 8005358:	2304      	movs	r3, #4
 800535a:	76fb      	strb	r3, [r7, #27]
 800535c:	e083      	b.n	8005466 <UART_SetConfig+0x282>
 800535e:	2308      	movs	r3, #8
 8005360:	76fb      	strb	r3, [r7, #27]
 8005362:	e080      	b.n	8005466 <UART_SetConfig+0x282>
 8005364:	2310      	movs	r3, #16
 8005366:	76fb      	strb	r3, [r7, #27]
 8005368:	e07d      	b.n	8005466 <UART_SetConfig+0x282>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a5b      	ldr	r2, [pc, #364]	; (80054dc <UART_SetConfig+0x2f8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d120      	bne.n	80053b6 <UART_SetConfig+0x1d2>
 8005374:	4b56      	ldr	r3, [pc, #344]	; (80054d0 <UART_SetConfig+0x2ec>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800537e:	2bc0      	cmp	r3, #192	; 0xc0
 8005380:	d013      	beq.n	80053aa <UART_SetConfig+0x1c6>
 8005382:	2bc0      	cmp	r3, #192	; 0xc0
 8005384:	d814      	bhi.n	80053b0 <UART_SetConfig+0x1cc>
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d009      	beq.n	800539e <UART_SetConfig+0x1ba>
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d810      	bhi.n	80053b0 <UART_SetConfig+0x1cc>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <UART_SetConfig+0x1b4>
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d006      	beq.n	80053a4 <UART_SetConfig+0x1c0>
 8005396:	e00b      	b.n	80053b0 <UART_SetConfig+0x1cc>
 8005398:	2300      	movs	r3, #0
 800539a:	76fb      	strb	r3, [r7, #27]
 800539c:	e063      	b.n	8005466 <UART_SetConfig+0x282>
 800539e:	2302      	movs	r3, #2
 80053a0:	76fb      	strb	r3, [r7, #27]
 80053a2:	e060      	b.n	8005466 <UART_SetConfig+0x282>
 80053a4:	2304      	movs	r3, #4
 80053a6:	76fb      	strb	r3, [r7, #27]
 80053a8:	e05d      	b.n	8005466 <UART_SetConfig+0x282>
 80053aa:	2308      	movs	r3, #8
 80053ac:	76fb      	strb	r3, [r7, #27]
 80053ae:	e05a      	b.n	8005466 <UART_SetConfig+0x282>
 80053b0:	2310      	movs	r3, #16
 80053b2:	76fb      	strb	r3, [r7, #27]
 80053b4:	e057      	b.n	8005466 <UART_SetConfig+0x282>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a49      	ldr	r2, [pc, #292]	; (80054e0 <UART_SetConfig+0x2fc>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d125      	bne.n	800540c <UART_SetConfig+0x228>
 80053c0:	4b43      	ldr	r3, [pc, #268]	; (80054d0 <UART_SetConfig+0x2ec>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ce:	d017      	beq.n	8005400 <UART_SetConfig+0x21c>
 80053d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d4:	d817      	bhi.n	8005406 <UART_SetConfig+0x222>
 80053d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053da:	d00b      	beq.n	80053f4 <UART_SetConfig+0x210>
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e0:	d811      	bhi.n	8005406 <UART_SetConfig+0x222>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <UART_SetConfig+0x20a>
 80053e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ea:	d006      	beq.n	80053fa <UART_SetConfig+0x216>
 80053ec:	e00b      	b.n	8005406 <UART_SetConfig+0x222>
 80053ee:	2300      	movs	r3, #0
 80053f0:	76fb      	strb	r3, [r7, #27]
 80053f2:	e038      	b.n	8005466 <UART_SetConfig+0x282>
 80053f4:	2302      	movs	r3, #2
 80053f6:	76fb      	strb	r3, [r7, #27]
 80053f8:	e035      	b.n	8005466 <UART_SetConfig+0x282>
 80053fa:	2304      	movs	r3, #4
 80053fc:	76fb      	strb	r3, [r7, #27]
 80053fe:	e032      	b.n	8005466 <UART_SetConfig+0x282>
 8005400:	2308      	movs	r3, #8
 8005402:	76fb      	strb	r3, [r7, #27]
 8005404:	e02f      	b.n	8005466 <UART_SetConfig+0x282>
 8005406:	2310      	movs	r3, #16
 8005408:	76fb      	strb	r3, [r7, #27]
 800540a:	e02c      	b.n	8005466 <UART_SetConfig+0x282>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a2d      	ldr	r2, [pc, #180]	; (80054c8 <UART_SetConfig+0x2e4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d125      	bne.n	8005462 <UART_SetConfig+0x27e>
 8005416:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <UART_SetConfig+0x2ec>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005420:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005424:	d017      	beq.n	8005456 <UART_SetConfig+0x272>
 8005426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800542a:	d817      	bhi.n	800545c <UART_SetConfig+0x278>
 800542c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005430:	d00b      	beq.n	800544a <UART_SetConfig+0x266>
 8005432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005436:	d811      	bhi.n	800545c <UART_SetConfig+0x278>
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <UART_SetConfig+0x260>
 800543c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005440:	d006      	beq.n	8005450 <UART_SetConfig+0x26c>
 8005442:	e00b      	b.n	800545c <UART_SetConfig+0x278>
 8005444:	2300      	movs	r3, #0
 8005446:	76fb      	strb	r3, [r7, #27]
 8005448:	e00d      	b.n	8005466 <UART_SetConfig+0x282>
 800544a:	2302      	movs	r3, #2
 800544c:	76fb      	strb	r3, [r7, #27]
 800544e:	e00a      	b.n	8005466 <UART_SetConfig+0x282>
 8005450:	2304      	movs	r3, #4
 8005452:	76fb      	strb	r3, [r7, #27]
 8005454:	e007      	b.n	8005466 <UART_SetConfig+0x282>
 8005456:	2308      	movs	r3, #8
 8005458:	76fb      	strb	r3, [r7, #27]
 800545a:	e004      	b.n	8005466 <UART_SetConfig+0x282>
 800545c:	2310      	movs	r3, #16
 800545e:	76fb      	strb	r3, [r7, #27]
 8005460:	e001      	b.n	8005466 <UART_SetConfig+0x282>
 8005462:	2310      	movs	r3, #16
 8005464:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <UART_SetConfig+0x2e4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	f040 8087 	bne.w	8005580 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005472:	7efb      	ldrb	r3, [r7, #27]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d837      	bhi.n	80054e8 <UART_SetConfig+0x304>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0x29c>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	080054a5 	.word	0x080054a5
 8005484:	080054e9 	.word	0x080054e9
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054e9 	.word	0x080054e9
 8005490:	080054b3 	.word	0x080054b3
 8005494:	080054e9 	.word	0x080054e9
 8005498:	080054e9 	.word	0x080054e9
 800549c:	080054e9 	.word	0x080054e9
 80054a0:	080054bb 	.word	0x080054bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a4:	f7fe fc4e 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 80054a8:	6178      	str	r0, [r7, #20]
        break;
 80054aa:	e022      	b.n	80054f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <UART_SetConfig+0x300>)
 80054ae:	617b      	str	r3, [r7, #20]
        break;
 80054b0:	e01f      	b.n	80054f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054b2:	f7fe fbaf 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 80054b6:	6178      	str	r0, [r7, #20]
        break;
 80054b8:	e01b      	b.n	80054f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054be:	617b      	str	r3, [r7, #20]
        break;
 80054c0:	e017      	b.n	80054f2 <UART_SetConfig+0x30e>
 80054c2:	bf00      	nop
 80054c4:	efff69f3 	.word	0xefff69f3
 80054c8:	40008000 	.word	0x40008000
 80054cc:	40013800 	.word	0x40013800
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40004400 	.word	0x40004400
 80054d8:	40004800 	.word	0x40004800
 80054dc:	40004c00 	.word	0x40004c00
 80054e0:	40005000 	.word	0x40005000
 80054e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	76bb      	strb	r3, [r7, #26]
        break;
 80054f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 80f1 	beq.w	80056dc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	4413      	add	r3, r2
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	429a      	cmp	r2, r3
 8005508:	d305      	bcc.n	8005516 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	429a      	cmp	r2, r3
 8005514:	d902      	bls.n	800551c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	76bb      	strb	r3, [r7, #26]
 800551a:	e0df      	b.n	80056dc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4618      	mov	r0, r3
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	f04f 0300 	mov.w	r3, #0
 800552c:	020b      	lsls	r3, r1, #8
 800552e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005532:	0202      	lsls	r2, r0, #8
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	6849      	ldr	r1, [r1, #4]
 8005538:	0849      	lsrs	r1, r1, #1
 800553a:	4608      	mov	r0, r1
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	1814      	adds	r4, r2, r0
 8005542:	eb43 0501 	adc.w	r5, r3, r1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	461a      	mov	r2, r3
 800554c:	f04f 0300 	mov.w	r3, #0
 8005550:	4620      	mov	r0, r4
 8005552:	4629      	mov	r1, r5
 8005554:	f7fa fe8c 	bl	8000270 <__aeabi_uldivmod>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4613      	mov	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005566:	d308      	bcc.n	800557a <UART_SetConfig+0x396>
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800556e:	d204      	bcs.n	800557a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	60da      	str	r2, [r3, #12]
 8005578:	e0b0      	b.n	80056dc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	76bb      	strb	r3, [r7, #26]
 800557e:	e0ad      	b.n	80056dc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005588:	d15c      	bne.n	8005644 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800558a:	7efb      	ldrb	r3, [r7, #27]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d828      	bhi.n	80055e2 <UART_SetConfig+0x3fe>
 8005590:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <UART_SetConfig+0x3b4>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	080055bd 	.word	0x080055bd
 800559c:	080055c5 	.word	0x080055c5
 80055a0:	080055cd 	.word	0x080055cd
 80055a4:	080055e3 	.word	0x080055e3
 80055a8:	080055d3 	.word	0x080055d3
 80055ac:	080055e3 	.word	0x080055e3
 80055b0:	080055e3 	.word	0x080055e3
 80055b4:	080055e3 	.word	0x080055e3
 80055b8:	080055db 	.word	0x080055db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055bc:	f7fe fbc2 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 80055c0:	6178      	str	r0, [r7, #20]
        break;
 80055c2:	e013      	b.n	80055ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c4:	f7fe fbd4 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 80055c8:	6178      	str	r0, [r7, #20]
        break;
 80055ca:	e00f      	b.n	80055ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055cc:	4b49      	ldr	r3, [pc, #292]	; (80056f4 <UART_SetConfig+0x510>)
 80055ce:	617b      	str	r3, [r7, #20]
        break;
 80055d0:	e00c      	b.n	80055ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055d2:	f7fe fb1f 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 80055d6:	6178      	str	r0, [r7, #20]
        break;
 80055d8:	e008      	b.n	80055ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055de:	617b      	str	r3, [r7, #20]
        break;
 80055e0:	e004      	b.n	80055ec <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	76bb      	strb	r3, [r7, #26]
        break;
 80055ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d074      	beq.n	80056dc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	005a      	lsls	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	085b      	lsrs	r3, r3, #1
 80055fc:	441a      	add	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	fbb2 f3f3 	udiv	r3, r2, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2b0f      	cmp	r3, #15
 800560e:	d916      	bls.n	800563e <UART_SetConfig+0x45a>
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005616:	d212      	bcs.n	800563e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f023 030f 	bic.w	r3, r3, #15
 8005620:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	b29b      	uxth	r3, r3
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	b29a      	uxth	r2, r3
 800562e:	89fb      	ldrh	r3, [r7, #14]
 8005630:	4313      	orrs	r3, r2
 8005632:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	89fa      	ldrh	r2, [r7, #14]
 800563a:	60da      	str	r2, [r3, #12]
 800563c:	e04e      	b.n	80056dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	76bb      	strb	r3, [r7, #26]
 8005642:	e04b      	b.n	80056dc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005644:	7efb      	ldrb	r3, [r7, #27]
 8005646:	2b08      	cmp	r3, #8
 8005648:	d827      	bhi.n	800569a <UART_SetConfig+0x4b6>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x46c>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005675 	.word	0x08005675
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005685 	.word	0x08005685
 800565c:	0800569b 	.word	0x0800569b
 8005660:	0800568b 	.word	0x0800568b
 8005664:	0800569b 	.word	0x0800569b
 8005668:	0800569b 	.word	0x0800569b
 800566c:	0800569b 	.word	0x0800569b
 8005670:	08005693 	.word	0x08005693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005674:	f7fe fb66 	bl	8003d44 <HAL_RCC_GetPCLK1Freq>
 8005678:	6178      	str	r0, [r7, #20]
        break;
 800567a:	e013      	b.n	80056a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7fe fb78 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 8005680:	6178      	str	r0, [r7, #20]
        break;
 8005682:	e00f      	b.n	80056a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005684:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <UART_SetConfig+0x510>)
 8005686:	617b      	str	r3, [r7, #20]
        break;
 8005688:	e00c      	b.n	80056a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568a:	f7fe fac3 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 800568e:	6178      	str	r0, [r7, #20]
        break;
 8005690:	e008      	b.n	80056a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005696:	617b      	str	r3, [r7, #20]
        break;
 8005698:	e004      	b.n	80056a4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	76bb      	strb	r3, [r7, #26]
        break;
 80056a2:	bf00      	nop
    }

    if (pclk != 0U)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d018      	beq.n	80056dc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	085a      	lsrs	r2, r3, #1
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	441a      	add	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	b29b      	uxth	r3, r3
 80056be:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b0f      	cmp	r3, #15
 80056c4:	d908      	bls.n	80056d8 <UART_SetConfig+0x4f4>
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056cc:	d204      	bcs.n	80056d8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	60da      	str	r2, [r3, #12]
 80056d6:	e001      	b.n	80056dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80056e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bdb0      	pop	{r4, r5, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	00f42400 	.word	0x00f42400

080056f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00a      	beq.n	80057aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00a      	beq.n	80057cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01a      	beq.n	800580e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f6:	d10a      	bne.n	800580e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
  }
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af02      	add	r7, sp, #8
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800584c:	f7fb fc2e 	bl	80010ac <HAL_GetTick>
 8005850:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b08      	cmp	r3, #8
 800585e:	d10e      	bne.n	800587e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f82d 	bl	80058ce <UART_WaitOnFlagUntilTimeout>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e023      	b.n	80058c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b04      	cmp	r3, #4
 800588a:	d10e      	bne.n	80058aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800588c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f817 	bl	80058ce <UART_WaitOnFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e00d      	b.n	80058c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	4613      	mov	r3, r2
 80058dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058de:	e05e      	b.n	800599e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d05a      	beq.n	800599e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e8:	f7fb fbe0 	bl	80010ac <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d302      	bcc.n	80058fe <UART_WaitOnFlagUntilTimeout+0x30>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11b      	bne.n	8005936 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800590c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2220      	movs	r2, #32
 8005922:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e043      	b.n	80059be <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d02c      	beq.n	800599e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005952:	d124      	bne.n	800599e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800595c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800596c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e00f      	b.n	80059be <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4013      	ands	r3, r2
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	bf0c      	ite	eq
 80059ae:	2301      	moveq	r3, #1
 80059b0:	2300      	movne	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d091      	beq.n	80058e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <__errno>:
 80059c8:	4b01      	ldr	r3, [pc, #4]	; (80059d0 <__errno+0x8>)
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	20000014 	.word	0x20000014

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	4d0d      	ldr	r5, [pc, #52]	; (8005a0c <__libc_init_array+0x38>)
 80059d8:	4c0d      	ldr	r4, [pc, #52]	; (8005a10 <__libc_init_array+0x3c>)
 80059da:	1b64      	subs	r4, r4, r5
 80059dc:	10a4      	asrs	r4, r4, #2
 80059de:	2600      	movs	r6, #0
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	4d0b      	ldr	r5, [pc, #44]	; (8005a14 <__libc_init_array+0x40>)
 80059e6:	4c0c      	ldr	r4, [pc, #48]	; (8005a18 <__libc_init_array+0x44>)
 80059e8:	f000 fc4e 	bl	8006288 <_init>
 80059ec:	1b64      	subs	r4, r4, r5
 80059ee:	10a4      	asrs	r4, r4, #2
 80059f0:	2600      	movs	r6, #0
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fc:	4798      	blx	r3
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a06:	4798      	blx	r3
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	08006334 	.word	0x08006334
 8005a10:	08006334 	.word	0x08006334
 8005a14:	08006334 	.word	0x08006334
 8005a18:	08006338 	.word	0x08006338

08005a1c <memset>:
 8005a1c:	4402      	add	r2, r0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d100      	bne.n	8005a26 <memset+0xa>
 8005a24:	4770      	bx	lr
 8005a26:	f803 1b01 	strb.w	r1, [r3], #1
 8005a2a:	e7f9      	b.n	8005a20 <memset+0x4>

08005a2c <siprintf>:
 8005a2c:	b40e      	push	{r1, r2, r3}
 8005a2e:	b500      	push	{lr}
 8005a30:	b09c      	sub	sp, #112	; 0x70
 8005a32:	ab1d      	add	r3, sp, #116	; 0x74
 8005a34:	9002      	str	r0, [sp, #8]
 8005a36:	9006      	str	r0, [sp, #24]
 8005a38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a3c:	4809      	ldr	r0, [pc, #36]	; (8005a64 <siprintf+0x38>)
 8005a3e:	9107      	str	r1, [sp, #28]
 8005a40:	9104      	str	r1, [sp, #16]
 8005a42:	4909      	ldr	r1, [pc, #36]	; (8005a68 <siprintf+0x3c>)
 8005a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a48:	9105      	str	r1, [sp, #20]
 8005a4a:	6800      	ldr	r0, [r0, #0]
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	a902      	add	r1, sp, #8
 8005a50:	f000 f868 	bl	8005b24 <_svfiprintf_r>
 8005a54:	9b02      	ldr	r3, [sp, #8]
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
 8005a5a:	b01c      	add	sp, #112	; 0x70
 8005a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a60:	b003      	add	sp, #12
 8005a62:	4770      	bx	lr
 8005a64:	20000014 	.word	0x20000014
 8005a68:	ffff0208 	.word	0xffff0208

08005a6c <__ssputs_r>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	688e      	ldr	r6, [r1, #8]
 8005a72:	429e      	cmp	r6, r3
 8005a74:	4682      	mov	sl, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	4690      	mov	r8, r2
 8005a7a:	461f      	mov	r7, r3
 8005a7c:	d838      	bhi.n	8005af0 <__ssputs_r+0x84>
 8005a7e:	898a      	ldrh	r2, [r1, #12]
 8005a80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a84:	d032      	beq.n	8005aec <__ssputs_r+0x80>
 8005a86:	6825      	ldr	r5, [r4, #0]
 8005a88:	6909      	ldr	r1, [r1, #16]
 8005a8a:	eba5 0901 	sub.w	r9, r5, r1
 8005a8e:	6965      	ldr	r5, [r4, #20]
 8005a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a98:	3301      	adds	r3, #1
 8005a9a:	444b      	add	r3, r9
 8005a9c:	106d      	asrs	r5, r5, #1
 8005a9e:	429d      	cmp	r5, r3
 8005aa0:	bf38      	it	cc
 8005aa2:	461d      	movcc	r5, r3
 8005aa4:	0553      	lsls	r3, r2, #21
 8005aa6:	d531      	bpl.n	8005b0c <__ssputs_r+0xa0>
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	f000 fb47 	bl	800613c <_malloc_r>
 8005aae:	4606      	mov	r6, r0
 8005ab0:	b950      	cbnz	r0, 8005ac8 <__ssputs_r+0x5c>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	f8ca 3000 	str.w	r3, [sl]
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	6921      	ldr	r1, [r4, #16]
 8005aca:	464a      	mov	r2, r9
 8005acc:	f000 fabe 	bl	800604c <memcpy>
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	6126      	str	r6, [r4, #16]
 8005ade:	6165      	str	r5, [r4, #20]
 8005ae0:	444e      	add	r6, r9
 8005ae2:	eba5 0509 	sub.w	r5, r5, r9
 8005ae6:	6026      	str	r6, [r4, #0]
 8005ae8:	60a5      	str	r5, [r4, #8]
 8005aea:	463e      	mov	r6, r7
 8005aec:	42be      	cmp	r6, r7
 8005aee:	d900      	bls.n	8005af2 <__ssputs_r+0x86>
 8005af0:	463e      	mov	r6, r7
 8005af2:	4632      	mov	r2, r6
 8005af4:	6820      	ldr	r0, [r4, #0]
 8005af6:	4641      	mov	r1, r8
 8005af8:	f000 fab6 	bl	8006068 <memmove>
 8005afc:	68a3      	ldr	r3, [r4, #8]
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	1b9b      	subs	r3, r3, r6
 8005b02:	4432      	add	r2, r6
 8005b04:	60a3      	str	r3, [r4, #8]
 8005b06:	6022      	str	r2, [r4, #0]
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e7db      	b.n	8005ac4 <__ssputs_r+0x58>
 8005b0c:	462a      	mov	r2, r5
 8005b0e:	f000 fb6f 	bl	80061f0 <_realloc_r>
 8005b12:	4606      	mov	r6, r0
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d1e1      	bne.n	8005adc <__ssputs_r+0x70>
 8005b18:	6921      	ldr	r1, [r4, #16]
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	f000 fabe 	bl	800609c <_free_r>
 8005b20:	e7c7      	b.n	8005ab2 <__ssputs_r+0x46>
	...

08005b24 <_svfiprintf_r>:
 8005b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b28:	4698      	mov	r8, r3
 8005b2a:	898b      	ldrh	r3, [r1, #12]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	b09d      	sub	sp, #116	; 0x74
 8005b30:	4607      	mov	r7, r0
 8005b32:	460d      	mov	r5, r1
 8005b34:	4614      	mov	r4, r2
 8005b36:	d50e      	bpl.n	8005b56 <_svfiprintf_r+0x32>
 8005b38:	690b      	ldr	r3, [r1, #16]
 8005b3a:	b963      	cbnz	r3, 8005b56 <_svfiprintf_r+0x32>
 8005b3c:	2140      	movs	r1, #64	; 0x40
 8005b3e:	f000 fafd 	bl	800613c <_malloc_r>
 8005b42:	6028      	str	r0, [r5, #0]
 8005b44:	6128      	str	r0, [r5, #16]
 8005b46:	b920      	cbnz	r0, 8005b52 <_svfiprintf_r+0x2e>
 8005b48:	230c      	movs	r3, #12
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	e0d1      	b.n	8005cf6 <_svfiprintf_r+0x1d2>
 8005b52:	2340      	movs	r3, #64	; 0x40
 8005b54:	616b      	str	r3, [r5, #20]
 8005b56:	2300      	movs	r3, #0
 8005b58:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5a:	2320      	movs	r3, #32
 8005b5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b60:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b64:	2330      	movs	r3, #48	; 0x30
 8005b66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d10 <_svfiprintf_r+0x1ec>
 8005b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b6e:	f04f 0901 	mov.w	r9, #1
 8005b72:	4623      	mov	r3, r4
 8005b74:	469a      	mov	sl, r3
 8005b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b7a:	b10a      	cbz	r2, 8005b80 <_svfiprintf_r+0x5c>
 8005b7c:	2a25      	cmp	r2, #37	; 0x25
 8005b7e:	d1f9      	bne.n	8005b74 <_svfiprintf_r+0x50>
 8005b80:	ebba 0b04 	subs.w	fp, sl, r4
 8005b84:	d00b      	beq.n	8005b9e <_svfiprintf_r+0x7a>
 8005b86:	465b      	mov	r3, fp
 8005b88:	4622      	mov	r2, r4
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	f7ff ff6d 	bl	8005a6c <__ssputs_r>
 8005b92:	3001      	adds	r0, #1
 8005b94:	f000 80aa 	beq.w	8005cec <_svfiprintf_r+0x1c8>
 8005b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b9a:	445a      	add	r2, fp
 8005b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 80a2 	beq.w	8005cec <_svfiprintf_r+0x1c8>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb2:	f10a 0a01 	add.w	sl, sl, #1
 8005bb6:	9304      	str	r3, [sp, #16]
 8005bb8:	9307      	str	r3, [sp, #28]
 8005bba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bbe:	931a      	str	r3, [sp, #104]	; 0x68
 8005bc0:	4654      	mov	r4, sl
 8005bc2:	2205      	movs	r2, #5
 8005bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bc8:	4851      	ldr	r0, [pc, #324]	; (8005d10 <_svfiprintf_r+0x1ec>)
 8005bca:	f7fa fb01 	bl	80001d0 <memchr>
 8005bce:	9a04      	ldr	r2, [sp, #16]
 8005bd0:	b9d8      	cbnz	r0, 8005c0a <_svfiprintf_r+0xe6>
 8005bd2:	06d0      	lsls	r0, r2, #27
 8005bd4:	bf44      	itt	mi
 8005bd6:	2320      	movmi	r3, #32
 8005bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bdc:	0711      	lsls	r1, r2, #28
 8005bde:	bf44      	itt	mi
 8005be0:	232b      	movmi	r3, #43	; 0x2b
 8005be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005be6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bea:	2b2a      	cmp	r3, #42	; 0x2a
 8005bec:	d015      	beq.n	8005c1a <_svfiprintf_r+0xf6>
 8005bee:	9a07      	ldr	r2, [sp, #28]
 8005bf0:	4654      	mov	r4, sl
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	f04f 0c0a 	mov.w	ip, #10
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bfe:	3b30      	subs	r3, #48	; 0x30
 8005c00:	2b09      	cmp	r3, #9
 8005c02:	d94e      	bls.n	8005ca2 <_svfiprintf_r+0x17e>
 8005c04:	b1b0      	cbz	r0, 8005c34 <_svfiprintf_r+0x110>
 8005c06:	9207      	str	r2, [sp, #28]
 8005c08:	e014      	b.n	8005c34 <_svfiprintf_r+0x110>
 8005c0a:	eba0 0308 	sub.w	r3, r0, r8
 8005c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c12:	4313      	orrs	r3, r2
 8005c14:	9304      	str	r3, [sp, #16]
 8005c16:	46a2      	mov	sl, r4
 8005c18:	e7d2      	b.n	8005bc0 <_svfiprintf_r+0x9c>
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	1d19      	adds	r1, r3, #4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	9103      	str	r1, [sp, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bfbb      	ittet	lt
 8005c26:	425b      	neglt	r3, r3
 8005c28:	f042 0202 	orrlt.w	r2, r2, #2
 8005c2c:	9307      	strge	r3, [sp, #28]
 8005c2e:	9307      	strlt	r3, [sp, #28]
 8005c30:	bfb8      	it	lt
 8005c32:	9204      	strlt	r2, [sp, #16]
 8005c34:	7823      	ldrb	r3, [r4, #0]
 8005c36:	2b2e      	cmp	r3, #46	; 0x2e
 8005c38:	d10c      	bne.n	8005c54 <_svfiprintf_r+0x130>
 8005c3a:	7863      	ldrb	r3, [r4, #1]
 8005c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c3e:	d135      	bne.n	8005cac <_svfiprintf_r+0x188>
 8005c40:	9b03      	ldr	r3, [sp, #12]
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	9203      	str	r2, [sp, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bfb8      	it	lt
 8005c4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c50:	3402      	adds	r4, #2
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d20 <_svfiprintf_r+0x1fc>
 8005c58:	7821      	ldrb	r1, [r4, #0]
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	4650      	mov	r0, sl
 8005c5e:	f7fa fab7 	bl	80001d0 <memchr>
 8005c62:	b140      	cbz	r0, 8005c76 <_svfiprintf_r+0x152>
 8005c64:	2340      	movs	r3, #64	; 0x40
 8005c66:	eba0 000a 	sub.w	r0, r0, sl
 8005c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8005c6e:	9b04      	ldr	r3, [sp, #16]
 8005c70:	4303      	orrs	r3, r0
 8005c72:	3401      	adds	r4, #1
 8005c74:	9304      	str	r3, [sp, #16]
 8005c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c7a:	4826      	ldr	r0, [pc, #152]	; (8005d14 <_svfiprintf_r+0x1f0>)
 8005c7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c80:	2206      	movs	r2, #6
 8005c82:	f7fa faa5 	bl	80001d0 <memchr>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d038      	beq.n	8005cfc <_svfiprintf_r+0x1d8>
 8005c8a:	4b23      	ldr	r3, [pc, #140]	; (8005d18 <_svfiprintf_r+0x1f4>)
 8005c8c:	bb1b      	cbnz	r3, 8005cd6 <_svfiprintf_r+0x1b2>
 8005c8e:	9b03      	ldr	r3, [sp, #12]
 8005c90:	3307      	adds	r3, #7
 8005c92:	f023 0307 	bic.w	r3, r3, #7
 8005c96:	3308      	adds	r3, #8
 8005c98:	9303      	str	r3, [sp, #12]
 8005c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9c:	4433      	add	r3, r6
 8005c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca0:	e767      	b.n	8005b72 <_svfiprintf_r+0x4e>
 8005ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	2001      	movs	r0, #1
 8005caa:	e7a5      	b.n	8005bf8 <_svfiprintf_r+0xd4>
 8005cac:	2300      	movs	r3, #0
 8005cae:	3401      	adds	r4, #1
 8005cb0:	9305      	str	r3, [sp, #20]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f04f 0c0a 	mov.w	ip, #10
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cbe:	3a30      	subs	r2, #48	; 0x30
 8005cc0:	2a09      	cmp	r2, #9
 8005cc2:	d903      	bls.n	8005ccc <_svfiprintf_r+0x1a8>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0c5      	beq.n	8005c54 <_svfiprintf_r+0x130>
 8005cc8:	9105      	str	r1, [sp, #20]
 8005cca:	e7c3      	b.n	8005c54 <_svfiprintf_r+0x130>
 8005ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e7f0      	b.n	8005cb8 <_svfiprintf_r+0x194>
 8005cd6:	ab03      	add	r3, sp, #12
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	462a      	mov	r2, r5
 8005cdc:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <_svfiprintf_r+0x1f8>)
 8005cde:	a904      	add	r1, sp, #16
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f3af 8000 	nop.w
 8005ce6:	1c42      	adds	r2, r0, #1
 8005ce8:	4606      	mov	r6, r0
 8005cea:	d1d6      	bne.n	8005c9a <_svfiprintf_r+0x176>
 8005cec:	89ab      	ldrh	r3, [r5, #12]
 8005cee:	065b      	lsls	r3, r3, #25
 8005cf0:	f53f af2c 	bmi.w	8005b4c <_svfiprintf_r+0x28>
 8005cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cf6:	b01d      	add	sp, #116	; 0x74
 8005cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfc:	ab03      	add	r3, sp, #12
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	462a      	mov	r2, r5
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <_svfiprintf_r+0x1f8>)
 8005d04:	a904      	add	r1, sp, #16
 8005d06:	4638      	mov	r0, r7
 8005d08:	f000 f87a 	bl	8005e00 <_printf_i>
 8005d0c:	e7eb      	b.n	8005ce6 <_svfiprintf_r+0x1c2>
 8005d0e:	bf00      	nop
 8005d10:	080062f8 	.word	0x080062f8
 8005d14:	08006302 	.word	0x08006302
 8005d18:	00000000 	.word	0x00000000
 8005d1c:	08005a6d 	.word	0x08005a6d
 8005d20:	080062fe 	.word	0x080062fe

08005d24 <_printf_common>:
 8005d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	4616      	mov	r6, r2
 8005d2a:	4699      	mov	r9, r3
 8005d2c:	688a      	ldr	r2, [r1, #8]
 8005d2e:	690b      	ldr	r3, [r1, #16]
 8005d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d34:	4293      	cmp	r3, r2
 8005d36:	bfb8      	it	lt
 8005d38:	4613      	movlt	r3, r2
 8005d3a:	6033      	str	r3, [r6, #0]
 8005d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d40:	4607      	mov	r7, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	b10a      	cbz	r2, 8005d4a <_printf_common+0x26>
 8005d46:	3301      	adds	r3, #1
 8005d48:	6033      	str	r3, [r6, #0]
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	0699      	lsls	r1, r3, #26
 8005d4e:	bf42      	ittt	mi
 8005d50:	6833      	ldrmi	r3, [r6, #0]
 8005d52:	3302      	addmi	r3, #2
 8005d54:	6033      	strmi	r3, [r6, #0]
 8005d56:	6825      	ldr	r5, [r4, #0]
 8005d58:	f015 0506 	ands.w	r5, r5, #6
 8005d5c:	d106      	bne.n	8005d6c <_printf_common+0x48>
 8005d5e:	f104 0a19 	add.w	sl, r4, #25
 8005d62:	68e3      	ldr	r3, [r4, #12]
 8005d64:	6832      	ldr	r2, [r6, #0]
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	42ab      	cmp	r3, r5
 8005d6a:	dc26      	bgt.n	8005dba <_printf_common+0x96>
 8005d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d70:	1e13      	subs	r3, r2, #0
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	bf18      	it	ne
 8005d76:	2301      	movne	r3, #1
 8005d78:	0692      	lsls	r2, r2, #26
 8005d7a:	d42b      	bmi.n	8005dd4 <_printf_common+0xb0>
 8005d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d80:	4649      	mov	r1, r9
 8005d82:	4638      	mov	r0, r7
 8005d84:	47c0      	blx	r8
 8005d86:	3001      	adds	r0, #1
 8005d88:	d01e      	beq.n	8005dc8 <_printf_common+0xa4>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	68e5      	ldr	r5, [r4, #12]
 8005d8e:	6832      	ldr	r2, [r6, #0]
 8005d90:	f003 0306 	and.w	r3, r3, #6
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	bf08      	it	eq
 8005d98:	1aad      	subeq	r5, r5, r2
 8005d9a:	68a3      	ldr	r3, [r4, #8]
 8005d9c:	6922      	ldr	r2, [r4, #16]
 8005d9e:	bf0c      	ite	eq
 8005da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005da4:	2500      	movne	r5, #0
 8005da6:	4293      	cmp	r3, r2
 8005da8:	bfc4      	itt	gt
 8005daa:	1a9b      	subgt	r3, r3, r2
 8005dac:	18ed      	addgt	r5, r5, r3
 8005dae:	2600      	movs	r6, #0
 8005db0:	341a      	adds	r4, #26
 8005db2:	42b5      	cmp	r5, r6
 8005db4:	d11a      	bne.n	8005dec <_printf_common+0xc8>
 8005db6:	2000      	movs	r0, #0
 8005db8:	e008      	b.n	8005dcc <_printf_common+0xa8>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4652      	mov	r2, sl
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	4638      	mov	r0, r7
 8005dc2:	47c0      	blx	r8
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d103      	bne.n	8005dd0 <_printf_common+0xac>
 8005dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd0:	3501      	adds	r5, #1
 8005dd2:	e7c6      	b.n	8005d62 <_printf_common+0x3e>
 8005dd4:	18e1      	adds	r1, r4, r3
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	2030      	movs	r0, #48	; 0x30
 8005dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dde:	4422      	add	r2, r4
 8005de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005de8:	3302      	adds	r3, #2
 8005dea:	e7c7      	b.n	8005d7c <_printf_common+0x58>
 8005dec:	2301      	movs	r3, #1
 8005dee:	4622      	mov	r2, r4
 8005df0:	4649      	mov	r1, r9
 8005df2:	4638      	mov	r0, r7
 8005df4:	47c0      	blx	r8
 8005df6:	3001      	adds	r0, #1
 8005df8:	d0e6      	beq.n	8005dc8 <_printf_common+0xa4>
 8005dfa:	3601      	adds	r6, #1
 8005dfc:	e7d9      	b.n	8005db2 <_printf_common+0x8e>
	...

08005e00 <_printf_i>:
 8005e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e04:	460c      	mov	r4, r1
 8005e06:	4691      	mov	r9, r2
 8005e08:	7e27      	ldrb	r7, [r4, #24]
 8005e0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e0c:	2f78      	cmp	r7, #120	; 0x78
 8005e0e:	4680      	mov	r8, r0
 8005e10:	469a      	mov	sl, r3
 8005e12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e16:	d807      	bhi.n	8005e28 <_printf_i+0x28>
 8005e18:	2f62      	cmp	r7, #98	; 0x62
 8005e1a:	d80a      	bhi.n	8005e32 <_printf_i+0x32>
 8005e1c:	2f00      	cmp	r7, #0
 8005e1e:	f000 80d8 	beq.w	8005fd2 <_printf_i+0x1d2>
 8005e22:	2f58      	cmp	r7, #88	; 0x58
 8005e24:	f000 80a3 	beq.w	8005f6e <_printf_i+0x16e>
 8005e28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e30:	e03a      	b.n	8005ea8 <_printf_i+0xa8>
 8005e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e36:	2b15      	cmp	r3, #21
 8005e38:	d8f6      	bhi.n	8005e28 <_printf_i+0x28>
 8005e3a:	a001      	add	r0, pc, #4	; (adr r0, 8005e40 <_printf_i+0x40>)
 8005e3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e40:	08005e99 	.word	0x08005e99
 8005e44:	08005ead 	.word	0x08005ead
 8005e48:	08005e29 	.word	0x08005e29
 8005e4c:	08005e29 	.word	0x08005e29
 8005e50:	08005e29 	.word	0x08005e29
 8005e54:	08005e29 	.word	0x08005e29
 8005e58:	08005ead 	.word	0x08005ead
 8005e5c:	08005e29 	.word	0x08005e29
 8005e60:	08005e29 	.word	0x08005e29
 8005e64:	08005e29 	.word	0x08005e29
 8005e68:	08005e29 	.word	0x08005e29
 8005e6c:	08005fb9 	.word	0x08005fb9
 8005e70:	08005edd 	.word	0x08005edd
 8005e74:	08005f9b 	.word	0x08005f9b
 8005e78:	08005e29 	.word	0x08005e29
 8005e7c:	08005e29 	.word	0x08005e29
 8005e80:	08005fdb 	.word	0x08005fdb
 8005e84:	08005e29 	.word	0x08005e29
 8005e88:	08005edd 	.word	0x08005edd
 8005e8c:	08005e29 	.word	0x08005e29
 8005e90:	08005e29 	.word	0x08005e29
 8005e94:	08005fa3 	.word	0x08005fa3
 8005e98:	680b      	ldr	r3, [r1, #0]
 8005e9a:	1d1a      	adds	r2, r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	600a      	str	r2, [r1, #0]
 8005ea0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e0a3      	b.n	8005ff4 <_printf_i+0x1f4>
 8005eac:	6825      	ldr	r5, [r4, #0]
 8005eae:	6808      	ldr	r0, [r1, #0]
 8005eb0:	062e      	lsls	r6, r5, #24
 8005eb2:	f100 0304 	add.w	r3, r0, #4
 8005eb6:	d50a      	bpl.n	8005ece <_printf_i+0xce>
 8005eb8:	6805      	ldr	r5, [r0, #0]
 8005eba:	600b      	str	r3, [r1, #0]
 8005ebc:	2d00      	cmp	r5, #0
 8005ebe:	da03      	bge.n	8005ec8 <_printf_i+0xc8>
 8005ec0:	232d      	movs	r3, #45	; 0x2d
 8005ec2:	426d      	negs	r5, r5
 8005ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec8:	485e      	ldr	r0, [pc, #376]	; (8006044 <_printf_i+0x244>)
 8005eca:	230a      	movs	r3, #10
 8005ecc:	e019      	b.n	8005f02 <_printf_i+0x102>
 8005ece:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ed2:	6805      	ldr	r5, [r0, #0]
 8005ed4:	600b      	str	r3, [r1, #0]
 8005ed6:	bf18      	it	ne
 8005ed8:	b22d      	sxthne	r5, r5
 8005eda:	e7ef      	b.n	8005ebc <_printf_i+0xbc>
 8005edc:	680b      	ldr	r3, [r1, #0]
 8005ede:	6825      	ldr	r5, [r4, #0]
 8005ee0:	1d18      	adds	r0, r3, #4
 8005ee2:	6008      	str	r0, [r1, #0]
 8005ee4:	0628      	lsls	r0, r5, #24
 8005ee6:	d501      	bpl.n	8005eec <_printf_i+0xec>
 8005ee8:	681d      	ldr	r5, [r3, #0]
 8005eea:	e002      	b.n	8005ef2 <_printf_i+0xf2>
 8005eec:	0669      	lsls	r1, r5, #25
 8005eee:	d5fb      	bpl.n	8005ee8 <_printf_i+0xe8>
 8005ef0:	881d      	ldrh	r5, [r3, #0]
 8005ef2:	4854      	ldr	r0, [pc, #336]	; (8006044 <_printf_i+0x244>)
 8005ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2308      	moveq	r3, #8
 8005efa:	230a      	movne	r3, #10
 8005efc:	2100      	movs	r1, #0
 8005efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f02:	6866      	ldr	r6, [r4, #4]
 8005f04:	60a6      	str	r6, [r4, #8]
 8005f06:	2e00      	cmp	r6, #0
 8005f08:	bfa2      	ittt	ge
 8005f0a:	6821      	ldrge	r1, [r4, #0]
 8005f0c:	f021 0104 	bicge.w	r1, r1, #4
 8005f10:	6021      	strge	r1, [r4, #0]
 8005f12:	b90d      	cbnz	r5, 8005f18 <_printf_i+0x118>
 8005f14:	2e00      	cmp	r6, #0
 8005f16:	d04d      	beq.n	8005fb4 <_printf_i+0x1b4>
 8005f18:	4616      	mov	r6, r2
 8005f1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f1e:	fb03 5711 	mls	r7, r3, r1, r5
 8005f22:	5dc7      	ldrb	r7, [r0, r7]
 8005f24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f28:	462f      	mov	r7, r5
 8005f2a:	42bb      	cmp	r3, r7
 8005f2c:	460d      	mov	r5, r1
 8005f2e:	d9f4      	bls.n	8005f1a <_printf_i+0x11a>
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d10b      	bne.n	8005f4c <_printf_i+0x14c>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	07df      	lsls	r7, r3, #31
 8005f38:	d508      	bpl.n	8005f4c <_printf_i+0x14c>
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	6861      	ldr	r1, [r4, #4]
 8005f3e:	4299      	cmp	r1, r3
 8005f40:	bfde      	ittt	le
 8005f42:	2330      	movle	r3, #48	; 0x30
 8005f44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f4c:	1b92      	subs	r2, r2, r6
 8005f4e:	6122      	str	r2, [r4, #16]
 8005f50:	f8cd a000 	str.w	sl, [sp]
 8005f54:	464b      	mov	r3, r9
 8005f56:	aa03      	add	r2, sp, #12
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	f7ff fee2 	bl	8005d24 <_printf_common>
 8005f60:	3001      	adds	r0, #1
 8005f62:	d14c      	bne.n	8005ffe <_printf_i+0x1fe>
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295
 8005f68:	b004      	add	sp, #16
 8005f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6e:	4835      	ldr	r0, [pc, #212]	; (8006044 <_printf_i+0x244>)
 8005f70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	680e      	ldr	r6, [r1, #0]
 8005f78:	061f      	lsls	r7, r3, #24
 8005f7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f7e:	600e      	str	r6, [r1, #0]
 8005f80:	d514      	bpl.n	8005fac <_printf_i+0x1ac>
 8005f82:	07d9      	lsls	r1, r3, #31
 8005f84:	bf44      	itt	mi
 8005f86:	f043 0320 	orrmi.w	r3, r3, #32
 8005f8a:	6023      	strmi	r3, [r4, #0]
 8005f8c:	b91d      	cbnz	r5, 8005f96 <_printf_i+0x196>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	f023 0320 	bic.w	r3, r3, #32
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	2310      	movs	r3, #16
 8005f98:	e7b0      	b.n	8005efc <_printf_i+0xfc>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	f043 0320 	orr.w	r3, r3, #32
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	2378      	movs	r3, #120	; 0x78
 8005fa4:	4828      	ldr	r0, [pc, #160]	; (8006048 <_printf_i+0x248>)
 8005fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005faa:	e7e3      	b.n	8005f74 <_printf_i+0x174>
 8005fac:	065e      	lsls	r6, r3, #25
 8005fae:	bf48      	it	mi
 8005fb0:	b2ad      	uxthmi	r5, r5
 8005fb2:	e7e6      	b.n	8005f82 <_printf_i+0x182>
 8005fb4:	4616      	mov	r6, r2
 8005fb6:	e7bb      	b.n	8005f30 <_printf_i+0x130>
 8005fb8:	680b      	ldr	r3, [r1, #0]
 8005fba:	6826      	ldr	r6, [r4, #0]
 8005fbc:	6960      	ldr	r0, [r4, #20]
 8005fbe:	1d1d      	adds	r5, r3, #4
 8005fc0:	600d      	str	r5, [r1, #0]
 8005fc2:	0635      	lsls	r5, r6, #24
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	d501      	bpl.n	8005fcc <_printf_i+0x1cc>
 8005fc8:	6018      	str	r0, [r3, #0]
 8005fca:	e002      	b.n	8005fd2 <_printf_i+0x1d2>
 8005fcc:	0671      	lsls	r1, r6, #25
 8005fce:	d5fb      	bpl.n	8005fc8 <_printf_i+0x1c8>
 8005fd0:	8018      	strh	r0, [r3, #0]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6123      	str	r3, [r4, #16]
 8005fd6:	4616      	mov	r6, r2
 8005fd8:	e7ba      	b.n	8005f50 <_printf_i+0x150>
 8005fda:	680b      	ldr	r3, [r1, #0]
 8005fdc:	1d1a      	adds	r2, r3, #4
 8005fde:	600a      	str	r2, [r1, #0]
 8005fe0:	681e      	ldr	r6, [r3, #0]
 8005fe2:	6862      	ldr	r2, [r4, #4]
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7fa f8f2 	bl	80001d0 <memchr>
 8005fec:	b108      	cbz	r0, 8005ff2 <_printf_i+0x1f2>
 8005fee:	1b80      	subs	r0, r0, r6
 8005ff0:	6060      	str	r0, [r4, #4]
 8005ff2:	6863      	ldr	r3, [r4, #4]
 8005ff4:	6123      	str	r3, [r4, #16]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ffc:	e7a8      	b.n	8005f50 <_printf_i+0x150>
 8005ffe:	6923      	ldr	r3, [r4, #16]
 8006000:	4632      	mov	r2, r6
 8006002:	4649      	mov	r1, r9
 8006004:	4640      	mov	r0, r8
 8006006:	47d0      	blx	sl
 8006008:	3001      	adds	r0, #1
 800600a:	d0ab      	beq.n	8005f64 <_printf_i+0x164>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	079b      	lsls	r3, r3, #30
 8006010:	d413      	bmi.n	800603a <_printf_i+0x23a>
 8006012:	68e0      	ldr	r0, [r4, #12]
 8006014:	9b03      	ldr	r3, [sp, #12]
 8006016:	4298      	cmp	r0, r3
 8006018:	bfb8      	it	lt
 800601a:	4618      	movlt	r0, r3
 800601c:	e7a4      	b.n	8005f68 <_printf_i+0x168>
 800601e:	2301      	movs	r3, #1
 8006020:	4632      	mov	r2, r6
 8006022:	4649      	mov	r1, r9
 8006024:	4640      	mov	r0, r8
 8006026:	47d0      	blx	sl
 8006028:	3001      	adds	r0, #1
 800602a:	d09b      	beq.n	8005f64 <_printf_i+0x164>
 800602c:	3501      	adds	r5, #1
 800602e:	68e3      	ldr	r3, [r4, #12]
 8006030:	9903      	ldr	r1, [sp, #12]
 8006032:	1a5b      	subs	r3, r3, r1
 8006034:	42ab      	cmp	r3, r5
 8006036:	dcf2      	bgt.n	800601e <_printf_i+0x21e>
 8006038:	e7eb      	b.n	8006012 <_printf_i+0x212>
 800603a:	2500      	movs	r5, #0
 800603c:	f104 0619 	add.w	r6, r4, #25
 8006040:	e7f5      	b.n	800602e <_printf_i+0x22e>
 8006042:	bf00      	nop
 8006044:	08006309 	.word	0x08006309
 8006048:	0800631a 	.word	0x0800631a

0800604c <memcpy>:
 800604c:	440a      	add	r2, r1
 800604e:	4291      	cmp	r1, r2
 8006050:	f100 33ff 	add.w	r3, r0, #4294967295
 8006054:	d100      	bne.n	8006058 <memcpy+0xc>
 8006056:	4770      	bx	lr
 8006058:	b510      	push	{r4, lr}
 800605a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006062:	4291      	cmp	r1, r2
 8006064:	d1f9      	bne.n	800605a <memcpy+0xe>
 8006066:	bd10      	pop	{r4, pc}

08006068 <memmove>:
 8006068:	4288      	cmp	r0, r1
 800606a:	b510      	push	{r4, lr}
 800606c:	eb01 0402 	add.w	r4, r1, r2
 8006070:	d902      	bls.n	8006078 <memmove+0x10>
 8006072:	4284      	cmp	r4, r0
 8006074:	4623      	mov	r3, r4
 8006076:	d807      	bhi.n	8006088 <memmove+0x20>
 8006078:	1e43      	subs	r3, r0, #1
 800607a:	42a1      	cmp	r1, r4
 800607c:	d008      	beq.n	8006090 <memmove+0x28>
 800607e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006086:	e7f8      	b.n	800607a <memmove+0x12>
 8006088:	4402      	add	r2, r0
 800608a:	4601      	mov	r1, r0
 800608c:	428a      	cmp	r2, r1
 800608e:	d100      	bne.n	8006092 <memmove+0x2a>
 8006090:	bd10      	pop	{r4, pc}
 8006092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800609a:	e7f7      	b.n	800608c <memmove+0x24>

0800609c <_free_r>:
 800609c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800609e:	2900      	cmp	r1, #0
 80060a0:	d048      	beq.n	8006134 <_free_r+0x98>
 80060a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060a6:	9001      	str	r0, [sp, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f1a1 0404 	sub.w	r4, r1, #4
 80060ae:	bfb8      	it	lt
 80060b0:	18e4      	addlt	r4, r4, r3
 80060b2:	f000 f8d3 	bl	800625c <__malloc_lock>
 80060b6:	4a20      	ldr	r2, [pc, #128]	; (8006138 <_free_r+0x9c>)
 80060b8:	9801      	ldr	r0, [sp, #4]
 80060ba:	6813      	ldr	r3, [r2, #0]
 80060bc:	4615      	mov	r5, r2
 80060be:	b933      	cbnz	r3, 80060ce <_free_r+0x32>
 80060c0:	6063      	str	r3, [r4, #4]
 80060c2:	6014      	str	r4, [r2, #0]
 80060c4:	b003      	add	sp, #12
 80060c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060ca:	f000 b8cd 	b.w	8006268 <__malloc_unlock>
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	d90b      	bls.n	80060ea <_free_r+0x4e>
 80060d2:	6821      	ldr	r1, [r4, #0]
 80060d4:	1862      	adds	r2, r4, r1
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bf04      	itt	eq
 80060da:	681a      	ldreq	r2, [r3, #0]
 80060dc:	685b      	ldreq	r3, [r3, #4]
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	bf04      	itt	eq
 80060e2:	1852      	addeq	r2, r2, r1
 80060e4:	6022      	streq	r2, [r4, #0]
 80060e6:	602c      	str	r4, [r5, #0]
 80060e8:	e7ec      	b.n	80060c4 <_free_r+0x28>
 80060ea:	461a      	mov	r2, r3
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	b10b      	cbz	r3, 80060f4 <_free_r+0x58>
 80060f0:	42a3      	cmp	r3, r4
 80060f2:	d9fa      	bls.n	80060ea <_free_r+0x4e>
 80060f4:	6811      	ldr	r1, [r2, #0]
 80060f6:	1855      	adds	r5, r2, r1
 80060f8:	42a5      	cmp	r5, r4
 80060fa:	d10b      	bne.n	8006114 <_free_r+0x78>
 80060fc:	6824      	ldr	r4, [r4, #0]
 80060fe:	4421      	add	r1, r4
 8006100:	1854      	adds	r4, r2, r1
 8006102:	42a3      	cmp	r3, r4
 8006104:	6011      	str	r1, [r2, #0]
 8006106:	d1dd      	bne.n	80060c4 <_free_r+0x28>
 8006108:	681c      	ldr	r4, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	6053      	str	r3, [r2, #4]
 800610e:	4421      	add	r1, r4
 8006110:	6011      	str	r1, [r2, #0]
 8006112:	e7d7      	b.n	80060c4 <_free_r+0x28>
 8006114:	d902      	bls.n	800611c <_free_r+0x80>
 8006116:	230c      	movs	r3, #12
 8006118:	6003      	str	r3, [r0, #0]
 800611a:	e7d3      	b.n	80060c4 <_free_r+0x28>
 800611c:	6825      	ldr	r5, [r4, #0]
 800611e:	1961      	adds	r1, r4, r5
 8006120:	428b      	cmp	r3, r1
 8006122:	bf04      	itt	eq
 8006124:	6819      	ldreq	r1, [r3, #0]
 8006126:	685b      	ldreq	r3, [r3, #4]
 8006128:	6063      	str	r3, [r4, #4]
 800612a:	bf04      	itt	eq
 800612c:	1949      	addeq	r1, r1, r5
 800612e:	6021      	streq	r1, [r4, #0]
 8006130:	6054      	str	r4, [r2, #4]
 8006132:	e7c7      	b.n	80060c4 <_free_r+0x28>
 8006134:	b003      	add	sp, #12
 8006136:	bd30      	pop	{r4, r5, pc}
 8006138:	200000a0 	.word	0x200000a0

0800613c <_malloc_r>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	1ccd      	adds	r5, r1, #3
 8006140:	f025 0503 	bic.w	r5, r5, #3
 8006144:	3508      	adds	r5, #8
 8006146:	2d0c      	cmp	r5, #12
 8006148:	bf38      	it	cc
 800614a:	250c      	movcc	r5, #12
 800614c:	2d00      	cmp	r5, #0
 800614e:	4606      	mov	r6, r0
 8006150:	db01      	blt.n	8006156 <_malloc_r+0x1a>
 8006152:	42a9      	cmp	r1, r5
 8006154:	d903      	bls.n	800615e <_malloc_r+0x22>
 8006156:	230c      	movs	r3, #12
 8006158:	6033      	str	r3, [r6, #0]
 800615a:	2000      	movs	r0, #0
 800615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800615e:	f000 f87d 	bl	800625c <__malloc_lock>
 8006162:	4921      	ldr	r1, [pc, #132]	; (80061e8 <_malloc_r+0xac>)
 8006164:	680a      	ldr	r2, [r1, #0]
 8006166:	4614      	mov	r4, r2
 8006168:	b99c      	cbnz	r4, 8006192 <_malloc_r+0x56>
 800616a:	4f20      	ldr	r7, [pc, #128]	; (80061ec <_malloc_r+0xb0>)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	b923      	cbnz	r3, 800617a <_malloc_r+0x3e>
 8006170:	4621      	mov	r1, r4
 8006172:	4630      	mov	r0, r6
 8006174:	f000 f862 	bl	800623c <_sbrk_r>
 8006178:	6038      	str	r0, [r7, #0]
 800617a:	4629      	mov	r1, r5
 800617c:	4630      	mov	r0, r6
 800617e:	f000 f85d 	bl	800623c <_sbrk_r>
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	d123      	bne.n	80061ce <_malloc_r+0x92>
 8006186:	230c      	movs	r3, #12
 8006188:	6033      	str	r3, [r6, #0]
 800618a:	4630      	mov	r0, r6
 800618c:	f000 f86c 	bl	8006268 <__malloc_unlock>
 8006190:	e7e3      	b.n	800615a <_malloc_r+0x1e>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	1b5b      	subs	r3, r3, r5
 8006196:	d417      	bmi.n	80061c8 <_malloc_r+0x8c>
 8006198:	2b0b      	cmp	r3, #11
 800619a:	d903      	bls.n	80061a4 <_malloc_r+0x68>
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	441c      	add	r4, r3
 80061a0:	6025      	str	r5, [r4, #0]
 80061a2:	e004      	b.n	80061ae <_malloc_r+0x72>
 80061a4:	6863      	ldr	r3, [r4, #4]
 80061a6:	42a2      	cmp	r2, r4
 80061a8:	bf0c      	ite	eq
 80061aa:	600b      	streq	r3, [r1, #0]
 80061ac:	6053      	strne	r3, [r2, #4]
 80061ae:	4630      	mov	r0, r6
 80061b0:	f000 f85a 	bl	8006268 <__malloc_unlock>
 80061b4:	f104 000b 	add.w	r0, r4, #11
 80061b8:	1d23      	adds	r3, r4, #4
 80061ba:	f020 0007 	bic.w	r0, r0, #7
 80061be:	1ac2      	subs	r2, r0, r3
 80061c0:	d0cc      	beq.n	800615c <_malloc_r+0x20>
 80061c2:	1a1b      	subs	r3, r3, r0
 80061c4:	50a3      	str	r3, [r4, r2]
 80061c6:	e7c9      	b.n	800615c <_malloc_r+0x20>
 80061c8:	4622      	mov	r2, r4
 80061ca:	6864      	ldr	r4, [r4, #4]
 80061cc:	e7cc      	b.n	8006168 <_malloc_r+0x2c>
 80061ce:	1cc4      	adds	r4, r0, #3
 80061d0:	f024 0403 	bic.w	r4, r4, #3
 80061d4:	42a0      	cmp	r0, r4
 80061d6:	d0e3      	beq.n	80061a0 <_malloc_r+0x64>
 80061d8:	1a21      	subs	r1, r4, r0
 80061da:	4630      	mov	r0, r6
 80061dc:	f000 f82e 	bl	800623c <_sbrk_r>
 80061e0:	3001      	adds	r0, #1
 80061e2:	d1dd      	bne.n	80061a0 <_malloc_r+0x64>
 80061e4:	e7cf      	b.n	8006186 <_malloc_r+0x4a>
 80061e6:	bf00      	nop
 80061e8:	200000a0 	.word	0x200000a0
 80061ec:	200000a4 	.word	0x200000a4

080061f0 <_realloc_r>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	4607      	mov	r7, r0
 80061f4:	4614      	mov	r4, r2
 80061f6:	460e      	mov	r6, r1
 80061f8:	b921      	cbnz	r1, 8006204 <_realloc_r+0x14>
 80061fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80061fe:	4611      	mov	r1, r2
 8006200:	f7ff bf9c 	b.w	800613c <_malloc_r>
 8006204:	b922      	cbnz	r2, 8006210 <_realloc_r+0x20>
 8006206:	f7ff ff49 	bl	800609c <_free_r>
 800620a:	4625      	mov	r5, r4
 800620c:	4628      	mov	r0, r5
 800620e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006210:	f000 f830 	bl	8006274 <_malloc_usable_size_r>
 8006214:	42a0      	cmp	r0, r4
 8006216:	d20f      	bcs.n	8006238 <_realloc_r+0x48>
 8006218:	4621      	mov	r1, r4
 800621a:	4638      	mov	r0, r7
 800621c:	f7ff ff8e 	bl	800613c <_malloc_r>
 8006220:	4605      	mov	r5, r0
 8006222:	2800      	cmp	r0, #0
 8006224:	d0f2      	beq.n	800620c <_realloc_r+0x1c>
 8006226:	4631      	mov	r1, r6
 8006228:	4622      	mov	r2, r4
 800622a:	f7ff ff0f 	bl	800604c <memcpy>
 800622e:	4631      	mov	r1, r6
 8006230:	4638      	mov	r0, r7
 8006232:	f7ff ff33 	bl	800609c <_free_r>
 8006236:	e7e9      	b.n	800620c <_realloc_r+0x1c>
 8006238:	4635      	mov	r5, r6
 800623a:	e7e7      	b.n	800620c <_realloc_r+0x1c>

0800623c <_sbrk_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4d06      	ldr	r5, [pc, #24]	; (8006258 <_sbrk_r+0x1c>)
 8006240:	2300      	movs	r3, #0
 8006242:	4604      	mov	r4, r0
 8006244:	4608      	mov	r0, r1
 8006246:	602b      	str	r3, [r5, #0]
 8006248:	f7fa fe04 	bl	8000e54 <_sbrk>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d102      	bne.n	8006256 <_sbrk_r+0x1a>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	b103      	cbz	r3, 8006256 <_sbrk_r+0x1a>
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	bd38      	pop	{r3, r4, r5, pc}
 8006258:	200081f8 	.word	0x200081f8

0800625c <__malloc_lock>:
 800625c:	4801      	ldr	r0, [pc, #4]	; (8006264 <__malloc_lock+0x8>)
 800625e:	f000 b811 	b.w	8006284 <__retarget_lock_acquire_recursive>
 8006262:	bf00      	nop
 8006264:	20008200 	.word	0x20008200

08006268 <__malloc_unlock>:
 8006268:	4801      	ldr	r0, [pc, #4]	; (8006270 <__malloc_unlock+0x8>)
 800626a:	f000 b80c 	b.w	8006286 <__retarget_lock_release_recursive>
 800626e:	bf00      	nop
 8006270:	20008200 	.word	0x20008200

08006274 <_malloc_usable_size_r>:
 8006274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006278:	1f18      	subs	r0, r3, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	bfbc      	itt	lt
 800627e:	580b      	ldrlt	r3, [r1, r0]
 8006280:	18c0      	addlt	r0, r0, r3
 8006282:	4770      	bx	lr

08006284 <__retarget_lock_acquire_recursive>:
 8006284:	4770      	bx	lr

08006286 <__retarget_lock_release_recursive>:
 8006286:	4770      	bx	lr

08006288 <_init>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	bf00      	nop
 800628c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628e:	bc08      	pop	{r3}
 8006290:	469e      	mov	lr, r3
 8006292:	4770      	bx	lr

08006294 <_fini>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	bf00      	nop
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr
