
p3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007884  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08007a14  08007a14  00017a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ca4  08007ca4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ca4  08007ca4  00017ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cac  08007cac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cac  08007cac  00017cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb0  08007cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ac0  20000074  08007d28  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b34  08007d28  00022b34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002119a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c9d  00000000  00000000  0004123e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00044ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a743  00000000  00000000  00046608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019bd5  00000000  00000000  00070d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fed85  00000000  00000000  0008a920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001896a5  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000015c8  00000000  00000000  001896f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bc8  00000000  00000000  0018acc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00191888  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00191954  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079fc 	.word	0x080079fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080079fc 	.word	0x080079fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fb9b 	bl	8000ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f81e 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f8ac 	bl	80006d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f87a 	bl	8000670 <MX_USART2_UART_Init>
  MX_RNG_Init();
 800057c:	f000 f864 	bl	8000648 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000580:	f003 f93a 	bl	80037f8 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000584:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <main+0x3c>)
 8000586:	2100      	movs	r1, #0
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <main+0x40>)
 800058a:	f003 f97f 	bl	800388c <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <main+0x44>)
 8000592:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  teller_task_init(NUM_TELLERS); //creates 3 bank tellers and asigns their tasks
 8000594:	2003      	movs	r0, #3
 8000596:	f000 fa43 	bl	8000a20 <teller_task_init>
  customer_queue_init(); //initialize the customer data and prepare for thread sharing
 800059a:	f000 fa91 	bl	8000ac0 <customer_queue_init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800059e:	f003 f94f 	bl	8003840 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <main+0x3a>
 80005a4:	08007ac4 	.word	0x08007ac4
 80005a8:	08000701 	.word	0x08000701
 80005ac:	20002a48 	.word	0x20002a48

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	; 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f006 fa7f 	bl	8006ac2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f000 fe39 	bl	800124c <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 f8a8 	bl	8000734 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80005e4:	2312      	movs	r3, #18
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f2:	2301      	movs	r3, #1
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005fa:	2360      	movs	r3, #96	; 0x60
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fe:	2300      	movs	r3, #0
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fe76 	bl	80012f8 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000612:	f000 f88f 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800061a:	2301      	movs	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fa48 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800063a:	f000 f87b 	bl	8000734 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3758      	adds	r7, #88	; 0x58
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_RNG_Init+0x20>)
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <MX_RNG_Init+0x24>)
 8000650:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_RNG_Init+0x20>)
 8000654:	f002 f92a 	bl	80028ac <HAL_RNG_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800065e:	f000 f869 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20002a4c 	.word	0x20002a4c
 800066c:	50060800 	.word	0x50060800

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <MX_USART2_UART_Init+0x5c>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_USART2_UART_Init+0x58>)
 80006b4:	f002 fc1c 	bl	8002ef0 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 f839 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200029c4 	.word	0x200029c4
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_GPIO_Init+0x2c>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <MX_GPIO_Init+0x2c>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_GPIO_Init+0x2c>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f003 f951 	bl	80039b0 <osDelay>
 800070e:	e7fb      	b.n	8000708 <StartDefaultTask+0x8>

08000710 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d101      	bne.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000722:	f000 fad9 	bl	8000cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40012c00 	.word	0x40012c00

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_MspInit+0x4c>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	4a10      	ldr	r2, [pc, #64]	; (800078c <HAL_MspInit+0x4c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6613      	str	r3, [r2, #96]	; 0x60
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_MspInit+0x4c>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_MspInit+0x4c>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_MspInit+0x4c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	6593      	str	r3, [r2, #88]	; 0x58
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_MspInit+0x4c>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	f06f 0001 	mvn.w	r0, #1
 800077e:	f000 fb83 	bl	8000e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b0a6      	sub	sp, #152	; 0x98
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	2288      	movs	r2, #136	; 0x88
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f006 f98e 	bl	8006ac2 <memset>
  if(hrng->Instance==RNG)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a19      	ldr	r2, [pc, #100]	; (8000810 <HAL_RNG_MspInit+0x80>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d12b      	bne.n	8000808 <HAL_RNG_MspInit+0x78>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80007b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80007b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80007c6:	2310      	movs	r3, #16
 80007c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007ca:	2307      	movs	r3, #7
 80007cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80007d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fba7 	bl	8001f34 <HAL_RCCEx_PeriphCLKConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 80007ec:	f7ff ffa2 	bl	8000734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_RNG_MspInit+0x84>)
 80007f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_RNG_MspInit+0x84>)
 80007f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_RNG_MspInit+0x84>)
 80007fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3798      	adds	r7, #152	; 0x98
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	50060800 	.word	0x50060800
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0ac      	sub	sp, #176	; 0xb0
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2288      	movs	r2, #136	; 0x88
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f006 f942 	bl	8006ac2 <memset>
  if(huart->Instance==USART2)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a21      	ldr	r2, [pc, #132]	; (80008c8 <HAL_UART_MspInit+0xb0>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d13b      	bne.n	80008c0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000848:	2302      	movs	r3, #2
 800084a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800084c:	2300      	movs	r3, #0
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fb6d 	bl	8001f34 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000860:	f7ff ff68 	bl	8000734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <HAL_UART_MspInit+0xb4>)
 8000866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000868:	4a18      	ldr	r2, [pc, #96]	; (80008cc <HAL_UART_MspInit+0xb4>)
 800086a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086e:	6593      	str	r3, [r2, #88]	; 0x58
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_UART_MspInit+0xb4>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <HAL_UART_MspInit+0xb4>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <HAL_UART_MspInit+0xb4>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_UART_MspInit+0xb4>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000894:	230c      	movs	r3, #12
 8000896:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ac:	2307      	movs	r3, #7
 80008ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 fb0e 	bl	8000edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	37b0      	adds	r7, #176	; 0xb0
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40004400 	.word	0x40004400
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	2019      	movs	r0, #25
 80008e6:	f000 facf 	bl	8000e88 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008ea:	2019      	movs	r0, #25
 80008ec:	f000 fae8 	bl	8000ec0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008f0:	4b1e      	ldr	r3, [pc, #120]	; (800096c <HAL_InitTick+0x9c>)
 80008f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <HAL_InitTick+0x9c>)
 80008f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008fa:	6613      	str	r3, [r2, #96]	; 0x60
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <HAL_InitTick+0x9c>)
 80008fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000908:	f107 0210 	add.w	r2, r7, #16
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fa7c 	bl	8001e10 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000918:	f001 fa64 	bl	8001de4 <HAL_RCC_GetPCLK2Freq>
 800091c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <HAL_InitTick+0xa0>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	0c9b      	lsrs	r3, r3, #18
 8000928:	3b01      	subs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_InitTick+0xa4>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <HAL_InitTick+0xa8>)
 8000930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_InitTick+0xa4>)
 8000934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000938:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_InitTick+0xa4>)
 800093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_InitTick+0xa4>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_InitTick+0xa4>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <HAL_InitTick+0xa4>)
 800094e:	f001 fffd 	bl	800294c <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d104      	bne.n	8000962 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <HAL_InitTick+0xa4>)
 800095a:	f002 f859 	bl	8002a10 <HAL_TIM_Base_Start_IT>
 800095e:	4603      	mov	r3, r0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40021000 	.word	0x40021000
 8000970:	431bde83 	.word	0x431bde83
 8000974:	20002a5c 	.word	0x20002a5c
 8000978:	40012c00 	.word	0x40012c00

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009ae:	f002 f89f 	bl	8002af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20002a5c 	.word	0x20002a5c

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <SystemInit+0x5c>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <SystemInit+0x5c>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <SystemInit+0x60>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <SystemInit+0x60>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <SystemInit+0x60>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <SystemInit+0x60>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <SystemInit+0x60>)
 80009e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <SystemInit+0x60>)
 80009f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <SystemInit+0x60>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <SystemInit+0x60>)
 8000a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <SystemInit+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	40021000 	.word	0x40021000

08000a20 <teller_task_init>:
static void customer_task(void* param);

/**
 * This public method creates a number of teller tasks
 */
int teller_task_init(int num_tellers) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
	for(int ii=0; ii<num_tellers; ii++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e032      	b.n	8000a94 <teller_task_init+0x74>
		TELLER_t *t = &tellers[ii];
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <teller_task_init+0x88>)
 8000a3a:	4413      	add	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
		t->available = xSemaphoreCreateMutex();
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f003 fa11 	bl	8003e66 <xQueueCreateMutex>
 8000a44:	4602      	mov	r2, r0
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	609a      	str	r2, [r3, #8]
		memset(t, 0, sizeof(TELLER_t));
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	6938      	ldr	r0, [r7, #16]
 8000a50:	f006 f837 	bl	8006ac2 <memset>
		t->instance = ii;
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	601a      	str	r2, [r3, #0]
		BaseType_t err = xTaskCreate(teller_task, "TellerTask", 128, &tellers[ii], 12, NULL);
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <teller_task_init+0x88>)
 8000a66:	4413      	add	r3, r2
 8000a68:	2200      	movs	r2, #0
 8000a6a:	9201      	str	r2, [sp, #4]
 8000a6c:	220c      	movs	r2, #12
 8000a6e:	9200      	str	r2, [sp, #0]
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <teller_task_init+0x8c>)
 8000a74:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <teller_task_init+0x90>)
 8000a76:	f003 ff78 	bl	800496a <xTaskCreate>
 8000a7a:	60f8      	str	r0, [r7, #12]
		assert(err == pdPASS);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d005      	beq.n	8000a8e <teller_task_init+0x6e>
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <teller_task_init+0x94>)
 8000a84:	4a0c      	ldr	r2, [pc, #48]	; (8000ab8 <teller_task_init+0x98>)
 8000a86:	211b      	movs	r1, #27
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <teller_task_init+0x9c>)
 8000a8a:	f005 febf 	bl	800680c <__assert_func>
	for(int ii=0; ii<num_tellers; ii++) {
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbc8      	blt.n	8000a2e <teller_task_init+0xe>
	}
	return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20002abc 	.word	0x20002abc
 8000aac:	08007a48 	.word	0x08007a48
 8000ab0:	08000b49 	.word	0x08000b49
 8000ab4:	08007a54 	.word	0x08007a54
 8000ab8:	08007b30 	.word	0x08007b30
 8000abc:	08007a64 	.word	0x08007a64

08000ac0 <customer_queue_init>:

int customer_queue_init(void){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af02      	add	r7, sp, #8
	  customers.mutex = xSemaphoreCreateMutex(); //creates mutex to handle queue data
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f003 f9cd 	bl	8003e66 <xQueueCreateMutex>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <customer_queue_init+0x70>)
 8000ad0:	6093      	str	r3, [r2, #8]
	  xSemaphoreTake(customers.mutex, (TickType_t) 10);
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <customer_queue_init+0x70>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	210a      	movs	r1, #10
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fc57 	bl	800438c <xQueueSemaphoreTake>
	  customers.queue = xQueueCreate(25, sizeof(CUSTOMER_t)); //creates the space in memory for the queue
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	2019      	movs	r0, #25
 8000ae4:	f003 f948 	bl	8003d78 <xQueueGenericCreate>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <customer_queue_init+0x70>)
 8000aec:	60d3      	str	r3, [r2, #12]
	  xSemaphoreGive(customers.mutex);
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <customer_queue_init+0x70>)
 8000af0:	6898      	ldr	r0, [r3, #8]
 8000af2:	2300      	movs	r3, #0
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	f003 f9ce 	bl	8003e98 <xQueueGenericSend>
	  BaseType_t err = xTaskCreate(customer_task, "CustomerTask", 128, &customers, 12, NULL);
 8000afc:	2300      	movs	r3, #0
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	230c      	movs	r3, #12
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <customer_queue_init+0x70>)
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	490a      	ldr	r1, [pc, #40]	; (8000b34 <customer_queue_init+0x74>)
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <customer_queue_init+0x78>)
 8000b0c:	f003 ff2d 	bl	800496a <xTaskCreate>
 8000b10:	6078      	str	r0, [r7, #4]
	  assert(err == pdPASS);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d005      	beq.n	8000b24 <customer_queue_init+0x64>
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <customer_queue_init+0x7c>)
 8000b1a:	4a09      	ldr	r2, [pc, #36]	; (8000b40 <customer_queue_init+0x80>)
 8000b1c:	2126      	movs	r1, #38	; 0x26
 8000b1e:	4809      	ldr	r0, [pc, #36]	; (8000b44 <customer_queue_init+0x84>)
 8000b20:	f005 fe74 	bl	800680c <__assert_func>
}
 8000b24:	bf00      	nop
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20002aa8 	.word	0x20002aa8
 8000b34:	08007a80 	.word	0x08007a80
 8000b38:	08000bb5 	.word	0x08000bb5
 8000b3c:	08007a54 	.word	0x08007a54
 8000b40:	08007b44 	.word	0x08007b44
 8000b44:	08007a64 	.word	0x08007a64

08000b48 <teller_task>:

/**/
static void teller_task(void *param) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	TELLER_t *t = (TELLER_t *)param;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	617b      	str	r3, [r7, #20]
	int instance = t->instance+1;	// which teller am I?  1, 2, or 3?
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]

	char *nl = "";
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <teller_task+0x64>)
 8000b5e:	60fb      	str	r3, [r7, #12]
	if(instance==1)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d101      	bne.n	8000b6a <teller_task+0x22>
		nl = "\r\n";				// newline if instance == 1
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <teller_task+0x68>)
 8000b68:	60fb      	str	r3, [r7, #12]

	while(1) {
		vTaskDelay(instance*1000);
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 f853 	bl	8004c20 <vTaskDelay>
		BaseType_t pd = xSemaphoreTake(t->available, (TickType_t) 10);
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	210a      	movs	r1, #10
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fc03 	bl	800438c <xQueueSemaphoreTake>
 8000b86:	60b8      	str	r0, [r7, #8]
		if(pd == pdPASS){
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d1ed      	bne.n	8000b6a <teller_task+0x22>
			help_customer();
 8000b8e:	f000 f83d 	bl	8000c0c <help_customer>
			t->customers_served += 1;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	605a      	str	r2, [r3, #4]
			xSemaphoreGive(t->available);
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	6898      	ldr	r0, [r3, #8]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	f003 f977 	bl	8003e98 <xQueueGenericSend>
	while(1) {
 8000baa:	e7de      	b.n	8000b6a <teller_task+0x22>
 8000bac:	08007a90 	.word	0x08007a90
 8000bb0:	08007a94 	.word	0x08007a94

08000bb4 <customer_task>:

		//mutex_sprintf(nl, t->instance, t->customers_served);
	}
}

static void customer_task(void* params){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	while(1){
		customer_queue* p = (customer_queue *)params;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	617b      	str	r3, [r7, #20]
		vTaskDelay(rand()*1000);
 8000bc0:	f006 fad0 	bl	8007164 <rand>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 f826 	bl	8004c20 <vTaskDelay>
		CUSTOMER_t c;
		xQueueSendToBack(p->queue, &c, (TickType_t) 10);
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	68d8      	ldr	r0, [r3, #12]
 8000bd8:	f107 010c 	add.w	r1, r7, #12
 8000bdc:	2300      	movs	r3, #0
 8000bde:	220a      	movs	r2, #10
 8000be0:	f003 f95a 	bl	8003e98 <xQueueGenericSend>
		xSemaphoreTake(p->mutex, (TickType_t) 10);
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	210a      	movs	r1, #10
 8000bea:	4618      	mov	r0, r3
 8000bec:	f003 fbce 	bl	800438c <xQueueSemaphoreTake>
		p->len += 1;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	601a      	str	r2, [r3, #0]
		xSemaphoreGive(p->mutex);
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	6898      	ldr	r0, [r3, #8]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	f003 f948 	bl	8003e98 <xQueueGenericSend>
	while(1){
 8000c08:	e7d8      	b.n	8000bbc <customer_task+0x8>
	...

08000c0c <help_customer>:
	}
}

int help_customer(){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
	CUSTOMER_t c;
	xQueueReceive(customers.queue, &c, (TickType_t) 10);
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <help_customer+0x44>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	4639      	mov	r1, r7
 8000c18:	220a      	movs	r2, #10
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 fad6 	bl	80041cc <xQueueReceive>
	xSemaphoreTake(customers.mutex, (TickType_t) 10);
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <help_customer+0x44>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	210a      	movs	r1, #10
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fbb0 	bl	800438c <xQueueSemaphoreTake>
	customers.len -= 1;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <help_customer+0x44>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <help_customer+0x44>)
 8000c34:	6013      	str	r3, [r2, #0]
	xSemaphoreGive(customers.mutex);
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <help_customer+0x44>)
 8000c38:	6898      	ldr	r0, [r3, #8]
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f003 f92a 	bl	8003e98 <xQueueGenericSend>
	return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20002aa8 	.word	0x20002aa8

08000c54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c58:	f7ff feb0 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c5e:	e003      	b.n	8000c68 <LoopCopyDataInit>

08000c60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c66:	3104      	adds	r1, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c68:	480a      	ldr	r0, [pc, #40]	; (8000c94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c70:	d3f6      	bcc.n	8000c60 <CopyDataInit>
	ldr	r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c74:	e002      	b.n	8000c7c <LoopFillZerobss>

08000c76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c78:	f842 3b04 	str.w	r3, [r2], #4

08000c7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <LoopForever+0x16>)
	cmp	r2, r3
 8000c7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c80:	d3f9      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c82:	f005 fee9 	bl	8006a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c86:	f7ff fc6f 	bl	8000568 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c90:	08007cb4 	.word	0x08007cb4
	ldr	r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c98:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000c9c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000ca0:	20002b34 	.word	0x20002b34

08000ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC1_2_IRQHandler>

08000ca6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f8de 	bl	8000e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f7ff fe0a 	bl	80008d0 <HAL_InitTick>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	71fb      	strb	r3, [r7, #7]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc8:	f7ff fd3a 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20002ae0 	.word	0x20002ae0

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20002ae0 	.word	0x20002ae0

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff4c 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9a:	f7ff ff61 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000e9e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	6978      	ldr	r0, [r7, #20]
 8000ea6:	f7ff ffb1 	bl	8000e0c <NVIC_EncodePriority>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff80 	bl	8000db8 <__NVIC_SetPriority>
}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff54 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	e17f      	b.n	80011ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8171 	beq.w	80011e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d00b      	beq.n	8000f24 <HAL_GPIO_Init+0x48>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d007      	beq.n	8000f24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f18:	2b11      	cmp	r3, #17
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b12      	cmp	r3, #18
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 0201 	and.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d118      	bne.n	8000fc4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x128>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b12      	cmp	r3, #18
 8001002:	d123      	bne.n	800104c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	6939      	ldr	r1, [r7, #16]
 8001048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0203 	and.w	r2, r3, #3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80ac 	beq.w	80011e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b5f      	ldr	r3, [pc, #380]	; (800120c <HAL_GPIO_Init+0x330>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	4a5e      	ldr	r2, [pc, #376]	; (800120c <HAL_GPIO_Init+0x330>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6613      	str	r3, [r2, #96]	; 0x60
 800109a:	4b5c      	ldr	r3, [pc, #368]	; (800120c <HAL_GPIO_Init+0x330>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010a6:	4a5a      	ldr	r2, [pc, #360]	; (8001210 <HAL_GPIO_Init+0x334>)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x242>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4f      	ldr	r2, [pc, #316]	; (8001214 <HAL_GPIO_Init+0x338>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x23e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <HAL_GPIO_Init+0x33c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x23a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4d      	ldr	r2, [pc, #308]	; (800121c <HAL_GPIO_Init+0x340>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x236>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <HAL_GPIO_Init+0x344>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x232>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4b      	ldr	r2, [pc, #300]	; (8001224 <HAL_GPIO_Init+0x348>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x22e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4a      	ldr	r2, [pc, #296]	; (8001228 <HAL_GPIO_Init+0x34c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x22a>
 8001102:	2306      	movs	r3, #6
 8001104:	e00c      	b.n	8001120 <HAL_GPIO_Init+0x244>
 8001106:	2307      	movs	r3, #7
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x244>
 800110a:	2305      	movs	r3, #5
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x244>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x244>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x244>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x244>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x244>
 800111e:	2300      	movs	r3, #0
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001130:	4937      	ldr	r1, [pc, #220]	; (8001210 <HAL_GPIO_Init+0x334>)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_GPIO_Init+0x350>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <HAL_GPIO_Init+0x350>)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_GPIO_Init+0x350>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <HAL_GPIO_Init+0x350>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_GPIO_Init+0x350>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_GPIO_Init+0x350>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_GPIO_Init+0x350>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <HAL_GPIO_Init+0x350>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f47f ae78 	bne.w	8000eec <HAL_GPIO_Init+0x10>
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000
 8001214:	48000400 	.word	0x48000400
 8001218:	48000800 	.word	0x48000800
 800121c:	48000c00 	.word	0x48000c00
 8001220:	48001000 	.word	0x48001000
 8001224:	48001400 	.word	0x48001400
 8001228:	48001800 	.word	0x48001800
 800122c:	40010400 	.word	0x40010400

08001230 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_PWREx_GetVoltageRange+0x18>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40007000 	.word	0x40007000

0800124c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125a:	d130      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001268:	d038      	beq.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001274:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001278:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2232      	movs	r2, #50	; 0x32
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0c9b      	lsrs	r3, r3, #18
 800128c:	3301      	adds	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001290:	e002      	b.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3b01      	subs	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a4:	d102      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f2      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b8:	d110      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e00f      	b.n	80012de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ca:	d007      	beq.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012d4:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40007000 	.word	0x40007000
 80012f0:	20000000 	.word	0x20000000
 80012f4:	431bde83 	.word	0x431bde83

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e3d4      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800130a:	4ba1      	ldr	r3, [pc, #644]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001314:	4b9e      	ldr	r3, [pc, #632]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80e4 	beq.w	80014f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_RCC_OscConfig+0x4a>
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b0c      	cmp	r3, #12
 8001336:	f040 808b 	bne.w	8001450 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2b01      	cmp	r3, #1
 800133e:	f040 8087 	bne.w	8001450 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001342:	4b93      	ldr	r3, [pc, #588]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <HAL_RCC_OscConfig+0x62>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e3ac      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <HAL_RCC_OscConfig+0x7c>
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001372:	e005      	b.n	8001380 <HAL_RCC_OscConfig+0x88>
 8001374:	4b86      	ldr	r3, [pc, #536]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001380:	4293      	cmp	r3, r2
 8001382:	d223      	bcs.n	80013cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fd73 	bl	8001e74 <RCC_SetFlashLatencyFromMSIRange>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e38d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001398:	4b7d      	ldr	r3, [pc, #500]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a7c      	ldr	r2, [pc, #496]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800139e:	f043 0308 	orr.w	r3, r3, #8
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b7a      	ldr	r3, [pc, #488]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4977      	ldr	r1, [pc, #476]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b6:	4b76      	ldr	r3, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	4972      	ldr	r1, [pc, #456]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
 80013ca:	e025      	b.n	8001418 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013cc:	4b70      	ldr	r3, [pc, #448]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a6f      	ldr	r2, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b6d      	ldr	r3, [pc, #436]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	496a      	ldr	r1, [pc, #424]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ea:	4b69      	ldr	r3, [pc, #420]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	4965      	ldr	r1, [pc, #404]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4618      	mov	r0, r3
 800140a:	f000 fd33 	bl	8001e74 <RCC_SetFlashLatencyFromMSIRange>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e34d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001418:	f000 fc36 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	495a      	ldr	r1, [pc, #360]	; (8001594 <HAL_RCC_OscConfig+0x29c>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	4a58      	ldr	r2, [pc, #352]	; (8001598 <HAL_RCC_OscConfig+0x2a0>)
 8001436:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <HAL_RCC_OscConfig+0x2a4>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fa47 	bl	80008d0 <HAL_InitTick>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d052      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	e331      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d032      	beq.n	80014be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001458:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001464:	f7ff fc4c 	bl	8000d00 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800146c:	f7ff fc48 	bl	8000d00 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e31a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800147e:	4b44      	ldr	r3, [pc, #272]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148a:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a40      	ldr	r2, [pc, #256]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	493b      	ldr	r1, [pc, #236]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	4936      	ldr	r1, [pc, #216]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
 80014bc:	e01a      	b.n	80014f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014be:	4b34      	ldr	r3, [pc, #208]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a33      	ldr	r2, [pc, #204]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ca:	f7ff fc19 	bl	8000d00 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc15 	bl	8000d00 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e2e7      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x1da>
 80014f0:	e000      	b.n	80014f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d074      	beq.n	80015ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b08      	cmp	r3, #8
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x21a>
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d10e      	bne.n	800152a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d10b      	bne.n	800152a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d064      	beq.n	80015e8 <HAL_RCC_OscConfig+0x2f0>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d160      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e2c4      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x24a>
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a15      	ldr	r2, [pc, #84]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800153a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	e01d      	b.n	800157e <HAL_RCC_OscConfig+0x286>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800154a:	d10c      	bne.n	8001566 <HAL_RCC_OscConfig+0x26e>
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e00b      	b.n	800157e <HAL_RCC_OscConfig+0x286>
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 800156c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_RCC_OscConfig+0x298>)
 8001578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01c      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff fbbb 	bl	8000d00 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800158c:	e011      	b.n	80015b2 <HAL_RCC_OscConfig+0x2ba>
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	08007ae8 	.word	0x08007ae8
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fbae 	bl	8000d00 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e280      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b2:	4baf      	ldr	r3, [pc, #700]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x2a8>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb9e 	bl	8000d00 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fb9a 	bl	8000d00 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e26c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015da:	4ba5      	ldr	r3, [pc, #660]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2d0>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d060      	beq.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x310>
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d119      	bne.n	8001636 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d116      	bne.n	8001636 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001608:	4b99      	ldr	r3, [pc, #612]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x328>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e249      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b93      	ldr	r3, [pc, #588]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	4990      	ldr	r1, [pc, #576]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	e040      	b.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d023      	beq.n	8001686 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163e:	4b8c      	ldr	r3, [pc, #560]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a8b      	ldr	r2, [pc, #556]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff fb59 	bl	8000d00 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fb55 	bl	8000d00 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e227      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001664:	4b82      	ldr	r3, [pc, #520]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b7f      	ldr	r3, [pc, #508]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	497c      	ldr	r1, [pc, #496]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e018      	b.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b7a      	ldr	r3, [pc, #488]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a79      	ldr	r2, [pc, #484]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800168c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff fb35 	bl	8000d00 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff fb31 	bl	8000d00 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e203      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ac:	4b70      	ldr	r3, [pc, #448]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d03c      	beq.n	800173e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01c      	beq.n	8001706 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016cc:	4b68      	ldr	r3, [pc, #416]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80016ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d2:	4a67      	ldr	r2, [pc, #412]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fb10 	bl	8000d00 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff fb0c 	bl	8000d00 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e1de      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f6:	4b5e      	ldr	r3, [pc, #376]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ef      	beq.n	80016e4 <HAL_RCC_OscConfig+0x3ec>
 8001704:	e01b      	b.n	800173e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001706:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170c:	4a58      	ldr	r2, [pc, #352]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff faf3 	bl	8000d00 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171e:	f7ff faef 	bl	8000d00 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1c1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ef      	bne.n	800171e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80a6 	beq.w	8001898 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001750:	4b47      	ldr	r3, [pc, #284]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10d      	bne.n	8001778 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	4b44      	ldr	r3, [pc, #272]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a43      	ldr	r2, [pc, #268]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
 8001768:	4b41      	ldr	r3, [pc, #260]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001774:	2301      	movs	r3, #1
 8001776:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001778:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <HAL_RCC_OscConfig+0x57c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d118      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001784:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_RCC_OscConfig+0x57c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a3a      	ldr	r2, [pc, #232]	; (8001874 <HAL_RCC_OscConfig+0x57c>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001790:	f7ff fab6 	bl	8000d00 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001798:	f7ff fab2 	bl	8000d00 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e184      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017aa:	4b32      	ldr	r3, [pc, #200]	; (8001874 <HAL_RCC_OscConfig+0x57c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d108      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4d8>
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c4:	4a2a      	ldr	r2, [pc, #168]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ce:	e024      	b.n	800181a <HAL_RCC_OscConfig+0x522>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d110      	bne.n	80017fa <HAL_RCC_OscConfig+0x502>
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	4a24      	ldr	r2, [pc, #144]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ee:	4a20      	ldr	r2, [pc, #128]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f8:	e00f      	b.n	800181a <HAL_RCC_OscConfig+0x522>
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 80017fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	4a17      	ldr	r2, [pc, #92]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001812:	f023 0304 	bic.w	r3, r3, #4
 8001816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d016      	beq.n	8001850 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fa6d 	bl	8000d00 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fa69 	bl	8000d00 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e139      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_OscConfig+0x578>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0ed      	beq.n	800182a <HAL_RCC_OscConfig+0x532>
 800184e:	e01a      	b.n	8001886 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fa56 	bl	8000d00 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001856:	e00f      	b.n	8001878 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff fa52 	bl	8000d00 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d906      	bls.n	8001878 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e122      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000
 8001874:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001878:	4b90      	ldr	r3, [pc, #576]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1e8      	bne.n	8001858 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b8b      	ldr	r3, [pc, #556]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a8a      	ldr	r2, [pc, #552]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 8108 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	f040 80d0 	bne.w	8001a4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018ac:	4b83      	ldr	r3, [pc, #524]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	429a      	cmp	r2, r3
 80018be:	d130      	bne.n	8001922 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	3b01      	subs	r3, #1
 80018cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d127      	bne.n	8001922 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d11f      	bne.n	8001922 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ec:	2a07      	cmp	r2, #7
 80018ee:	bf14      	ite	ne
 80018f0:	2201      	movne	r2, #1
 80018f2:	2200      	moveq	r2, #0
 80018f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d113      	bne.n	8001922 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	3b01      	subs	r3, #1
 8001908:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d109      	bne.n	8001922 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	3b01      	subs	r3, #1
 800191c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d06e      	beq.n	8001a00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	d069      	beq.n	80019fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001928:	4b64      	ldr	r3, [pc, #400]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001934:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b7      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a5c      	ldr	r2, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 800194a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001950:	f7ff f9d6 	bl	8000d00 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f9d2 	bl	8000d00 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0a4      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	4b51      	ldr	r3, [pc, #324]	; (8001ac0 <HAL_RCC_OscConfig+0x7c8>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001986:	3a01      	subs	r2, #1
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001990:	0212      	lsls	r2, r2, #8
 8001992:	4311      	orrs	r1, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001998:	0852      	lsrs	r2, r2, #1
 800199a:	3a01      	subs	r2, #1
 800199c:	0552      	lsls	r2, r2, #21
 800199e:	4311      	orrs	r1, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019a4:	0852      	lsrs	r2, r2, #1
 80019a6:	3a01      	subs	r2, #1
 80019a8:	0652      	lsls	r2, r2, #25
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019b0:	0912      	lsrs	r2, r2, #4
 80019b2:	0452      	lsls	r2, r2, #17
 80019b4:	430a      	orrs	r2, r1
 80019b6:	4941      	ldr	r1, [pc, #260]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019bc:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c8:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019d4:	f7ff f994 	bl	8000d00 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f990 	bl	8000d00 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e062      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	4b33      	ldr	r3, [pc, #204]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019fa:	e05a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e059      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d152      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2a      	ldr	r2, [pc, #168]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4a27      	ldr	r2, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a24:	f7ff f96c 	bl	8000d00 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff f968 	bl	8000d00 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e03a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x734>
 8001a4a:	e032      	b.n	8001ab2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d02d      	beq.n	8001aae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a70:	f023 0303 	bic.w	r3, r3, #3
 8001a74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001a7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f93b 	bl	8000d00 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff f937 	bl	8000d00 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e009      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_OscConfig+0x7c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x796>
 8001aac:	e001      	b.n	8001ab2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	f99d808c 	.word	0xf99d808c

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0c8      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d910      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	4961      	ldr	r1, [pc, #388]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0b0      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d04c      	beq.n	8001bae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1c:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d121      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e09e      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d115      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e092      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4c:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d109      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e086      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b5c:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e07e      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b6c:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f023 0203 	bic.w	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	493f      	ldr	r1, [pc, #252]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7e:	f7ff f8bf 	bl	8000d00 <HAL_GetTick>
 8001b82:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7ff f8bb 	bl	8000d00 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e066      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 020c 	and.w	r2, r3, #12
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d1eb      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d008      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	492c      	ldr	r1, [pc, #176]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d210      	bcs.n	8001bfc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4924      	ldr	r1, [pc, #144]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCC_ClockConfig+0x1b0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e036      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4918      	ldr	r1, [pc, #96]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4910      	ldr	r1, [pc, #64]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c3a:	f000 f825 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_RCC_ClockConfig+0x1b4>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	490c      	ldr	r1, [pc, #48]	; (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	5ccb      	ldrb	r3, [r1, r3]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	fa22 f303 	lsr.w	r3, r2, r3
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fe36 	bl	80008d0 <HAL_InitTick>
 8001c64:	4603      	mov	r3, r0
 8001c66:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c68:	7afb      	ldrb	r3, [r7, #11]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40022000 	.word	0x40022000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	08007ae8 	.word	0x08007ae8
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0x34>
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d121      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d11e      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cbc:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cc8:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	e005      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ce4:	4a2b      	ldr	r2, [pc, #172]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10d      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d102      	bne.n	8001d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	e004      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d134      	bne.n	8001d80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d003      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0xac>
 8001d2c:	e005      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d30:	617b      	str	r3, [r7, #20]
      break;
 8001d32:	e005      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8001d36:	617b      	str	r3, [r7, #20]
      break;
 8001d38:	e002      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	617b      	str	r3, [r7, #20]
      break;
 8001d3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	fb02 f203 	mul.w	r2, r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	0e5b      	lsrs	r3, r3, #25
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	3301      	adds	r3, #1
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d80:	69bb      	ldr	r3, [r7, #24]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08007b00 	.word	0x08007b00
 8001d98:	00f42400 	.word	0x00f42400
 8001d9c:	007a1200 	.word	0x007a1200

08001da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dbc:	f7ff fff0 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4904      	ldr	r1, [pc, #16]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08007af8 	.word	0x08007af8

08001de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001de8:	f7ff ffda 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	0adb      	lsrs	r3, r3, #11
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	4904      	ldr	r1, [pc, #16]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	08007af8 	.word	0x08007af8

08001e10 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0203 	and.w	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	08db      	lsrs	r3, r3, #3
 8001e4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_RCC_GetClockConfig+0x60>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0207 	and.w	r2, r3, #7
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	601a      	str	r2, [r3, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40022000 	.word	0x40022000

08001e74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e8c:	f7ff f9d0 	bl	8001230 <HAL_PWREx_GetVoltageRange>
 8001e90:	6178      	str	r0, [r7, #20]
 8001e92:	e014      	b.n	8001ebe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	4a24      	ldr	r2, [pc, #144]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eac:	f7ff f9c0 	bl	8001230 <HAL_PWREx_GetVoltageRange>
 8001eb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec4:	d10b      	bne.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b80      	cmp	r3, #128	; 0x80
 8001eca:	d919      	bls.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2ba0      	cmp	r3, #160	; 0xa0
 8001ed0:	d902      	bls.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	e013      	b.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed8:	2301      	movs	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e010      	b.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b80      	cmp	r3, #128	; 0x80
 8001ee2:	d902      	bls.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	e00a      	b.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d102      	bne.n	8001ef6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	e004      	b.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b70      	cmp	r3, #112	; 0x70
 8001efa:	d101      	bne.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001efc:	2301      	movs	r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 0207 	bic.w	r2, r3, #7
 8001f08:	4909      	ldr	r1, [pc, #36]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40022000 	.word	0x40022000

08001f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f40:	2300      	movs	r3, #0
 8001f42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d041      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f58:	d02a      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f5e:	d824      	bhi.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f64:	d008      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f6a:	d81e      	bhi.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f74:	d010      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f76:	e018      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f78:	4b86      	ldr	r3, [pc, #536]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a85      	ldr	r2, [pc, #532]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f82:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f84:	e015      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fabb 	bl	8002508 <RCCEx_PLLSAI1_Config>
 8001f92:	4603      	mov	r3, r0
 8001f94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f96:	e00c      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3320      	adds	r3, #32
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fba6 	bl	80026f0 <RCCEx_PLLSAI2_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fa8:	e003      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	74fb      	strb	r3, [r7, #19]
      break;
 8001fae:	e000      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fb2:	7cfb      	ldrb	r3, [r7, #19]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fb8:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fc6:	4973      	ldr	r1, [pc, #460]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fce:	e001      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d041      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fe8:	d02a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fee:	d824      	bhi.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff4:	d008      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ff6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ffa:	d81e      	bhi.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002004:	d010      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002006:	e018      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002008:	4b62      	ldr	r3, [pc, #392]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4a61      	ldr	r2, [pc, #388]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002014:	e015      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fa73 	bl	8002508 <RCCEx_PLLSAI1_Config>
 8002022:	4603      	mov	r3, r0
 8002024:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002026:	e00c      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3320      	adds	r3, #32
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fb5e 	bl	80026f0 <RCCEx_PLLSAI2_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002038:	e003      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	74fb      	strb	r3, [r7, #19]
      break;
 800203e:	e000      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002042:	7cfb      	ldrb	r3, [r7, #19]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002048:	4b52      	ldr	r3, [pc, #328]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002056:	494f      	ldr	r1, [pc, #316]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800205e:	e001      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80a0 	beq.w	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002086:	2300      	movs	r3, #0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00d      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a40      	ldr	r2, [pc, #256]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a8:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a3a      	ldr	r2, [pc, #232]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b4:	f7fe fe24 	bl	8000d00 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ba:	e009      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020bc:	f7fe fe20 	bl	8000d00 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d902      	bls.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	74fb      	strb	r3, [r7, #19]
        break;
 80020ce:	e005      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020d0:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ef      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d15c      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e2:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01f      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d019      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002112:	4a20      	ldr	r2, [pc, #128]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d016      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7fe fddf 	bl	8000d00 <HAL_GetTick>
 8002142:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002144:	e00b      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe fddb 	bl	8000d00 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d902      	bls.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	74fb      	strb	r3, [r7, #19]
            break;
 800215c:	e006      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ec      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002182:	4904      	ldr	r1, [pc, #16]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800218a:	e009      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800218c:	7cfb      	ldrb	r3, [r7, #19]
 800218e:	74bb      	strb	r3, [r7, #18]
 8002190:	e006      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a0:	7c7b      	ldrb	r3, [r7, #17]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4b9e      	ldr	r3, [pc, #632]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	4a9d      	ldr	r2, [pc, #628]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021be:	4b98      	ldr	r3, [pc, #608]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	f023 0203 	bic.w	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	4994      	ldr	r1, [pc, #592]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e0:	4b8f      	ldr	r3, [pc, #572]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f023 020c 	bic.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	498c      	ldr	r1, [pc, #560]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002202:	4b87      	ldr	r3, [pc, #540]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	4983      	ldr	r1, [pc, #524]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002224:	4b7e      	ldr	r3, [pc, #504]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	497b      	ldr	r1, [pc, #492]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002234:	4313      	orrs	r3, r2
 8002236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002246:	4b76      	ldr	r3, [pc, #472]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002254:	4972      	ldr	r1, [pc, #456]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002268:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	496a      	ldr	r1, [pc, #424]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800228a:	4b65      	ldr	r3, [pc, #404]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	4961      	ldr	r1, [pc, #388]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022ac:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	4959      	ldr	r1, [pc, #356]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022dc:	4950      	ldr	r1, [pc, #320]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022f0:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	4948      	ldr	r1, [pc, #288]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	493f      	ldr	r1, [pc, #252]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d028      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002334:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002342:	4937      	ldr	r1, [pc, #220]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800234e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002352:	d106      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a31      	ldr	r2, [pc, #196]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800235e:	60d3      	str	r3, [r2, #12]
 8002360:	e011      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002366:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800236a:	d10c      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	2101      	movs	r1, #1
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f8c8 	bl	8002508 <RCCEx_PLLSAI1_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002382:	7cfb      	ldrb	r3, [r7, #19]
 8002384:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d028      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002398:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	491f      	ldr	r1, [pc, #124]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b0:	d106      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	4a1a      	ldr	r2, [pc, #104]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023bc:	60d3      	str	r3, [r2, #12]
 80023be:	e011      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2101      	movs	r1, #1
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f899 	bl	8002508 <RCCEx_PLLSAI1_Config>
 80023d6:	4603      	mov	r3, r0
 80023d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d02b      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800240e:	d109      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a02      	ldr	r2, [pc, #8]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800241a:	60d3      	str	r3, [r2, #12]
 800241c:	e014      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800242c:	d10c      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f000 f867 	bl	8002508 <RCCEx_PLLSAI1_Config>
 800243a:	4603      	mov	r3, r0
 800243c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d02f      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002462:	4928      	ldr	r1, [pc, #160]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800246e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002472:	d10d      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	2102      	movs	r1, #2
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f844 	bl	8002508 <RCCEx_PLLSAI1_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d014      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	74bb      	strb	r3, [r7, #18]
 800248e:	e011      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3320      	adds	r3, #32
 800249e:	2102      	movs	r1, #2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f925 	bl	80026f0 <RCCEx_PLLSAI2_Config>
 80024a6:	4603      	mov	r3, r0
 80024a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ce:	490d      	ldr	r1, [pc, #52]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f2:	4904      	ldr	r1, [pc, #16]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000

08002508 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002516:	4b75      	ldr	r3, [pc, #468]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d018      	beq.n	8002554 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002522:	4b72      	ldr	r3, [pc, #456]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0203 	and.w	r2, r3, #3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d10d      	bne.n	800254e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
       ||
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800253a:	4b6c      	ldr	r3, [pc, #432]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
       ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d047      	beq.n	80025de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	e044      	b.n	80025de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b03      	cmp	r3, #3
 800255a:	d018      	beq.n	800258e <RCCEx_PLLSAI1_Config+0x86>
 800255c:	2b03      	cmp	r3, #3
 800255e:	d825      	bhi.n	80025ac <RCCEx_PLLSAI1_Config+0xa4>
 8002560:	2b01      	cmp	r3, #1
 8002562:	d002      	beq.n	800256a <RCCEx_PLLSAI1_Config+0x62>
 8002564:	2b02      	cmp	r3, #2
 8002566:	d009      	beq.n	800257c <RCCEx_PLLSAI1_Config+0x74>
 8002568:	e020      	b.n	80025ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800256a:	4b60      	ldr	r3, [pc, #384]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11d      	bne.n	80025b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257a:	e01a      	b.n	80025b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800257c:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d116      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258c:	e013      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800259a:	4b54      	ldr	r3, [pc, #336]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025aa:	e006      	b.n	80025ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
      break;
 80025b0:	e004      	b.n	80025bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10d      	bne.n	80025de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	430b      	orrs	r3, r1
 80025d8:	4944      	ldr	r1, [pc, #272]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d17d      	bne.n	80026e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025e4:	4b41      	ldr	r3, [pc, #260]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a40      	ldr	r2, [pc, #256]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f0:	f7fe fb86 	bl	8000d00 <HAL_GetTick>
 80025f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025f6:	e009      	b.n	800260c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025f8:	f7fe fb82 	bl	8000d00 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d902      	bls.n	800260c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	73fb      	strb	r3, [r7, #15]
        break;
 800260a:	e005      	b.n	8002618 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800260c:	4b37      	ldr	r3, [pc, #220]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ef      	bne.n	80025f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d160      	bne.n	80026e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d111      	bne.n	8002648 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800262c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6892      	ldr	r2, [r2, #8]
 8002634:	0211      	lsls	r1, r2, #8
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68d2      	ldr	r2, [r2, #12]
 800263a:	0912      	lsrs	r2, r2, #4
 800263c:	0452      	lsls	r2, r2, #17
 800263e:	430a      	orrs	r2, r1
 8002640:	492a      	ldr	r1, [pc, #168]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	610b      	str	r3, [r1, #16]
 8002646:	e027      	b.n	8002698 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d112      	bne.n	8002674 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002656:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6892      	ldr	r2, [r2, #8]
 800265e:	0211      	lsls	r1, r2, #8
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6912      	ldr	r2, [r2, #16]
 8002664:	0852      	lsrs	r2, r2, #1
 8002666:	3a01      	subs	r2, #1
 8002668:	0552      	lsls	r2, r2, #21
 800266a:	430a      	orrs	r2, r1
 800266c:	491f      	ldr	r1, [pc, #124]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	610b      	str	r3, [r1, #16]
 8002672:	e011      	b.n	8002698 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800267c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6892      	ldr	r2, [r2, #8]
 8002684:	0211      	lsls	r1, r2, #8
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6952      	ldr	r2, [r2, #20]
 800268a:	0852      	lsrs	r2, r2, #1
 800268c:	3a01      	subs	r2, #1
 800268e:	0652      	lsls	r2, r2, #25
 8002690:	430a      	orrs	r2, r1
 8002692:	4916      	ldr	r1, [pc, #88]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a13      	ldr	r2, [pc, #76]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fb2c 	bl	8000d00 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026aa:	e009      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ac:	f7fe fb28 	bl	8000d00 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d902      	bls.n	80026c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	73fb      	strb	r3, [r7, #15]
          break;
 80026be:	e005      	b.n	80026cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ef      	beq.n	80026ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	4904      	ldr	r1, [pc, #16]	; (80026ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000

080026f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026fe:	4b6a      	ldr	r3, [pc, #424]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d018      	beq.n	800273c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800270a:	4b67      	ldr	r3, [pc, #412]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0203 	and.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d10d      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
       ||
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002722:	4b61      	ldr	r3, [pc, #388]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
       ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d047      	beq.n	80027c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e044      	b.n	80027c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d018      	beq.n	8002776 <RCCEx_PLLSAI2_Config+0x86>
 8002744:	2b03      	cmp	r3, #3
 8002746:	d825      	bhi.n	8002794 <RCCEx_PLLSAI2_Config+0xa4>
 8002748:	2b01      	cmp	r3, #1
 800274a:	d002      	beq.n	8002752 <RCCEx_PLLSAI2_Config+0x62>
 800274c:	2b02      	cmp	r3, #2
 800274e:	d009      	beq.n	8002764 <RCCEx_PLLSAI2_Config+0x74>
 8002750:	e020      	b.n	8002794 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002752:	4b55      	ldr	r3, [pc, #340]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d11d      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002762:	e01a      	b.n	800279a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002764:	4b50      	ldr	r3, [pc, #320]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d116      	bne.n	800279e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002774:	e013      	b.n	800279e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002776:	4b4c      	ldr	r3, [pc, #304]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002782:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002792:	e006      	b.n	80027a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      break;
 8002798:	e004      	b.n	80027a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800279a:	bf00      	nop
 800279c:	e002      	b.n	80027a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800279e:	bf00      	nop
 80027a0:	e000      	b.n	80027a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10d      	bne.n	80027c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027aa:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	430b      	orrs	r3, r1
 80027c0:	4939      	ldr	r1, [pc, #228]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d167      	bne.n	800289c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a35      	ldr	r2, [pc, #212]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d8:	f7fe fa92 	bl	8000d00 <HAL_GetTick>
 80027dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027de:	e009      	b.n	80027f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027e0:	f7fe fa8e 	bl	8000d00 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d902      	bls.n	80027f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	73fb      	strb	r3, [r7, #15]
        break;
 80027f2:	e005      	b.n	8002800 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027f4:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ef      	bne.n	80027e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d14a      	bne.n	800289c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d111      	bne.n	8002830 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800280c:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6892      	ldr	r2, [r2, #8]
 800281c:	0211      	lsls	r1, r2, #8
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68d2      	ldr	r2, [r2, #12]
 8002822:	0912      	lsrs	r2, r2, #4
 8002824:	0452      	lsls	r2, r2, #17
 8002826:	430a      	orrs	r2, r1
 8002828:	491f      	ldr	r1, [pc, #124]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800282a:	4313      	orrs	r3, r2
 800282c:	614b      	str	r3, [r1, #20]
 800282e:	e011      	b.n	8002854 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002830:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6892      	ldr	r2, [r2, #8]
 8002840:	0211      	lsls	r1, r2, #8
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6912      	ldr	r2, [r2, #16]
 8002846:	0852      	lsrs	r2, r2, #1
 8002848:	3a01      	subs	r2, #1
 800284a:	0652      	lsls	r2, r2, #25
 800284c:	430a      	orrs	r2, r1
 800284e:	4916      	ldr	r1, [pc, #88]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7fe fa4e 	bl	8000d00 <HAL_GetTick>
 8002864:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002866:	e009      	b.n	800287c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002868:	f7fe fa4a 	bl	8000d00 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d902      	bls.n	800287c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	73fb      	strb	r3, [r7, #15]
          break;
 800287a:	e005      	b.n	8002888 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ef      	beq.n	8002868 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	4904      	ldr	r1, [pc, #16]	; (80028a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	4313      	orrs	r3, r2
 800289a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000

080028ac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e042      	b.n	8002944 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	795b      	ldrb	r3, [r3, #5]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fd ff5e 	bl	8000790 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0204 	orr.w	r2, r2, #4
 80028e8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b40      	cmp	r3, #64	; 0x40
 80028f6:	d104      	bne.n	8002902 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2204      	movs	r2, #4
 80028fc:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e020      	b.n	8002944 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002902:	f7fe f9fd 	bl	8000d00 <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002908:	e00e      	b.n	8002928 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800290a:	f7fe f9f9 	bl	8000d00 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d907      	bls.n	8002928 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2204      	movs	r2, #4
 800291c:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e00d      	b.n	8002944 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d0e9      	beq.n	800290a <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e049      	b.n	80029f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f841 	bl	80029fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f000 f9f8 	bl	8002d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d001      	beq.n	8002a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e04f      	b.n	8002ac8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a23      	ldr	r2, [pc, #140]	; (8002ad4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01d      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x76>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a52:	d018      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x76>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x76>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <HAL_TIM_Base_Start_IT+0xcc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00e      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x76>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d009      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x76>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d004      	beq.n	8002a86 <HAL_TIM_Base_Start_IT+0x76>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d115      	bne.n	8002ab2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4b17      	ldr	r3, [pc, #92]	; (8002aec <HAL_TIM_Base_Start_IT+0xdc>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d015      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0xb4>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9e:	d011      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab0:	e008      	b.n	8002ac4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e000      	b.n	8002ac6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	40000c00 	.word	0x40000c00
 8002ae4:	40013400 	.word	0x40013400
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	00010007 	.word	0x00010007

08002af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0202 	mvn.w	r2, #2
 8002b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f905 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8f7 	bl	8002d2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f908 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0204 	mvn.w	r2, #4
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8db 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8cd 	bl	8002d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f8de 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0208 	mvn.w	r2, #8
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8b1 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8a3 	bl	8002d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f8b4 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0210 	mvn.w	r2, #16
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f887 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f879 	bl	8002d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f88a 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0201 	mvn.w	r2, #1
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd fd4e 	bl	8000710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b80      	cmp	r3, #128	; 0x80
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f914 	bl	8002ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cae:	d10e      	bne.n	8002cce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b80      	cmp	r3, #128	; 0x80
 8002cbc:	d107      	bne.n	8002cce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f907 	bl	8002edc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d10e      	bne.n	8002cfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d107      	bne.n	8002cfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f838 	bl	8002d6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d10e      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d107      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0220 	mvn.w	r2, #32
 8002d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8c7 	bl	8002eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a40      	ldr	r2, [pc, #256]	; (8002e94 <TIM_Base_SetConfig+0x114>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d013      	beq.n	8002dc0 <TIM_Base_SetConfig+0x40>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9e:	d00f      	beq.n	8002dc0 <TIM_Base_SetConfig+0x40>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a3d      	ldr	r2, [pc, #244]	; (8002e98 <TIM_Base_SetConfig+0x118>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00b      	beq.n	8002dc0 <TIM_Base_SetConfig+0x40>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a3c      	ldr	r2, [pc, #240]	; (8002e9c <TIM_Base_SetConfig+0x11c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d007      	beq.n	8002dc0 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3b      	ldr	r2, [pc, #236]	; (8002ea0 <TIM_Base_SetConfig+0x120>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <TIM_Base_SetConfig+0x40>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3a      	ldr	r2, [pc, #232]	; (8002ea4 <TIM_Base_SetConfig+0x124>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d108      	bne.n	8002dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <TIM_Base_SetConfig+0x114>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d01f      	beq.n	8002e1a <TIM_Base_SetConfig+0x9a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de0:	d01b      	beq.n	8002e1a <TIM_Base_SetConfig+0x9a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <TIM_Base_SetConfig+0x118>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d017      	beq.n	8002e1a <TIM_Base_SetConfig+0x9a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2b      	ldr	r2, [pc, #172]	; (8002e9c <TIM_Base_SetConfig+0x11c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <TIM_Base_SetConfig+0x9a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a2a      	ldr	r2, [pc, #168]	; (8002ea0 <TIM_Base_SetConfig+0x120>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00f      	beq.n	8002e1a <TIM_Base_SetConfig+0x9a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a29      	ldr	r2, [pc, #164]	; (8002ea4 <TIM_Base_SetConfig+0x124>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00b      	beq.n	8002e1a <TIM_Base_SetConfig+0x9a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a28      	ldr	r2, [pc, #160]	; (8002ea8 <TIM_Base_SetConfig+0x128>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <TIM_Base_SetConfig+0x9a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a27      	ldr	r2, [pc, #156]	; (8002eac <TIM_Base_SetConfig+0x12c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d003      	beq.n	8002e1a <TIM_Base_SetConfig+0x9a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <TIM_Base_SetConfig+0x130>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d108      	bne.n	8002e2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a10      	ldr	r2, [pc, #64]	; (8002e94 <TIM_Base_SetConfig+0x114>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00f      	beq.n	8002e78 <TIM_Base_SetConfig+0xf8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a12      	ldr	r2, [pc, #72]	; (8002ea4 <TIM_Base_SetConfig+0x124>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00b      	beq.n	8002e78 <TIM_Base_SetConfig+0xf8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <TIM_Base_SetConfig+0x128>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d007      	beq.n	8002e78 <TIM_Base_SetConfig+0xf8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <TIM_Base_SetConfig+0x12c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <TIM_Base_SetConfig+0xf8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <TIM_Base_SetConfig+0x130>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d103      	bne.n	8002e80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	615a      	str	r2, [r3, #20]
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40000800 	.word	0x40000800
 8002ea0:	40000c00 	.word	0x40000c00
 8002ea4:	40013400 	.word	0x40013400
 8002ea8:	40014000 	.word	0x40014000
 8002eac:	40014400 	.word	0x40014400
 8002eb0:	40014800 	.word	0x40014800

08002eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e040      	b.n	8002f84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fd fc80 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	; 0x24
 8002f1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f82c 	bl	8002f8c <UART_SetConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e022      	b.n	8002f84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 faaa 	bl	80034a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fb31 	bl	80035e4 <UART_CheckIdleState>
 8002f82:	4603      	mov	r3, r0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f8c:	b5b0      	push	{r4, r5, r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4bad      	ldr	r3, [pc, #692]	; (800326c <UART_SetConfig+0x2e0>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	69f9      	ldr	r1, [r7, #28]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4aa2      	ldr	r2, [pc, #648]	; (8003270 <UART_SetConfig+0x2e4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	430a      	orrs	r2, r1
 8003006:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a99      	ldr	r2, [pc, #612]	; (8003274 <UART_SetConfig+0x2e8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d121      	bne.n	8003056 <UART_SetConfig+0xca>
 8003012:	4b99      	ldr	r3, [pc, #612]	; (8003278 <UART_SetConfig+0x2ec>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b03      	cmp	r3, #3
 800301e:	d817      	bhi.n	8003050 <UART_SetConfig+0xc4>
 8003020:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <UART_SetConfig+0x9c>)
 8003022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003026:	bf00      	nop
 8003028:	08003039 	.word	0x08003039
 800302c:	08003045 	.word	0x08003045
 8003030:	0800303f 	.word	0x0800303f
 8003034:	0800304b 	.word	0x0800304b
 8003038:	2301      	movs	r3, #1
 800303a:	76fb      	strb	r3, [r7, #27]
 800303c:	e0e7      	b.n	800320e <UART_SetConfig+0x282>
 800303e:	2302      	movs	r3, #2
 8003040:	76fb      	strb	r3, [r7, #27]
 8003042:	e0e4      	b.n	800320e <UART_SetConfig+0x282>
 8003044:	2304      	movs	r3, #4
 8003046:	76fb      	strb	r3, [r7, #27]
 8003048:	e0e1      	b.n	800320e <UART_SetConfig+0x282>
 800304a:	2308      	movs	r3, #8
 800304c:	76fb      	strb	r3, [r7, #27]
 800304e:	e0de      	b.n	800320e <UART_SetConfig+0x282>
 8003050:	2310      	movs	r3, #16
 8003052:	76fb      	strb	r3, [r7, #27]
 8003054:	e0db      	b.n	800320e <UART_SetConfig+0x282>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a88      	ldr	r2, [pc, #544]	; (800327c <UART_SetConfig+0x2f0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d132      	bne.n	80030c6 <UART_SetConfig+0x13a>
 8003060:	4b85      	ldr	r3, [pc, #532]	; (8003278 <UART_SetConfig+0x2ec>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d828      	bhi.n	80030c0 <UART_SetConfig+0x134>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <UART_SetConfig+0xe8>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	080030a9 	.word	0x080030a9
 8003078:	080030c1 	.word	0x080030c1
 800307c:	080030c1 	.word	0x080030c1
 8003080:	080030c1 	.word	0x080030c1
 8003084:	080030b5 	.word	0x080030b5
 8003088:	080030c1 	.word	0x080030c1
 800308c:	080030c1 	.word	0x080030c1
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030af 	.word	0x080030af
 8003098:	080030c1 	.word	0x080030c1
 800309c:	080030c1 	.word	0x080030c1
 80030a0:	080030c1 	.word	0x080030c1
 80030a4:	080030bb 	.word	0x080030bb
 80030a8:	2300      	movs	r3, #0
 80030aa:	76fb      	strb	r3, [r7, #27]
 80030ac:	e0af      	b.n	800320e <UART_SetConfig+0x282>
 80030ae:	2302      	movs	r3, #2
 80030b0:	76fb      	strb	r3, [r7, #27]
 80030b2:	e0ac      	b.n	800320e <UART_SetConfig+0x282>
 80030b4:	2304      	movs	r3, #4
 80030b6:	76fb      	strb	r3, [r7, #27]
 80030b8:	e0a9      	b.n	800320e <UART_SetConfig+0x282>
 80030ba:	2308      	movs	r3, #8
 80030bc:	76fb      	strb	r3, [r7, #27]
 80030be:	e0a6      	b.n	800320e <UART_SetConfig+0x282>
 80030c0:	2310      	movs	r3, #16
 80030c2:	76fb      	strb	r3, [r7, #27]
 80030c4:	e0a3      	b.n	800320e <UART_SetConfig+0x282>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6d      	ldr	r2, [pc, #436]	; (8003280 <UART_SetConfig+0x2f4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d120      	bne.n	8003112 <UART_SetConfig+0x186>
 80030d0:	4b69      	ldr	r3, [pc, #420]	; (8003278 <UART_SetConfig+0x2ec>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030da:	2b30      	cmp	r3, #48	; 0x30
 80030dc:	d013      	beq.n	8003106 <UART_SetConfig+0x17a>
 80030de:	2b30      	cmp	r3, #48	; 0x30
 80030e0:	d814      	bhi.n	800310c <UART_SetConfig+0x180>
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d009      	beq.n	80030fa <UART_SetConfig+0x16e>
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d810      	bhi.n	800310c <UART_SetConfig+0x180>
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <UART_SetConfig+0x168>
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d006      	beq.n	8003100 <UART_SetConfig+0x174>
 80030f2:	e00b      	b.n	800310c <UART_SetConfig+0x180>
 80030f4:	2300      	movs	r3, #0
 80030f6:	76fb      	strb	r3, [r7, #27]
 80030f8:	e089      	b.n	800320e <UART_SetConfig+0x282>
 80030fa:	2302      	movs	r3, #2
 80030fc:	76fb      	strb	r3, [r7, #27]
 80030fe:	e086      	b.n	800320e <UART_SetConfig+0x282>
 8003100:	2304      	movs	r3, #4
 8003102:	76fb      	strb	r3, [r7, #27]
 8003104:	e083      	b.n	800320e <UART_SetConfig+0x282>
 8003106:	2308      	movs	r3, #8
 8003108:	76fb      	strb	r3, [r7, #27]
 800310a:	e080      	b.n	800320e <UART_SetConfig+0x282>
 800310c:	2310      	movs	r3, #16
 800310e:	76fb      	strb	r3, [r7, #27]
 8003110:	e07d      	b.n	800320e <UART_SetConfig+0x282>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a5b      	ldr	r2, [pc, #364]	; (8003284 <UART_SetConfig+0x2f8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d120      	bne.n	800315e <UART_SetConfig+0x1d2>
 800311c:	4b56      	ldr	r3, [pc, #344]	; (8003278 <UART_SetConfig+0x2ec>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003126:	2bc0      	cmp	r3, #192	; 0xc0
 8003128:	d013      	beq.n	8003152 <UART_SetConfig+0x1c6>
 800312a:	2bc0      	cmp	r3, #192	; 0xc0
 800312c:	d814      	bhi.n	8003158 <UART_SetConfig+0x1cc>
 800312e:	2b80      	cmp	r3, #128	; 0x80
 8003130:	d009      	beq.n	8003146 <UART_SetConfig+0x1ba>
 8003132:	2b80      	cmp	r3, #128	; 0x80
 8003134:	d810      	bhi.n	8003158 <UART_SetConfig+0x1cc>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <UART_SetConfig+0x1b4>
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d006      	beq.n	800314c <UART_SetConfig+0x1c0>
 800313e:	e00b      	b.n	8003158 <UART_SetConfig+0x1cc>
 8003140:	2300      	movs	r3, #0
 8003142:	76fb      	strb	r3, [r7, #27]
 8003144:	e063      	b.n	800320e <UART_SetConfig+0x282>
 8003146:	2302      	movs	r3, #2
 8003148:	76fb      	strb	r3, [r7, #27]
 800314a:	e060      	b.n	800320e <UART_SetConfig+0x282>
 800314c:	2304      	movs	r3, #4
 800314e:	76fb      	strb	r3, [r7, #27]
 8003150:	e05d      	b.n	800320e <UART_SetConfig+0x282>
 8003152:	2308      	movs	r3, #8
 8003154:	76fb      	strb	r3, [r7, #27]
 8003156:	e05a      	b.n	800320e <UART_SetConfig+0x282>
 8003158:	2310      	movs	r3, #16
 800315a:	76fb      	strb	r3, [r7, #27]
 800315c:	e057      	b.n	800320e <UART_SetConfig+0x282>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a49      	ldr	r2, [pc, #292]	; (8003288 <UART_SetConfig+0x2fc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d125      	bne.n	80031b4 <UART_SetConfig+0x228>
 8003168:	4b43      	ldr	r3, [pc, #268]	; (8003278 <UART_SetConfig+0x2ec>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003176:	d017      	beq.n	80031a8 <UART_SetConfig+0x21c>
 8003178:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317c:	d817      	bhi.n	80031ae <UART_SetConfig+0x222>
 800317e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003182:	d00b      	beq.n	800319c <UART_SetConfig+0x210>
 8003184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003188:	d811      	bhi.n	80031ae <UART_SetConfig+0x222>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <UART_SetConfig+0x20a>
 800318e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003192:	d006      	beq.n	80031a2 <UART_SetConfig+0x216>
 8003194:	e00b      	b.n	80031ae <UART_SetConfig+0x222>
 8003196:	2300      	movs	r3, #0
 8003198:	76fb      	strb	r3, [r7, #27]
 800319a:	e038      	b.n	800320e <UART_SetConfig+0x282>
 800319c:	2302      	movs	r3, #2
 800319e:	76fb      	strb	r3, [r7, #27]
 80031a0:	e035      	b.n	800320e <UART_SetConfig+0x282>
 80031a2:	2304      	movs	r3, #4
 80031a4:	76fb      	strb	r3, [r7, #27]
 80031a6:	e032      	b.n	800320e <UART_SetConfig+0x282>
 80031a8:	2308      	movs	r3, #8
 80031aa:	76fb      	strb	r3, [r7, #27]
 80031ac:	e02f      	b.n	800320e <UART_SetConfig+0x282>
 80031ae:	2310      	movs	r3, #16
 80031b0:	76fb      	strb	r3, [r7, #27]
 80031b2:	e02c      	b.n	800320e <UART_SetConfig+0x282>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2d      	ldr	r2, [pc, #180]	; (8003270 <UART_SetConfig+0x2e4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d125      	bne.n	800320a <UART_SetConfig+0x27e>
 80031be:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <UART_SetConfig+0x2ec>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031cc:	d017      	beq.n	80031fe <UART_SetConfig+0x272>
 80031ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031d2:	d817      	bhi.n	8003204 <UART_SetConfig+0x278>
 80031d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d8:	d00b      	beq.n	80031f2 <UART_SetConfig+0x266>
 80031da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031de:	d811      	bhi.n	8003204 <UART_SetConfig+0x278>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <UART_SetConfig+0x260>
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d006      	beq.n	80031f8 <UART_SetConfig+0x26c>
 80031ea:	e00b      	b.n	8003204 <UART_SetConfig+0x278>
 80031ec:	2300      	movs	r3, #0
 80031ee:	76fb      	strb	r3, [r7, #27]
 80031f0:	e00d      	b.n	800320e <UART_SetConfig+0x282>
 80031f2:	2302      	movs	r3, #2
 80031f4:	76fb      	strb	r3, [r7, #27]
 80031f6:	e00a      	b.n	800320e <UART_SetConfig+0x282>
 80031f8:	2304      	movs	r3, #4
 80031fa:	76fb      	strb	r3, [r7, #27]
 80031fc:	e007      	b.n	800320e <UART_SetConfig+0x282>
 80031fe:	2308      	movs	r3, #8
 8003200:	76fb      	strb	r3, [r7, #27]
 8003202:	e004      	b.n	800320e <UART_SetConfig+0x282>
 8003204:	2310      	movs	r3, #16
 8003206:	76fb      	strb	r3, [r7, #27]
 8003208:	e001      	b.n	800320e <UART_SetConfig+0x282>
 800320a:	2310      	movs	r3, #16
 800320c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a17      	ldr	r2, [pc, #92]	; (8003270 <UART_SetConfig+0x2e4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	f040 8087 	bne.w	8003328 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800321a:	7efb      	ldrb	r3, [r7, #27]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d837      	bhi.n	8003290 <UART_SetConfig+0x304>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <UART_SetConfig+0x29c>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	0800324d 	.word	0x0800324d
 800322c:	08003291 	.word	0x08003291
 8003230:	08003255 	.word	0x08003255
 8003234:	08003291 	.word	0x08003291
 8003238:	0800325b 	.word	0x0800325b
 800323c:	08003291 	.word	0x08003291
 8003240:	08003291 	.word	0x08003291
 8003244:	08003291 	.word	0x08003291
 8003248:	08003263 	.word	0x08003263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800324c:	f7fe fdb4 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8003250:	6178      	str	r0, [r7, #20]
        break;
 8003252:	e022      	b.n	800329a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003254:	4b0d      	ldr	r3, [pc, #52]	; (800328c <UART_SetConfig+0x300>)
 8003256:	617b      	str	r3, [r7, #20]
        break;
 8003258:	e01f      	b.n	800329a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325a:	f7fe fd15 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 800325e:	6178      	str	r0, [r7, #20]
        break;
 8003260:	e01b      	b.n	800329a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003266:	617b      	str	r3, [r7, #20]
        break;
 8003268:	e017      	b.n	800329a <UART_SetConfig+0x30e>
 800326a:	bf00      	nop
 800326c:	efff69f3 	.word	0xefff69f3
 8003270:	40008000 	.word	0x40008000
 8003274:	40013800 	.word	0x40013800
 8003278:	40021000 	.word	0x40021000
 800327c:	40004400 	.word	0x40004400
 8003280:	40004800 	.word	0x40004800
 8003284:	40004c00 	.word	0x40004c00
 8003288:	40005000 	.word	0x40005000
 800328c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	76bb      	strb	r3, [r7, #26]
        break;
 8003298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80f1 	beq.w	8003484 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d305      	bcc.n	80032be <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d902      	bls.n	80032c4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	76bb      	strb	r3, [r7, #26]
 80032c2:	e0df      	b.n	8003484 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	020b      	lsls	r3, r1, #8
 80032d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032da:	0202      	lsls	r2, r0, #8
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	6849      	ldr	r1, [r1, #4]
 80032e0:	0849      	lsrs	r1, r1, #1
 80032e2:	4608      	mov	r0, r1
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	1814      	adds	r4, r2, r0
 80032ea:	eb43 0501 	adc.w	r5, r3, r1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	4620      	mov	r0, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	f7fc ffb8 	bl	8000270 <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4613      	mov	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800330e:	d308      	bcc.n	8003322 <UART_SetConfig+0x396>
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003316:	d204      	bcs.n	8003322 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	60da      	str	r2, [r3, #12]
 8003320:	e0b0      	b.n	8003484 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	76bb      	strb	r3, [r7, #26]
 8003326:	e0ad      	b.n	8003484 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003330:	d15c      	bne.n	80033ec <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003332:	7efb      	ldrb	r3, [r7, #27]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d828      	bhi.n	800338a <UART_SetConfig+0x3fe>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x3b4>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003365 	.word	0x08003365
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003375 	.word	0x08003375
 800334c:	0800338b 	.word	0x0800338b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800338b 	.word	0x0800338b
 8003358:	0800338b 	.word	0x0800338b
 800335c:	0800338b 	.word	0x0800338b
 8003360:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe fd28 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8003368:	6178      	str	r0, [r7, #20]
        break;
 800336a:	e013      	b.n	8003394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe fd3a 	bl	8001de4 <HAL_RCC_GetPCLK2Freq>
 8003370:	6178      	str	r0, [r7, #20]
        break;
 8003372:	e00f      	b.n	8003394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b49      	ldr	r3, [pc, #292]	; (800349c <UART_SetConfig+0x510>)
 8003376:	617b      	str	r3, [r7, #20]
        break;
 8003378:	e00c      	b.n	8003394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fc85 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 800337e:	6178      	str	r0, [r7, #20]
        break;
 8003380:	e008      	b.n	8003394 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003386:	617b      	str	r3, [r7, #20]
        break;
 8003388:	e004      	b.n	8003394 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	76bb      	strb	r3, [r7, #26]
        break;
 8003392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d074      	beq.n	8003484 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005a      	lsls	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	085b      	lsrs	r3, r3, #1
 80033a4:	441a      	add	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b0f      	cmp	r3, #15
 80033b6:	d916      	bls.n	80033e6 <UART_SetConfig+0x45a>
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033be:	d212      	bcs.n	80033e6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f023 030f 	bic.w	r3, r3, #15
 80033c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	89fb      	ldrh	r3, [r7, #14]
 80033d8:	4313      	orrs	r3, r2
 80033da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	89fa      	ldrh	r2, [r7, #14]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	e04e      	b.n	8003484 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	76bb      	strb	r3, [r7, #26]
 80033ea:	e04b      	b.n	8003484 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ec:	7efb      	ldrb	r3, [r7, #27]
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d827      	bhi.n	8003442 <UART_SetConfig+0x4b6>
 80033f2:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <UART_SetConfig+0x46c>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	0800341d 	.word	0x0800341d
 80033fc:	08003425 	.word	0x08003425
 8003400:	0800342d 	.word	0x0800342d
 8003404:	08003443 	.word	0x08003443
 8003408:	08003433 	.word	0x08003433
 800340c:	08003443 	.word	0x08003443
 8003410:	08003443 	.word	0x08003443
 8003414:	08003443 	.word	0x08003443
 8003418:	0800343b 	.word	0x0800343b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800341c:	f7fe fccc 	bl	8001db8 <HAL_RCC_GetPCLK1Freq>
 8003420:	6178      	str	r0, [r7, #20]
        break;
 8003422:	e013      	b.n	800344c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003424:	f7fe fcde 	bl	8001de4 <HAL_RCC_GetPCLK2Freq>
 8003428:	6178      	str	r0, [r7, #20]
        break;
 800342a:	e00f      	b.n	800344c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <UART_SetConfig+0x510>)
 800342e:	617b      	str	r3, [r7, #20]
        break;
 8003430:	e00c      	b.n	800344c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003432:	f7fe fc29 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8003436:	6178      	str	r0, [r7, #20]
        break;
 8003438:	e008      	b.n	800344c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800343a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343e:	617b      	str	r3, [r7, #20]
        break;
 8003440:	e004      	b.n	800344c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	76bb      	strb	r3, [r7, #26]
        break;
 800344a:	bf00      	nop
    }

    if (pclk != 0U)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d018      	beq.n	8003484 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	085a      	lsrs	r2, r3, #1
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	441a      	add	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	b29b      	uxth	r3, r3
 8003466:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b0f      	cmp	r3, #15
 800346c:	d908      	bls.n	8003480 <UART_SetConfig+0x4f4>
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d204      	bcs.n	8003480 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	e001      	b.n	8003484 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003490:	7ebb      	ldrb	r3, [r7, #26]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bdb0      	pop	{r4, r5, r7, pc}
 800349a:	bf00      	nop
 800349c:	00f42400 	.word	0x00f42400

080034a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01a      	beq.n	80035b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359e:	d10a      	bne.n	80035b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  }
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035f4:	f7fd fb84 	bl	8000d00 <HAL_GetTick>
 80035f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b08      	cmp	r3, #8
 8003606:	d10e      	bne.n	8003626 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f82d 	bl	8003676 <UART_WaitOnFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e023      	b.n	800366e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b04      	cmp	r3, #4
 8003632:	d10e      	bne.n	8003652 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f817 	bl	8003676 <UART_WaitOnFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e00d      	b.n	800366e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003686:	e05e      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d05a      	beq.n	8003746 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003690:	f7fd fb36 	bl	8000d00 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	429a      	cmp	r2, r3
 800369e:	d302      	bcc.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11b      	bne.n	80036de <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e043      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d02c      	beq.n	8003746 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036fa:	d124      	bne.n	8003746 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003704:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003714:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e00f      	b.n	8003766 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4013      	ands	r3, r2
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	429a      	cmp	r2, r3
 8003754:	bf0c      	ite	eq
 8003756:	2301      	moveq	r3, #1
 8003758:	2300      	movne	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	429a      	cmp	r2, r3
 8003762:	d091      	beq.n	8003688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <__NVIC_SetPriority>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	6039      	str	r1, [r7, #0]
 800377a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003780:	2b00      	cmp	r3, #0
 8003782:	db0a      	blt.n	800379a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	490c      	ldr	r1, [pc, #48]	; (80037bc <__NVIC_SetPriority+0x4c>)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	0112      	lsls	r2, r2, #4
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	440b      	add	r3, r1
 8003794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003798:	e00a      	b.n	80037b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4908      	ldr	r1, [pc, #32]	; (80037c0 <__NVIC_SetPriority+0x50>)
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	3b04      	subs	r3, #4
 80037a8:	0112      	lsls	r2, r2, #4
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	440b      	add	r3, r1
 80037ae:	761a      	strb	r2, [r3, #24]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000e100 	.word	0xe000e100
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Handler+0x1c>)
 80037ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80037cc:	f001 feb8 	bl	8005540 <xTaskGetSchedulerState>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d001      	beq.n	80037da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80037d6:	f002 fd9f 	bl	8006318 <xPortSysTickHandler>
  }
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80037e8:	2100      	movs	r1, #0
 80037ea:	f06f 0004 	mvn.w	r0, #4
 80037ee:	f7ff ffbf 	bl	8003770 <__NVIC_SetPriority>
#endif
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037fe:	f3ef 8305 	mrs	r3, IPSR
 8003802:	603b      	str	r3, [r7, #0]
  return(result);
 8003804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800380a:	f06f 0305 	mvn.w	r3, #5
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	e00c      	b.n	800382c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <osKernelInitialize+0x44>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d105      	bne.n	8003826 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800381a:	4b08      	ldr	r3, [pc, #32]	; (800383c <osKernelInitialize+0x44>)
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003820:	2300      	movs	r3, #0
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	e002      	b.n	800382c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800382c:	687b      	ldr	r3, [r7, #4]
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000090 	.word	0x20000090

08003840 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003846:	f3ef 8305 	mrs	r3, IPSR
 800384a:	603b      	str	r3, [r7, #0]
  return(result);
 800384c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003852:	f06f 0305 	mvn.w	r3, #5
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	e010      	b.n	800387c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <osKernelStart+0x48>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d109      	bne.n	8003876 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003862:	f7ff ffbf 	bl	80037e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <osKernelStart+0x48>)
 8003868:	2202      	movs	r2, #2
 800386a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800386c:	f001 fa0c 	bl	8004c88 <vTaskStartScheduler>
      stat = osOK;
 8003870:	2300      	movs	r3, #0
 8003872:	607b      	str	r3, [r7, #4]
 8003874:	e002      	b.n	800387c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003876:	f04f 33ff 	mov.w	r3, #4294967295
 800387a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800387c:	687b      	ldr	r3, [r7, #4]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000090 	.word	0x20000090

0800388c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b08e      	sub	sp, #56	; 0x38
 8003890:	af04      	add	r7, sp, #16
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800389c:	f3ef 8305 	mrs	r3, IPSR
 80038a0:	617b      	str	r3, [r7, #20]
  return(result);
 80038a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d17e      	bne.n	80039a6 <osThreadNew+0x11a>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d07b      	beq.n	80039a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038b2:	2318      	movs	r3, #24
 80038b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295
 80038be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d045      	beq.n	8003952 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <osThreadNew+0x48>
        name = attr->name;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <osThreadNew+0x6e>
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b38      	cmp	r3, #56	; 0x38
 80038ec:	d805      	bhi.n	80038fa <osThreadNew+0x6e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <osThreadNew+0x72>
        return (NULL);
 80038fa:	2300      	movs	r3, #0
 80038fc:	e054      	b.n	80039a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00e      	beq.n	8003934 <osThreadNew+0xa8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2bbb      	cmp	r3, #187	; 0xbb
 800391c:	d90a      	bls.n	8003934 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003922:	2b00      	cmp	r3, #0
 8003924:	d006      	beq.n	8003934 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <osThreadNew+0xa8>
        mem = 1;
 800392e:	2301      	movs	r3, #1
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e010      	b.n	8003956 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10c      	bne.n	8003956 <osThreadNew+0xca>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d108      	bne.n	8003956 <osThreadNew+0xca>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d104      	bne.n	8003956 <osThreadNew+0xca>
          mem = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	e001      	b.n	8003956 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d110      	bne.n	800397e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003964:	9202      	str	r2, [sp, #8]
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6a3a      	ldr	r2, [r7, #32]
 8003970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 ff9c 	bl	80048b0 <xTaskCreateStatic>
 8003978:	4603      	mov	r3, r0
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	e013      	b.n	80039a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d110      	bne.n	80039a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	b29a      	uxth	r2, r3
 8003988:	f107 0310 	add.w	r3, r7, #16
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 ffe7 	bl	800496a <xTaskCreate>
 800399c:	4603      	mov	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d001      	beq.n	80039a6 <osThreadNew+0x11a>
            hTask = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039a6:	693b      	ldr	r3, [r7, #16]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3728      	adds	r7, #40	; 0x28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b8:	f3ef 8305 	mrs	r3, IPSR
 80039bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80039be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <osDelay+0x1c>
    stat = osErrorISR;
 80039c4:	f06f 0305 	mvn.w	r3, #5
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	e007      	b.n	80039dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f001 f922 	bl	8004c20 <vTaskDelay>
    }
  }

  return (stat);
 80039dc:	68fb      	ldr	r3, [r7, #12]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <vApplicationGetIdleTaskMemory+0x2c>)
 80039f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4a06      	ldr	r2, [pc, #24]	; (8003a18 <vApplicationGetIdleTaskMemory+0x30>)
 80039fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2280      	movs	r2, #128	; 0x80
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000094 	.word	0x20000094
 8003a18:	20000150 	.word	0x20000150

08003a1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a07      	ldr	r2, [pc, #28]	; (8003a48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4a06      	ldr	r2, [pc, #24]	; (8003a4c <vApplicationGetTimerTaskMemory+0x30>)
 8003a32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3a:	601a      	str	r2, [r3, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	20000350 	.word	0x20000350
 8003a4c:	2000040c 	.word	0x2000040c

08003a50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f103 0208 	add.w	r2, r3, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295
 8003a68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f103 0208 	add.w	r2, r3, #8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f103 0208 	add.w	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	601a      	str	r2, [r3, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003af2:	b480      	push	{r7}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d103      	bne.n	8003b12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e00c      	b.n	8003b2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3308      	adds	r3, #8
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e002      	b.n	8003b20 <vListInsert+0x2e>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d2f6      	bcs.n	8003b1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	601a      	str	r2, [r3, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6892      	ldr	r2, [r2, #8]
 8003b7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6852      	ldr	r2, [r2, #4]
 8003b84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d103      	bne.n	8003b98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	1e5a      	subs	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003be2:	f002 fb07 	bl	80061f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	441a      	add	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	3b01      	subs	r3, #1
 8003c14:	68f9      	ldr	r1, [r7, #12]
 8003c16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	441a      	add	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	22ff      	movs	r2, #255	; 0xff
 8003c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	22ff      	movs	r2, #255	; 0xff
 8003c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d114      	bne.n	8003c62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01a      	beq.n	8003c76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	3310      	adds	r3, #16
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 fab9 	bl	80051bc <xTaskRemoveFromEventList>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d012      	beq.n	8003c76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <xQueueGenericReset+0xcc>)
 8003c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	e009      	b.n	8003c76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3310      	adds	r3, #16
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff fef2 	bl	8003a50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3324      	adds	r3, #36	; 0x24
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff feed 	bl	8003a50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c76:	f002 faed 	bl	8006254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c7a:	2301      	movs	r3, #1
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	; 0x38
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <xQueueGenericCreateStatic+0x52>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <xQueueGenericCreateStatic+0x56>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xQueueGenericCreateStatic+0x58>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	623b      	str	r3, [r7, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <xQueueGenericCreateStatic+0x7e>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <xQueueGenericCreateStatic+0x82>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <xQueueGenericCreateStatic+0x84>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	61fb      	str	r3, [r7, #28]
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d26:	2350      	movs	r3, #80	; 0x50
 8003d28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b50      	cmp	r3, #80	; 0x50
 8003d2e:	d00a      	beq.n	8003d46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	61bb      	str	r3, [r7, #24]
}
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f83f 	bl	8003dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3730      	adds	r7, #48	; 0x30
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10a      	bne.n	8003da2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	613b      	str	r3, [r7, #16]
}
 8003d9e:	bf00      	nop
 8003da0:	e7fe      	b.n	8003da0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	3350      	adds	r3, #80	; 0x50
 8003db0:	4618      	mov	r0, r3
 8003db2:	f002 fb41 	bl	8006438 <pvPortMalloc>
 8003db6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d011      	beq.n	8003de2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	3350      	adds	r3, #80	; 0x50
 8003dc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dd0:	79fa      	ldrb	r2, [r7, #7]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f805 	bl	8003dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003de2:	69bb      	ldr	r3, [r7, #24]
	}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e002      	b.n	8003e0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	69b8      	ldr	r0, [r7, #24]
 8003e1e:	f7ff fecb 	bl	8003bb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00e      	beq.n	8003e5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003e52:	2300      	movs	r3, #0
 8003e54:	2200      	movs	r2, #0
 8003e56:	2100      	movs	r1, #0
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f81d 	bl	8003e98 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b086      	sub	sp, #24
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003e70:	2301      	movs	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6939      	ldr	r1, [r7, #16]
 8003e7e:	6978      	ldr	r0, [r7, #20]
 8003e80:	f7ff ff7a 	bl	8003d78 <xQueueGenericCreate>
 8003e84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f7ff ffd3 	bl	8003e32 <prvInitialiseMutex>

		return xNewQueue;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
	}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08e      	sub	sp, #56	; 0x38
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xQueueGenericSend+0x32>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d103      	bne.n	8003ed8 <xQueueGenericSend+0x40>
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <xQueueGenericSend+0x44>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <xQueueGenericSend+0x46>
 8003edc:	2300      	movs	r3, #0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <xQueueGenericSend+0x60>
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ef4:	bf00      	nop
 8003ef6:	e7fe      	b.n	8003ef6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d103      	bne.n	8003f06 <xQueueGenericSend+0x6e>
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <xQueueGenericSend+0x72>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <xQueueGenericSend+0x74>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <xQueueGenericSend+0x8e>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	623b      	str	r3, [r7, #32]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f26:	f001 fb0b 	bl	8005540 <xTaskGetSchedulerState>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <xQueueGenericSend+0x9e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <xQueueGenericSend+0xa2>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <xQueueGenericSend+0xa4>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xQueueGenericSend+0xbe>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	61fb      	str	r3, [r7, #28]
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f56:	f002 f94d 	bl	80061f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <xQueueGenericSend+0xd4>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d129      	bne.n	8003fc0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f72:	f000 fb2f 	bl	80045d4 <prvCopyDataToQueue>
 8003f76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	3324      	adds	r3, #36	; 0x24
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 f919 	bl	80051bc <xTaskRemoveFromEventList>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d013      	beq.n	8003fb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f90:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <xQueueGenericSend+0x1f8>)
 8003f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	e00a      	b.n	8003fb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fa8:	4b39      	ldr	r3, [pc, #228]	; (8004090 <xQueueGenericSend+0x1f8>)
 8003faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fb8:	f002 f94c 	bl	8006254 <vPortExitCritical>
				return pdPASS;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e063      	b.n	8004088 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fc6:	f002 f945 	bl	8006254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e05c      	b.n	8004088 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fd4:	f107 0314 	add.w	r3, r7, #20
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f001 f953 	bl	8005284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fe2:	f002 f937 	bl	8006254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fe6:	f000 febf 	bl	8004d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fea:	f002 f903 	bl	80061f4 <vPortEnterCritical>
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff4:	b25b      	sxtb	r3, r3
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d103      	bne.n	8004004 <xQueueGenericSend+0x16c>
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800400a:	b25b      	sxtb	r3, r3
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d103      	bne.n	800401a <xQueueGenericSend+0x182>
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800401a:	f002 f91b 	bl	8006254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800401e:	1d3a      	adds	r2, r7, #4
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f001 f942 	bl	80052b0 <xTaskCheckForTimeOut>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d124      	bne.n	800407c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004034:	f000 fbc6 	bl	80047c4 <prvIsQueueFull>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d018      	beq.n	8004070 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	3310      	adds	r3, #16
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f001 f868 	bl	800511c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800404c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800404e:	f000 fb51 	bl	80046f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004052:	f000 fe97 	bl	8004d84 <xTaskResumeAll>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	f47f af7c 	bne.w	8003f56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <xQueueGenericSend+0x1f8>)
 8004060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	e772      	b.n	8003f56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004072:	f000 fb3f 	bl	80046f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004076:	f000 fe85 	bl	8004d84 <xTaskResumeAll>
 800407a:	e76c      	b.n	8003f56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800407c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800407e:	f000 fb39 	bl	80046f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004082:	f000 fe7f 	bl	8004d84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004086:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004088:	4618      	mov	r0, r3
 800408a:	3738      	adds	r7, #56	; 0x38
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b090      	sub	sp, #64	; 0x40
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d103      	bne.n	80040d0 <xQueueGenericSendFromISR+0x3c>
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <xQueueGenericSendFromISR+0x40>
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <xQueueGenericSendFromISR+0x42>
 80040d4:	2300      	movs	r3, #0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d103      	bne.n	80040fe <xQueueGenericSendFromISR+0x6a>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <xQueueGenericSendFromISR+0x6e>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <xQueueGenericSendFromISR+0x70>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	623b      	str	r3, [r7, #32]
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800411e:	f002 f94b 	bl	80063b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004122:	f3ef 8211 	mrs	r2, BASEPRI
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	61fa      	str	r2, [r7, #28]
 8004138:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800413a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <xQueueGenericSendFromISR+0xbc>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d12f      	bne.n	80041b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004166:	f000 fa35 	bl	80045d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800416a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d112      	bne.n	800419a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	2b00      	cmp	r3, #0
 800417a:	d016      	beq.n	80041aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	3324      	adds	r3, #36	; 0x24
 8004180:	4618      	mov	r0, r3
 8004182:	f001 f81b 	bl	80051bc <xTaskRemoveFromEventList>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e007      	b.n	80041aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800419a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800419e:	3301      	adds	r3, #1
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	b25a      	sxtb	r2, r3
 80041a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80041aa:	2301      	movs	r3, #1
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80041ae:	e001      	b.n	80041b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3740      	adds	r7, #64	; 0x40
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	; 0x30
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041d8:	2300      	movs	r3, #0
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <xQueueReceive+0x30>
	__asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	623b      	str	r3, [r7, #32]
}
 80041f8:	bf00      	nop
 80041fa:	e7fe      	b.n	80041fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <xQueueReceive+0x3e>
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <xQueueReceive+0x42>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <xQueueReceive+0x44>
 800420e:	2300      	movs	r3, #0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xQueueReceive+0x5e>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	61fb      	str	r3, [r7, #28]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800422a:	f001 f989 	bl	8005540 <xTaskGetSchedulerState>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <xQueueReceive+0x6e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <xQueueReceive+0x72>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <xQueueReceive+0x74>
 800423e:	2300      	movs	r3, #0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <xQueueReceive+0x8e>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	61bb      	str	r3, [r7, #24]
}
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800425a:	f001 ffcb 	bl	80061f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01f      	beq.n	80042aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800426e:	f000 fa1b 	bl	80046a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	1e5a      	subs	r2, r3, #1
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00f      	beq.n	80042a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	3310      	adds	r3, #16
 8004286:	4618      	mov	r0, r3
 8004288:	f000 ff98 	bl	80051bc <xTaskRemoveFromEventList>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004292:	4b3d      	ldr	r3, [pc, #244]	; (8004388 <xQueueReceive+0x1bc>)
 8004294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042a2:	f001 ffd7 	bl	8006254 <vPortExitCritical>
				return pdPASS;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e069      	b.n	800437e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042b0:	f001 ffd0 	bl	8006254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e062      	b.n	800437e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042be:	f107 0310 	add.w	r3, r7, #16
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 ffde 	bl	8005284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042cc:	f001 ffc2 	bl	8006254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042d0:	f000 fd4a 	bl	8004d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042d4:	f001 ff8e 	bl	80061f4 <vPortEnterCritical>
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042de:	b25b      	sxtb	r3, r3
 80042e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e4:	d103      	bne.n	80042ee <xQueueReceive+0x122>
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d103      	bne.n	8004304 <xQueueReceive+0x138>
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004304:	f001 ffa6 	bl	8006254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004308:	1d3a      	adds	r2, r7, #4
 800430a:	f107 0310 	add.w	r3, r7, #16
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f000 ffcd 	bl	80052b0 <xTaskCheckForTimeOut>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d123      	bne.n	8004364 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800431c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800431e:	f000 fa3b 	bl	8004798 <prvIsQueueEmpty>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d017      	beq.n	8004358 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	3324      	adds	r3, #36	; 0x24
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fef3 	bl	800511c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004338:	f000 f9dc 	bl	80046f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800433c:	f000 fd22 	bl	8004d84 <xTaskResumeAll>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d189      	bne.n	800425a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <xQueueReceive+0x1bc>)
 8004348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	e780      	b.n	800425a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800435a:	f000 f9cb 	bl	80046f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800435e:	f000 fd11 	bl	8004d84 <xTaskResumeAll>
 8004362:	e77a      	b.n	800425a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004366:	f000 f9c5 	bl	80046f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800436a:	f000 fd0b 	bl	8004d84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800436e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004370:	f000 fa12 	bl	8004798 <prvIsQueueEmpty>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	f43f af6f 	beq.w	800425a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800437c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800437e:	4618      	mov	r0, r3
 8004380:	3730      	adds	r7, #48	; 0x30
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	e000ed04 	.word	0xe000ed04

0800438c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	; 0x38
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004396:	2300      	movs	r3, #0
 8004398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10a      	bne.n	80043be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	623b      	str	r3, [r7, #32]
}
 80043ba:	bf00      	nop
 80043bc:	e7fe      	b.n	80043bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	61fb      	str	r3, [r7, #28]
}
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043dc:	f001 f8b0 	bl	8005540 <xTaskGetSchedulerState>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <xQueueSemaphoreTake+0x60>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <xQueueSemaphoreTake+0x64>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <xQueueSemaphoreTake+0x66>
 80043f0:	2300      	movs	r3, #0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	61bb      	str	r3, [r7, #24]
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800440c:	f001 fef2 	bl	80061f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	d024      	beq.n	8004466 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	1e5a      	subs	r2, r3, #1
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d104      	bne.n	8004436 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800442c:	f001 f9fe 	bl	800582c <pvTaskIncrementMutexHeldCount>
 8004430:	4602      	mov	r2, r0
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00f      	beq.n	800445e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	3310      	adds	r3, #16
 8004442:	4618      	mov	r0, r3
 8004444:	f000 feba 	bl	80051bc <xTaskRemoveFromEventList>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800444e:	4b54      	ldr	r3, [pc, #336]	; (80045a0 <xQueueSemaphoreTake+0x214>)
 8004450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800445e:	f001 fef9 	bl	8006254 <vPortExitCritical>
				return pdPASS;
 8004462:	2301      	movs	r3, #1
 8004464:	e097      	b.n	8004596 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	617b      	str	r3, [r7, #20]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004488:	f001 fee4 	bl	8006254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800448c:	2300      	movs	r3, #0
 800448e:	e082      	b.n	8004596 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004496:	f107 030c 	add.w	r3, r7, #12
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fef2 	bl	8005284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044a4:	f001 fed6 	bl	8006254 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044a8:	f000 fc5e 	bl	8004d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044ac:	f001 fea2 	bl	80061f4 <vPortEnterCritical>
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044b6:	b25b      	sxtb	r3, r3
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d103      	bne.n	80044c6 <xQueueSemaphoreTake+0x13a>
 80044be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044cc:	b25b      	sxtb	r3, r3
 80044ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d2:	d103      	bne.n	80044dc <xQueueSemaphoreTake+0x150>
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044dc:	f001 feba 	bl	8006254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044e0:	463a      	mov	r2, r7
 80044e2:	f107 030c 	add.w	r3, r7, #12
 80044e6:	4611      	mov	r1, r2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fee1 	bl	80052b0 <xTaskCheckForTimeOut>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d132      	bne.n	800455a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044f6:	f000 f94f 	bl	8004798 <prvIsQueueEmpty>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d026      	beq.n	800454e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004508:	f001 fe74 	bl	80061f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4618      	mov	r0, r3
 8004512:	f001 f833 	bl	800557c <xTaskPriorityInherit>
 8004516:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004518:	f001 fe9c 	bl	8006254 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	3324      	adds	r3, #36	; 0x24
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fdf9 	bl	800511c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800452a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800452c:	f000 f8e2 	bl	80046f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004530:	f000 fc28 	bl	8004d84 <xTaskResumeAll>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	f47f af68 	bne.w	800440c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800453c:	4b18      	ldr	r3, [pc, #96]	; (80045a0 <xQueueSemaphoreTake+0x214>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	e75e      	b.n	800440c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800454e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004550:	f000 f8d0 	bl	80046f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004554:	f000 fc16 	bl	8004d84 <xTaskResumeAll>
 8004558:	e758      	b.n	800440c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800455a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800455c:	f000 f8ca 	bl	80046f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004560:	f000 fc10 	bl	8004d84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004566:	f000 f917 	bl	8004798 <prvIsQueueEmpty>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	f43f af4d 	beq.w	800440c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004578:	f001 fe3c 	bl	80061f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800457c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800457e:	f000 f811 	bl	80045a4 <prvGetDisinheritPriorityAfterTimeout>
 8004582:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800458a:	4618      	mov	r0, r3
 800458c:	f001 f8cc 	bl	8005728 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004590:	f001 fe60 	bl	8006254 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004594:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004596:	4618      	mov	r0, r3
 8004598:	3738      	adds	r7, #56	; 0x38
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	e000ed04 	.word	0xe000ed04

080045a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e001      	b.n	80045c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80045c6:	68fb      	ldr	r3, [r7, #12]
	}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d14d      	bne.n	8004696 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 f824 	bl	800564c <xTaskPriorityDisinherit>
 8004604:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	609a      	str	r2, [r3, #8]
 800460c:	e043      	b.n	8004696 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d119      	bne.n	8004648 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6858      	ldr	r0, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	461a      	mov	r2, r3
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	f002 fa41 	bl	8006aa6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	441a      	add	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	429a      	cmp	r2, r3
 800463c:	d32b      	bcc.n	8004696 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	e026      	b.n	8004696 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68d8      	ldr	r0, [r3, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	461a      	mov	r2, r3
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	f002 fa27 	bl	8006aa6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	425b      	negs	r3, r3
 8004662:	441a      	add	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d207      	bcs.n	8004684 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	425b      	negs	r3, r3
 800467e:	441a      	add	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d105      	bne.n	8004696 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	3b01      	subs	r3, #1
 8004694:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800469e:	697b      	ldr	r3, [r7, #20]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d018      	beq.n	80046ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	441a      	add	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d303      	bcc.n	80046dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68d9      	ldr	r1, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	461a      	mov	r2, r3
 80046e6:	6838      	ldr	r0, [r7, #0]
 80046e8:	f002 f9dd 	bl	8006aa6 <memcpy>
	}
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046fc:	f001 fd7a 	bl	80061f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004706:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004708:	e011      	b.n	800472e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d012      	beq.n	8004738 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3324      	adds	r3, #36	; 0x24
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fd50 	bl	80051bc <xTaskRemoveFromEventList>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004722:	f000 fe27 	bl	8005374 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	3b01      	subs	r3, #1
 800472a:	b2db      	uxtb	r3, r3
 800472c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800472e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	dce9      	bgt.n	800470a <prvUnlockQueue+0x16>
 8004736:	e000      	b.n	800473a <prvUnlockQueue+0x46>
					break;
 8004738:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004742:	f001 fd87 	bl	8006254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004746:	f001 fd55 	bl	80061f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004750:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004752:	e011      	b.n	8004778 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d012      	beq.n	8004782 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3310      	adds	r3, #16
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fd2b 	bl	80051bc <xTaskRemoveFromEventList>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800476c:	f000 fe02 	bl	8005374 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004770:	7bbb      	ldrb	r3, [r7, #14]
 8004772:	3b01      	subs	r3, #1
 8004774:	b2db      	uxtb	r3, r3
 8004776:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800477c:	2b00      	cmp	r3, #0
 800477e:	dce9      	bgt.n	8004754 <prvUnlockQueue+0x60>
 8004780:	e000      	b.n	8004784 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004782:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	22ff      	movs	r2, #255	; 0xff
 8004788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800478c:	f001 fd62 	bl	8006254 <vPortExitCritical>
}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047a0:	f001 fd28 	bl	80061f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047ac:	2301      	movs	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e001      	b.n	80047b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047b6:	f001 fd4d 	bl	8006254 <vPortExitCritical>

	return xReturn;
 80047ba:	68fb      	ldr	r3, [r7, #12]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047cc:	f001 fd12 	bl	80061f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d8:	429a      	cmp	r2, r3
 80047da:	d102      	bne.n	80047e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e001      	b.n	80047e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047e6:	f001 fd35 	bl	8006254 <vPortExitCritical>

	return xReturn;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	e014      	b.n	800482e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004804:	4a0f      	ldr	r2, [pc, #60]	; (8004844 <vQueueAddToRegistry+0x50>)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004810:	490c      	ldr	r1, [pc, #48]	; (8004844 <vQueueAddToRegistry+0x50>)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800481a:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <vQueueAddToRegistry+0x50>)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4413      	add	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004826:	e006      	b.n	8004836 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b07      	cmp	r3, #7
 8004832:	d9e7      	bls.n	8004804 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20002ae4 	.word	0x20002ae4

08004848 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004858:	f001 fccc 	bl	80061f4 <vPortEnterCritical>
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004862:	b25b      	sxtb	r3, r3
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d103      	bne.n	8004872 <vQueueWaitForMessageRestricted+0x2a>
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004878:	b25b      	sxtb	r3, r3
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d103      	bne.n	8004888 <vQueueWaitForMessageRestricted+0x40>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004888:	f001 fce4 	bl	8006254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	2b00      	cmp	r3, #0
 8004892:	d106      	bne.n	80048a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	3324      	adds	r3, #36	; 0x24
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fc61 	bl	8005164 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048a2:	6978      	ldr	r0, [r7, #20]
 80048a4:	f7ff ff26 	bl	80046f4 <prvUnlockQueue>
	}
 80048a8:	bf00      	nop
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08e      	sub	sp, #56	; 0x38
 80048b4:	af04      	add	r7, sp, #16
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xTaskCreateStatic+0x2a>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	623b      	str	r3, [r7, #32]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	61fb      	str	r3, [r7, #28]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048f6:	23bc      	movs	r3, #188	; 0xbc
 80048f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2bbc      	cmp	r3, #188	; 0xbc
 80048fe:	d00a      	beq.n	8004916 <xTaskCreateStatic+0x66>
	__asm volatile
 8004900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004904:	f383 8811 	msr	BASEPRI, r3
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	f3bf 8f4f 	dsb	sy
 8004910:	61bb      	str	r3, [r7, #24]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004916:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01e      	beq.n	800495c <xTaskCreateStatic+0xac>
 800491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01b      	beq.n	800495c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800492c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	2202      	movs	r2, #2
 8004932:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004936:	2300      	movs	r3, #0
 8004938:	9303      	str	r3, [sp, #12]
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	9302      	str	r3, [sp, #8]
 800493e:	f107 0314 	add.w	r3, r7, #20
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f850 	bl	80049f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004956:	f000 f8f3 	bl	8004b40 <prvAddNewTaskToReadyList>
 800495a:	e001      	b.n	8004960 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004960:	697b      	ldr	r3, [r7, #20]
	}
 8004962:	4618      	mov	r0, r3
 8004964:	3728      	adds	r7, #40	; 0x28
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800496a:	b580      	push	{r7, lr}
 800496c:	b08c      	sub	sp, #48	; 0x30
 800496e:	af04      	add	r7, sp, #16
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	4613      	mov	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4618      	mov	r0, r3
 8004980:	f001 fd5a 	bl	8006438 <pvPortMalloc>
 8004984:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00e      	beq.n	80049aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800498c:	20bc      	movs	r0, #188	; 0xbc
 800498e:	f001 fd53 	bl	8006438 <pvPortMalloc>
 8004992:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
 80049a0:	e005      	b.n	80049ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049a2:	6978      	ldr	r0, [r7, #20]
 80049a4:	f001 fe14 	bl	80065d0 <vPortFree>
 80049a8:	e001      	b.n	80049ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d017      	beq.n	80049e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	2300      	movs	r3, #0
 80049c0:	9303      	str	r3, [sp, #12]
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	9302      	str	r3, [sp, #8]
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f80e 	bl	80049f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049d8:	69f8      	ldr	r0, [r7, #28]
 80049da:	f000 f8b1 	bl	8004b40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049de:	2301      	movs	r3, #1
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	e002      	b.n	80049ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049e4:	f04f 33ff 	mov.w	r3, #4294967295
 80049e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049ea:	69bb      	ldr	r3, [r7, #24]
	}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3720      	adds	r7, #32
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	21a5      	movs	r1, #165	; 0xa5
 8004a0e:	f002 f858 	bl	8006ac2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00a      	beq.n	8004a4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	617b      	str	r3, [r7, #20]
}
 8004a48:	bf00      	nop
 8004a4a:	e7fe      	b.n	8004a4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01f      	beq.n	8004a92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
 8004a56:	e012      	b.n	8004a7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	7819      	ldrb	r1, [r3, #0]
 8004a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	3334      	adds	r3, #52	; 0x34
 8004a68:	460a      	mov	r2, r1
 8004a6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d006      	beq.n	8004a86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2b0f      	cmp	r3, #15
 8004a82:	d9e9      	bls.n	8004a58 <prvInitialiseNewTask+0x64>
 8004a84:	e000      	b.n	8004a88 <prvInitialiseNewTask+0x94>
			{
				break;
 8004a86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a90:	e003      	b.n	8004a9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	2b37      	cmp	r3, #55	; 0x37
 8004a9e:	d901      	bls.n	8004aa4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004aa0:	2337      	movs	r3, #55	; 0x37
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aa8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe ffe8 	bl	8003a90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	3318      	adds	r3, #24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe ffe3 	bl	8003a90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ace:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ade:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	3354      	adds	r3, #84	; 0x54
 8004af4:	2260      	movs	r2, #96	; 0x60
 8004af6:	2100      	movs	r1, #0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f001 ffe2 	bl	8006ac2 <memset>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	4a0c      	ldr	r2, [pc, #48]	; (8004b34 <prvInitialiseNewTask+0x140>)
 8004b02:	659a      	str	r2, [r3, #88]	; 0x58
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	4a0c      	ldr	r2, [pc, #48]	; (8004b38 <prvInitialiseNewTask+0x144>)
 8004b08:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	4a0b      	ldr	r2, [pc, #44]	; (8004b3c <prvInitialiseNewTask+0x148>)
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	69b8      	ldr	r0, [r7, #24]
 8004b16:	f001 fa3f 	bl	8005f98 <pxPortInitialiseStack>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b2c:	bf00      	nop
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	08007bb4 	.word	0x08007bb4
 8004b38:	08007bd4 	.word	0x08007bd4
 8004b3c:	08007b94 	.word	0x08007b94

08004b40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b48:	f001 fb54 	bl	80061f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b4c:	4b2d      	ldr	r3, [pc, #180]	; (8004c04 <prvAddNewTaskToReadyList+0xc4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3301      	adds	r3, #1
 8004b52:	4a2c      	ldr	r2, [pc, #176]	; (8004c04 <prvAddNewTaskToReadyList+0xc4>)
 8004b54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b56:	4b2c      	ldr	r3, [pc, #176]	; (8004c08 <prvAddNewTaskToReadyList+0xc8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b5e:	4a2a      	ldr	r2, [pc, #168]	; (8004c08 <prvAddNewTaskToReadyList+0xc8>)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b64:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <prvAddNewTaskToReadyList+0xc4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d110      	bne.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b6c:	f000 fc26 	bl	80053bc <prvInitialiseTaskLists>
 8004b70:	e00d      	b.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b72:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <prvAddNewTaskToReadyList+0xcc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <prvAddNewTaskToReadyList+0xc8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d802      	bhi.n	8004b8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b88:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <prvAddNewTaskToReadyList+0xc8>)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b8e:	4b20      	ldr	r3, [pc, #128]	; (8004c10 <prvAddNewTaskToReadyList+0xd0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a1e      	ldr	r2, [pc, #120]	; (8004c10 <prvAddNewTaskToReadyList+0xd0>)
 8004b96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b98:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <prvAddNewTaskToReadyList+0xd0>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <prvAddNewTaskToReadyList+0xd4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d903      	bls.n	8004bb4 <prvAddNewTaskToReadyList+0x74>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <prvAddNewTaskToReadyList+0xd4>)
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <prvAddNewTaskToReadyList+0xd8>)
 8004bc2:	441a      	add	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f7fe ff6d 	bl	8003aaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bd0:	f001 fb40 	bl	8006254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bd4:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <prvAddNewTaskToReadyList+0xcc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00e      	beq.n	8004bfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <prvAddNewTaskToReadyList+0xc8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d207      	bcs.n	8004bfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bea:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <prvAddNewTaskToReadyList+0xdc>)
 8004bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20000ce0 	.word	0x20000ce0
 8004c08:	2000080c 	.word	0x2000080c
 8004c0c:	20000cec 	.word	0x20000cec
 8004c10:	20000cfc 	.word	0x20000cfc
 8004c14:	20000ce8 	.word	0x20000ce8
 8004c18:	20000810 	.word	0x20000810
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d017      	beq.n	8004c62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c32:	4b13      	ldr	r3, [pc, #76]	; (8004c80 <vTaskDelay+0x60>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <vTaskDelay+0x30>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60bb      	str	r3, [r7, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c50:	f000 f88a 	bl	8004d68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c54:	2100      	movs	r1, #0
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fdfc 	bl	8005854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c5c:	f000 f892 	bl	8004d84 <xTaskResumeAll>
 8004c60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d107      	bne.n	8004c78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <vTaskDelay+0x64>)
 8004c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000d08 	.word	0x20000d08
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c96:	463a      	mov	r2, r7
 8004c98:	1d39      	adds	r1, r7, #4
 8004c9a:	f107 0308 	add.w	r3, r7, #8
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fea2 	bl	80039e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ca4:	6839      	ldr	r1, [r7, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	9202      	str	r2, [sp, #8]
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	460a      	mov	r2, r1
 8004cb6:	4924      	ldr	r1, [pc, #144]	; (8004d48 <vTaskStartScheduler+0xc0>)
 8004cb8:	4824      	ldr	r0, [pc, #144]	; (8004d4c <vTaskStartScheduler+0xc4>)
 8004cba:	f7ff fdf9 	bl	80048b0 <xTaskCreateStatic>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4a23      	ldr	r2, [pc, #140]	; (8004d50 <vTaskStartScheduler+0xc8>)
 8004cc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cc4:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <vTaskStartScheduler+0xc8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e001      	b.n	8004cd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d102      	bne.n	8004ce2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004cdc:	f000 fe0e 	bl	80058fc <xTimerCreateTimerTask>
 8004ce0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d11b      	bne.n	8004d20 <vTaskStartScheduler+0x98>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	613b      	str	r3, [r7, #16]
}
 8004cfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <vTaskStartScheduler+0xcc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3354      	adds	r3, #84	; 0x54
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <vTaskStartScheduler+0xd0>)
 8004d04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d06:	4b15      	ldr	r3, [pc, #84]	; (8004d5c <vTaskStartScheduler+0xd4>)
 8004d08:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d0e:	4b14      	ldr	r3, [pc, #80]	; (8004d60 <vTaskStartScheduler+0xd8>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <vTaskStartScheduler+0xdc>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d1a:	f001 f9c9 	bl	80060b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d1e:	e00e      	b.n	8004d3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d10a      	bne.n	8004d3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	60fb      	str	r3, [r7, #12]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <vTaskStartScheduler+0xb4>
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	08007aac 	.word	0x08007aac
 8004d4c:	0800538d 	.word	0x0800538d
 8004d50:	20000d04 	.word	0x20000d04
 8004d54:	2000080c 	.word	0x2000080c
 8004d58:	20000010 	.word	0x20000010
 8004d5c:	20000d00 	.word	0x20000d00
 8004d60:	20000cec 	.word	0x20000cec
 8004d64:	20000ce4 	.word	0x20000ce4

08004d68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <vTaskSuspendAll+0x18>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3301      	adds	r3, #1
 8004d72:	4a03      	ldr	r2, [pc, #12]	; (8004d80 <vTaskSuspendAll+0x18>)
 8004d74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d76:	bf00      	nop
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000d08 	.word	0x20000d08

08004d84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d92:	4b42      	ldr	r3, [pc, #264]	; (8004e9c <xTaskResumeAll+0x118>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10a      	bne.n	8004db0 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	603b      	str	r3, [r7, #0]
}
 8004dac:	bf00      	nop
 8004dae:	e7fe      	b.n	8004dae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004db0:	f001 fa20 	bl	80061f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004db4:	4b39      	ldr	r3, [pc, #228]	; (8004e9c <xTaskResumeAll+0x118>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	4a38      	ldr	r2, [pc, #224]	; (8004e9c <xTaskResumeAll+0x118>)
 8004dbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dbe:	4b37      	ldr	r3, [pc, #220]	; (8004e9c <xTaskResumeAll+0x118>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d162      	bne.n	8004e8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dc6:	4b36      	ldr	r3, [pc, #216]	; (8004ea0 <xTaskResumeAll+0x11c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d05e      	beq.n	8004e8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dce:	e02f      	b.n	8004e30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dd0:	4b34      	ldr	r3, [pc, #208]	; (8004ea4 <xTaskResumeAll+0x120>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3318      	adds	r3, #24
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe fec1 	bl	8003b64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3304      	adds	r3, #4
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe febc 	bl	8003b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	4b2d      	ldr	r3, [pc, #180]	; (8004ea8 <xTaskResumeAll+0x124>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d903      	bls.n	8004e00 <xTaskResumeAll+0x7c>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	4a2a      	ldr	r2, [pc, #168]	; (8004ea8 <xTaskResumeAll+0x124>)
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4a27      	ldr	r2, [pc, #156]	; (8004eac <xTaskResumeAll+0x128>)
 8004e0e:	441a      	add	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f7fe fe47 	bl	8003aaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e20:	4b23      	ldr	r3, [pc, #140]	; (8004eb0 <xTaskResumeAll+0x12c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d302      	bcc.n	8004e30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e2a:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <xTaskResumeAll+0x130>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e30:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <xTaskResumeAll+0x120>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1cb      	bne.n	8004dd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e3e:	f000 fb5f 	bl	8005500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e42:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <xTaskResumeAll+0x134>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d010      	beq.n	8004e70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e4e:	f000 f847 	bl	8004ee0 <xTaskIncrementTick>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e58:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <xTaskResumeAll+0x130>)
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f1      	bne.n	8004e4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e6a:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <xTaskResumeAll+0x134>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e70:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <xTaskResumeAll+0x130>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <xTaskResumeAll+0x138>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e8c:	f001 f9e2 	bl	8006254 <vPortExitCritical>

	return xAlreadyYielded;
 8004e90:	68bb      	ldr	r3, [r7, #8]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000d08 	.word	0x20000d08
 8004ea0:	20000ce0 	.word	0x20000ce0
 8004ea4:	20000ca0 	.word	0x20000ca0
 8004ea8:	20000ce8 	.word	0x20000ce8
 8004eac:	20000810 	.word	0x20000810
 8004eb0:	2000080c 	.word	0x2000080c
 8004eb4:	20000cf4 	.word	0x20000cf4
 8004eb8:	20000cf0 	.word	0x20000cf0
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <xTaskGetTickCount+0x1c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ecc:	687b      	ldr	r3, [r7, #4]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000ce4 	.word	0x20000ce4

08004ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eea:	4b4f      	ldr	r3, [pc, #316]	; (8005028 <xTaskIncrementTick+0x148>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f040 808f 	bne.w	8005012 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ef4:	4b4d      	ldr	r3, [pc, #308]	; (800502c <xTaskIncrementTick+0x14c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004efc:	4a4b      	ldr	r2, [pc, #300]	; (800502c <xTaskIncrementTick+0x14c>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d120      	bne.n	8004f4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f08:	4b49      	ldr	r3, [pc, #292]	; (8005030 <xTaskIncrementTick+0x150>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <xTaskIncrementTick+0x48>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	603b      	str	r3, [r7, #0]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <xTaskIncrementTick+0x46>
 8004f28:	4b41      	ldr	r3, [pc, #260]	; (8005030 <xTaskIncrementTick+0x150>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	4b41      	ldr	r3, [pc, #260]	; (8005034 <xTaskIncrementTick+0x154>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a3f      	ldr	r2, [pc, #252]	; (8005030 <xTaskIncrementTick+0x150>)
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	4a3f      	ldr	r2, [pc, #252]	; (8005034 <xTaskIncrementTick+0x154>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b3e      	ldr	r3, [pc, #248]	; (8005038 <xTaskIncrementTick+0x158>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3301      	adds	r3, #1
 8004f42:	4a3d      	ldr	r2, [pc, #244]	; (8005038 <xTaskIncrementTick+0x158>)
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	f000 fadb 	bl	8005500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f4a:	4b3c      	ldr	r3, [pc, #240]	; (800503c <xTaskIncrementTick+0x15c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d349      	bcc.n	8004fe8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f54:	4b36      	ldr	r3, [pc, #216]	; (8005030 <xTaskIncrementTick+0x150>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d104      	bne.n	8004f68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f5e:	4b37      	ldr	r3, [pc, #220]	; (800503c <xTaskIncrementTick+0x15c>)
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	601a      	str	r2, [r3, #0]
					break;
 8004f66:	e03f      	b.n	8004fe8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f68:	4b31      	ldr	r3, [pc, #196]	; (8005030 <xTaskIncrementTick+0x150>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d203      	bcs.n	8004f88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f80:	4a2e      	ldr	r2, [pc, #184]	; (800503c <xTaskIncrementTick+0x15c>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f86:	e02f      	b.n	8004fe8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe fde9 	bl	8003b64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	3318      	adds	r3, #24
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fe fde0 	bl	8003b64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	4b25      	ldr	r3, [pc, #148]	; (8005040 <xTaskIncrementTick+0x160>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d903      	bls.n	8004fb8 <xTaskIncrementTick+0xd8>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	4a22      	ldr	r2, [pc, #136]	; (8005040 <xTaskIncrementTick+0x160>)
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <xTaskIncrementTick+0x164>)
 8004fc6:	441a      	add	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f7fe fd6b 	bl	8003aaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <xTaskIncrementTick+0x168>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d3b8      	bcc.n	8004f54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fe6:	e7b5      	b.n	8004f54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fe8:	4b17      	ldr	r3, [pc, #92]	; (8005048 <xTaskIncrementTick+0x168>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	4915      	ldr	r1, [pc, #84]	; (8005044 <xTaskIncrementTick+0x164>)
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d901      	bls.n	8005004 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005000:	2301      	movs	r3, #1
 8005002:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005004:	4b11      	ldr	r3, [pc, #68]	; (800504c <xTaskIncrementTick+0x16c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800500c:	2301      	movs	r3, #1
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e004      	b.n	800501c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005012:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <xTaskIncrementTick+0x170>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3301      	adds	r3, #1
 8005018:	4a0d      	ldr	r2, [pc, #52]	; (8005050 <xTaskIncrementTick+0x170>)
 800501a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800501c:	697b      	ldr	r3, [r7, #20]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000d08 	.word	0x20000d08
 800502c:	20000ce4 	.word	0x20000ce4
 8005030:	20000c98 	.word	0x20000c98
 8005034:	20000c9c 	.word	0x20000c9c
 8005038:	20000cf8 	.word	0x20000cf8
 800503c:	20000d00 	.word	0x20000d00
 8005040:	20000ce8 	.word	0x20000ce8
 8005044:	20000810 	.word	0x20000810
 8005048:	2000080c 	.word	0x2000080c
 800504c:	20000cf4 	.word	0x20000cf4
 8005050:	20000cf0 	.word	0x20000cf0

08005054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800505a:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <vTaskSwitchContext+0xb0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005062:	4b29      	ldr	r3, [pc, #164]	; (8005108 <vTaskSwitchContext+0xb4>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005068:	e046      	b.n	80050f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800506a:	4b27      	ldr	r3, [pc, #156]	; (8005108 <vTaskSwitchContext+0xb4>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005070:	4b26      	ldr	r3, [pc, #152]	; (800510c <vTaskSwitchContext+0xb8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e010      	b.n	800509a <vTaskSwitchContext+0x46>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <vTaskSwitchContext+0x40>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	607b      	str	r3, [r7, #4]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <vTaskSwitchContext+0x3e>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3b01      	subs	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	491d      	ldr	r1, [pc, #116]	; (8005110 <vTaskSwitchContext+0xbc>)
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0e4      	beq.n	8005078 <vTaskSwitchContext+0x24>
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4a15      	ldr	r2, [pc, #84]	; (8005110 <vTaskSwitchContext+0xbc>)
 80050ba:	4413      	add	r3, r2
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	605a      	str	r2, [r3, #4]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	3308      	adds	r3, #8
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d104      	bne.n	80050de <vTaskSwitchContext+0x8a>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <vTaskSwitchContext+0xc0>)
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	4a08      	ldr	r2, [pc, #32]	; (800510c <vTaskSwitchContext+0xb8>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050ee:	4b09      	ldr	r3, [pc, #36]	; (8005114 <vTaskSwitchContext+0xc0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3354      	adds	r3, #84	; 0x54
 80050f4:	4a08      	ldr	r2, [pc, #32]	; (8005118 <vTaskSwitchContext+0xc4>)
 80050f6:	6013      	str	r3, [r2, #0]
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	20000d08 	.word	0x20000d08
 8005108:	20000cf4 	.word	0x20000cf4
 800510c:	20000ce8 	.word	0x20000ce8
 8005110:	20000810 	.word	0x20000810
 8005114:	2000080c 	.word	0x2000080c
 8005118:	20000010 	.word	0x20000010

0800511c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60fb      	str	r3, [r7, #12]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <vTaskPlaceOnEventList+0x44>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3318      	adds	r3, #24
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fe fcd1 	bl	8003af2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005150:	2101      	movs	r1, #1
 8005152:	6838      	ldr	r0, [r7, #0]
 8005154:	f000 fb7e 	bl	8005854 <prvAddCurrentTaskToDelayedList>
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	2000080c 	.word	0x2000080c

08005164 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	617b      	str	r3, [r7, #20]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3318      	adds	r3, #24
 8005192:	4619      	mov	r1, r3
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7fe fc88 	bl	8003aaa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
 80051a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	68b8      	ldr	r0, [r7, #8]
 80051aa:	f000 fb53 	bl	8005854 <prvAddCurrentTaskToDelayedList>
	}
 80051ae:	bf00      	nop
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	2000080c 	.word	0x2000080c

080051bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	60fb      	str	r3, [r7, #12]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	3318      	adds	r3, #24
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fe fcb9 	bl	8003b64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f2:	4b1e      	ldr	r3, [pc, #120]	; (800526c <xTaskRemoveFromEventList+0xb0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d11d      	bne.n	8005236 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe fcb0 	bl	8003b64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	4b19      	ldr	r3, [pc, #100]	; (8005270 <xTaskRemoveFromEventList+0xb4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d903      	bls.n	8005218 <xTaskRemoveFromEventList+0x5c>
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <xTaskRemoveFromEventList+0xb4>)
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4a13      	ldr	r2, [pc, #76]	; (8005274 <xTaskRemoveFromEventList+0xb8>)
 8005226:	441a      	add	r2, r3
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	3304      	adds	r3, #4
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f7fe fc3b 	bl	8003aaa <vListInsertEnd>
 8005234:	e005      	b.n	8005242 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	3318      	adds	r3, #24
 800523a:	4619      	mov	r1, r3
 800523c:	480e      	ldr	r0, [pc, #56]	; (8005278 <xTaskRemoveFromEventList+0xbc>)
 800523e:	f7fe fc34 	bl	8003aaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	4b0d      	ldr	r3, [pc, #52]	; (800527c <xTaskRemoveFromEventList+0xc0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	429a      	cmp	r2, r3
 800524e:	d905      	bls.n	800525c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <xTaskRemoveFromEventList+0xc4>)
 8005256:	2201      	movs	r2, #1
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e001      	b.n	8005260 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005260:	697b      	ldr	r3, [r7, #20]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000d08 	.word	0x20000d08
 8005270:	20000ce8 	.word	0x20000ce8
 8005274:	20000810 	.word	0x20000810
 8005278:	20000ca0 	.word	0x20000ca0
 800527c:	2000080c 	.word	0x2000080c
 8005280:	20000cf4 	.word	0x20000cf4

08005284 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <vTaskInternalSetTimeOutState+0x24>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005294:	4b05      	ldr	r3, [pc, #20]	; (80052ac <vTaskInternalSetTimeOutState+0x28>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	605a      	str	r2, [r3, #4]
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	20000cf8 	.word	0x20000cf8
 80052ac:	20000ce4 	.word	0x20000ce4

080052b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	613b      	str	r3, [r7, #16]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	60fb      	str	r3, [r7, #12]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80052f2:	f000 ff7f 	bl	80061f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052f6:	4b1d      	ldr	r3, [pc, #116]	; (800536c <xTaskCheckForTimeOut+0xbc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d102      	bne.n	8005316 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005310:	2300      	movs	r3, #0
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	e023      	b.n	800535e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <xTaskCheckForTimeOut+0xc0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d007      	beq.n	8005332 <xTaskCheckForTimeOut+0x82>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	429a      	cmp	r2, r3
 800532a:	d302      	bcc.n	8005332 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800532c:	2301      	movs	r3, #1
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	e015      	b.n	800535e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	429a      	cmp	r2, r3
 800533a:	d20b      	bcs.n	8005354 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	1ad2      	subs	r2, r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff ff9b 	bl	8005284 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	e004      	b.n	800535e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800535a:	2301      	movs	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800535e:	f000 ff79 	bl	8006254 <vPortExitCritical>

	return xReturn;
 8005362:	69fb      	ldr	r3, [r7, #28]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3720      	adds	r7, #32
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000ce4 	.word	0x20000ce4
 8005370:	20000cf8 	.word	0x20000cf8

08005374 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <vTaskMissedYield+0x14>)
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]
}
 800537e:	bf00      	nop
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	20000cf4 	.word	0x20000cf4

0800538c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005394:	f000 f852 	bl	800543c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <prvIdleTask+0x28>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d9f9      	bls.n	8005394 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <prvIdleTask+0x2c>)
 80053a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053b0:	e7f0      	b.n	8005394 <prvIdleTask+0x8>
 80053b2:	bf00      	nop
 80053b4:	20000810 	.word	0x20000810
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053c2:	2300      	movs	r3, #0
 80053c4:	607b      	str	r3, [r7, #4]
 80053c6:	e00c      	b.n	80053e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4a12      	ldr	r2, [pc, #72]	; (800541c <prvInitialiseTaskLists+0x60>)
 80053d4:	4413      	add	r3, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe fb3a 	bl	8003a50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3301      	adds	r3, #1
 80053e0:	607b      	str	r3, [r7, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b37      	cmp	r3, #55	; 0x37
 80053e6:	d9ef      	bls.n	80053c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053e8:	480d      	ldr	r0, [pc, #52]	; (8005420 <prvInitialiseTaskLists+0x64>)
 80053ea:	f7fe fb31 	bl	8003a50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053ee:	480d      	ldr	r0, [pc, #52]	; (8005424 <prvInitialiseTaskLists+0x68>)
 80053f0:	f7fe fb2e 	bl	8003a50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053f4:	480c      	ldr	r0, [pc, #48]	; (8005428 <prvInitialiseTaskLists+0x6c>)
 80053f6:	f7fe fb2b 	bl	8003a50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053fa:	480c      	ldr	r0, [pc, #48]	; (800542c <prvInitialiseTaskLists+0x70>)
 80053fc:	f7fe fb28 	bl	8003a50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005400:	480b      	ldr	r0, [pc, #44]	; (8005430 <prvInitialiseTaskLists+0x74>)
 8005402:	f7fe fb25 	bl	8003a50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <prvInitialiseTaskLists+0x78>)
 8005408:	4a05      	ldr	r2, [pc, #20]	; (8005420 <prvInitialiseTaskLists+0x64>)
 800540a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <prvInitialiseTaskLists+0x7c>)
 800540e:	4a05      	ldr	r2, [pc, #20]	; (8005424 <prvInitialiseTaskLists+0x68>)
 8005410:	601a      	str	r2, [r3, #0]
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000810 	.word	0x20000810
 8005420:	20000c70 	.word	0x20000c70
 8005424:	20000c84 	.word	0x20000c84
 8005428:	20000ca0 	.word	0x20000ca0
 800542c:	20000cb4 	.word	0x20000cb4
 8005430:	20000ccc 	.word	0x20000ccc
 8005434:	20000c98 	.word	0x20000c98
 8005438:	20000c9c 	.word	0x20000c9c

0800543c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005442:	e019      	b.n	8005478 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005444:	f000 fed6 	bl	80061f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005448:	4b10      	ldr	r3, [pc, #64]	; (800548c <prvCheckTasksWaitingTermination+0x50>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe fb85 	bl	8003b64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800545a:	4b0d      	ldr	r3, [pc, #52]	; (8005490 <prvCheckTasksWaitingTermination+0x54>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3b01      	subs	r3, #1
 8005460:	4a0b      	ldr	r2, [pc, #44]	; (8005490 <prvCheckTasksWaitingTermination+0x54>)
 8005462:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <prvCheckTasksWaitingTermination+0x58>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3b01      	subs	r3, #1
 800546a:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <prvCheckTasksWaitingTermination+0x58>)
 800546c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800546e:	f000 fef1 	bl	8006254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f810 	bl	8005498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <prvCheckTasksWaitingTermination+0x58>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e1      	bne.n	8005444 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000cb4 	.word	0x20000cb4
 8005490:	20000ce0 	.word	0x20000ce0
 8005494:	20000cc8 	.word	0x20000cc8

08005498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3354      	adds	r3, #84	; 0x54
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 feab 	bl	8007200 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d108      	bne.n	80054c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 f889 	bl	80065d0 <vPortFree>
				vPortFree( pxTCB );
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f001 f886 	bl	80065d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054c4:	e018      	b.n	80054f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d103      	bne.n	80054d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 f87d 	bl	80065d0 <vPortFree>
	}
 80054d6:	e00f      	b.n	80054f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d00a      	beq.n	80054f8 <prvDeleteTCB+0x60>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60fb      	str	r3, [r7, #12]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <prvDeleteTCB+0x5e>
	}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <prvResetNextTaskUnblockTime+0x38>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <prvResetNextTaskUnblockTime+0x3c>)
 8005512:	f04f 32ff 	mov.w	r2, #4294967295
 8005516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005518:	e008      	b.n	800552c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800551a:	4b07      	ldr	r3, [pc, #28]	; (8005538 <prvResetNextTaskUnblockTime+0x38>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a04      	ldr	r2, [pc, #16]	; (800553c <prvResetNextTaskUnblockTime+0x3c>)
 800552a:	6013      	str	r3, [r2, #0]
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	20000c98 	.word	0x20000c98
 800553c:	20000d00 	.word	0x20000d00

08005540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005546:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <xTaskGetSchedulerState+0x34>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d102      	bne.n	8005554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800554e:	2301      	movs	r3, #1
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	e008      	b.n	8005566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005554:	4b08      	ldr	r3, [pc, #32]	; (8005578 <xTaskGetSchedulerState+0x38>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800555c:	2302      	movs	r3, #2
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	e001      	b.n	8005566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005562:	2300      	movs	r3, #0
 8005564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005566:	687b      	ldr	r3, [r7, #4]
	}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	20000cec 	.word	0x20000cec
 8005578:	20000d08 	.word	0x20000d08

0800557c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d051      	beq.n	8005636 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005596:	4b2a      	ldr	r3, [pc, #168]	; (8005640 <xTaskPriorityInherit+0xc4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	429a      	cmp	r2, r3
 800559e:	d241      	bcs.n	8005624 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	db06      	blt.n	80055b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a8:	4b25      	ldr	r3, [pc, #148]	; (8005640 <xTaskPriorityInherit+0xc4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	6959      	ldr	r1, [r3, #20]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <xTaskPriorityInherit+0xc8>)
 80055c8:	4413      	add	r3, r2
 80055ca:	4299      	cmp	r1, r3
 80055cc:	d122      	bne.n	8005614 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fac6 	bl	8003b64 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055d8:	4b19      	ldr	r3, [pc, #100]	; (8005640 <xTaskPriorityInherit+0xc4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e6:	4b18      	ldr	r3, [pc, #96]	; (8005648 <xTaskPriorityInherit+0xcc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d903      	bls.n	80055f6 <xTaskPriorityInherit+0x7a>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	4a15      	ldr	r2, [pc, #84]	; (8005648 <xTaskPriorityInherit+0xcc>)
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4a10      	ldr	r2, [pc, #64]	; (8005644 <xTaskPriorityInherit+0xc8>)
 8005604:	441a      	add	r2, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	3304      	adds	r3, #4
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f7fe fa4c 	bl	8003aaa <vListInsertEnd>
 8005612:	e004      	b.n	800561e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005614:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <xTaskPriorityInherit+0xc4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800561e:	2301      	movs	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e008      	b.n	8005636 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005628:	4b05      	ldr	r3, [pc, #20]	; (8005640 <xTaskPriorityInherit+0xc4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	429a      	cmp	r2, r3
 8005630:	d201      	bcs.n	8005636 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005632:	2301      	movs	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005636:	68fb      	ldr	r3, [r7, #12]
	}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	2000080c 	.word	0x2000080c
 8005644:	20000810 	.word	0x20000810
 8005648:	20000ce8 	.word	0x20000ce8

0800564c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d056      	beq.n	8005710 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005662:	4b2e      	ldr	r3, [pc, #184]	; (800571c <xTaskPriorityDisinherit+0xd0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	429a      	cmp	r2, r3
 800566a:	d00a      	beq.n	8005682 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	60fb      	str	r3, [r7, #12]
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10a      	bne.n	80056a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	60bb      	str	r3, [r7, #8]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a4:	1e5a      	subs	r2, r3, #1
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d02c      	beq.n	8005710 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d128      	bne.n	8005710 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fe fa4e 	bl	8003b64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <xTaskPriorityDisinherit+0xd4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d903      	bls.n	80056f0 <xTaskPriorityDisinherit+0xa4>
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	4a0c      	ldr	r2, [pc, #48]	; (8005720 <xTaskPriorityDisinherit+0xd4>)
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4a09      	ldr	r2, [pc, #36]	; (8005724 <xTaskPriorityDisinherit+0xd8>)
 80056fe:	441a      	add	r2, r3
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f7fe f9cf 	bl	8003aaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800570c:	2301      	movs	r3, #1
 800570e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005710:	697b      	ldr	r3, [r7, #20]
	}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	2000080c 	.word	0x2000080c
 8005720:	20000ce8 	.word	0x20000ce8
 8005724:	20000810 	.word	0x20000810

08005728 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005736:	2301      	movs	r3, #1
 8005738:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d06a      	beq.n	8005816 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	60fb      	str	r3, [r7, #12]
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d902      	bls.n	800576e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	e002      	b.n	8005774 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	429a      	cmp	r2, r3
 800577c:	d04b      	beq.n	8005816 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	429a      	cmp	r2, r3
 8005786:	d146      	bne.n	8005816 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	429a      	cmp	r2, r3
 8005790:	d10a      	bne.n	80057a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	60bb      	str	r3, [r7, #8]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	69fa      	ldr	r2, [r7, #28]
 80057b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	db04      	blt.n	80057c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	6959      	ldr	r1, [r3, #20]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4a13      	ldr	r2, [pc, #76]	; (8005824 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80057d6:	4413      	add	r3, r2
 80057d8:	4299      	cmp	r1, r3
 80057da:	d11c      	bne.n	8005816 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	3304      	adds	r3, #4
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe f9bf 	bl	8003b64 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ea:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d903      	bls.n	80057fa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	4a0c      	ldr	r2, [pc, #48]	; (8005828 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4a07      	ldr	r2, [pc, #28]	; (8005824 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005808:	441a      	add	r2, r3
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	3304      	adds	r3, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f7fe f94a 	bl	8003aaa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005816:	bf00      	nop
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	2000080c 	.word	0x2000080c
 8005824:	20000810 	.word	0x20000810
 8005828:	20000ce8 	.word	0x20000ce8

0800582c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <pvTaskIncrementMutexHeldCount+0x24>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d004      	beq.n	8005842 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <pvTaskIncrementMutexHeldCount+0x24>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800583e:	3201      	adds	r2, #1
 8005840:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005842:	4b03      	ldr	r3, [pc, #12]	; (8005850 <pvTaskIncrementMutexHeldCount+0x24>)
 8005844:	681b      	ldr	r3, [r3, #0]
	}
 8005846:	4618      	mov	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	2000080c 	.word	0x2000080c

08005854 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800585e:	4b21      	ldr	r3, [pc, #132]	; (80058e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005864:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3304      	adds	r3, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe f97a 	bl	8003b64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d10a      	bne.n	800588e <prvAddCurrentTaskToDelayedList+0x3a>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800587e:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3304      	adds	r3, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4819      	ldr	r0, [pc, #100]	; (80058ec <prvAddCurrentTaskToDelayedList+0x98>)
 8005888:	f7fe f90f 	bl	8003aaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800588c:	e026      	b.n	80058dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4413      	add	r3, r2
 8005894:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005896:	4b14      	ldr	r3, [pc, #80]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d209      	bcs.n	80058ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058a6:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b0f      	ldr	r3, [pc, #60]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f7fe f91d 	bl	8003af2 <vListInsert>
}
 80058b8:	e010      	b.n	80058dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ba:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b0a      	ldr	r3, [pc, #40]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f7fe f913 	bl	8003af2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d202      	bcs.n	80058dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058d6:	4a08      	ldr	r2, [pc, #32]	; (80058f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	bf00      	nop
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000ce4 	.word	0x20000ce4
 80058e8:	2000080c 	.word	0x2000080c
 80058ec:	20000ccc 	.word	0x20000ccc
 80058f0:	20000c9c 	.word	0x20000c9c
 80058f4:	20000c98 	.word	0x20000c98
 80058f8:	20000d00 	.word	0x20000d00

080058fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005906:	f000 fb07 	bl	8005f18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800590a:	4b1c      	ldr	r3, [pc, #112]	; (800597c <xTimerCreateTimerTask+0x80>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d021      	beq.n	8005956 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800591a:	1d3a      	adds	r2, r7, #4
 800591c:	f107 0108 	add.w	r1, r7, #8
 8005920:	f107 030c 	add.w	r3, r7, #12
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe f879 	bl	8003a1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	9202      	str	r2, [sp, #8]
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	2302      	movs	r3, #2
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	2300      	movs	r3, #0
 800593a:	460a      	mov	r2, r1
 800593c:	4910      	ldr	r1, [pc, #64]	; (8005980 <xTimerCreateTimerTask+0x84>)
 800593e:	4811      	ldr	r0, [pc, #68]	; (8005984 <xTimerCreateTimerTask+0x88>)
 8005940:	f7fe ffb6 	bl	80048b0 <xTaskCreateStatic>
 8005944:	4603      	mov	r3, r0
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <xTimerCreateTimerTask+0x8c>)
 8005948:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800594a:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <xTimerCreateTimerTask+0x8c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005952:	2301      	movs	r3, #1
 8005954:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	613b      	str	r3, [r7, #16]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005972:	697b      	ldr	r3, [r7, #20]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000d3c 	.word	0x20000d3c
 8005980:	08007ab4 	.word	0x08007ab4
 8005984:	08005ac1 	.word	0x08005ac1
 8005988:	20000d40 	.word	0x20000d40

0800598c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800599a:	2300      	movs	r3, #0
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	623b      	str	r3, [r7, #32]
}
 80059b6:	bf00      	nop
 80059b8:	e7fe      	b.n	80059b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059ba:	4b1a      	ldr	r3, [pc, #104]	; (8005a24 <xTimerGenericCommand+0x98>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d02a      	beq.n	8005a18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b05      	cmp	r3, #5
 80059d2:	dc18      	bgt.n	8005a06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059d4:	f7ff fdb4 	bl	8005540 <xTaskGetSchedulerState>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d109      	bne.n	80059f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059de:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <xTimerGenericCommand+0x98>)
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	f107 0110 	add.w	r1, r7, #16
 80059e6:	2300      	movs	r3, #0
 80059e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ea:	f7fe fa55 	bl	8003e98 <xQueueGenericSend>
 80059ee:	6278      	str	r0, [r7, #36]	; 0x24
 80059f0:	e012      	b.n	8005a18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <xTimerGenericCommand+0x98>)
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	f107 0110 	add.w	r1, r7, #16
 80059fa:	2300      	movs	r3, #0
 80059fc:	2200      	movs	r2, #0
 80059fe:	f7fe fa4b 	bl	8003e98 <xQueueGenericSend>
 8005a02:	6278      	str	r0, [r7, #36]	; 0x24
 8005a04:	e008      	b.n	8005a18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a06:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <xTimerGenericCommand+0x98>)
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	f107 0110 	add.w	r1, r7, #16
 8005a0e:	2300      	movs	r3, #0
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	f7fe fb3f 	bl	8004094 <xQueueGenericSendFromISR>
 8005a16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3728      	adds	r7, #40	; 0x28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000d3c 	.word	0x20000d3c

08005a28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a32:	4b22      	ldr	r3, [pc, #136]	; (8005abc <prvProcessExpiredTimer+0x94>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fe f88f 	bl	8003b64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d022      	beq.n	8005a9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	699a      	ldr	r2, [r3, #24]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	18d1      	adds	r1, r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	6978      	ldr	r0, [r7, #20]
 8005a62:	f000 f8d1 	bl	8005c08 <prvInsertTimerInActiveList>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01f      	beq.n	8005aac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	2300      	movs	r3, #0
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	2100      	movs	r1, #0
 8005a76:	6978      	ldr	r0, [r7, #20]
 8005a78:	f7ff ff88 	bl	800598c <xTimerGenericCommand>
 8005a7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d113      	bne.n	8005aac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	60fb      	str	r3, [r7, #12]
}
 8005a96:	bf00      	nop
 8005a98:	e7fe      	b.n	8005a98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	6978      	ldr	r0, [r7, #20]
 8005ab2:	4798      	blx	r3
}
 8005ab4:	bf00      	nop
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000d34 	.word	0x20000d34

08005ac0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ac8:	f107 0308 	add.w	r3, r7, #8
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f857 	bl	8005b80 <prvGetNextExpireTime>
 8005ad2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f803 	bl	8005ae4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ade:	f000 f8d5 	bl	8005c8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ae2:	e7f1      	b.n	8005ac8 <prvTimerTask+0x8>

08005ae4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005aee:	f7ff f93b 	bl	8004d68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005af2:	f107 0308 	add.w	r3, r7, #8
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f866 	bl	8005bc8 <prvSampleTimeNow>
 8005afc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d130      	bne.n	8005b66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <prvProcessTimerOrBlockTask+0x3c>
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d806      	bhi.n	8005b20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b12:	f7ff f937 	bl	8004d84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b16:	68f9      	ldr	r1, [r7, #12]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff ff85 	bl	8005a28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b1e:	e024      	b.n	8005b6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d008      	beq.n	8005b38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b26:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <prvProcessTimerOrBlockTask+0x90>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <prvProcessTimerOrBlockTask+0x50>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <prvProcessTimerOrBlockTask+0x52>
 8005b34:	2300      	movs	r3, #0
 8005b36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <prvProcessTimerOrBlockTask+0x94>)
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	4619      	mov	r1, r3
 8005b46:	f7fe fe7f 	bl	8004848 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b4a:	f7ff f91b 	bl	8004d84 <xTaskResumeAll>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b54:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <prvProcessTimerOrBlockTask+0x98>)
 8005b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	f3bf 8f6f 	isb	sy
}
 8005b64:	e001      	b.n	8005b6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b66:	f7ff f90d 	bl	8004d84 <xTaskResumeAll>
}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000d38 	.word	0x20000d38
 8005b78:	20000d3c 	.word	0x20000d3c
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <prvGetNextExpireTime+0x44>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <prvGetNextExpireTime+0x16>
 8005b92:	2201      	movs	r2, #1
 8005b94:	e000      	b.n	8005b98 <prvGetNextExpireTime+0x18>
 8005b96:	2200      	movs	r2, #0
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ba4:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <prvGetNextExpireTime+0x44>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e001      	b.n	8005bb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000d34 	.word	0x20000d34

08005bc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bd0:	f7ff f976 	bl	8004ec0 <xTaskGetTickCount>
 8005bd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <prvSampleTimeNow+0x3c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d205      	bcs.n	8005bec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005be0:	f000 f936 	bl	8005e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e002      	b.n	8005bf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bf2:	4a04      	ldr	r2, [pc, #16]	; (8005c04 <prvSampleTimeNow+0x3c>)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000d44 	.word	0x20000d44

08005c08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d812      	bhi.n	8005c54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	1ad2      	subs	r2, r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d302      	bcc.n	8005c42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e01b      	b.n	8005c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c42:	4b10      	ldr	r3, [pc, #64]	; (8005c84 <prvInsertTimerInActiveList+0x7c>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f7fd ff50 	bl	8003af2 <vListInsert>
 8005c52:	e012      	b.n	8005c7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d206      	bcs.n	8005c6a <prvInsertTimerInActiveList+0x62>
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d302      	bcc.n	8005c6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c64:	2301      	movs	r3, #1
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e007      	b.n	8005c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c6a:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <prvInsertTimerInActiveList+0x80>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3304      	adds	r3, #4
 8005c72:	4619      	mov	r1, r3
 8005c74:	4610      	mov	r0, r2
 8005c76:	f7fd ff3c 	bl	8003af2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c7a:	697b      	ldr	r3, [r7, #20]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000d38 	.word	0x20000d38
 8005c88:	20000d34 	.word	0x20000d34

08005c8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08e      	sub	sp, #56	; 0x38
 8005c90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c92:	e0ca      	b.n	8005e2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	da18      	bge.n	8005ccc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	61fb      	str	r3, [r7, #28]
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc2:	6850      	ldr	r0, [r2, #4]
 8005cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc6:	6892      	ldr	r2, [r2, #8]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f2c0 80aa 	blt.w	8005e28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fd ff3d 	bl	8003b64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cea:	463b      	mov	r3, r7
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff ff6b 	bl	8005bc8 <prvSampleTimeNow>
 8005cf2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b09      	cmp	r3, #9
 8005cf8:	f200 8097 	bhi.w	8005e2a <prvProcessReceivedCommands+0x19e>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <prvProcessReceivedCommands+0x78>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08005da1 	.word	0x08005da1
 8005d14:	08005db5 	.word	0x08005db5
 8005d18:	08005dff 	.word	0x08005dff
 8005d1c:	08005d2d 	.word	0x08005d2d
 8005d20:	08005d2d 	.word	0x08005d2d
 8005d24:	08005da1 	.word	0x08005da1
 8005d28:	08005db5 	.word	0x08005db5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	18d1      	adds	r1, r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4c:	f7ff ff5c 	bl	8005c08 <prvInsertTimerInActiveList>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d069      	beq.n	8005e2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d05e      	beq.n	8005e2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	441a      	add	r2, r3
 8005d74:	2300      	movs	r3, #0
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d7e:	f7ff fe05 	bl	800598c <xTimerGenericCommand>
 8005d82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d14f      	bne.n	8005e2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	61bb      	str	r3, [r7, #24]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005db2:	e03a      	b.n	8005e2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	617b      	str	r3, [r7, #20]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	18d1      	adds	r1, r2, r3
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df8:	f7ff ff06 	bl	8005c08 <prvInsertTimerInActiveList>
					break;
 8005dfc:	e015      	b.n	8005e2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d103      	bne.n	8005e14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e0e:	f000 fbdf 	bl	80065d0 <vPortFree>
 8005e12:	e00a      	b.n	8005e2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e1a:	f023 0301 	bic.w	r3, r3, #1
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e26:	e000      	b.n	8005e2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e2a:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <prvProcessReceivedCommands+0x1c0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	1d39      	adds	r1, r7, #4
 8005e30:	2200      	movs	r2, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe f9ca 	bl	80041cc <xQueueReceive>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f47f af2a 	bne.w	8005c94 <prvProcessReceivedCommands+0x8>
	}
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	3730      	adds	r7, #48	; 0x30
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000d3c 	.word	0x20000d3c

08005e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e56:	e048      	b.n	8005eea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e58:	4b2d      	ldr	r3, [pc, #180]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e62:	4b2b      	ldr	r3, [pc, #172]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fd fe77 	bl	8003b64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02e      	beq.n	8005eea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4413      	add	r3, r2
 8005e94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d90e      	bls.n	8005ebc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eaa:	4b19      	ldr	r3, [pc, #100]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	f7fd fe1c 	bl	8003af2 <vListInsert>
 8005eba:	e016      	b.n	8005eea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff fd60 	bl	800598c <xTimerGenericCommand>
 8005ecc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	603b      	str	r3, [r7, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	e7fe      	b.n	8005ee8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1b1      	bne.n	8005e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <prvSwitchTimerLists+0xc4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <prvSwitchTimerLists+0xc0>)
 8005f00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f02:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <prvSwitchTimerLists+0xc4>)
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	6013      	str	r3, [r2, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000d34 	.word	0x20000d34
 8005f14:	20000d38 	.word	0x20000d38

08005f18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f1e:	f000 f969 	bl	80061f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f22:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <prvCheckForValidListAndQueue+0x60>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d120      	bne.n	8005f6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f2a:	4814      	ldr	r0, [pc, #80]	; (8005f7c <prvCheckForValidListAndQueue+0x64>)
 8005f2c:	f7fd fd90 	bl	8003a50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f30:	4813      	ldr	r0, [pc, #76]	; (8005f80 <prvCheckForValidListAndQueue+0x68>)
 8005f32:	f7fd fd8d 	bl	8003a50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <prvCheckForValidListAndQueue+0x6c>)
 8005f38:	4a10      	ldr	r2, [pc, #64]	; (8005f7c <prvCheckForValidListAndQueue+0x64>)
 8005f3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f3c:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <prvCheckForValidListAndQueue+0x70>)
 8005f3e:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <prvCheckForValidListAndQueue+0x68>)
 8005f40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f42:	2300      	movs	r3, #0
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4b11      	ldr	r3, [pc, #68]	; (8005f8c <prvCheckForValidListAndQueue+0x74>)
 8005f48:	4a11      	ldr	r2, [pc, #68]	; (8005f90 <prvCheckForValidListAndQueue+0x78>)
 8005f4a:	2110      	movs	r1, #16
 8005f4c:	200a      	movs	r0, #10
 8005f4e:	f7fd fe9b 	bl	8003c88 <xQueueGenericCreateStatic>
 8005f52:	4603      	mov	r3, r0
 8005f54:	4a08      	ldr	r2, [pc, #32]	; (8005f78 <prvCheckForValidListAndQueue+0x60>)
 8005f56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f58:	4b07      	ldr	r3, [pc, #28]	; (8005f78 <prvCheckForValidListAndQueue+0x60>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <prvCheckForValidListAndQueue+0x60>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	490b      	ldr	r1, [pc, #44]	; (8005f94 <prvCheckForValidListAndQueue+0x7c>)
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fe fc44 	bl	80047f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f6c:	f000 f972 	bl	8006254 <vPortExitCritical>
}
 8005f70:	bf00      	nop
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000d3c 	.word	0x20000d3c
 8005f7c:	20000d0c 	.word	0x20000d0c
 8005f80:	20000d20 	.word	0x20000d20
 8005f84:	20000d34 	.word	0x20000d34
 8005f88:	20000d38 	.word	0x20000d38
 8005f8c:	20000de8 	.word	0x20000de8
 8005f90:	20000d48 	.word	0x20000d48
 8005f94:	08007abc 	.word	0x08007abc

08005f98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3b04      	subs	r3, #4
 8005fa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3b04      	subs	r3, #4
 8005fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f023 0201 	bic.w	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3b04      	subs	r3, #4
 8005fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fc8:	4a0c      	ldr	r2, [pc, #48]	; (8005ffc <pxPortInitialiseStack+0x64>)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3b14      	subs	r3, #20
 8005fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3b04      	subs	r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f06f 0202 	mvn.w	r2, #2
 8005fe6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3b20      	subs	r3, #32
 8005fec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	08006001 	.word	0x08006001

08006000 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800600a:	4b12      	ldr	r3, [pc, #72]	; (8006054 <prvTaskExitError+0x54>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d00a      	beq.n	800602a <prvTaskExitError+0x2a>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	60fb      	str	r3, [r7, #12]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <prvTaskExitError+0x28>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	60bb      	str	r3, [r7, #8]
}
 800603c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800603e:	bf00      	nop
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0fc      	beq.n	8006040 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	3714      	adds	r7, #20
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	2000000c 	.word	0x2000000c
	...

08006060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <pxCurrentTCBConst2>)
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	6808      	ldr	r0, [r1, #0]
 8006066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	f380 8809 	msr	PSP, r0
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f04f 0000 	mov.w	r0, #0
 8006076:	f380 8811 	msr	BASEPRI, r0
 800607a:	4770      	bx	lr
 800607c:	f3af 8000 	nop.w

08006080 <pxCurrentTCBConst2>:
 8006080:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006088:	4808      	ldr	r0, [pc, #32]	; (80060ac <prvPortStartFirstTask+0x24>)
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	6800      	ldr	r0, [r0, #0]
 800608e:	f380 8808 	msr	MSP, r0
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8814 	msr	CONTROL, r0
 800609a:	b662      	cpsie	i
 800609c:	b661      	cpsie	f
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	df00      	svc	0
 80060a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060aa:	bf00      	nop
 80060ac:	e000ed08 	.word	0xe000ed08

080060b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060b6:	4b46      	ldr	r3, [pc, #280]	; (80061d0 <xPortStartScheduler+0x120>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a46      	ldr	r2, [pc, #280]	; (80061d4 <xPortStartScheduler+0x124>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10a      	bne.n	80060d6 <xPortStartScheduler+0x26>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	613b      	str	r3, [r7, #16]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060d6:	4b3e      	ldr	r3, [pc, #248]	; (80061d0 <xPortStartScheduler+0x120>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <xPortStartScheduler+0x128>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d10a      	bne.n	80060f6 <xPortStartScheduler+0x46>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060f6:	4b39      	ldr	r3, [pc, #228]	; (80061dc <xPortStartScheduler+0x12c>)
 80060f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	22ff      	movs	r2, #255	; 0xff
 8006106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006118:	b2da      	uxtb	r2, r3
 800611a:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <xPortStartScheduler+0x130>)
 800611c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800611e:	4b31      	ldr	r3, [pc, #196]	; (80061e4 <xPortStartScheduler+0x134>)
 8006120:	2207      	movs	r2, #7
 8006122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006124:	e009      	b.n	800613a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006126:	4b2f      	ldr	r3, [pc, #188]	; (80061e4 <xPortStartScheduler+0x134>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3b01      	subs	r3, #1
 800612c:	4a2d      	ldr	r2, [pc, #180]	; (80061e4 <xPortStartScheduler+0x134>)
 800612e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	b2db      	uxtb	r3, r3
 8006138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b80      	cmp	r3, #128	; 0x80
 8006144:	d0ef      	beq.n	8006126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006146:	4b27      	ldr	r3, [pc, #156]	; (80061e4 <xPortStartScheduler+0x134>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1c3 0307 	rsb	r3, r3, #7
 800614e:	2b04      	cmp	r3, #4
 8006150:	d00a      	beq.n	8006168 <xPortStartScheduler+0xb8>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60bb      	str	r3, [r7, #8]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006168:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <xPortStartScheduler+0x134>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <xPortStartScheduler+0x134>)
 8006170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006172:	4b1c      	ldr	r3, [pc, #112]	; (80061e4 <xPortStartScheduler+0x134>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800617a:	4a1a      	ldr	r2, [pc, #104]	; (80061e4 <xPortStartScheduler+0x134>)
 800617c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006186:	4b18      	ldr	r3, [pc, #96]	; (80061e8 <xPortStartScheduler+0x138>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <xPortStartScheduler+0x138>)
 800618c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <xPortStartScheduler+0x138>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <xPortStartScheduler+0x138>)
 8006198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800619c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800619e:	f000 f8dd 	bl	800635c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061a2:	4b12      	ldr	r3, [pc, #72]	; (80061ec <xPortStartScheduler+0x13c>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061a8:	f000 f8fc 	bl	80063a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061ac:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <xPortStartScheduler+0x140>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0f      	ldr	r2, [pc, #60]	; (80061f0 <xPortStartScheduler+0x140>)
 80061b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061b8:	f7ff ff66 	bl	8006088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061bc:	f7fe ff4a 	bl	8005054 <vTaskSwitchContext>
	prvTaskExitError();
 80061c0:	f7ff ff1e 	bl	8006000 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	e000ed00 	.word	0xe000ed00
 80061d4:	410fc271 	.word	0x410fc271
 80061d8:	410fc270 	.word	0x410fc270
 80061dc:	e000e400 	.word	0xe000e400
 80061e0:	20000e38 	.word	0x20000e38
 80061e4:	20000e3c 	.word	0x20000e3c
 80061e8:	e000ed20 	.word	0xe000ed20
 80061ec:	2000000c 	.word	0x2000000c
 80061f0:	e000ef34 	.word	0xe000ef34

080061f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	607b      	str	r3, [r7, #4]
}
 800620c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <vPortEnterCritical+0x58>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3301      	adds	r3, #1
 8006214:	4a0d      	ldr	r2, [pc, #52]	; (800624c <vPortEnterCritical+0x58>)
 8006216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006218:	4b0c      	ldr	r3, [pc, #48]	; (800624c <vPortEnterCritical+0x58>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d10f      	bne.n	8006240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <vPortEnterCritical+0x5c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <vPortEnterCritical+0x4c>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	603b      	str	r3, [r7, #0]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <vPortEnterCritical+0x4a>
	}
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	2000000c 	.word	0x2000000c
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <vPortExitCritical+0x50>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <vPortExitCritical+0x24>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	607b      	str	r3, [r7, #4]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006278:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <vPortExitCritical+0x50>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3b01      	subs	r3, #1
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <vPortExitCritical+0x50>)
 8006280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006282:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <vPortExitCritical+0x50>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d105      	bne.n	8006296 <vPortExitCritical+0x42>
 800628a:	2300      	movs	r3, #0
 800628c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	f383 8811 	msr	BASEPRI, r3
}
 8006294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	2000000c 	.word	0x2000000c
	...

080062b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062b0:	f3ef 8009 	mrs	r0, PSP
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <pxCurrentTCBConst>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f01e 0f10 	tst.w	lr, #16
 80062c0:	bf08      	it	eq
 80062c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	6010      	str	r0, [r2, #0]
 80062cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062d4:	f380 8811 	msr	BASEPRI, r0
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f7fe feb8 	bl	8005054 <vTaskSwitchContext>
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	f380 8811 	msr	BASEPRI, r0
 80062ec:	bc09      	pop	{r0, r3}
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	6808      	ldr	r0, [r1, #0]
 80062f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f6:	f01e 0f10 	tst.w	lr, #16
 80062fa:	bf08      	it	eq
 80062fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006300:	f380 8809 	msr	PSP, r0
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst>:
 8006310:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
}
 8006330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006332:	f7fe fdd5 	bl	8004ee0 <xTaskIncrementTick>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <xPortSysTickHandler+0x40>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
}
 800634e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <vPortSetupTimerInterrupt+0x34>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <vPortSetupTimerInterrupt+0x38>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <vPortSetupTimerInterrupt+0x3c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a0a      	ldr	r2, [pc, #40]	; (800639c <vPortSetupTimerInterrupt+0x40>)
 8006372:	fba2 2303 	umull	r2, r3, r2, r3
 8006376:	099b      	lsrs	r3, r3, #6
 8006378:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <vPortSetupTimerInterrupt+0x44>)
 800637a:	3b01      	subs	r3, #1
 800637c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800637e:	4b04      	ldr	r3, [pc, #16]	; (8006390 <vPortSetupTimerInterrupt+0x34>)
 8006380:	2207      	movs	r2, #7
 8006382:	601a      	str	r2, [r3, #0]
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	e000e010 	.word	0xe000e010
 8006394:	e000e018 	.word	0xe000e018
 8006398:	20000000 	.word	0x20000000
 800639c:	10624dd3 	.word	0x10624dd3
 80063a0:	e000e014 	.word	0xe000e014

080063a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063b4 <vPortEnableVFP+0x10>
 80063a8:	6801      	ldr	r1, [r0, #0]
 80063aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063ae:	6001      	str	r1, [r0, #0]
 80063b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063b2:	bf00      	nop
 80063b4:	e000ed88 	.word	0xe000ed88

080063b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d914      	bls.n	80063f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063ca:	4a17      	ldr	r2, [pc, #92]	; (8006428 <vPortValidateInterruptPriority+0x70>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063d4:	4b15      	ldr	r3, [pc, #84]	; (800642c <vPortValidateInterruptPriority+0x74>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	7afa      	ldrb	r2, [r7, #11]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d20a      	bcs.n	80063f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <vPortValidateInterruptPriority+0x78>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <vPortValidateInterruptPriority+0x7c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d90a      	bls.n	800641a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	603b      	str	r3, [r7, #0]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <vPortValidateInterruptPriority+0x60>
	}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	e000e3f0 	.word	0xe000e3f0
 800642c:	20000e38 	.word	0x20000e38
 8006430:	e000ed0c 	.word	0xe000ed0c
 8006434:	20000e3c 	.word	0x20000e3c

08006438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006444:	f7fe fc90 	bl	8004d68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006448:	4b5b      	ldr	r3, [pc, #364]	; (80065b8 <pvPortMalloc+0x180>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006450:	f000 f920 	bl	8006694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006454:	4b59      	ldr	r3, [pc, #356]	; (80065bc <pvPortMalloc+0x184>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	f040 8093 	bne.w	8006588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01d      	beq.n	80064a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006468:	2208      	movs	r2, #8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d014      	beq.n	80064a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f023 0307 	bic.w	r3, r3, #7
 8006480:	3308      	adds	r3, #8
 8006482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <pvPortMalloc+0x6c>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	617b      	str	r3, [r7, #20]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d06e      	beq.n	8006588 <pvPortMalloc+0x150>
 80064aa:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <pvPortMalloc+0x188>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d869      	bhi.n	8006588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064b4:	4b43      	ldr	r3, [pc, #268]	; (80065c4 <pvPortMalloc+0x18c>)
 80064b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064b8:	4b42      	ldr	r3, [pc, #264]	; (80065c4 <pvPortMalloc+0x18c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064be:	e004      	b.n	80064ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d903      	bls.n	80064dc <pvPortMalloc+0xa4>
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f1      	bne.n	80064c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064dc:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <pvPortMalloc+0x180>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d050      	beq.n	8006588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2208      	movs	r2, #8
 80064ec:	4413      	add	r3, r2
 80064ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	1ad2      	subs	r2, r2, r3
 8006500:	2308      	movs	r3, #8
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	429a      	cmp	r2, r3
 8006506:	d91f      	bls.n	8006548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <pvPortMalloc+0xf8>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	613b      	str	r3, [r7, #16]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	1ad2      	subs	r2, r2, r3
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006542:	69b8      	ldr	r0, [r7, #24]
 8006544:	f000 f908 	bl	8006758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <pvPortMalloc+0x188>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <pvPortMalloc+0x188>)
 8006554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006556:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <pvPortMalloc+0x188>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <pvPortMalloc+0x190>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d203      	bcs.n	800656a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006562:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <pvPortMalloc+0x188>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <pvPortMalloc+0x190>)
 8006568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <pvPortMalloc+0x184>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	431a      	orrs	r2, r3
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <pvPortMalloc+0x194>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3301      	adds	r3, #1
 8006584:	4a11      	ldr	r2, [pc, #68]	; (80065cc <pvPortMalloc+0x194>)
 8006586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006588:	f7fe fbfc 	bl	8004d84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <pvPortMalloc+0x174>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60fb      	str	r3, [r7, #12]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <pvPortMalloc+0x172>
	return pvReturn;
 80065ac:	69fb      	ldr	r3, [r7, #28]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3728      	adds	r7, #40	; 0x28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	200029a0 	.word	0x200029a0
 80065bc:	200029b4 	.word	0x200029b4
 80065c0:	200029a4 	.word	0x200029a4
 80065c4:	20002998 	.word	0x20002998
 80065c8:	200029a8 	.word	0x200029a8
 80065cc:	200029ac 	.word	0x200029ac

080065d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d04d      	beq.n	800667e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065e2:	2308      	movs	r3, #8
 80065e4:	425b      	negs	r3, r3
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	4b24      	ldr	r3, [pc, #144]	; (8006688 <vPortFree+0xb8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10a      	bne.n	8006614 <vPortFree+0x44>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	60fb      	str	r3, [r7, #12]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <vPortFree+0x62>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60bb      	str	r3, [r7, #8]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <vPortFree+0xb8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01e      	beq.n	800667e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11a      	bne.n	800667e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <vPortFree+0xb8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	43db      	mvns	r3, r3
 8006652:	401a      	ands	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006658:	f7fe fb86 	bl	8004d68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <vPortFree+0xbc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4413      	add	r3, r2
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <vPortFree+0xbc>)
 8006668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f000 f874 	bl	8006758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <vPortFree+0xc0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	4a06      	ldr	r2, [pc, #24]	; (8006690 <vPortFree+0xc0>)
 8006678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800667a:	f7fe fb83 	bl	8004d84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200029b4 	.word	0x200029b4
 800668c:	200029a4 	.word	0x200029a4
 8006690:	200029b0 	.word	0x200029b0

08006694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800669a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800669e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066a0:	4b27      	ldr	r3, [pc, #156]	; (8006740 <prvHeapInit+0xac>)
 80066a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3307      	adds	r3, #7
 80066b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0307 	bic.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <prvHeapInit+0xac>)
 80066c4:	4413      	add	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066cc:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <prvHeapInit+0xb0>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <prvHeapInit+0xb0>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066e0:	2208      	movs	r2, #8
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0307 	bic.w	r3, r3, #7
 80066ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a15      	ldr	r2, [pc, #84]	; (8006748 <prvHeapInit+0xb4>)
 80066f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <prvHeapInit+0xb4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066fe:	4b12      	ldr	r3, [pc, #72]	; (8006748 <prvHeapInit+0xb4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006714:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <prvHeapInit+0xb4>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a0a      	ldr	r2, [pc, #40]	; (800674c <prvHeapInit+0xb8>)
 8006722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4a09      	ldr	r2, [pc, #36]	; (8006750 <prvHeapInit+0xbc>)
 800672a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <prvHeapInit+0xc0>)
 800672e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006732:	601a      	str	r2, [r3, #0]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	20000e40 	.word	0x20000e40
 8006744:	20002998 	.word	0x20002998
 8006748:	200029a0 	.word	0x200029a0
 800674c:	200029a8 	.word	0x200029a8
 8006750:	200029a4 	.word	0x200029a4
 8006754:	200029b4 	.word	0x200029b4

08006758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006760:	4b28      	ldr	r3, [pc, #160]	; (8006804 <prvInsertBlockIntoFreeList+0xac>)
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e002      	b.n	800676c <prvInsertBlockIntoFreeList+0x14>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	429a      	cmp	r2, r3
 8006774:	d8f7      	bhi.n	8006766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d108      	bne.n	800679a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d118      	bne.n	80067e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <prvInsertBlockIntoFreeList+0xb0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d00d      	beq.n	80067d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	441a      	add	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e008      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <prvInsertBlockIntoFreeList+0xb0>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e003      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d002      	beq.n	80067f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20002998 	.word	0x20002998
 8006808:	200029a0 	.word	0x200029a0

0800680c <__assert_func>:
 800680c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800680e:	4614      	mov	r4, r2
 8006810:	461a      	mov	r2, r3
 8006812:	4b09      	ldr	r3, [pc, #36]	; (8006838 <__assert_func+0x2c>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4605      	mov	r5, r0
 8006818:	68d8      	ldr	r0, [r3, #12]
 800681a:	b14c      	cbz	r4, 8006830 <__assert_func+0x24>
 800681c:	4b07      	ldr	r3, [pc, #28]	; (800683c <__assert_func+0x30>)
 800681e:	9100      	str	r1, [sp, #0]
 8006820:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006824:	4906      	ldr	r1, [pc, #24]	; (8006840 <__assert_func+0x34>)
 8006826:	462b      	mov	r3, r5
 8006828:	f000 f8e4 	bl	80069f4 <fiprintf>
 800682c:	f000 fe6a 	bl	8007504 <abort>
 8006830:	4b04      	ldr	r3, [pc, #16]	; (8006844 <__assert_func+0x38>)
 8006832:	461c      	mov	r4, r3
 8006834:	e7f3      	b.n	800681e <__assert_func+0x12>
 8006836:	bf00      	nop
 8006838:	20000010 	.word	0x20000010
 800683c:	08007b58 	.word	0x08007b58
 8006840:	08007b65 	.word	0x08007b65
 8006844:	08007b93 	.word	0x08007b93

08006848 <std>:
 8006848:	2300      	movs	r3, #0
 800684a:	b510      	push	{r4, lr}
 800684c:	4604      	mov	r4, r0
 800684e:	e9c0 3300 	strd	r3, r3, [r0]
 8006852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006856:	6083      	str	r3, [r0, #8]
 8006858:	8181      	strh	r1, [r0, #12]
 800685a:	6643      	str	r3, [r0, #100]	; 0x64
 800685c:	81c2      	strh	r2, [r0, #14]
 800685e:	6183      	str	r3, [r0, #24]
 8006860:	4619      	mov	r1, r3
 8006862:	2208      	movs	r2, #8
 8006864:	305c      	adds	r0, #92	; 0x5c
 8006866:	f000 f92c 	bl	8006ac2 <memset>
 800686a:	4b05      	ldr	r3, [pc, #20]	; (8006880 <std+0x38>)
 800686c:	6263      	str	r3, [r4, #36]	; 0x24
 800686e:	4b05      	ldr	r3, [pc, #20]	; (8006884 <std+0x3c>)
 8006870:	62a3      	str	r3, [r4, #40]	; 0x28
 8006872:	4b05      	ldr	r3, [pc, #20]	; (8006888 <std+0x40>)
 8006874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <std+0x44>)
 8006878:	6224      	str	r4, [r4, #32]
 800687a:	6323      	str	r3, [r4, #48]	; 0x30
 800687c:	bd10      	pop	{r4, pc}
 800687e:	bf00      	nop
 8006880:	080072d9 	.word	0x080072d9
 8006884:	080072fb 	.word	0x080072fb
 8006888:	08007333 	.word	0x08007333
 800688c:	08007357 	.word	0x08007357

08006890 <_cleanup_r>:
 8006890:	4901      	ldr	r1, [pc, #4]	; (8006898 <_cleanup_r+0x8>)
 8006892:	f000 b8c1 	b.w	8006a18 <_fwalk_reent>
 8006896:	bf00      	nop
 8006898:	08007641 	.word	0x08007641

0800689c <__sfmoreglue>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	1e4a      	subs	r2, r1, #1
 80068a0:	2568      	movs	r5, #104	; 0x68
 80068a2:	4355      	muls	r5, r2
 80068a4:	460e      	mov	r6, r1
 80068a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068aa:	f000 f913 	bl	8006ad4 <_malloc_r>
 80068ae:	4604      	mov	r4, r0
 80068b0:	b140      	cbz	r0, 80068c4 <__sfmoreglue+0x28>
 80068b2:	2100      	movs	r1, #0
 80068b4:	e9c0 1600 	strd	r1, r6, [r0]
 80068b8:	300c      	adds	r0, #12
 80068ba:	60a0      	str	r0, [r4, #8]
 80068bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068c0:	f000 f8ff 	bl	8006ac2 <memset>
 80068c4:	4620      	mov	r0, r4
 80068c6:	bd70      	pop	{r4, r5, r6, pc}

080068c8 <__sfp_lock_acquire>:
 80068c8:	4801      	ldr	r0, [pc, #4]	; (80068d0 <__sfp_lock_acquire+0x8>)
 80068ca:	f000 b8ea 	b.w	8006aa2 <__retarget_lock_acquire_recursive>
 80068ce:	bf00      	nop
 80068d0:	20002b2c 	.word	0x20002b2c

080068d4 <__sfp_lock_release>:
 80068d4:	4801      	ldr	r0, [pc, #4]	; (80068dc <__sfp_lock_release+0x8>)
 80068d6:	f000 b8e5 	b.w	8006aa4 <__retarget_lock_release_recursive>
 80068da:	bf00      	nop
 80068dc:	20002b2c 	.word	0x20002b2c

080068e0 <__sinit_lock_acquire>:
 80068e0:	4801      	ldr	r0, [pc, #4]	; (80068e8 <__sinit_lock_acquire+0x8>)
 80068e2:	f000 b8de 	b.w	8006aa2 <__retarget_lock_acquire_recursive>
 80068e6:	bf00      	nop
 80068e8:	20002b27 	.word	0x20002b27

080068ec <__sinit_lock_release>:
 80068ec:	4801      	ldr	r0, [pc, #4]	; (80068f4 <__sinit_lock_release+0x8>)
 80068ee:	f000 b8d9 	b.w	8006aa4 <__retarget_lock_release_recursive>
 80068f2:	bf00      	nop
 80068f4:	20002b27 	.word	0x20002b27

080068f8 <__sinit>:
 80068f8:	b510      	push	{r4, lr}
 80068fa:	4604      	mov	r4, r0
 80068fc:	f7ff fff0 	bl	80068e0 <__sinit_lock_acquire>
 8006900:	69a3      	ldr	r3, [r4, #24]
 8006902:	b11b      	cbz	r3, 800690c <__sinit+0x14>
 8006904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006908:	f7ff bff0 	b.w	80068ec <__sinit_lock_release>
 800690c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006910:	6523      	str	r3, [r4, #80]	; 0x50
 8006912:	4b13      	ldr	r3, [pc, #76]	; (8006960 <__sinit+0x68>)
 8006914:	4a13      	ldr	r2, [pc, #76]	; (8006964 <__sinit+0x6c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	62a2      	str	r2, [r4, #40]	; 0x28
 800691a:	42a3      	cmp	r3, r4
 800691c:	bf04      	itt	eq
 800691e:	2301      	moveq	r3, #1
 8006920:	61a3      	streq	r3, [r4, #24]
 8006922:	4620      	mov	r0, r4
 8006924:	f000 f820 	bl	8006968 <__sfp>
 8006928:	6060      	str	r0, [r4, #4]
 800692a:	4620      	mov	r0, r4
 800692c:	f000 f81c 	bl	8006968 <__sfp>
 8006930:	60a0      	str	r0, [r4, #8]
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f818 	bl	8006968 <__sfp>
 8006938:	2200      	movs	r2, #0
 800693a:	60e0      	str	r0, [r4, #12]
 800693c:	2104      	movs	r1, #4
 800693e:	6860      	ldr	r0, [r4, #4]
 8006940:	f7ff ff82 	bl	8006848 <std>
 8006944:	68a0      	ldr	r0, [r4, #8]
 8006946:	2201      	movs	r2, #1
 8006948:	2109      	movs	r1, #9
 800694a:	f7ff ff7d 	bl	8006848 <std>
 800694e:	68e0      	ldr	r0, [r4, #12]
 8006950:	2202      	movs	r2, #2
 8006952:	2112      	movs	r1, #18
 8006954:	f7ff ff78 	bl	8006848 <std>
 8006958:	2301      	movs	r3, #1
 800695a:	61a3      	str	r3, [r4, #24]
 800695c:	e7d2      	b.n	8006904 <__sinit+0xc>
 800695e:	bf00      	nop
 8006960:	08007bf4 	.word	0x08007bf4
 8006964:	08006891 	.word	0x08006891

08006968 <__sfp>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	4607      	mov	r7, r0
 800696c:	f7ff ffac 	bl	80068c8 <__sfp_lock_acquire>
 8006970:	4b1e      	ldr	r3, [pc, #120]	; (80069ec <__sfp+0x84>)
 8006972:	681e      	ldr	r6, [r3, #0]
 8006974:	69b3      	ldr	r3, [r6, #24]
 8006976:	b913      	cbnz	r3, 800697e <__sfp+0x16>
 8006978:	4630      	mov	r0, r6
 800697a:	f7ff ffbd 	bl	80068f8 <__sinit>
 800697e:	3648      	adds	r6, #72	; 0x48
 8006980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006984:	3b01      	subs	r3, #1
 8006986:	d503      	bpl.n	8006990 <__sfp+0x28>
 8006988:	6833      	ldr	r3, [r6, #0]
 800698a:	b30b      	cbz	r3, 80069d0 <__sfp+0x68>
 800698c:	6836      	ldr	r6, [r6, #0]
 800698e:	e7f7      	b.n	8006980 <__sfp+0x18>
 8006990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006994:	b9d5      	cbnz	r5, 80069cc <__sfp+0x64>
 8006996:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <__sfp+0x88>)
 8006998:	60e3      	str	r3, [r4, #12]
 800699a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800699e:	6665      	str	r5, [r4, #100]	; 0x64
 80069a0:	f000 f87e 	bl	8006aa0 <__retarget_lock_init_recursive>
 80069a4:	f7ff ff96 	bl	80068d4 <__sfp_lock_release>
 80069a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069b0:	6025      	str	r5, [r4, #0]
 80069b2:	61a5      	str	r5, [r4, #24]
 80069b4:	2208      	movs	r2, #8
 80069b6:	4629      	mov	r1, r5
 80069b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069bc:	f000 f881 	bl	8006ac2 <memset>
 80069c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069c8:	4620      	mov	r0, r4
 80069ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069cc:	3468      	adds	r4, #104	; 0x68
 80069ce:	e7d9      	b.n	8006984 <__sfp+0x1c>
 80069d0:	2104      	movs	r1, #4
 80069d2:	4638      	mov	r0, r7
 80069d4:	f7ff ff62 	bl	800689c <__sfmoreglue>
 80069d8:	4604      	mov	r4, r0
 80069da:	6030      	str	r0, [r6, #0]
 80069dc:	2800      	cmp	r0, #0
 80069de:	d1d5      	bne.n	800698c <__sfp+0x24>
 80069e0:	f7ff ff78 	bl	80068d4 <__sfp_lock_release>
 80069e4:	230c      	movs	r3, #12
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	e7ee      	b.n	80069c8 <__sfp+0x60>
 80069ea:	bf00      	nop
 80069ec:	08007bf4 	.word	0x08007bf4
 80069f0:	ffff0001 	.word	0xffff0001

080069f4 <fiprintf>:
 80069f4:	b40e      	push	{r1, r2, r3}
 80069f6:	b503      	push	{r0, r1, lr}
 80069f8:	4601      	mov	r1, r0
 80069fa:	ab03      	add	r3, sp, #12
 80069fc:	4805      	ldr	r0, [pc, #20]	; (8006a14 <fiprintf+0x20>)
 80069fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a02:	6800      	ldr	r0, [r0, #0]
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	f000 f8e9 	bl	8006bdc <_vfiprintf_r>
 8006a0a:	b002      	add	sp, #8
 8006a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a10:	b003      	add	sp, #12
 8006a12:	4770      	bx	lr
 8006a14:	20000010 	.word	0x20000010

08006a18 <_fwalk_reent>:
 8006a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	4688      	mov	r8, r1
 8006a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a24:	2700      	movs	r7, #0
 8006a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a2e:	d505      	bpl.n	8006a3c <_fwalk_reent+0x24>
 8006a30:	6824      	ldr	r4, [r4, #0]
 8006a32:	2c00      	cmp	r4, #0
 8006a34:	d1f7      	bne.n	8006a26 <_fwalk_reent+0xe>
 8006a36:	4638      	mov	r0, r7
 8006a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a3c:	89ab      	ldrh	r3, [r5, #12]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d907      	bls.n	8006a52 <_fwalk_reent+0x3a>
 8006a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a46:	3301      	adds	r3, #1
 8006a48:	d003      	beq.n	8006a52 <_fwalk_reent+0x3a>
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	47c0      	blx	r8
 8006a50:	4307      	orrs	r7, r0
 8006a52:	3568      	adds	r5, #104	; 0x68
 8006a54:	e7e9      	b.n	8006a2a <_fwalk_reent+0x12>
	...

08006a58 <__libc_init_array>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	4d0d      	ldr	r5, [pc, #52]	; (8006a90 <__libc_init_array+0x38>)
 8006a5c:	4c0d      	ldr	r4, [pc, #52]	; (8006a94 <__libc_init_array+0x3c>)
 8006a5e:	1b64      	subs	r4, r4, r5
 8006a60:	10a4      	asrs	r4, r4, #2
 8006a62:	2600      	movs	r6, #0
 8006a64:	42a6      	cmp	r6, r4
 8006a66:	d109      	bne.n	8006a7c <__libc_init_array+0x24>
 8006a68:	4d0b      	ldr	r5, [pc, #44]	; (8006a98 <__libc_init_array+0x40>)
 8006a6a:	4c0c      	ldr	r4, [pc, #48]	; (8006a9c <__libc_init_array+0x44>)
 8006a6c:	f000 ffc6 	bl	80079fc <_init>
 8006a70:	1b64      	subs	r4, r4, r5
 8006a72:	10a4      	asrs	r4, r4, #2
 8006a74:	2600      	movs	r6, #0
 8006a76:	42a6      	cmp	r6, r4
 8006a78:	d105      	bne.n	8006a86 <__libc_init_array+0x2e>
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a80:	4798      	blx	r3
 8006a82:	3601      	adds	r6, #1
 8006a84:	e7ee      	b.n	8006a64 <__libc_init_array+0xc>
 8006a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8a:	4798      	blx	r3
 8006a8c:	3601      	adds	r6, #1
 8006a8e:	e7f2      	b.n	8006a76 <__libc_init_array+0x1e>
 8006a90:	08007cac 	.word	0x08007cac
 8006a94:	08007cac 	.word	0x08007cac
 8006a98:	08007cac 	.word	0x08007cac
 8006a9c:	08007cb0 	.word	0x08007cb0

08006aa0 <__retarget_lock_init_recursive>:
 8006aa0:	4770      	bx	lr

08006aa2 <__retarget_lock_acquire_recursive>:
 8006aa2:	4770      	bx	lr

08006aa4 <__retarget_lock_release_recursive>:
 8006aa4:	4770      	bx	lr

08006aa6 <memcpy>:
 8006aa6:	440a      	add	r2, r1
 8006aa8:	4291      	cmp	r1, r2
 8006aaa:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aae:	d100      	bne.n	8006ab2 <memcpy+0xc>
 8006ab0:	4770      	bx	lr
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006abc:	4291      	cmp	r1, r2
 8006abe:	d1f9      	bne.n	8006ab4 <memcpy+0xe>
 8006ac0:	bd10      	pop	{r4, pc}

08006ac2 <memset>:
 8006ac2:	4402      	add	r2, r0
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d100      	bne.n	8006acc <memset+0xa>
 8006aca:	4770      	bx	lr
 8006acc:	f803 1b01 	strb.w	r1, [r3], #1
 8006ad0:	e7f9      	b.n	8006ac6 <memset+0x4>
	...

08006ad4 <_malloc_r>:
 8006ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad6:	1ccd      	adds	r5, r1, #3
 8006ad8:	f025 0503 	bic.w	r5, r5, #3
 8006adc:	3508      	adds	r5, #8
 8006ade:	2d0c      	cmp	r5, #12
 8006ae0:	bf38      	it	cc
 8006ae2:	250c      	movcc	r5, #12
 8006ae4:	2d00      	cmp	r5, #0
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	db01      	blt.n	8006aee <_malloc_r+0x1a>
 8006aea:	42a9      	cmp	r1, r5
 8006aec:	d903      	bls.n	8006af6 <_malloc_r+0x22>
 8006aee:	230c      	movs	r3, #12
 8006af0:	6033      	str	r3, [r6, #0]
 8006af2:	2000      	movs	r0, #0
 8006af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006af6:	f000 fe5d 	bl	80077b4 <__malloc_lock>
 8006afa:	4921      	ldr	r1, [pc, #132]	; (8006b80 <_malloc_r+0xac>)
 8006afc:	680a      	ldr	r2, [r1, #0]
 8006afe:	4614      	mov	r4, r2
 8006b00:	b99c      	cbnz	r4, 8006b2a <_malloc_r+0x56>
 8006b02:	4f20      	ldr	r7, [pc, #128]	; (8006b84 <_malloc_r+0xb0>)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	b923      	cbnz	r3, 8006b12 <_malloc_r+0x3e>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f000 fbd4 	bl	80072b8 <_sbrk_r>
 8006b10:	6038      	str	r0, [r7, #0]
 8006b12:	4629      	mov	r1, r5
 8006b14:	4630      	mov	r0, r6
 8006b16:	f000 fbcf 	bl	80072b8 <_sbrk_r>
 8006b1a:	1c43      	adds	r3, r0, #1
 8006b1c:	d123      	bne.n	8006b66 <_malloc_r+0x92>
 8006b1e:	230c      	movs	r3, #12
 8006b20:	6033      	str	r3, [r6, #0]
 8006b22:	4630      	mov	r0, r6
 8006b24:	f000 fe4c 	bl	80077c0 <__malloc_unlock>
 8006b28:	e7e3      	b.n	8006af2 <_malloc_r+0x1e>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	1b5b      	subs	r3, r3, r5
 8006b2e:	d417      	bmi.n	8006b60 <_malloc_r+0x8c>
 8006b30:	2b0b      	cmp	r3, #11
 8006b32:	d903      	bls.n	8006b3c <_malloc_r+0x68>
 8006b34:	6023      	str	r3, [r4, #0]
 8006b36:	441c      	add	r4, r3
 8006b38:	6025      	str	r5, [r4, #0]
 8006b3a:	e004      	b.n	8006b46 <_malloc_r+0x72>
 8006b3c:	6863      	ldr	r3, [r4, #4]
 8006b3e:	42a2      	cmp	r2, r4
 8006b40:	bf0c      	ite	eq
 8006b42:	600b      	streq	r3, [r1, #0]
 8006b44:	6053      	strne	r3, [r2, #4]
 8006b46:	4630      	mov	r0, r6
 8006b48:	f000 fe3a 	bl	80077c0 <__malloc_unlock>
 8006b4c:	f104 000b 	add.w	r0, r4, #11
 8006b50:	1d23      	adds	r3, r4, #4
 8006b52:	f020 0007 	bic.w	r0, r0, #7
 8006b56:	1ac2      	subs	r2, r0, r3
 8006b58:	d0cc      	beq.n	8006af4 <_malloc_r+0x20>
 8006b5a:	1a1b      	subs	r3, r3, r0
 8006b5c:	50a3      	str	r3, [r4, r2]
 8006b5e:	e7c9      	b.n	8006af4 <_malloc_r+0x20>
 8006b60:	4622      	mov	r2, r4
 8006b62:	6864      	ldr	r4, [r4, #4]
 8006b64:	e7cc      	b.n	8006b00 <_malloc_r+0x2c>
 8006b66:	1cc4      	adds	r4, r0, #3
 8006b68:	f024 0403 	bic.w	r4, r4, #3
 8006b6c:	42a0      	cmp	r0, r4
 8006b6e:	d0e3      	beq.n	8006b38 <_malloc_r+0x64>
 8006b70:	1a21      	subs	r1, r4, r0
 8006b72:	4630      	mov	r0, r6
 8006b74:	f000 fba0 	bl	80072b8 <_sbrk_r>
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d1dd      	bne.n	8006b38 <_malloc_r+0x64>
 8006b7c:	e7cf      	b.n	8006b1e <_malloc_r+0x4a>
 8006b7e:	bf00      	nop
 8006b80:	200029b8 	.word	0x200029b8
 8006b84:	200029bc 	.word	0x200029bc

08006b88 <__sfputc_r>:
 8006b88:	6893      	ldr	r3, [r2, #8]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	b410      	push	{r4}
 8006b90:	6093      	str	r3, [r2, #8]
 8006b92:	da08      	bge.n	8006ba6 <__sfputc_r+0x1e>
 8006b94:	6994      	ldr	r4, [r2, #24]
 8006b96:	42a3      	cmp	r3, r4
 8006b98:	db01      	blt.n	8006b9e <__sfputc_r+0x16>
 8006b9a:	290a      	cmp	r1, #10
 8006b9c:	d103      	bne.n	8006ba6 <__sfputc_r+0x1e>
 8006b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba2:	f000 bbdd 	b.w	8007360 <__swbuf_r>
 8006ba6:	6813      	ldr	r3, [r2, #0]
 8006ba8:	1c58      	adds	r0, r3, #1
 8006baa:	6010      	str	r0, [r2, #0]
 8006bac:	7019      	strb	r1, [r3, #0]
 8006bae:	4608      	mov	r0, r1
 8006bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <__sfputs_r>:
 8006bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb8:	4606      	mov	r6, r0
 8006bba:	460f      	mov	r7, r1
 8006bbc:	4614      	mov	r4, r2
 8006bbe:	18d5      	adds	r5, r2, r3
 8006bc0:	42ac      	cmp	r4, r5
 8006bc2:	d101      	bne.n	8006bc8 <__sfputs_r+0x12>
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	e007      	b.n	8006bd8 <__sfputs_r+0x22>
 8006bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bcc:	463a      	mov	r2, r7
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7ff ffda 	bl	8006b88 <__sfputc_r>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d1f3      	bne.n	8006bc0 <__sfputs_r+0xa>
 8006bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bdc <_vfiprintf_r>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	460d      	mov	r5, r1
 8006be2:	b09d      	sub	sp, #116	; 0x74
 8006be4:	4614      	mov	r4, r2
 8006be6:	4698      	mov	r8, r3
 8006be8:	4606      	mov	r6, r0
 8006bea:	b118      	cbz	r0, 8006bf4 <_vfiprintf_r+0x18>
 8006bec:	6983      	ldr	r3, [r0, #24]
 8006bee:	b90b      	cbnz	r3, 8006bf4 <_vfiprintf_r+0x18>
 8006bf0:	f7ff fe82 	bl	80068f8 <__sinit>
 8006bf4:	4b89      	ldr	r3, [pc, #548]	; (8006e1c <_vfiprintf_r+0x240>)
 8006bf6:	429d      	cmp	r5, r3
 8006bf8:	d11b      	bne.n	8006c32 <_vfiprintf_r+0x56>
 8006bfa:	6875      	ldr	r5, [r6, #4]
 8006bfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bfe:	07d9      	lsls	r1, r3, #31
 8006c00:	d405      	bmi.n	8006c0e <_vfiprintf_r+0x32>
 8006c02:	89ab      	ldrh	r3, [r5, #12]
 8006c04:	059a      	lsls	r2, r3, #22
 8006c06:	d402      	bmi.n	8006c0e <_vfiprintf_r+0x32>
 8006c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c0a:	f7ff ff4a 	bl	8006aa2 <__retarget_lock_acquire_recursive>
 8006c0e:	89ab      	ldrh	r3, [r5, #12]
 8006c10:	071b      	lsls	r3, r3, #28
 8006c12:	d501      	bpl.n	8006c18 <_vfiprintf_r+0x3c>
 8006c14:	692b      	ldr	r3, [r5, #16]
 8006c16:	b9eb      	cbnz	r3, 8006c54 <_vfiprintf_r+0x78>
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f000 fc04 	bl	8007428 <__swsetup_r>
 8006c20:	b1c0      	cbz	r0, 8006c54 <_vfiprintf_r+0x78>
 8006c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c24:	07dc      	lsls	r4, r3, #31
 8006c26:	d50e      	bpl.n	8006c46 <_vfiprintf_r+0x6a>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	b01d      	add	sp, #116	; 0x74
 8006c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c32:	4b7b      	ldr	r3, [pc, #492]	; (8006e20 <_vfiprintf_r+0x244>)
 8006c34:	429d      	cmp	r5, r3
 8006c36:	d101      	bne.n	8006c3c <_vfiprintf_r+0x60>
 8006c38:	68b5      	ldr	r5, [r6, #8]
 8006c3a:	e7df      	b.n	8006bfc <_vfiprintf_r+0x20>
 8006c3c:	4b79      	ldr	r3, [pc, #484]	; (8006e24 <_vfiprintf_r+0x248>)
 8006c3e:	429d      	cmp	r5, r3
 8006c40:	bf08      	it	eq
 8006c42:	68f5      	ldreq	r5, [r6, #12]
 8006c44:	e7da      	b.n	8006bfc <_vfiprintf_r+0x20>
 8006c46:	89ab      	ldrh	r3, [r5, #12]
 8006c48:	0598      	lsls	r0, r3, #22
 8006c4a:	d4ed      	bmi.n	8006c28 <_vfiprintf_r+0x4c>
 8006c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c4e:	f7ff ff29 	bl	8006aa4 <__retarget_lock_release_recursive>
 8006c52:	e7e9      	b.n	8006c28 <_vfiprintf_r+0x4c>
 8006c54:	2300      	movs	r3, #0
 8006c56:	9309      	str	r3, [sp, #36]	; 0x24
 8006c58:	2320      	movs	r3, #32
 8006c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c62:	2330      	movs	r3, #48	; 0x30
 8006c64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e28 <_vfiprintf_r+0x24c>
 8006c68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c6c:	f04f 0901 	mov.w	r9, #1
 8006c70:	4623      	mov	r3, r4
 8006c72:	469a      	mov	sl, r3
 8006c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c78:	b10a      	cbz	r2, 8006c7e <_vfiprintf_r+0xa2>
 8006c7a:	2a25      	cmp	r2, #37	; 0x25
 8006c7c:	d1f9      	bne.n	8006c72 <_vfiprintf_r+0x96>
 8006c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c82:	d00b      	beq.n	8006c9c <_vfiprintf_r+0xc0>
 8006c84:	465b      	mov	r3, fp
 8006c86:	4622      	mov	r2, r4
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f7ff ff93 	bl	8006bb6 <__sfputs_r>
 8006c90:	3001      	adds	r0, #1
 8006c92:	f000 80aa 	beq.w	8006dea <_vfiprintf_r+0x20e>
 8006c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c98:	445a      	add	r2, fp
 8006c9a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 80a2 	beq.w	8006dea <_vfiprintf_r+0x20e>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cb0:	f10a 0a01 	add.w	sl, sl, #1
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	9307      	str	r3, [sp, #28]
 8006cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8006cbe:	4654      	mov	r4, sl
 8006cc0:	2205      	movs	r2, #5
 8006cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc6:	4858      	ldr	r0, [pc, #352]	; (8006e28 <_vfiprintf_r+0x24c>)
 8006cc8:	f7f9 fa82 	bl	80001d0 <memchr>
 8006ccc:	9a04      	ldr	r2, [sp, #16]
 8006cce:	b9d8      	cbnz	r0, 8006d08 <_vfiprintf_r+0x12c>
 8006cd0:	06d1      	lsls	r1, r2, #27
 8006cd2:	bf44      	itt	mi
 8006cd4:	2320      	movmi	r3, #32
 8006cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cda:	0713      	lsls	r3, r2, #28
 8006cdc:	bf44      	itt	mi
 8006cde:	232b      	movmi	r3, #43	; 0x2b
 8006ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cea:	d015      	beq.n	8006d18 <_vfiprintf_r+0x13c>
 8006cec:	9a07      	ldr	r2, [sp, #28]
 8006cee:	4654      	mov	r4, sl
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	f04f 0c0a 	mov.w	ip, #10
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cfc:	3b30      	subs	r3, #48	; 0x30
 8006cfe:	2b09      	cmp	r3, #9
 8006d00:	d94e      	bls.n	8006da0 <_vfiprintf_r+0x1c4>
 8006d02:	b1b0      	cbz	r0, 8006d32 <_vfiprintf_r+0x156>
 8006d04:	9207      	str	r2, [sp, #28]
 8006d06:	e014      	b.n	8006d32 <_vfiprintf_r+0x156>
 8006d08:	eba0 0308 	sub.w	r3, r0, r8
 8006d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006d10:	4313      	orrs	r3, r2
 8006d12:	9304      	str	r3, [sp, #16]
 8006d14:	46a2      	mov	sl, r4
 8006d16:	e7d2      	b.n	8006cbe <_vfiprintf_r+0xe2>
 8006d18:	9b03      	ldr	r3, [sp, #12]
 8006d1a:	1d19      	adds	r1, r3, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	9103      	str	r1, [sp, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bfbb      	ittet	lt
 8006d24:	425b      	neglt	r3, r3
 8006d26:	f042 0202 	orrlt.w	r2, r2, #2
 8006d2a:	9307      	strge	r3, [sp, #28]
 8006d2c:	9307      	strlt	r3, [sp, #28]
 8006d2e:	bfb8      	it	lt
 8006d30:	9204      	strlt	r2, [sp, #16]
 8006d32:	7823      	ldrb	r3, [r4, #0]
 8006d34:	2b2e      	cmp	r3, #46	; 0x2e
 8006d36:	d10c      	bne.n	8006d52 <_vfiprintf_r+0x176>
 8006d38:	7863      	ldrb	r3, [r4, #1]
 8006d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d3c:	d135      	bne.n	8006daa <_vfiprintf_r+0x1ce>
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	1d1a      	adds	r2, r3, #4
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	9203      	str	r2, [sp, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bfb8      	it	lt
 8006d4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d4e:	3402      	adds	r4, #2
 8006d50:	9305      	str	r3, [sp, #20]
 8006d52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e38 <_vfiprintf_r+0x25c>
 8006d56:	7821      	ldrb	r1, [r4, #0]
 8006d58:	2203      	movs	r2, #3
 8006d5a:	4650      	mov	r0, sl
 8006d5c:	f7f9 fa38 	bl	80001d0 <memchr>
 8006d60:	b140      	cbz	r0, 8006d74 <_vfiprintf_r+0x198>
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	eba0 000a 	sub.w	r0, r0, sl
 8006d68:	fa03 f000 	lsl.w	r0, r3, r0
 8006d6c:	9b04      	ldr	r3, [sp, #16]
 8006d6e:	4303      	orrs	r3, r0
 8006d70:	3401      	adds	r4, #1
 8006d72:	9304      	str	r3, [sp, #16]
 8006d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d78:	482c      	ldr	r0, [pc, #176]	; (8006e2c <_vfiprintf_r+0x250>)
 8006d7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d7e:	2206      	movs	r2, #6
 8006d80:	f7f9 fa26 	bl	80001d0 <memchr>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d03f      	beq.n	8006e08 <_vfiprintf_r+0x22c>
 8006d88:	4b29      	ldr	r3, [pc, #164]	; (8006e30 <_vfiprintf_r+0x254>)
 8006d8a:	bb1b      	cbnz	r3, 8006dd4 <_vfiprintf_r+0x1f8>
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	3307      	adds	r3, #7
 8006d90:	f023 0307 	bic.w	r3, r3, #7
 8006d94:	3308      	adds	r3, #8
 8006d96:	9303      	str	r3, [sp, #12]
 8006d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9a:	443b      	add	r3, r7
 8006d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9e:	e767      	b.n	8006c70 <_vfiprintf_r+0x94>
 8006da0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006da4:	460c      	mov	r4, r1
 8006da6:	2001      	movs	r0, #1
 8006da8:	e7a5      	b.n	8006cf6 <_vfiprintf_r+0x11a>
 8006daa:	2300      	movs	r3, #0
 8006dac:	3401      	adds	r4, #1
 8006dae:	9305      	str	r3, [sp, #20]
 8006db0:	4619      	mov	r1, r3
 8006db2:	f04f 0c0a 	mov.w	ip, #10
 8006db6:	4620      	mov	r0, r4
 8006db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dbc:	3a30      	subs	r2, #48	; 0x30
 8006dbe:	2a09      	cmp	r2, #9
 8006dc0:	d903      	bls.n	8006dca <_vfiprintf_r+0x1ee>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0c5      	beq.n	8006d52 <_vfiprintf_r+0x176>
 8006dc6:	9105      	str	r1, [sp, #20]
 8006dc8:	e7c3      	b.n	8006d52 <_vfiprintf_r+0x176>
 8006dca:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dce:	4604      	mov	r4, r0
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e7f0      	b.n	8006db6 <_vfiprintf_r+0x1da>
 8006dd4:	ab03      	add	r3, sp, #12
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	462a      	mov	r2, r5
 8006dda:	4b16      	ldr	r3, [pc, #88]	; (8006e34 <_vfiprintf_r+0x258>)
 8006ddc:	a904      	add	r1, sp, #16
 8006dde:	4630      	mov	r0, r6
 8006de0:	f3af 8000 	nop.w
 8006de4:	4607      	mov	r7, r0
 8006de6:	1c78      	adds	r0, r7, #1
 8006de8:	d1d6      	bne.n	8006d98 <_vfiprintf_r+0x1bc>
 8006dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dec:	07d9      	lsls	r1, r3, #31
 8006dee:	d405      	bmi.n	8006dfc <_vfiprintf_r+0x220>
 8006df0:	89ab      	ldrh	r3, [r5, #12]
 8006df2:	059a      	lsls	r2, r3, #22
 8006df4:	d402      	bmi.n	8006dfc <_vfiprintf_r+0x220>
 8006df6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006df8:	f7ff fe54 	bl	8006aa4 <__retarget_lock_release_recursive>
 8006dfc:	89ab      	ldrh	r3, [r5, #12]
 8006dfe:	065b      	lsls	r3, r3, #25
 8006e00:	f53f af12 	bmi.w	8006c28 <_vfiprintf_r+0x4c>
 8006e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e06:	e711      	b.n	8006c2c <_vfiprintf_r+0x50>
 8006e08:	ab03      	add	r3, sp, #12
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	462a      	mov	r2, r5
 8006e0e:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <_vfiprintf_r+0x258>)
 8006e10:	a904      	add	r1, sp, #16
 8006e12:	4630      	mov	r0, r6
 8006e14:	f000 f880 	bl	8006f18 <_printf_i>
 8006e18:	e7e4      	b.n	8006de4 <_vfiprintf_r+0x208>
 8006e1a:	bf00      	nop
 8006e1c:	08007bb4 	.word	0x08007bb4
 8006e20:	08007bd4 	.word	0x08007bd4
 8006e24:	08007b94 	.word	0x08007b94
 8006e28:	08007bf8 	.word	0x08007bf8
 8006e2c:	08007c02 	.word	0x08007c02
 8006e30:	00000000 	.word	0x00000000
 8006e34:	08006bb7 	.word	0x08006bb7
 8006e38:	08007bfe 	.word	0x08007bfe

08006e3c <_printf_common>:
 8006e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e40:	4616      	mov	r6, r2
 8006e42:	4699      	mov	r9, r3
 8006e44:	688a      	ldr	r2, [r1, #8]
 8006e46:	690b      	ldr	r3, [r1, #16]
 8006e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	bfb8      	it	lt
 8006e50:	4613      	movlt	r3, r2
 8006e52:	6033      	str	r3, [r6, #0]
 8006e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e58:	4607      	mov	r7, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	b10a      	cbz	r2, 8006e62 <_printf_common+0x26>
 8006e5e:	3301      	adds	r3, #1
 8006e60:	6033      	str	r3, [r6, #0]
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	0699      	lsls	r1, r3, #26
 8006e66:	bf42      	ittt	mi
 8006e68:	6833      	ldrmi	r3, [r6, #0]
 8006e6a:	3302      	addmi	r3, #2
 8006e6c:	6033      	strmi	r3, [r6, #0]
 8006e6e:	6825      	ldr	r5, [r4, #0]
 8006e70:	f015 0506 	ands.w	r5, r5, #6
 8006e74:	d106      	bne.n	8006e84 <_printf_common+0x48>
 8006e76:	f104 0a19 	add.w	sl, r4, #25
 8006e7a:	68e3      	ldr	r3, [r4, #12]
 8006e7c:	6832      	ldr	r2, [r6, #0]
 8006e7e:	1a9b      	subs	r3, r3, r2
 8006e80:	42ab      	cmp	r3, r5
 8006e82:	dc26      	bgt.n	8006ed2 <_printf_common+0x96>
 8006e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e88:	1e13      	subs	r3, r2, #0
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	bf18      	it	ne
 8006e8e:	2301      	movne	r3, #1
 8006e90:	0692      	lsls	r2, r2, #26
 8006e92:	d42b      	bmi.n	8006eec <_printf_common+0xb0>
 8006e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e98:	4649      	mov	r1, r9
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	47c0      	blx	r8
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d01e      	beq.n	8006ee0 <_printf_common+0xa4>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	68e5      	ldr	r5, [r4, #12]
 8006ea6:	6832      	ldr	r2, [r6, #0]
 8006ea8:	f003 0306 	and.w	r3, r3, #6
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	bf08      	it	eq
 8006eb0:	1aad      	subeq	r5, r5, r2
 8006eb2:	68a3      	ldr	r3, [r4, #8]
 8006eb4:	6922      	ldr	r2, [r4, #16]
 8006eb6:	bf0c      	ite	eq
 8006eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ebc:	2500      	movne	r5, #0
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	bfc4      	itt	gt
 8006ec2:	1a9b      	subgt	r3, r3, r2
 8006ec4:	18ed      	addgt	r5, r5, r3
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	341a      	adds	r4, #26
 8006eca:	42b5      	cmp	r5, r6
 8006ecc:	d11a      	bne.n	8006f04 <_printf_common+0xc8>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	e008      	b.n	8006ee4 <_printf_common+0xa8>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	4638      	mov	r0, r7
 8006eda:	47c0      	blx	r8
 8006edc:	3001      	adds	r0, #1
 8006ede:	d103      	bne.n	8006ee8 <_printf_common+0xac>
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee8:	3501      	adds	r5, #1
 8006eea:	e7c6      	b.n	8006e7a <_printf_common+0x3e>
 8006eec:	18e1      	adds	r1, r4, r3
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	2030      	movs	r0, #48	; 0x30
 8006ef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ef6:	4422      	add	r2, r4
 8006ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006efc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f00:	3302      	adds	r3, #2
 8006f02:	e7c7      	b.n	8006e94 <_printf_common+0x58>
 8006f04:	2301      	movs	r3, #1
 8006f06:	4622      	mov	r2, r4
 8006f08:	4649      	mov	r1, r9
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	47c0      	blx	r8
 8006f0e:	3001      	adds	r0, #1
 8006f10:	d0e6      	beq.n	8006ee0 <_printf_common+0xa4>
 8006f12:	3601      	adds	r6, #1
 8006f14:	e7d9      	b.n	8006eca <_printf_common+0x8e>
	...

08006f18 <_printf_i>:
 8006f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	4691      	mov	r9, r2
 8006f20:	7e27      	ldrb	r7, [r4, #24]
 8006f22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f24:	2f78      	cmp	r7, #120	; 0x78
 8006f26:	4680      	mov	r8, r0
 8006f28:	469a      	mov	sl, r3
 8006f2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f2e:	d807      	bhi.n	8006f40 <_printf_i+0x28>
 8006f30:	2f62      	cmp	r7, #98	; 0x62
 8006f32:	d80a      	bhi.n	8006f4a <_printf_i+0x32>
 8006f34:	2f00      	cmp	r7, #0
 8006f36:	f000 80d8 	beq.w	80070ea <_printf_i+0x1d2>
 8006f3a:	2f58      	cmp	r7, #88	; 0x58
 8006f3c:	f000 80a3 	beq.w	8007086 <_printf_i+0x16e>
 8006f40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f48:	e03a      	b.n	8006fc0 <_printf_i+0xa8>
 8006f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f4e:	2b15      	cmp	r3, #21
 8006f50:	d8f6      	bhi.n	8006f40 <_printf_i+0x28>
 8006f52:	a001      	add	r0, pc, #4	; (adr r0, 8006f58 <_printf_i+0x40>)
 8006f54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f58:	08006fb1 	.word	0x08006fb1
 8006f5c:	08006fc5 	.word	0x08006fc5
 8006f60:	08006f41 	.word	0x08006f41
 8006f64:	08006f41 	.word	0x08006f41
 8006f68:	08006f41 	.word	0x08006f41
 8006f6c:	08006f41 	.word	0x08006f41
 8006f70:	08006fc5 	.word	0x08006fc5
 8006f74:	08006f41 	.word	0x08006f41
 8006f78:	08006f41 	.word	0x08006f41
 8006f7c:	08006f41 	.word	0x08006f41
 8006f80:	08006f41 	.word	0x08006f41
 8006f84:	080070d1 	.word	0x080070d1
 8006f88:	08006ff5 	.word	0x08006ff5
 8006f8c:	080070b3 	.word	0x080070b3
 8006f90:	08006f41 	.word	0x08006f41
 8006f94:	08006f41 	.word	0x08006f41
 8006f98:	080070f3 	.word	0x080070f3
 8006f9c:	08006f41 	.word	0x08006f41
 8006fa0:	08006ff5 	.word	0x08006ff5
 8006fa4:	08006f41 	.word	0x08006f41
 8006fa8:	08006f41 	.word	0x08006f41
 8006fac:	080070bb 	.word	0x080070bb
 8006fb0:	680b      	ldr	r3, [r1, #0]
 8006fb2:	1d1a      	adds	r2, r3, #4
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	600a      	str	r2, [r1, #0]
 8006fb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e0a3      	b.n	800710c <_printf_i+0x1f4>
 8006fc4:	6825      	ldr	r5, [r4, #0]
 8006fc6:	6808      	ldr	r0, [r1, #0]
 8006fc8:	062e      	lsls	r6, r5, #24
 8006fca:	f100 0304 	add.w	r3, r0, #4
 8006fce:	d50a      	bpl.n	8006fe6 <_printf_i+0xce>
 8006fd0:	6805      	ldr	r5, [r0, #0]
 8006fd2:	600b      	str	r3, [r1, #0]
 8006fd4:	2d00      	cmp	r5, #0
 8006fd6:	da03      	bge.n	8006fe0 <_printf_i+0xc8>
 8006fd8:	232d      	movs	r3, #45	; 0x2d
 8006fda:	426d      	negs	r5, r5
 8006fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe0:	485e      	ldr	r0, [pc, #376]	; (800715c <_printf_i+0x244>)
 8006fe2:	230a      	movs	r3, #10
 8006fe4:	e019      	b.n	800701a <_printf_i+0x102>
 8006fe6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006fea:	6805      	ldr	r5, [r0, #0]
 8006fec:	600b      	str	r3, [r1, #0]
 8006fee:	bf18      	it	ne
 8006ff0:	b22d      	sxthne	r5, r5
 8006ff2:	e7ef      	b.n	8006fd4 <_printf_i+0xbc>
 8006ff4:	680b      	ldr	r3, [r1, #0]
 8006ff6:	6825      	ldr	r5, [r4, #0]
 8006ff8:	1d18      	adds	r0, r3, #4
 8006ffa:	6008      	str	r0, [r1, #0]
 8006ffc:	0628      	lsls	r0, r5, #24
 8006ffe:	d501      	bpl.n	8007004 <_printf_i+0xec>
 8007000:	681d      	ldr	r5, [r3, #0]
 8007002:	e002      	b.n	800700a <_printf_i+0xf2>
 8007004:	0669      	lsls	r1, r5, #25
 8007006:	d5fb      	bpl.n	8007000 <_printf_i+0xe8>
 8007008:	881d      	ldrh	r5, [r3, #0]
 800700a:	4854      	ldr	r0, [pc, #336]	; (800715c <_printf_i+0x244>)
 800700c:	2f6f      	cmp	r7, #111	; 0x6f
 800700e:	bf0c      	ite	eq
 8007010:	2308      	moveq	r3, #8
 8007012:	230a      	movne	r3, #10
 8007014:	2100      	movs	r1, #0
 8007016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800701a:	6866      	ldr	r6, [r4, #4]
 800701c:	60a6      	str	r6, [r4, #8]
 800701e:	2e00      	cmp	r6, #0
 8007020:	bfa2      	ittt	ge
 8007022:	6821      	ldrge	r1, [r4, #0]
 8007024:	f021 0104 	bicge.w	r1, r1, #4
 8007028:	6021      	strge	r1, [r4, #0]
 800702a:	b90d      	cbnz	r5, 8007030 <_printf_i+0x118>
 800702c:	2e00      	cmp	r6, #0
 800702e:	d04d      	beq.n	80070cc <_printf_i+0x1b4>
 8007030:	4616      	mov	r6, r2
 8007032:	fbb5 f1f3 	udiv	r1, r5, r3
 8007036:	fb03 5711 	mls	r7, r3, r1, r5
 800703a:	5dc7      	ldrb	r7, [r0, r7]
 800703c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007040:	462f      	mov	r7, r5
 8007042:	42bb      	cmp	r3, r7
 8007044:	460d      	mov	r5, r1
 8007046:	d9f4      	bls.n	8007032 <_printf_i+0x11a>
 8007048:	2b08      	cmp	r3, #8
 800704a:	d10b      	bne.n	8007064 <_printf_i+0x14c>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	07df      	lsls	r7, r3, #31
 8007050:	d508      	bpl.n	8007064 <_printf_i+0x14c>
 8007052:	6923      	ldr	r3, [r4, #16]
 8007054:	6861      	ldr	r1, [r4, #4]
 8007056:	4299      	cmp	r1, r3
 8007058:	bfde      	ittt	le
 800705a:	2330      	movle	r3, #48	; 0x30
 800705c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007060:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007064:	1b92      	subs	r2, r2, r6
 8007066:	6122      	str	r2, [r4, #16]
 8007068:	f8cd a000 	str.w	sl, [sp]
 800706c:	464b      	mov	r3, r9
 800706e:	aa03      	add	r2, sp, #12
 8007070:	4621      	mov	r1, r4
 8007072:	4640      	mov	r0, r8
 8007074:	f7ff fee2 	bl	8006e3c <_printf_common>
 8007078:	3001      	adds	r0, #1
 800707a:	d14c      	bne.n	8007116 <_printf_i+0x1fe>
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	b004      	add	sp, #16
 8007082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007086:	4835      	ldr	r0, [pc, #212]	; (800715c <_printf_i+0x244>)
 8007088:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	680e      	ldr	r6, [r1, #0]
 8007090:	061f      	lsls	r7, r3, #24
 8007092:	f856 5b04 	ldr.w	r5, [r6], #4
 8007096:	600e      	str	r6, [r1, #0]
 8007098:	d514      	bpl.n	80070c4 <_printf_i+0x1ac>
 800709a:	07d9      	lsls	r1, r3, #31
 800709c:	bf44      	itt	mi
 800709e:	f043 0320 	orrmi.w	r3, r3, #32
 80070a2:	6023      	strmi	r3, [r4, #0]
 80070a4:	b91d      	cbnz	r5, 80070ae <_printf_i+0x196>
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	f023 0320 	bic.w	r3, r3, #32
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	2310      	movs	r3, #16
 80070b0:	e7b0      	b.n	8007014 <_printf_i+0xfc>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	f043 0320 	orr.w	r3, r3, #32
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	2378      	movs	r3, #120	; 0x78
 80070bc:	4828      	ldr	r0, [pc, #160]	; (8007160 <_printf_i+0x248>)
 80070be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070c2:	e7e3      	b.n	800708c <_printf_i+0x174>
 80070c4:	065e      	lsls	r6, r3, #25
 80070c6:	bf48      	it	mi
 80070c8:	b2ad      	uxthmi	r5, r5
 80070ca:	e7e6      	b.n	800709a <_printf_i+0x182>
 80070cc:	4616      	mov	r6, r2
 80070ce:	e7bb      	b.n	8007048 <_printf_i+0x130>
 80070d0:	680b      	ldr	r3, [r1, #0]
 80070d2:	6826      	ldr	r6, [r4, #0]
 80070d4:	6960      	ldr	r0, [r4, #20]
 80070d6:	1d1d      	adds	r5, r3, #4
 80070d8:	600d      	str	r5, [r1, #0]
 80070da:	0635      	lsls	r5, r6, #24
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	d501      	bpl.n	80070e4 <_printf_i+0x1cc>
 80070e0:	6018      	str	r0, [r3, #0]
 80070e2:	e002      	b.n	80070ea <_printf_i+0x1d2>
 80070e4:	0671      	lsls	r1, r6, #25
 80070e6:	d5fb      	bpl.n	80070e0 <_printf_i+0x1c8>
 80070e8:	8018      	strh	r0, [r3, #0]
 80070ea:	2300      	movs	r3, #0
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	4616      	mov	r6, r2
 80070f0:	e7ba      	b.n	8007068 <_printf_i+0x150>
 80070f2:	680b      	ldr	r3, [r1, #0]
 80070f4:	1d1a      	adds	r2, r3, #4
 80070f6:	600a      	str	r2, [r1, #0]
 80070f8:	681e      	ldr	r6, [r3, #0]
 80070fa:	6862      	ldr	r2, [r4, #4]
 80070fc:	2100      	movs	r1, #0
 80070fe:	4630      	mov	r0, r6
 8007100:	f7f9 f866 	bl	80001d0 <memchr>
 8007104:	b108      	cbz	r0, 800710a <_printf_i+0x1f2>
 8007106:	1b80      	subs	r0, r0, r6
 8007108:	6060      	str	r0, [r4, #4]
 800710a:	6863      	ldr	r3, [r4, #4]
 800710c:	6123      	str	r3, [r4, #16]
 800710e:	2300      	movs	r3, #0
 8007110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007114:	e7a8      	b.n	8007068 <_printf_i+0x150>
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	4632      	mov	r2, r6
 800711a:	4649      	mov	r1, r9
 800711c:	4640      	mov	r0, r8
 800711e:	47d0      	blx	sl
 8007120:	3001      	adds	r0, #1
 8007122:	d0ab      	beq.n	800707c <_printf_i+0x164>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	079b      	lsls	r3, r3, #30
 8007128:	d413      	bmi.n	8007152 <_printf_i+0x23a>
 800712a:	68e0      	ldr	r0, [r4, #12]
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	4298      	cmp	r0, r3
 8007130:	bfb8      	it	lt
 8007132:	4618      	movlt	r0, r3
 8007134:	e7a4      	b.n	8007080 <_printf_i+0x168>
 8007136:	2301      	movs	r3, #1
 8007138:	4632      	mov	r2, r6
 800713a:	4649      	mov	r1, r9
 800713c:	4640      	mov	r0, r8
 800713e:	47d0      	blx	sl
 8007140:	3001      	adds	r0, #1
 8007142:	d09b      	beq.n	800707c <_printf_i+0x164>
 8007144:	3501      	adds	r5, #1
 8007146:	68e3      	ldr	r3, [r4, #12]
 8007148:	9903      	ldr	r1, [sp, #12]
 800714a:	1a5b      	subs	r3, r3, r1
 800714c:	42ab      	cmp	r3, r5
 800714e:	dcf2      	bgt.n	8007136 <_printf_i+0x21e>
 8007150:	e7eb      	b.n	800712a <_printf_i+0x212>
 8007152:	2500      	movs	r5, #0
 8007154:	f104 0619 	add.w	r6, r4, #25
 8007158:	e7f5      	b.n	8007146 <_printf_i+0x22e>
 800715a:	bf00      	nop
 800715c:	08007c09 	.word	0x08007c09
 8007160:	08007c1a 	.word	0x08007c1a

08007164 <rand>:
 8007164:	4b17      	ldr	r3, [pc, #92]	; (80071c4 <rand+0x60>)
 8007166:	b510      	push	{r4, lr}
 8007168:	681c      	ldr	r4, [r3, #0]
 800716a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800716c:	b9b3      	cbnz	r3, 800719c <rand+0x38>
 800716e:	2018      	movs	r0, #24
 8007170:	f000 fb18 	bl	80077a4 <malloc>
 8007174:	63a0      	str	r0, [r4, #56]	; 0x38
 8007176:	b928      	cbnz	r0, 8007184 <rand+0x20>
 8007178:	4602      	mov	r2, r0
 800717a:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <rand+0x64>)
 800717c:	4813      	ldr	r0, [pc, #76]	; (80071cc <rand+0x68>)
 800717e:	214e      	movs	r1, #78	; 0x4e
 8007180:	f7ff fb44 	bl	800680c <__assert_func>
 8007184:	4a12      	ldr	r2, [pc, #72]	; (80071d0 <rand+0x6c>)
 8007186:	4b13      	ldr	r3, [pc, #76]	; (80071d4 <rand+0x70>)
 8007188:	e9c0 2300 	strd	r2, r3, [r0]
 800718c:	4b12      	ldr	r3, [pc, #72]	; (80071d8 <rand+0x74>)
 800718e:	6083      	str	r3, [r0, #8]
 8007190:	230b      	movs	r3, #11
 8007192:	8183      	strh	r3, [r0, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	2300      	movs	r3, #0
 8007198:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800719c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800719e:	480f      	ldr	r0, [pc, #60]	; (80071dc <rand+0x78>)
 80071a0:	690a      	ldr	r2, [r1, #16]
 80071a2:	694b      	ldr	r3, [r1, #20]
 80071a4:	4c0e      	ldr	r4, [pc, #56]	; (80071e0 <rand+0x7c>)
 80071a6:	4350      	muls	r0, r2
 80071a8:	fb04 0003 	mla	r0, r4, r3, r0
 80071ac:	fba2 3404 	umull	r3, r4, r2, r4
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	4404      	add	r4, r0
 80071b4:	f144 0000 	adc.w	r0, r4, #0
 80071b8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80071bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80071c0:	bd10      	pop	{r4, pc}
 80071c2:	bf00      	nop
 80071c4:	20000010 	.word	0x20000010
 80071c8:	08007c2b 	.word	0x08007c2b
 80071cc:	08007c42 	.word	0x08007c42
 80071d0:	abcd330e 	.word	0xabcd330e
 80071d4:	e66d1234 	.word	0xe66d1234
 80071d8:	0005deec 	.word	0x0005deec
 80071dc:	5851f42d 	.word	0x5851f42d
 80071e0:	4c957f2d 	.word	0x4c957f2d

080071e4 <cleanup_glue>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	460c      	mov	r4, r1
 80071e8:	6809      	ldr	r1, [r1, #0]
 80071ea:	4605      	mov	r5, r0
 80071ec:	b109      	cbz	r1, 80071f2 <cleanup_glue+0xe>
 80071ee:	f7ff fff9 	bl	80071e4 <cleanup_glue>
 80071f2:	4621      	mov	r1, r4
 80071f4:	4628      	mov	r0, r5
 80071f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071fa:	f000 bae7 	b.w	80077cc <_free_r>
	...

08007200 <_reclaim_reent>:
 8007200:	4b2c      	ldr	r3, [pc, #176]	; (80072b4 <_reclaim_reent+0xb4>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4283      	cmp	r3, r0
 8007206:	b570      	push	{r4, r5, r6, lr}
 8007208:	4604      	mov	r4, r0
 800720a:	d051      	beq.n	80072b0 <_reclaim_reent+0xb0>
 800720c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800720e:	b143      	cbz	r3, 8007222 <_reclaim_reent+0x22>
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d14a      	bne.n	80072ac <_reclaim_reent+0xac>
 8007216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007218:	6819      	ldr	r1, [r3, #0]
 800721a:	b111      	cbz	r1, 8007222 <_reclaim_reent+0x22>
 800721c:	4620      	mov	r0, r4
 800721e:	f000 fad5 	bl	80077cc <_free_r>
 8007222:	6961      	ldr	r1, [r4, #20]
 8007224:	b111      	cbz	r1, 800722c <_reclaim_reent+0x2c>
 8007226:	4620      	mov	r0, r4
 8007228:	f000 fad0 	bl	80077cc <_free_r>
 800722c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800722e:	b111      	cbz	r1, 8007236 <_reclaim_reent+0x36>
 8007230:	4620      	mov	r0, r4
 8007232:	f000 facb 	bl	80077cc <_free_r>
 8007236:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007238:	b111      	cbz	r1, 8007240 <_reclaim_reent+0x40>
 800723a:	4620      	mov	r0, r4
 800723c:	f000 fac6 	bl	80077cc <_free_r>
 8007240:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007242:	b111      	cbz	r1, 800724a <_reclaim_reent+0x4a>
 8007244:	4620      	mov	r0, r4
 8007246:	f000 fac1 	bl	80077cc <_free_r>
 800724a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800724c:	b111      	cbz	r1, 8007254 <_reclaim_reent+0x54>
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fabc 	bl	80077cc <_free_r>
 8007254:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007256:	b111      	cbz	r1, 800725e <_reclaim_reent+0x5e>
 8007258:	4620      	mov	r0, r4
 800725a:	f000 fab7 	bl	80077cc <_free_r>
 800725e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007260:	b111      	cbz	r1, 8007268 <_reclaim_reent+0x68>
 8007262:	4620      	mov	r0, r4
 8007264:	f000 fab2 	bl	80077cc <_free_r>
 8007268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800726a:	b111      	cbz	r1, 8007272 <_reclaim_reent+0x72>
 800726c:	4620      	mov	r0, r4
 800726e:	f000 faad 	bl	80077cc <_free_r>
 8007272:	69a3      	ldr	r3, [r4, #24]
 8007274:	b1e3      	cbz	r3, 80072b0 <_reclaim_reent+0xb0>
 8007276:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007278:	4620      	mov	r0, r4
 800727a:	4798      	blx	r3
 800727c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800727e:	b1b9      	cbz	r1, 80072b0 <_reclaim_reent+0xb0>
 8007280:	4620      	mov	r0, r4
 8007282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007286:	f7ff bfad 	b.w	80071e4 <cleanup_glue>
 800728a:	5949      	ldr	r1, [r1, r5]
 800728c:	b941      	cbnz	r1, 80072a0 <_reclaim_reent+0xa0>
 800728e:	3504      	adds	r5, #4
 8007290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007292:	2d80      	cmp	r5, #128	; 0x80
 8007294:	68d9      	ldr	r1, [r3, #12]
 8007296:	d1f8      	bne.n	800728a <_reclaim_reent+0x8a>
 8007298:	4620      	mov	r0, r4
 800729a:	f000 fa97 	bl	80077cc <_free_r>
 800729e:	e7ba      	b.n	8007216 <_reclaim_reent+0x16>
 80072a0:	680e      	ldr	r6, [r1, #0]
 80072a2:	4620      	mov	r0, r4
 80072a4:	f000 fa92 	bl	80077cc <_free_r>
 80072a8:	4631      	mov	r1, r6
 80072aa:	e7ef      	b.n	800728c <_reclaim_reent+0x8c>
 80072ac:	2500      	movs	r5, #0
 80072ae:	e7ef      	b.n	8007290 <_reclaim_reent+0x90>
 80072b0:	bd70      	pop	{r4, r5, r6, pc}
 80072b2:	bf00      	nop
 80072b4:	20000010 	.word	0x20000010

080072b8 <_sbrk_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d06      	ldr	r5, [pc, #24]	; (80072d4 <_sbrk_r+0x1c>)
 80072bc:	2300      	movs	r3, #0
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	f000 fb82 	bl	80079cc <_sbrk>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_sbrk_r+0x1a>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_sbrk_r+0x1a>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	20002b30 	.word	0x20002b30

080072d8 <__sread>:
 80072d8:	b510      	push	{r4, lr}
 80072da:	460c      	mov	r4, r1
 80072dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e0:	f000 fac4 	bl	800786c <_read_r>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	bfab      	itete	ge
 80072e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072ea:	89a3      	ldrhlt	r3, [r4, #12]
 80072ec:	181b      	addge	r3, r3, r0
 80072ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072f2:	bfac      	ite	ge
 80072f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80072f6:	81a3      	strhlt	r3, [r4, #12]
 80072f8:	bd10      	pop	{r4, pc}

080072fa <__swrite>:
 80072fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fe:	461f      	mov	r7, r3
 8007300:	898b      	ldrh	r3, [r1, #12]
 8007302:	05db      	lsls	r3, r3, #23
 8007304:	4605      	mov	r5, r0
 8007306:	460c      	mov	r4, r1
 8007308:	4616      	mov	r6, r2
 800730a:	d505      	bpl.n	8007318 <__swrite+0x1e>
 800730c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007310:	2302      	movs	r3, #2
 8007312:	2200      	movs	r2, #0
 8007314:	f000 f9d0 	bl	80076b8 <_lseek_r>
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800731e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007322:	81a3      	strh	r3, [r4, #12]
 8007324:	4632      	mov	r2, r6
 8007326:	463b      	mov	r3, r7
 8007328:	4628      	mov	r0, r5
 800732a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800732e:	f000 b869 	b.w	8007404 <_write_r>

08007332 <__sseek>:
 8007332:	b510      	push	{r4, lr}
 8007334:	460c      	mov	r4, r1
 8007336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800733a:	f000 f9bd 	bl	80076b8 <_lseek_r>
 800733e:	1c43      	adds	r3, r0, #1
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	bf15      	itete	ne
 8007344:	6560      	strne	r0, [r4, #84]	; 0x54
 8007346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800734a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800734e:	81a3      	strheq	r3, [r4, #12]
 8007350:	bf18      	it	ne
 8007352:	81a3      	strhne	r3, [r4, #12]
 8007354:	bd10      	pop	{r4, pc}

08007356 <__sclose>:
 8007356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800735a:	f000 b8db 	b.w	8007514 <_close_r>
	...

08007360 <__swbuf_r>:
 8007360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007362:	460e      	mov	r6, r1
 8007364:	4614      	mov	r4, r2
 8007366:	4605      	mov	r5, r0
 8007368:	b118      	cbz	r0, 8007372 <__swbuf_r+0x12>
 800736a:	6983      	ldr	r3, [r0, #24]
 800736c:	b90b      	cbnz	r3, 8007372 <__swbuf_r+0x12>
 800736e:	f7ff fac3 	bl	80068f8 <__sinit>
 8007372:	4b21      	ldr	r3, [pc, #132]	; (80073f8 <__swbuf_r+0x98>)
 8007374:	429c      	cmp	r4, r3
 8007376:	d12b      	bne.n	80073d0 <__swbuf_r+0x70>
 8007378:	686c      	ldr	r4, [r5, #4]
 800737a:	69a3      	ldr	r3, [r4, #24]
 800737c:	60a3      	str	r3, [r4, #8]
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	071a      	lsls	r2, r3, #28
 8007382:	d52f      	bpl.n	80073e4 <__swbuf_r+0x84>
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	b36b      	cbz	r3, 80073e4 <__swbuf_r+0x84>
 8007388:	6923      	ldr	r3, [r4, #16]
 800738a:	6820      	ldr	r0, [r4, #0]
 800738c:	1ac0      	subs	r0, r0, r3
 800738e:	6963      	ldr	r3, [r4, #20]
 8007390:	b2f6      	uxtb	r6, r6
 8007392:	4283      	cmp	r3, r0
 8007394:	4637      	mov	r7, r6
 8007396:	dc04      	bgt.n	80073a2 <__swbuf_r+0x42>
 8007398:	4621      	mov	r1, r4
 800739a:	4628      	mov	r0, r5
 800739c:	f000 f950 	bl	8007640 <_fflush_r>
 80073a0:	bb30      	cbnz	r0, 80073f0 <__swbuf_r+0x90>
 80073a2:	68a3      	ldr	r3, [r4, #8]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	60a3      	str	r3, [r4, #8]
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	6022      	str	r2, [r4, #0]
 80073ae:	701e      	strb	r6, [r3, #0]
 80073b0:	6963      	ldr	r3, [r4, #20]
 80073b2:	3001      	adds	r0, #1
 80073b4:	4283      	cmp	r3, r0
 80073b6:	d004      	beq.n	80073c2 <__swbuf_r+0x62>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	07db      	lsls	r3, r3, #31
 80073bc:	d506      	bpl.n	80073cc <__swbuf_r+0x6c>
 80073be:	2e0a      	cmp	r6, #10
 80073c0:	d104      	bne.n	80073cc <__swbuf_r+0x6c>
 80073c2:	4621      	mov	r1, r4
 80073c4:	4628      	mov	r0, r5
 80073c6:	f000 f93b 	bl	8007640 <_fflush_r>
 80073ca:	b988      	cbnz	r0, 80073f0 <__swbuf_r+0x90>
 80073cc:	4638      	mov	r0, r7
 80073ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d0:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <__swbuf_r+0x9c>)
 80073d2:	429c      	cmp	r4, r3
 80073d4:	d101      	bne.n	80073da <__swbuf_r+0x7a>
 80073d6:	68ac      	ldr	r4, [r5, #8]
 80073d8:	e7cf      	b.n	800737a <__swbuf_r+0x1a>
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <__swbuf_r+0xa0>)
 80073dc:	429c      	cmp	r4, r3
 80073de:	bf08      	it	eq
 80073e0:	68ec      	ldreq	r4, [r5, #12]
 80073e2:	e7ca      	b.n	800737a <__swbuf_r+0x1a>
 80073e4:	4621      	mov	r1, r4
 80073e6:	4628      	mov	r0, r5
 80073e8:	f000 f81e 	bl	8007428 <__swsetup_r>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d0cb      	beq.n	8007388 <__swbuf_r+0x28>
 80073f0:	f04f 37ff 	mov.w	r7, #4294967295
 80073f4:	e7ea      	b.n	80073cc <__swbuf_r+0x6c>
 80073f6:	bf00      	nop
 80073f8:	08007bb4 	.word	0x08007bb4
 80073fc:	08007bd4 	.word	0x08007bd4
 8007400:	08007b94 	.word	0x08007b94

08007404 <_write_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4d07      	ldr	r5, [pc, #28]	; (8007424 <_write_r+0x20>)
 8007408:	4604      	mov	r4, r0
 800740a:	4608      	mov	r0, r1
 800740c:	4611      	mov	r1, r2
 800740e:	2200      	movs	r2, #0
 8007410:	602a      	str	r2, [r5, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f000 fae8 	bl	80079e8 <_write>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_write_r+0x1e>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	b103      	cbz	r3, 8007422 <_write_r+0x1e>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	20002b30 	.word	0x20002b30

08007428 <__swsetup_r>:
 8007428:	4b32      	ldr	r3, [pc, #200]	; (80074f4 <__swsetup_r+0xcc>)
 800742a:	b570      	push	{r4, r5, r6, lr}
 800742c:	681d      	ldr	r5, [r3, #0]
 800742e:	4606      	mov	r6, r0
 8007430:	460c      	mov	r4, r1
 8007432:	b125      	cbz	r5, 800743e <__swsetup_r+0x16>
 8007434:	69ab      	ldr	r3, [r5, #24]
 8007436:	b913      	cbnz	r3, 800743e <__swsetup_r+0x16>
 8007438:	4628      	mov	r0, r5
 800743a:	f7ff fa5d 	bl	80068f8 <__sinit>
 800743e:	4b2e      	ldr	r3, [pc, #184]	; (80074f8 <__swsetup_r+0xd0>)
 8007440:	429c      	cmp	r4, r3
 8007442:	d10f      	bne.n	8007464 <__swsetup_r+0x3c>
 8007444:	686c      	ldr	r4, [r5, #4]
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800744c:	0719      	lsls	r1, r3, #28
 800744e:	d42c      	bmi.n	80074aa <__swsetup_r+0x82>
 8007450:	06dd      	lsls	r5, r3, #27
 8007452:	d411      	bmi.n	8007478 <__swsetup_r+0x50>
 8007454:	2309      	movs	r3, #9
 8007456:	6033      	str	r3, [r6, #0]
 8007458:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800745c:	81a3      	strh	r3, [r4, #12]
 800745e:	f04f 30ff 	mov.w	r0, #4294967295
 8007462:	e03e      	b.n	80074e2 <__swsetup_r+0xba>
 8007464:	4b25      	ldr	r3, [pc, #148]	; (80074fc <__swsetup_r+0xd4>)
 8007466:	429c      	cmp	r4, r3
 8007468:	d101      	bne.n	800746e <__swsetup_r+0x46>
 800746a:	68ac      	ldr	r4, [r5, #8]
 800746c:	e7eb      	b.n	8007446 <__swsetup_r+0x1e>
 800746e:	4b24      	ldr	r3, [pc, #144]	; (8007500 <__swsetup_r+0xd8>)
 8007470:	429c      	cmp	r4, r3
 8007472:	bf08      	it	eq
 8007474:	68ec      	ldreq	r4, [r5, #12]
 8007476:	e7e6      	b.n	8007446 <__swsetup_r+0x1e>
 8007478:	0758      	lsls	r0, r3, #29
 800747a:	d512      	bpl.n	80074a2 <__swsetup_r+0x7a>
 800747c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800747e:	b141      	cbz	r1, 8007492 <__swsetup_r+0x6a>
 8007480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007484:	4299      	cmp	r1, r3
 8007486:	d002      	beq.n	800748e <__swsetup_r+0x66>
 8007488:	4630      	mov	r0, r6
 800748a:	f000 f99f 	bl	80077cc <_free_r>
 800748e:	2300      	movs	r3, #0
 8007490:	6363      	str	r3, [r4, #52]	; 0x34
 8007492:	89a3      	ldrh	r3, [r4, #12]
 8007494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007498:	81a3      	strh	r3, [r4, #12]
 800749a:	2300      	movs	r3, #0
 800749c:	6063      	str	r3, [r4, #4]
 800749e:	6923      	ldr	r3, [r4, #16]
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	f043 0308 	orr.w	r3, r3, #8
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	b94b      	cbnz	r3, 80074c2 <__swsetup_r+0x9a>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074b8:	d003      	beq.n	80074c2 <__swsetup_r+0x9a>
 80074ba:	4621      	mov	r1, r4
 80074bc:	4630      	mov	r0, r6
 80074be:	f000 f931 	bl	8007724 <__smakebuf_r>
 80074c2:	89a0      	ldrh	r0, [r4, #12]
 80074c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074c8:	f010 0301 	ands.w	r3, r0, #1
 80074cc:	d00a      	beq.n	80074e4 <__swsetup_r+0xbc>
 80074ce:	2300      	movs	r3, #0
 80074d0:	60a3      	str	r3, [r4, #8]
 80074d2:	6963      	ldr	r3, [r4, #20]
 80074d4:	425b      	negs	r3, r3
 80074d6:	61a3      	str	r3, [r4, #24]
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	b943      	cbnz	r3, 80074ee <__swsetup_r+0xc6>
 80074dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074e0:	d1ba      	bne.n	8007458 <__swsetup_r+0x30>
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	0781      	lsls	r1, r0, #30
 80074e6:	bf58      	it	pl
 80074e8:	6963      	ldrpl	r3, [r4, #20]
 80074ea:	60a3      	str	r3, [r4, #8]
 80074ec:	e7f4      	b.n	80074d8 <__swsetup_r+0xb0>
 80074ee:	2000      	movs	r0, #0
 80074f0:	e7f7      	b.n	80074e2 <__swsetup_r+0xba>
 80074f2:	bf00      	nop
 80074f4:	20000010 	.word	0x20000010
 80074f8:	08007bb4 	.word	0x08007bb4
 80074fc:	08007bd4 	.word	0x08007bd4
 8007500:	08007b94 	.word	0x08007b94

08007504 <abort>:
 8007504:	b508      	push	{r3, lr}
 8007506:	2006      	movs	r0, #6
 8007508:	f000 f9ea 	bl	80078e0 <raise>
 800750c:	2001      	movs	r0, #1
 800750e:	f000 fa73 	bl	80079f8 <_exit>
	...

08007514 <_close_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d06      	ldr	r5, [pc, #24]	; (8007530 <_close_r+0x1c>)
 8007518:	2300      	movs	r3, #0
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	f000 fa1c 	bl	800795c <_close>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_close_r+0x1a>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_close_r+0x1a>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20002b30 	.word	0x20002b30

08007534 <__sflush_r>:
 8007534:	898a      	ldrh	r2, [r1, #12]
 8007536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753a:	4605      	mov	r5, r0
 800753c:	0710      	lsls	r0, r2, #28
 800753e:	460c      	mov	r4, r1
 8007540:	d458      	bmi.n	80075f4 <__sflush_r+0xc0>
 8007542:	684b      	ldr	r3, [r1, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	dc05      	bgt.n	8007554 <__sflush_r+0x20>
 8007548:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	dc02      	bgt.n	8007554 <__sflush_r+0x20>
 800754e:	2000      	movs	r0, #0
 8007550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007556:	2e00      	cmp	r6, #0
 8007558:	d0f9      	beq.n	800754e <__sflush_r+0x1a>
 800755a:	2300      	movs	r3, #0
 800755c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007560:	682f      	ldr	r7, [r5, #0]
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	d032      	beq.n	80075cc <__sflush_r+0x98>
 8007566:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	075a      	lsls	r2, r3, #29
 800756c:	d505      	bpl.n	800757a <__sflush_r+0x46>
 800756e:	6863      	ldr	r3, [r4, #4]
 8007570:	1ac0      	subs	r0, r0, r3
 8007572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007574:	b10b      	cbz	r3, 800757a <__sflush_r+0x46>
 8007576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007578:	1ac0      	subs	r0, r0, r3
 800757a:	2300      	movs	r3, #0
 800757c:	4602      	mov	r2, r0
 800757e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007580:	6a21      	ldr	r1, [r4, #32]
 8007582:	4628      	mov	r0, r5
 8007584:	47b0      	blx	r6
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	89a3      	ldrh	r3, [r4, #12]
 800758a:	d106      	bne.n	800759a <__sflush_r+0x66>
 800758c:	6829      	ldr	r1, [r5, #0]
 800758e:	291d      	cmp	r1, #29
 8007590:	d82c      	bhi.n	80075ec <__sflush_r+0xb8>
 8007592:	4a2a      	ldr	r2, [pc, #168]	; (800763c <__sflush_r+0x108>)
 8007594:	40ca      	lsrs	r2, r1
 8007596:	07d6      	lsls	r6, r2, #31
 8007598:	d528      	bpl.n	80075ec <__sflush_r+0xb8>
 800759a:	2200      	movs	r2, #0
 800759c:	6062      	str	r2, [r4, #4]
 800759e:	04d9      	lsls	r1, r3, #19
 80075a0:	6922      	ldr	r2, [r4, #16]
 80075a2:	6022      	str	r2, [r4, #0]
 80075a4:	d504      	bpl.n	80075b0 <__sflush_r+0x7c>
 80075a6:	1c42      	adds	r2, r0, #1
 80075a8:	d101      	bne.n	80075ae <__sflush_r+0x7a>
 80075aa:	682b      	ldr	r3, [r5, #0]
 80075ac:	b903      	cbnz	r3, 80075b0 <__sflush_r+0x7c>
 80075ae:	6560      	str	r0, [r4, #84]	; 0x54
 80075b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075b2:	602f      	str	r7, [r5, #0]
 80075b4:	2900      	cmp	r1, #0
 80075b6:	d0ca      	beq.n	800754e <__sflush_r+0x1a>
 80075b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075bc:	4299      	cmp	r1, r3
 80075be:	d002      	beq.n	80075c6 <__sflush_r+0x92>
 80075c0:	4628      	mov	r0, r5
 80075c2:	f000 f903 	bl	80077cc <_free_r>
 80075c6:	2000      	movs	r0, #0
 80075c8:	6360      	str	r0, [r4, #52]	; 0x34
 80075ca:	e7c1      	b.n	8007550 <__sflush_r+0x1c>
 80075cc:	6a21      	ldr	r1, [r4, #32]
 80075ce:	2301      	movs	r3, #1
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b0      	blx	r6
 80075d4:	1c41      	adds	r1, r0, #1
 80075d6:	d1c7      	bne.n	8007568 <__sflush_r+0x34>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0c4      	beq.n	8007568 <__sflush_r+0x34>
 80075de:	2b1d      	cmp	r3, #29
 80075e0:	d001      	beq.n	80075e6 <__sflush_r+0xb2>
 80075e2:	2b16      	cmp	r3, #22
 80075e4:	d101      	bne.n	80075ea <__sflush_r+0xb6>
 80075e6:	602f      	str	r7, [r5, #0]
 80075e8:	e7b1      	b.n	800754e <__sflush_r+0x1a>
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f0:	81a3      	strh	r3, [r4, #12]
 80075f2:	e7ad      	b.n	8007550 <__sflush_r+0x1c>
 80075f4:	690f      	ldr	r7, [r1, #16]
 80075f6:	2f00      	cmp	r7, #0
 80075f8:	d0a9      	beq.n	800754e <__sflush_r+0x1a>
 80075fa:	0793      	lsls	r3, r2, #30
 80075fc:	680e      	ldr	r6, [r1, #0]
 80075fe:	bf08      	it	eq
 8007600:	694b      	ldreq	r3, [r1, #20]
 8007602:	600f      	str	r7, [r1, #0]
 8007604:	bf18      	it	ne
 8007606:	2300      	movne	r3, #0
 8007608:	eba6 0807 	sub.w	r8, r6, r7
 800760c:	608b      	str	r3, [r1, #8]
 800760e:	f1b8 0f00 	cmp.w	r8, #0
 8007612:	dd9c      	ble.n	800754e <__sflush_r+0x1a>
 8007614:	6a21      	ldr	r1, [r4, #32]
 8007616:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007618:	4643      	mov	r3, r8
 800761a:	463a      	mov	r2, r7
 800761c:	4628      	mov	r0, r5
 800761e:	47b0      	blx	r6
 8007620:	2800      	cmp	r0, #0
 8007622:	dc06      	bgt.n	8007632 <__sflush_r+0xfe>
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762a:	81a3      	strh	r3, [r4, #12]
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	e78e      	b.n	8007550 <__sflush_r+0x1c>
 8007632:	4407      	add	r7, r0
 8007634:	eba8 0800 	sub.w	r8, r8, r0
 8007638:	e7e9      	b.n	800760e <__sflush_r+0xda>
 800763a:	bf00      	nop
 800763c:	20400001 	.word	0x20400001

08007640 <_fflush_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	690b      	ldr	r3, [r1, #16]
 8007644:	4605      	mov	r5, r0
 8007646:	460c      	mov	r4, r1
 8007648:	b913      	cbnz	r3, 8007650 <_fflush_r+0x10>
 800764a:	2500      	movs	r5, #0
 800764c:	4628      	mov	r0, r5
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	b118      	cbz	r0, 800765a <_fflush_r+0x1a>
 8007652:	6983      	ldr	r3, [r0, #24]
 8007654:	b90b      	cbnz	r3, 800765a <_fflush_r+0x1a>
 8007656:	f7ff f94f 	bl	80068f8 <__sinit>
 800765a:	4b14      	ldr	r3, [pc, #80]	; (80076ac <_fflush_r+0x6c>)
 800765c:	429c      	cmp	r4, r3
 800765e:	d11b      	bne.n	8007698 <_fflush_r+0x58>
 8007660:	686c      	ldr	r4, [r5, #4]
 8007662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0ef      	beq.n	800764a <_fflush_r+0xa>
 800766a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800766c:	07d0      	lsls	r0, r2, #31
 800766e:	d404      	bmi.n	800767a <_fflush_r+0x3a>
 8007670:	0599      	lsls	r1, r3, #22
 8007672:	d402      	bmi.n	800767a <_fflush_r+0x3a>
 8007674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007676:	f7ff fa14 	bl	8006aa2 <__retarget_lock_acquire_recursive>
 800767a:	4628      	mov	r0, r5
 800767c:	4621      	mov	r1, r4
 800767e:	f7ff ff59 	bl	8007534 <__sflush_r>
 8007682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007684:	07da      	lsls	r2, r3, #31
 8007686:	4605      	mov	r5, r0
 8007688:	d4e0      	bmi.n	800764c <_fflush_r+0xc>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	059b      	lsls	r3, r3, #22
 800768e:	d4dd      	bmi.n	800764c <_fflush_r+0xc>
 8007690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007692:	f7ff fa07 	bl	8006aa4 <__retarget_lock_release_recursive>
 8007696:	e7d9      	b.n	800764c <_fflush_r+0xc>
 8007698:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <_fflush_r+0x70>)
 800769a:	429c      	cmp	r4, r3
 800769c:	d101      	bne.n	80076a2 <_fflush_r+0x62>
 800769e:	68ac      	ldr	r4, [r5, #8]
 80076a0:	e7df      	b.n	8007662 <_fflush_r+0x22>
 80076a2:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <_fflush_r+0x74>)
 80076a4:	429c      	cmp	r4, r3
 80076a6:	bf08      	it	eq
 80076a8:	68ec      	ldreq	r4, [r5, #12]
 80076aa:	e7da      	b.n	8007662 <_fflush_r+0x22>
 80076ac:	08007bb4 	.word	0x08007bb4
 80076b0:	08007bd4 	.word	0x08007bd4
 80076b4:	08007b94 	.word	0x08007b94

080076b8 <_lseek_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4d07      	ldr	r5, [pc, #28]	; (80076d8 <_lseek_r+0x20>)
 80076bc:	4604      	mov	r4, r0
 80076be:	4608      	mov	r0, r1
 80076c0:	4611      	mov	r1, r2
 80076c2:	2200      	movs	r2, #0
 80076c4:	602a      	str	r2, [r5, #0]
 80076c6:	461a      	mov	r2, r3
 80076c8:	f000 f970 	bl	80079ac <_lseek>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	d102      	bne.n	80076d6 <_lseek_r+0x1e>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	b103      	cbz	r3, 80076d6 <_lseek_r+0x1e>
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	20002b30 	.word	0x20002b30

080076dc <__swhatbuf_r>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	460e      	mov	r6, r1
 80076e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e4:	2900      	cmp	r1, #0
 80076e6:	b096      	sub	sp, #88	; 0x58
 80076e8:	4614      	mov	r4, r2
 80076ea:	461d      	mov	r5, r3
 80076ec:	da07      	bge.n	80076fe <__swhatbuf_r+0x22>
 80076ee:	2300      	movs	r3, #0
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	89b3      	ldrh	r3, [r6, #12]
 80076f4:	061a      	lsls	r2, r3, #24
 80076f6:	d410      	bmi.n	800771a <__swhatbuf_r+0x3e>
 80076f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076fc:	e00e      	b.n	800771c <__swhatbuf_r+0x40>
 80076fe:	466a      	mov	r2, sp
 8007700:	f000 f90a 	bl	8007918 <_fstat_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	dbf2      	blt.n	80076ee <__swhatbuf_r+0x12>
 8007708:	9a01      	ldr	r2, [sp, #4]
 800770a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800770e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007712:	425a      	negs	r2, r3
 8007714:	415a      	adcs	r2, r3
 8007716:	602a      	str	r2, [r5, #0]
 8007718:	e7ee      	b.n	80076f8 <__swhatbuf_r+0x1c>
 800771a:	2340      	movs	r3, #64	; 0x40
 800771c:	2000      	movs	r0, #0
 800771e:	6023      	str	r3, [r4, #0]
 8007720:	b016      	add	sp, #88	; 0x58
 8007722:	bd70      	pop	{r4, r5, r6, pc}

08007724 <__smakebuf_r>:
 8007724:	898b      	ldrh	r3, [r1, #12]
 8007726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007728:	079d      	lsls	r5, r3, #30
 800772a:	4606      	mov	r6, r0
 800772c:	460c      	mov	r4, r1
 800772e:	d507      	bpl.n	8007740 <__smakebuf_r+0x1c>
 8007730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	2301      	movs	r3, #1
 800773a:	6163      	str	r3, [r4, #20]
 800773c:	b002      	add	sp, #8
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	ab01      	add	r3, sp, #4
 8007742:	466a      	mov	r2, sp
 8007744:	f7ff ffca 	bl	80076dc <__swhatbuf_r>
 8007748:	9900      	ldr	r1, [sp, #0]
 800774a:	4605      	mov	r5, r0
 800774c:	4630      	mov	r0, r6
 800774e:	f7ff f9c1 	bl	8006ad4 <_malloc_r>
 8007752:	b948      	cbnz	r0, 8007768 <__smakebuf_r+0x44>
 8007754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007758:	059a      	lsls	r2, r3, #22
 800775a:	d4ef      	bmi.n	800773c <__smakebuf_r+0x18>
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	f043 0302 	orr.w	r3, r3, #2
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	e7e3      	b.n	8007730 <__smakebuf_r+0xc>
 8007768:	4b0d      	ldr	r3, [pc, #52]	; (80077a0 <__smakebuf_r+0x7c>)
 800776a:	62b3      	str	r3, [r6, #40]	; 0x28
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	6020      	str	r0, [r4, #0]
 8007770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	9b00      	ldr	r3, [sp, #0]
 8007778:	6163      	str	r3, [r4, #20]
 800777a:	9b01      	ldr	r3, [sp, #4]
 800777c:	6120      	str	r0, [r4, #16]
 800777e:	b15b      	cbz	r3, 8007798 <__smakebuf_r+0x74>
 8007780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007784:	4630      	mov	r0, r6
 8007786:	f000 f8d9 	bl	800793c <_isatty_r>
 800778a:	b128      	cbz	r0, 8007798 <__smakebuf_r+0x74>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	89a0      	ldrh	r0, [r4, #12]
 800779a:	4305      	orrs	r5, r0
 800779c:	81a5      	strh	r5, [r4, #12]
 800779e:	e7cd      	b.n	800773c <__smakebuf_r+0x18>
 80077a0:	08006891 	.word	0x08006891

080077a4 <malloc>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <malloc+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f7ff b993 	b.w	8006ad4 <_malloc_r>
 80077ae:	bf00      	nop
 80077b0:	20000010 	.word	0x20000010

080077b4 <__malloc_lock>:
 80077b4:	4801      	ldr	r0, [pc, #4]	; (80077bc <__malloc_lock+0x8>)
 80077b6:	f7ff b974 	b.w	8006aa2 <__retarget_lock_acquire_recursive>
 80077ba:	bf00      	nop
 80077bc:	20002b28 	.word	0x20002b28

080077c0 <__malloc_unlock>:
 80077c0:	4801      	ldr	r0, [pc, #4]	; (80077c8 <__malloc_unlock+0x8>)
 80077c2:	f7ff b96f 	b.w	8006aa4 <__retarget_lock_release_recursive>
 80077c6:	bf00      	nop
 80077c8:	20002b28 	.word	0x20002b28

080077cc <_free_r>:
 80077cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ce:	2900      	cmp	r1, #0
 80077d0:	d048      	beq.n	8007864 <_free_r+0x98>
 80077d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d6:	9001      	str	r0, [sp, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f1a1 0404 	sub.w	r4, r1, #4
 80077de:	bfb8      	it	lt
 80077e0:	18e4      	addlt	r4, r4, r3
 80077e2:	f7ff ffe7 	bl	80077b4 <__malloc_lock>
 80077e6:	4a20      	ldr	r2, [pc, #128]	; (8007868 <_free_r+0x9c>)
 80077e8:	9801      	ldr	r0, [sp, #4]
 80077ea:	6813      	ldr	r3, [r2, #0]
 80077ec:	4615      	mov	r5, r2
 80077ee:	b933      	cbnz	r3, 80077fe <_free_r+0x32>
 80077f0:	6063      	str	r3, [r4, #4]
 80077f2:	6014      	str	r4, [r2, #0]
 80077f4:	b003      	add	sp, #12
 80077f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077fa:	f7ff bfe1 	b.w	80077c0 <__malloc_unlock>
 80077fe:	42a3      	cmp	r3, r4
 8007800:	d90b      	bls.n	800781a <_free_r+0x4e>
 8007802:	6821      	ldr	r1, [r4, #0]
 8007804:	1862      	adds	r2, r4, r1
 8007806:	4293      	cmp	r3, r2
 8007808:	bf04      	itt	eq
 800780a:	681a      	ldreq	r2, [r3, #0]
 800780c:	685b      	ldreq	r3, [r3, #4]
 800780e:	6063      	str	r3, [r4, #4]
 8007810:	bf04      	itt	eq
 8007812:	1852      	addeq	r2, r2, r1
 8007814:	6022      	streq	r2, [r4, #0]
 8007816:	602c      	str	r4, [r5, #0]
 8007818:	e7ec      	b.n	80077f4 <_free_r+0x28>
 800781a:	461a      	mov	r2, r3
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b10b      	cbz	r3, 8007824 <_free_r+0x58>
 8007820:	42a3      	cmp	r3, r4
 8007822:	d9fa      	bls.n	800781a <_free_r+0x4e>
 8007824:	6811      	ldr	r1, [r2, #0]
 8007826:	1855      	adds	r5, r2, r1
 8007828:	42a5      	cmp	r5, r4
 800782a:	d10b      	bne.n	8007844 <_free_r+0x78>
 800782c:	6824      	ldr	r4, [r4, #0]
 800782e:	4421      	add	r1, r4
 8007830:	1854      	adds	r4, r2, r1
 8007832:	42a3      	cmp	r3, r4
 8007834:	6011      	str	r1, [r2, #0]
 8007836:	d1dd      	bne.n	80077f4 <_free_r+0x28>
 8007838:	681c      	ldr	r4, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	6053      	str	r3, [r2, #4]
 800783e:	4421      	add	r1, r4
 8007840:	6011      	str	r1, [r2, #0]
 8007842:	e7d7      	b.n	80077f4 <_free_r+0x28>
 8007844:	d902      	bls.n	800784c <_free_r+0x80>
 8007846:	230c      	movs	r3, #12
 8007848:	6003      	str	r3, [r0, #0]
 800784a:	e7d3      	b.n	80077f4 <_free_r+0x28>
 800784c:	6825      	ldr	r5, [r4, #0]
 800784e:	1961      	adds	r1, r4, r5
 8007850:	428b      	cmp	r3, r1
 8007852:	bf04      	itt	eq
 8007854:	6819      	ldreq	r1, [r3, #0]
 8007856:	685b      	ldreq	r3, [r3, #4]
 8007858:	6063      	str	r3, [r4, #4]
 800785a:	bf04      	itt	eq
 800785c:	1949      	addeq	r1, r1, r5
 800785e:	6021      	streq	r1, [r4, #0]
 8007860:	6054      	str	r4, [r2, #4]
 8007862:	e7c7      	b.n	80077f4 <_free_r+0x28>
 8007864:	b003      	add	sp, #12
 8007866:	bd30      	pop	{r4, r5, pc}
 8007868:	200029b8 	.word	0x200029b8

0800786c <_read_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d07      	ldr	r5, [pc, #28]	; (800788c <_read_r+0x20>)
 8007870:	4604      	mov	r4, r0
 8007872:	4608      	mov	r0, r1
 8007874:	4611      	mov	r1, r2
 8007876:	2200      	movs	r2, #0
 8007878:	602a      	str	r2, [r5, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	f000 f89e 	bl	80079bc <_read>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d102      	bne.n	800788a <_read_r+0x1e>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	b103      	cbz	r3, 800788a <_read_r+0x1e>
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	20002b30 	.word	0x20002b30

08007890 <_raise_r>:
 8007890:	291f      	cmp	r1, #31
 8007892:	b538      	push	{r3, r4, r5, lr}
 8007894:	4604      	mov	r4, r0
 8007896:	460d      	mov	r5, r1
 8007898:	d904      	bls.n	80078a4 <_raise_r+0x14>
 800789a:	2316      	movs	r3, #22
 800789c:	6003      	str	r3, [r0, #0]
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078a6:	b112      	cbz	r2, 80078ae <_raise_r+0x1e>
 80078a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078ac:	b94b      	cbnz	r3, 80078c2 <_raise_r+0x32>
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 f830 	bl	8007914 <_getpid_r>
 80078b4:	462a      	mov	r2, r5
 80078b6:	4601      	mov	r1, r0
 80078b8:	4620      	mov	r0, r4
 80078ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078be:	f000 b817 	b.w	80078f0 <_kill_r>
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d00a      	beq.n	80078dc <_raise_r+0x4c>
 80078c6:	1c59      	adds	r1, r3, #1
 80078c8:	d103      	bne.n	80078d2 <_raise_r+0x42>
 80078ca:	2316      	movs	r3, #22
 80078cc:	6003      	str	r3, [r0, #0]
 80078ce:	2001      	movs	r0, #1
 80078d0:	e7e7      	b.n	80078a2 <_raise_r+0x12>
 80078d2:	2400      	movs	r4, #0
 80078d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078d8:	4628      	mov	r0, r5
 80078da:	4798      	blx	r3
 80078dc:	2000      	movs	r0, #0
 80078de:	e7e0      	b.n	80078a2 <_raise_r+0x12>

080078e0 <raise>:
 80078e0:	4b02      	ldr	r3, [pc, #8]	; (80078ec <raise+0xc>)
 80078e2:	4601      	mov	r1, r0
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f7ff bfd3 	b.w	8007890 <_raise_r>
 80078ea:	bf00      	nop
 80078ec:	20000010 	.word	0x20000010

080078f0 <_kill_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d07      	ldr	r5, [pc, #28]	; (8007910 <_kill_r+0x20>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	4611      	mov	r1, r2
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	f000 f84d 	bl	800799c <_kill>
 8007902:	1c43      	adds	r3, r0, #1
 8007904:	d102      	bne.n	800790c <_kill_r+0x1c>
 8007906:	682b      	ldr	r3, [r5, #0]
 8007908:	b103      	cbz	r3, 800790c <_kill_r+0x1c>
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	bd38      	pop	{r3, r4, r5, pc}
 800790e:	bf00      	nop
 8007910:	20002b30 	.word	0x20002b30

08007914 <_getpid_r>:
 8007914:	f000 b832 	b.w	800797c <_getpid>

08007918 <_fstat_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4d07      	ldr	r5, [pc, #28]	; (8007938 <_fstat_r+0x20>)
 800791c:	2300      	movs	r3, #0
 800791e:	4604      	mov	r4, r0
 8007920:	4608      	mov	r0, r1
 8007922:	4611      	mov	r1, r2
 8007924:	602b      	str	r3, [r5, #0]
 8007926:	f000 f821 	bl	800796c <_fstat>
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	d102      	bne.n	8007934 <_fstat_r+0x1c>
 800792e:	682b      	ldr	r3, [r5, #0]
 8007930:	b103      	cbz	r3, 8007934 <_fstat_r+0x1c>
 8007932:	6023      	str	r3, [r4, #0]
 8007934:	bd38      	pop	{r3, r4, r5, pc}
 8007936:	bf00      	nop
 8007938:	20002b30 	.word	0x20002b30

0800793c <_isatty_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d06      	ldr	r5, [pc, #24]	; (8007958 <_isatty_r+0x1c>)
 8007940:	2300      	movs	r3, #0
 8007942:	4604      	mov	r4, r0
 8007944:	4608      	mov	r0, r1
 8007946:	602b      	str	r3, [r5, #0]
 8007948:	f000 f820 	bl	800798c <_isatty>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d102      	bne.n	8007956 <_isatty_r+0x1a>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	b103      	cbz	r3, 8007956 <_isatty_r+0x1a>
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	20002b30 	.word	0x20002b30

0800795c <_close>:
 800795c:	4b02      	ldr	r3, [pc, #8]	; (8007968 <_close+0xc>)
 800795e:	2258      	movs	r2, #88	; 0x58
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	f04f 30ff 	mov.w	r0, #4294967295
 8007966:	4770      	bx	lr
 8007968:	20002b30 	.word	0x20002b30

0800796c <_fstat>:
 800796c:	4b02      	ldr	r3, [pc, #8]	; (8007978 <_fstat+0xc>)
 800796e:	2258      	movs	r2, #88	; 0x58
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	f04f 30ff 	mov.w	r0, #4294967295
 8007976:	4770      	bx	lr
 8007978:	20002b30 	.word	0x20002b30

0800797c <_getpid>:
 800797c:	4b02      	ldr	r3, [pc, #8]	; (8007988 <_getpid+0xc>)
 800797e:	2258      	movs	r2, #88	; 0x58
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	f04f 30ff 	mov.w	r0, #4294967295
 8007986:	4770      	bx	lr
 8007988:	20002b30 	.word	0x20002b30

0800798c <_isatty>:
 800798c:	4b02      	ldr	r3, [pc, #8]	; (8007998 <_isatty+0xc>)
 800798e:	2258      	movs	r2, #88	; 0x58
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	2000      	movs	r0, #0
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	20002b30 	.word	0x20002b30

0800799c <_kill>:
 800799c:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <_kill+0xc>)
 800799e:	2258      	movs	r2, #88	; 0x58
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	f04f 30ff 	mov.w	r0, #4294967295
 80079a6:	4770      	bx	lr
 80079a8:	20002b30 	.word	0x20002b30

080079ac <_lseek>:
 80079ac:	4b02      	ldr	r3, [pc, #8]	; (80079b8 <_lseek+0xc>)
 80079ae:	2258      	movs	r2, #88	; 0x58
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	4770      	bx	lr
 80079b8:	20002b30 	.word	0x20002b30

080079bc <_read>:
 80079bc:	4b02      	ldr	r3, [pc, #8]	; (80079c8 <_read+0xc>)
 80079be:	2258      	movs	r2, #88	; 0x58
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	f04f 30ff 	mov.w	r0, #4294967295
 80079c6:	4770      	bx	lr
 80079c8:	20002b30 	.word	0x20002b30

080079cc <_sbrk>:
 80079cc:	4b04      	ldr	r3, [pc, #16]	; (80079e0 <_sbrk+0x14>)
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	4602      	mov	r2, r0
 80079d2:	b909      	cbnz	r1, 80079d8 <_sbrk+0xc>
 80079d4:	4903      	ldr	r1, [pc, #12]	; (80079e4 <_sbrk+0x18>)
 80079d6:	6019      	str	r1, [r3, #0]
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	4402      	add	r2, r0
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	4770      	bx	lr
 80079e0:	200029c0 	.word	0x200029c0
 80079e4:	20002b38 	.word	0x20002b38

080079e8 <_write>:
 80079e8:	4b02      	ldr	r3, [pc, #8]	; (80079f4 <_write+0xc>)
 80079ea:	2258      	movs	r2, #88	; 0x58
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	f04f 30ff 	mov.w	r0, #4294967295
 80079f2:	4770      	bx	lr
 80079f4:	20002b30 	.word	0x20002b30

080079f8 <_exit>:
 80079f8:	e7fe      	b.n	80079f8 <_exit>
	...

080079fc <_init>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr

08007a08 <_fini>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr
