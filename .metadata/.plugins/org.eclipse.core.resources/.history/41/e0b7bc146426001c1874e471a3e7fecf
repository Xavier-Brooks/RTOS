#include "recipe.h"

//keeps track of how far back instruction counter should jump when it reaches the end of each loop
int Branch = 0;
//recipe buffers for both of the servos
int recipe1[8] = {(MOV | 1), (MOV | 2), (MOV | 3), (LOOP | 3), (MOV | 2), (MOV | 3), (LOOPE), END};
int recipe2[8] = {(LOOP | 31), (MOV | 6), (MOV | 1), (LOOPE), (MOV | 1), (MOV | 2), (MOV | 3), END};

//structure thta holds recipe information for each of the servos
typedef struct{
	int* instructions;
	int ins_ptr; //points to the current instruction
	int pos;
	int loop_cnt; //keeps track of the number of loops that have executed in a recipe
	int loop_start; //used to determine if a loop is already running(avoid nested loops)
	int paused; //paused or not
}recipe;

recipe rec[2] = {{.instructions = recipe1 , .ins_ptr = 0, .pos = 2, .loop_cnt = 0, .loop_start = 0, .paused = 1}, //servo 1, index 0
				 {.instructions = recipe2, .ins_ptr = 0, .pos = 2, .loop_cnt = 0, .loop_start = 0, .paused = 1} //servo 2, index 1
};

//executes commands from the user
void exec_cmd(char* cmd){
	char ch;
	ch = cmd[0];
	operation(1, ch);
	ch = cmd[1];
	operation(2, ch);
	return;
}

void exec_recipe(int servo){
	int index = servo - 1;
	int opcode = (rec[index].instructions[rec[index].ins_ptr] & 0xE0); //extracts the opcode from the instruction
	int params = (rec[index].instructions[rec[index].ins_ptr] & 0x1F); //extracts the opcode from the instruction
	if(rec[index].paused == 1){return;}
	if(rec[index].loop_start){Branch++;}

	switch(opcode){
		case(0x20): //MOV
				move_servo(servo, rec[index].pos, params);
				rec[index].pos = params;
				rec[index].ins_ptr++;
				break;
		case(0x80): //LOOP
				rec[index].loop_start = 1;
				rec[index].loop_cnt = params+1;
				rec[index].ins_ptr += 1;
				break;
		case(0xA0): //LOOP END
				if(rec[index].loop_start && rec[index].loop_cnt > 0){
					rec[index].ins_ptr -= Branch;
					Branch = 0;
					rec[index].loop_cnt -= 1;
				}
				rec[index].loop_start = 0;
				rec[index].ins_ptr += 1;
				Branch = 0;
		default: //END OF RECIPE
			return;
	}
}

void operation(int servo, char opt){
	int index = servo-1;
	switch(opt){
		case 'B':
		case 'b':
			rec[index].ins_ptr = 0;
			rec[index].paused = 0;
			break;
		case 'P':
		case 'p':
			rec[index].paused = 1;
			break;
		case 'L':
		case 'l':
			move_servo(servo, rec[index].pos, (rec[index].pos-1));
			if(rec[index].pos <= 6 && rec[index].pos > 1){ //keep the servo pos value with proper bounds
				rec[index].pos -= 1;
			}
			break;
		case 'R':
		case 'r':
			move_servo(servo, rec[index].pos, (rec[index].pos+1));
			if(rec[index].pos < 6 && rec[index].pos >= 1){ //keeps servo position with bounds
				rec[index].pos += 1;
			}
			break;
		case 'C':
		case 'c':
			rec[index].paused = 0;
			break;
		default: //No-op
			return;
	}
}

void move_servo(int servo, int current_pos, int new_pos){
	if(new_pos > 6 || new_pos < 1){ //if the servo motor is in the farthest position left/right do nothing
		return;
	}
	switch(new_pos){
	case (1):
		if(servo == 1){
			SERVO1 = (PERIOD/10);
		}
		SERVO2 = (PERIOD/10);
		break;
	case (2):
		if(servo == 1){
			SERVO1 = (PERIOD/11);
		}
		SERVO2 = (PERIOD/11);
		break;
	case (3):
		if(servo == 1){
			SERVO1 = (PERIOD/12);
		}
		SERVO2 = (PERIOD/12);
		break;
	case (4):
		if(servo == 1){
			SERVO1 = (PERIOD/14);
		}
		SERVO2 = (PERIOD/14);
		break;
	case (5):
		if(servo == 1){
			SERVO1 = (PERIOD/16);
		}
		SERVO2 = (PERIOD/16);
		break;
	case (6):
		if(servo == 1){
			SERVO1 = (PERIOD/18);
		}
		SERVO2 = (PERIOD/18);
		break;
	}
}
