#include "../inc/timers.h"

unsigned char cnt = 0;

/*
 * Initilaizes TIM6 to interrupt every 100ms
 * 100ms delays as defined by requiremnets each loop
 * */
void timer6_init(){
	//enable the timer 6 clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM6EN; //enable the clock for timer 6
	
	//disable the timer
	TIM6->CR1 &= ~(TIM_CR1_CEN);
	
	TIM6->PSC = 1599999; //interrupt every 100ms(10Hz)
	TIM6->ARR = 0x01; //interrupt each 10ms
	TIM6->EGR |= 1;
	
	//generate update event in software, don't stop timer in event, arr not buffered
	TIM6->CR1 &= ~(TIM_CR1_OPM|TIM_CR1_UDIS|TIM_CR1_ARPE);
	TIM6->CR1 |= (TIM_CR1_URS);
	
	NVIC_EnableIRQ(TIM6_IRQn); //enables the irq for TIM6
	TIM6->DIER |= (TIM_DIER_UIE); //enables the interrupt
	TIM6->CR1 |= (TIM_CR1_CEN); //re-enable timer
}

/*
/initializes TIM2 and TIM3 to produce PWM signals
*/
void timer_init(void){
	//enable timer 2 module
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
	
	GPIOB->MODER = 0xFFFFaebF;
	GPIOB->AFR[0] = 0x22000000;

	//disables the timer for config, may set the UG bit
	TIM4->CR1 &= ~(TIM_CR1_CEN|TIM_CR1_URS);
	
	TIM4->CCMR1 = 0x6868;
	TIM4->CCER = 0x11;
	TIM4->PSC = 0xF;
	
	//step 3
	TIM4->ARR = 0x4E20; //period 50Hz
	TIM4->CCR1 = 0x5DC; //50% duty cycle
	TIM4->CCR2 = 0x5DC; //50% duty cycle
	
	//enable the auto-reload of preload bit & up-counting
	TIM4->CR1 |= (TIM_CR1_ARPE|TIM_CR1_DIR);
	
	//force update event to store timer settings
	TIM4->EGR |= 1u;
	
	TIM4->CR1 |= (TIM_CR1_CEN); //re-enable timerbr
}

/*
 * This functions performs a delay for the user
 *
 * PARAMS: The number of 10ms delays to halt the program
 */
void delay(int time){
	while(!(TIM6->SR & TIM_SR_UIF)){continue;}
	return;
}

/*
*increments counter to determine number of 10ms period that have passed
*/
void TIM6_IRQHandler(){
	TIM6->SR &= ~(TIM_SR_UIF); //clears interrupt
	cnt++;
}

