
project 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800429c  0800429c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042a4  080042a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008164  20000010  080042b8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008174  080042b8  00028174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001476c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290c  00000000  00000000  000347a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  000370b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00038108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028335  00000000  00000000  00039060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012af6  00000000  00000000  00061395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6471  00000000  00000000  00073e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a2fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004498  00000000  00000000  0016a350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800412c 	.word	0x0800412c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800412c 	.word	0x0800412c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <startup>:

/*
 * Simple function that prints a guide to Putty upon startup
 * RET: nothing
 * */
void startup(UART_HandleTypeDef uart){
 80004d0:	b084      	sub	sp, #16
 80004d2:	b590      	push	{r4, r7, lr}
 80004d4:	b083      	sub	sp, #12
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	f107 0418 	add.w	r4, r7, #24
 80004dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char *msg = "Welcome: Type freq min max\r\nType - type of wave S(sine) T(triangle) R(Rectangle)\r\n";
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <startup+0x50>)
 80004e2:	607b      	str	r3, [r7, #4]
	char *msg2 = "freq - frequency of the wave (10Hz - 100kHz)\r\nmin - minimum voltage allowed(0V limit)\r\nmax - maximum voltage allowed(3.3V limit)\r\nMax Must Be Greater Than Min\r\n";
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <startup+0x54>)
 80004e6:	603b      	str	r3, [r7, #0]
	USART_Write(uart.Instance, (uint8_t *)msg, strlen(msg));
 80004e8:	69bc      	ldr	r4, [r7, #24]
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f7ff fe6c 	bl	80001c8 <strlen>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461a      	mov	r2, r3
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	4620      	mov	r0, r4
 80004f8:	f000 faf8 	bl	8000aec <USART_Write>
	USART_Write(uart.Instance, (uint8_t *)msg2, strlen(msg2));
 80004fc:	69bc      	ldr	r4, [r7, #24]
 80004fe:	6838      	ldr	r0, [r7, #0]
 8000500:	f7ff fe62 	bl	80001c8 <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	6839      	ldr	r1, [r7, #0]
 800050a:	4620      	mov	r0, r4
 800050c:	f000 faee 	bl	8000aec <USART_Write>
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800051a:	b004      	add	sp, #16
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	08004144 	.word	0x08004144
 8000524:	08004198 	.word	0x08004198

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b0a1      	sub	sp, #132	; 0x84
 800052c:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fb38 	bl	8000ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f82b 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f000 f949 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800053a:	f000 f8f9 	bl	8000730 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800053e:	f000 f927 	bl	8000790 <MX_DMA_Init>
  MX_DAC1_Init();
 8000542:	f000 f875 	bl	8000630 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000546:	f000 f8a5 	bl	8000694 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  startup(huart2);
 800054a:	4c0c      	ldr	r4, [pc, #48]	; (800057c <main+0x54>)
 800054c:	4668      	mov	r0, sp
 800054e:	f104 0310 	add.w	r3, r4, #16
 8000552:	2274      	movs	r2, #116	; 0x74
 8000554:	4619      	mov	r1, r3
 8000556:	f003 fdd3 	bl	8004100 <memcpy>
 800055a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800055e:	f7ff ffb7 	bl	80004d0 <startup>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, samples, DAC_ALIGN_12B_R);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2200      	movs	r2, #0
 8000566:	9200      	str	r2, [sp, #0]
 8000568:	4a05      	ldr	r2, [pc, #20]	; (8000580 <main+0x58>)
 800056a:	2100      	movs	r1, #0
 800056c:	4805      	ldr	r0, [pc, #20]	; (8000584 <main+0x5c>)
 800056e:	f000 fce5 	bl	8000f3c <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <main+0x60>)
 8000574:	f002 fe76 	bl	8003264 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x50>
 800057a:	bf00      	nop
 800057c:	200080ec 	.word	0x200080ec
 8000580:	2000002c 	.word	0x2000002c
 8000584:	20008030 	.word	0x20008030
 8000588:	200080a0 	.word	0x200080a0

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b096      	sub	sp, #88	; 0x58
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2244      	movs	r2, #68	; 0x44
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fdbe 	bl	800411c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b2:	f001 fb01 	bl	8001bb8 <HAL_PWREx_ControlVoltageScaling>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005bc:	f000 f91e 	bl	80007fc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c0:	2310      	movs	r3, #16
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005cc:	2360      	movs	r3, #96	; 0x60
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d4:	2301      	movs	r3, #1
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d8:	2301      	movs	r3, #1
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005dc:	2320      	movs	r3, #32
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fb37 	bl	8001c64 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005fc:	f000 f8fe 	bl	80007fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	2103      	movs	r1, #3
 8000618:	4618      	mov	r0, r3
 800061a:	f001 ff09 	bl	8002430 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000624:	f000 f8ea 	bl	80007fc <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3758      	adds	r7, #88	; 0x58
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2224      	movs	r2, #36	; 0x24
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fd6d 	bl	800411c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_DAC1_Init+0x5c>)
 8000644:	4a12      	ldr	r2, [pc, #72]	; (8000690 <MX_DAC1_Init+0x60>)
 8000646:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000648:	4810      	ldr	r0, [pc, #64]	; (800068c <MX_DAC1_Init+0x5c>)
 800064a:	f000 fc54 	bl	8000ef6 <HAL_DAC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000654:	f000 f8d2 	bl	80007fc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800065c:	2324      	movs	r3, #36	; 0x24
 800065e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_DAC1_Init+0x5c>)
 8000674:	f000 fd4c 	bl	8001110 <HAL_DAC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800067e:	f000 f8bd 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20008030 	.word	0x20008030
 8000690:	40007400 	.word	0x40007400

08000694 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_TIM2_Init+0x98>)
 80006b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_TIM2_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_TIM2_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_TIM2_Init+0x98>)
 80006c8:	f04f 32ff 	mov.w	r2, #4294967295
 80006cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_TIM2_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_TIM2_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <MX_TIM2_Init+0x98>)
 80006dc:	f002 fd6a 	bl	80031b4 <HAL_TIM_Base_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006e6:	f000 f889 	bl	80007fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_TIM2_Init+0x98>)
 80006f8:	f002 fe1c 	bl	8003334 <HAL_TIM_ConfigClockSource>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000702:	f000 f87b 	bl	80007fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000706:	2320      	movs	r3, #32
 8000708:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_TIM2_Init+0x98>)
 8000714:	f003 f808 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800071e:	f000 f86d 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200080a0 	.word	0x200080a0

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000736:	4a15      	ldr	r2, [pc, #84]	; (800078c <MX_USART2_UART_Init+0x5c>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000774:	f003 f860 	bl	8003838 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f83d 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200080ec 	.word	0x200080ec
 800078c:	40004400 	.word	0x40004400

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_DMA_Init+0x38>)
 8000798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <MX_DMA_Init+0x38>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6493      	str	r3, [r2, #72]	; 0x48
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_DMA_Init+0x38>)
 80007a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	200d      	movs	r0, #13
 80007b4:	f000 fb69 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007b8:	200d      	movs	r0, #13
 80007ba:	f000 fb82 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_GPIO_Init+0x2c>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_GPIO_Init+0x2c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_GPIO_Init+0x2c>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <HAL_MspInit+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6613      	str	r3, [r2, #96]	; 0x60
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6593      	str	r3, [r2, #88]	; 0x58
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a2b      	ldr	r2, [pc, #172]	; (800091c <HAL_DAC_MspInit+0xcc>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d150      	bne.n	8000914 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000872:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <HAL_DAC_MspInit+0xd0>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <HAL_DAC_MspInit+0xd0>)
 8000878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800087c:	6593      	str	r3, [r2, #88]	; 0x58
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <HAL_DAC_MspInit+0xd0>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b25      	ldr	r3, [pc, #148]	; (8000920 <HAL_DAC_MspInit+0xd0>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a24      	ldr	r2, [pc, #144]	; (8000920 <HAL_DAC_MspInit+0xd0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b22      	ldr	r3, [pc, #136]	; (8000920 <HAL_DAC_MspInit+0xd0>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008a2:	2310      	movs	r3, #16
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a6:	2303      	movs	r3, #3
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f000 ffc6 	bl	8001848 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 80008be:	4a1a      	ldr	r2, [pc, #104]	; (8000928 <HAL_DAC_MspInit+0xd8>)
 80008c0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 80008c4:	2206      	movs	r2, #6
 80008c6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 80008ca:	2210      	movs	r2, #16
 80008cc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 80008e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008e8:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 80008ec:	2220      	movs	r2, #32
 80008ee:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 80008f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80008f8:	480a      	ldr	r0, [pc, #40]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 80008fa:	f000 fdad 	bl	8001458 <HAL_DMA_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000904:	f7ff ff7a 	bl	80007fc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <HAL_DAC_MspInit+0xd4>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40007400 	.word	0x40007400
 8000920:	40021000 	.word	0x40021000
 8000924:	20008044 	.word	0x20008044
 8000928:	40020030 	.word	0x40020030

0800092c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800093c:	d10b      	bne.n	8000956 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_TIM_Base_MspInit+0x38>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_TIM_Base_MspInit+0x38>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_TIM_Base_MspInit+0x38>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0ac      	sub	sp, #176	; 0xb0
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2288      	movs	r2, #136	; 0x88
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fbc7 	bl	800411c <memset>
  if(huart->Instance==USART2)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <HAL_UART_MspInit+0xb0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d13b      	bne.n	8000a10 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000998:	2302      	movs	r3, #2
 800099a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800099c:	2300      	movs	r3, #0
 800099e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 ff49 	bl	800283c <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b0:	f7ff ff24 	bl	80007fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b8:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009be:	6593      	str	r3, [r2, #88]	; 0x58
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d0:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_UART_MspInit+0xb4>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e4:	230c      	movs	r3, #12
 80009e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009fc:	2307      	movs	r3, #7
 80009fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 ff1c 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	37b0      	adds	r7, #176	; 0xb0
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40004400 	.word	0x40004400
 8000a1c:	40021000 	.word	0x40021000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f8ee 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <DMA1_Channel3_IRQHandler+0x10>)
 8000a7a:	f000 fe05 	bl	8001688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20008044 	.word	0x20008044

08000a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <SystemInit+0x5c>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <SystemInit+0x5c>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <SystemInit+0x60>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <SystemInit+0x60>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <SystemInit+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <SystemInit+0x60>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <SystemInit+0x60>)
 8000ab4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ab8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000abc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <SystemInit+0x60>)
 8000ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ac4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <SystemInit+0x60>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <SystemInit+0x60>)
 8000acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ad0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SystemInit+0x60>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	40021000 	.word	0x40021000

08000aec <USART_Write>:
// USART resets the RXNE flag automatically after reading DR
return ((uint8_t)(USARTx->RDR & 0xFF));
// Reading USART_DR automatically clears the RXNE flag
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data egister), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e010      	b.n	8000b20 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8000afe:	bf00      	nop
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	69db      	ldr	r3, [r3, #28]
 8000b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f9      	beq.n	8000b00 <USART_Write+0x14>
;    	// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF; // writing USART_TDR automatically clears the TXE flag
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	4413      	add	r3, r2
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8ea      	bhi.n	8000afe <USART_Write+0x12>
		}
	while (!(USARTx->ISR & USART_ISR_TC))
 8000b28:	bf00      	nop
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f9      	beq.n	8000b2a <USART_Write+0x3e>
		;  // wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	61da      	str	r2, [r3, #28]
}
 8000b42:	bf00      	nop
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff ff98 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b5a:	e003      	b.n	8000b64 <LoopCopyDataInit>

08000b5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b62:	3104      	adds	r1, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b64:	480a      	ldr	r0, [pc, #40]	; (8000b90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b6c:	d3f6      	bcc.n	8000b5c <CopyDataInit>
	ldr	r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b70:	e002      	b.n	8000b78 <LoopFillZerobss>

08000b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b74:	f842 3b04 	str.w	r3, [r2], #4

08000b78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <LoopForever+0x16>)
	cmp	r2, r3
 8000b7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b7c:	d3f9      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f003 fa9b 	bl	80040b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b82:	f7ff fcd1 	bl	8000528 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b88:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b8c:	080042ac 	.word	0x080042ac
	ldr	r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b94:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b98:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b9c:	20008174 	.word	0x20008174

08000ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>

08000ba2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bac:	2003      	movs	r0, #3
 8000bae:	f000 f961 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb2:	200f      	movs	r0, #15
 8000bb4:	f000 f80e 	bl	8000bd4 <HAL_InitTick>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e001      	b.n	8000bc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc4:	f7ff fe20 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_InitTick+0x6c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d023      	beq.n	8000c30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_InitTick+0x70>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_InitTick+0x6c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f96d 	bl	8000ede <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d10f      	bne.n	8000c2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d809      	bhi.n	8000c24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f000 f937 	bl	8000e8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_InitTick+0x74>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e007      	b.n	8000c34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e004      	b.n	8000c34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
 8000c2e:	e001      	b.n	8000c34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20008170 	.word	0x20008170

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20008170 	.word	0x20008170

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff8e 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff29 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff3e 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff8e 	bl	8000dc8 <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff31 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa2 	bl	8000e30 <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e014      	b.n	8000f32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	791b      	ldrb	r3, [r3, #4]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d105      	bne.n	8000f1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fc99 	bl	8000850 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2202      	movs	r2, #2
 8000f22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	795b      	ldrb	r3, [r3, #5]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_DAC_Start_DMA+0x1e>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e0ab      	b.n	80010b2 <HAL_DAC_Start_DMA+0x176>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2202      	movs	r2, #2
 8000f64:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d12f      	bne.n	8000fcc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a52      	ldr	r2, [pc, #328]	; (80010bc <HAL_DAC_Start_DMA+0x180>)
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	4a51      	ldr	r2, [pc, #324]	; (80010c0 <HAL_DAC_Start_DMA+0x184>)
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a50      	ldr	r2, [pc, #320]	; (80010c4 <HAL_DAC_Start_DMA+0x188>)
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f92:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d013      	beq.n	8000fc2 <HAL_DAC_Start_DMA+0x86>
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d845      	bhi.n	800102c <HAL_DAC_Start_DMA+0xf0>
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_DAC_Start_DMA+0x72>
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d005      	beq.n	8000fb8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000fac:	e03e      	b.n	800102c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	613b      	str	r3, [r7, #16]
        break;
 8000fb6:	e03c      	b.n	8001032 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	330c      	adds	r3, #12
 8000fbe:	613b      	str	r3, [r7, #16]
        break;
 8000fc0:	e037      	b.n	8001032 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3310      	adds	r3, #16
 8000fc8:	613b      	str	r3, [r7, #16]
        break;
 8000fca:	e032      	b.n	8001032 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	4a3d      	ldr	r2, [pc, #244]	; (80010c8 <HAL_DAC_Start_DMA+0x18c>)
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <HAL_DAC_Start_DMA+0x190>)
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	4a3b      	ldr	r2, [pc, #236]	; (80010d0 <HAL_DAC_Start_DMA+0x194>)
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ff2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000ff4:	6a3b      	ldr	r3, [r7, #32]
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d013      	beq.n	8001022 <HAL_DAC_Start_DMA+0xe6>
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d817      	bhi.n	8001030 <HAL_DAC_Start_DMA+0xf4>
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_DAC_Start_DMA+0xd2>
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	2b04      	cmp	r3, #4
 800100a:	d005      	beq.n	8001018 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800100c:	e010      	b.n	8001030 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3314      	adds	r3, #20
 8001014:	613b      	str	r3, [r7, #16]
        break;
 8001016:	e00c      	b.n	8001032 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3318      	adds	r3, #24
 800101e:	613b      	str	r3, [r7, #16]
        break;
 8001020:	e007      	b.n	8001032 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	331c      	adds	r3, #28
 8001028:	613b      	str	r3, [r7, #16]
        break;
 800102a:	e002      	b.n	8001032 <HAL_DAC_Start_DMA+0xf6>
        break;
 800102c:	bf00      	nop
 800102e:	e000      	b.n	8001032 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001030:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d111      	bne.n	800105c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001046:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6898      	ldr	r0, [r3, #8]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	f000 fab9 	bl	80015c8 <HAL_DMA_Start_IT>
 8001056:	4603      	mov	r3, r0
 8001058:	75fb      	strb	r3, [r7, #23]
 800105a:	e010      	b.n	800107e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800106a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	68d8      	ldr	r0, [r3, #12]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	f000 faa7 	bl	80015c8 <HAL_DMA_Start_IT>
 800107a:	4603      	mov	r3, r0
 800107c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6819      	ldr	r1, [r3, #0]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	2201      	movs	r2, #1
 8001098:	409a      	lsls	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e005      	b.n	80010b0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	f043 0204 	orr.w	r2, r3, #4
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08001345 	.word	0x08001345
 80010c0:	08001367 	.word	0x08001367
 80010c4:	08001383 	.word	0x08001383
 80010c8:	080013ed 	.word	0x080013ed
 80010cc:	0800140f 	.word	0x0800140f
 80010d0:	0800142b 	.word	0x0800142b

080010d4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	795b      	ldrb	r3, [r3, #5]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_DAC_ConfigChannel+0x1c>
 8001128:	2302      	movs	r3, #2
 800112a:	e107      	b.n	800133c <HAL_DAC_ConfigChannel+0x22c>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2201      	movs	r2, #1
 8001130:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2202      	movs	r2, #2
 8001136:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d174      	bne.n	800122a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001140:	f7ff fd98 	bl	8000c74 <HAL_GetTick>
 8001144:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d134      	bne.n	80011b6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800114c:	e011      	b.n	8001172 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800114e:	f7ff fd91 	bl	8000c74 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d90a      	bls.n	8001172 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	f043 0208 	orr.w	r2, r3, #8
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2203      	movs	r2, #3
 800116c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e0e4      	b.n	800133c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1e6      	bne.n	800114e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff fd83 	bl	8000c8c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	6992      	ldr	r2, [r2, #24]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
 8001190:	e01e      	b.n	80011d0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001192:	f7ff fd6f 	bl	8000c74 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d90a      	bls.n	80011b6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	f043 0208 	orr.w	r2, r3, #8
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2203      	movs	r2, #3
 80011b0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e0c2      	b.n	800133c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011bc:	2b00      	cmp	r3, #0
 80011be:	dbe8      	blt.n	8001192 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff fd63 	bl	8000c8c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	6992      	ldr	r2, [r2, #24]
 80011ce:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	ea02 0103 	and.w	r1, r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	409a      	lsls	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	21ff      	movs	r1, #255	; 0xff
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	ea02 0103 	and.w	r1, r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	409a      	lsls	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d11d      	bne.n	800126e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001238:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	221f      	movs	r2, #31
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001274:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2207      	movs	r2, #7
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	431a      	orrs	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	400a      	ands	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6819      	ldr	r1, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	22c0      	movs	r2, #192	; 0xc0
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43da      	mvns	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	400a      	ands	r2, r1
 800132c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2201      	movs	r2, #1
 8001332:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3720      	adds	r7, #32
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff febe 	bl	80010d4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2201      	movs	r2, #1
 800135c:	711a      	strb	r2, [r3, #4]
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f7ff feb7 	bl	80010e8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	f043 0204 	orr.w	r2, r3, #4
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff fead 	bl	80010fc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2201      	movs	r2, #1
 80013a6:	711a      	strb	r2, [r3, #4]
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff ffd8 	bl	80013b0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	711a      	strb	r2, [r3, #4]
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f7ff ffd1 	bl	80013c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	f043 0204 	orr.w	r2, r3, #4
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f7ff ffc7 	bl	80013d8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2201      	movs	r2, #1
 800144e:	711a      	strb	r2, [r3, #4]
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e098      	b.n	800159c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <HAL_DMA_Init+0x150>)
 8001472:	429a      	cmp	r2, r3
 8001474:	d80f      	bhi.n	8001496 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <HAL_DMA_Init+0x154>)
 800147e:	4413      	add	r3, r2
 8001480:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <HAL_DMA_Init+0x158>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	009a      	lsls	r2, r3, #2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <HAL_DMA_Init+0x15c>)
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
 8001494:	e00e      	b.n	80014b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_DMA_Init+0x160>)
 800149e:	4413      	add	r3, r2
 80014a0:	4a43      	ldr	r2, [pc, #268]	; (80015b0 <HAL_DMA_Init+0x158>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	009a      	lsls	r2, r3, #2
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a42      	ldr	r2, [pc, #264]	; (80015bc <HAL_DMA_Init+0x164>)
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800150e:	d039      	beq.n	8001584 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_DMA_Init+0x15c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d11a      	bne.n	8001550 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <HAL_DMA_Init+0x168>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f003 031c 	and.w	r3, r3, #28
 8001526:	210f      	movs	r1, #15
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	4924      	ldr	r1, [pc, #144]	; (80015c0 <HAL_DMA_Init+0x168>)
 8001530:	4013      	ands	r3, r2
 8001532:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_DMA_Init+0x168>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	f003 031c 	and.w	r3, r3, #28
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	491d      	ldr	r1, [pc, #116]	; (80015c0 <HAL_DMA_Init+0x168>)
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
 800154e:	e019      	b.n	8001584 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_DMA_Init+0x16c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f003 031c 	and.w	r3, r3, #28
 800155c:	210f      	movs	r1, #15
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	4917      	ldr	r1, [pc, #92]	; (80015c4 <HAL_DMA_Init+0x16c>)
 8001566:	4013      	ands	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_DMA_Init+0x16c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6859      	ldr	r1, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f003 031c 	and.w	r3, r3, #28
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	4911      	ldr	r1, [pc, #68]	; (80015c4 <HAL_DMA_Init+0x16c>)
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40020407 	.word	0x40020407
 80015ac:	bffdfff8 	.word	0xbffdfff8
 80015b0:	cccccccd 	.word	0xcccccccd
 80015b4:	40020000 	.word	0x40020000
 80015b8:	bffdfbf8 	.word	0xbffdfbf8
 80015bc:	40020400 	.word	0x40020400
 80015c0:	400200a8 	.word	0x400200a8
 80015c4:	400204a8 	.word	0x400204a8

080015c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_DMA_Start_IT+0x20>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e04b      	b.n	8001680 <HAL_DMA_Start_IT+0xb8>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d13a      	bne.n	8001672 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 f8e0 	bl	80017e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 020e 	orr.w	r2, r2, #14
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e00f      	b.n	8001660 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0204 	bic.w	r2, r2, #4
 800164e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 020a 	orr.w	r2, r2, #10
 800165e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e005      	b.n	800167e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800167a:	2302      	movs	r3, #2
 800167c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800167e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f003 031c 	and.w	r3, r3, #28
 80016a8:	2204      	movs	r2, #4
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d026      	beq.n	8001702 <HAL_DMA_IRQHandler+0x7a>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d021      	beq.n	8001702 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0320 	and.w	r3, r3, #32
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0204 	bic.w	r2, r2, #4
 80016da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	f003 021c 	and.w	r2, r3, #28
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	2104      	movs	r1, #4
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d071      	beq.n	80017dc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001700:	e06c      	b.n	80017dc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f003 031c 	and.w	r3, r3, #28
 800170a:	2202      	movs	r2, #2
 800170c:	409a      	lsls	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d02e      	beq.n	8001774 <HAL_DMA_IRQHandler+0xec>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d029      	beq.n	8001774 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10b      	bne.n	8001746 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 020a 	bic.w	r2, r2, #10
 800173c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f003 021c 	and.w	r2, r3, #28
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2102      	movs	r1, #2
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	2b00      	cmp	r3, #0
 8001768:	d038      	beq.n	80017dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001772:	e033      	b.n	80017dc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	f003 031c 	and.w	r3, r3, #28
 800177c:	2208      	movs	r2, #8
 800177e:	409a      	lsls	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d02a      	beq.n	80017de <HAL_DMA_IRQHandler+0x156>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d025      	beq.n	80017de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 020e 	bic.w	r2, r2, #14
 80017a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f003 021c 	and.w	r2, r3, #28
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d004      	beq.n	80017de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
}
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	f003 021c 	and.w	r2, r3, #28
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b10      	cmp	r3, #16
 8001816:	d108      	bne.n	800182a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001828:	e007      	b.n	800183a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	60da      	str	r2, [r3, #12]
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001856:	e17f      	b.n	8001b58 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2101      	movs	r1, #1
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	4013      	ands	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8171 	beq.w	8001b52 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d00b      	beq.n	8001890 <HAL_GPIO_Init+0x48>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d007      	beq.n	8001890 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001884:	2b11      	cmp	r3, #17
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b12      	cmp	r3, #18
 800188e:	d130      	bne.n	80018f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018c6:	2201      	movs	r2, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 0201 	and.w	r2, r3, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d118      	bne.n	8001930 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001904:	2201      	movs	r2, #1
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	f003 0201 	and.w	r2, r3, #1
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x128>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b12      	cmp	r3, #18
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	6939      	ldr	r1, [r7, #16]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80ac 	beq.w	8001b52 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <HAL_GPIO_Init+0x330>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	4a5e      	ldr	r2, [pc, #376]	; (8001b78 <HAL_GPIO_Init+0x330>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6613      	str	r3, [r2, #96]	; 0x60
 8001a06:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <HAL_GPIO_Init+0x330>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a12:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_GPIO_Init+0x334>)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a3c:	d025      	beq.n	8001a8a <HAL_GPIO_Init+0x242>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4f      	ldr	r2, [pc, #316]	; (8001b80 <HAL_GPIO_Init+0x338>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <HAL_GPIO_Init+0x23e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4e      	ldr	r2, [pc, #312]	; (8001b84 <HAL_GPIO_Init+0x33c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x23a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4d      	ldr	r2, [pc, #308]	; (8001b88 <HAL_GPIO_Init+0x340>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x236>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_GPIO_Init+0x344>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x232>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_GPIO_Init+0x348>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x22e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <HAL_GPIO_Init+0x34c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x22a>
 8001a6e:	2306      	movs	r3, #6
 8001a70:	e00c      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e00a      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a76:	2305      	movs	r3, #5
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x244>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a9c:	4937      	ldr	r1, [pc, #220]	; (8001b7c <HAL_GPIO_Init+0x334>)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ace:	4a32      	ldr	r2, [pc, #200]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001af8:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b22:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <HAL_GPIO_Init+0x350>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f47f ae78 	bne.w	8001858 <HAL_GPIO_Init+0x10>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	48000400 	.word	0x48000400
 8001b84:	48000800 	.word	0x48000800
 8001b88:	48000c00 	.word	0x48000c00
 8001b8c:	48001000 	.word	0x48001000
 8001b90:	48001400 	.word	0x48001400
 8001b94:	48001800 	.word	0x48001800
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40007000 	.word	0x40007000

08001bb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc6:	d130      	bne.n	8001c2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd4:	d038      	beq.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bde:	4a1e      	ldr	r2, [pc, #120]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2232      	movs	r2, #50	; 0x32
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9b      	lsrs	r3, r3, #18
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bfc:	e002      	b.n	8001c04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c10:	d102      	bne.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f2      	bne.n	8001bfe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c24:	d110      	bne.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e00f      	b.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c36:	d007      	beq.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c40:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	431bde83 	.word	0x431bde83

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e3d4      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c76:	4ba1      	ldr	r3, [pc, #644]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c80:	4b9e      	ldr	r3, [pc, #632]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 80e4 	beq.w	8001e60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_RCC_OscConfig+0x4a>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	f040 808b 	bne.w	8001dbc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	f040 8087 	bne.w	8001dbc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cae:	4b93      	ldr	r3, [pc, #588]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x62>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e3ac      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1a      	ldr	r2, [r3, #32]
 8001cca:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x7c>
 8001cd6:	4b89      	ldr	r3, [pc, #548]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cde:	e005      	b.n	8001cec <HAL_RCC_OscConfig+0x88>
 8001ce0:	4b86      	ldr	r3, [pc, #536]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d223      	bcs.n	8001d38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fd41 	bl	800277c <RCC_SetFlashLatencyFromMSIRange>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e38d      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d04:	4b7d      	ldr	r3, [pc, #500]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a7c      	ldr	r2, [pc, #496]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b7a      	ldr	r3, [pc, #488]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4977      	ldr	r1, [pc, #476]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d22:	4b76      	ldr	r3, [pc, #472]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4972      	ldr	r1, [pc, #456]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
 8001d36:	e025      	b.n	8001d84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d38:	4b70      	ldr	r3, [pc, #448]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6f      	ldr	r2, [pc, #444]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b6d      	ldr	r3, [pc, #436]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	496a      	ldr	r1, [pc, #424]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d56:	4b69      	ldr	r3, [pc, #420]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	4965      	ldr	r1, [pc, #404]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fd01 	bl	800277c <RCC_SetFlashLatencyFromMSIRange>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e34d      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d84:	f000 fc36 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	495a      	ldr	r1, [pc, #360]	; (8001f00 <HAL_RCC_OscConfig+0x29c>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_OscConfig+0x2a0>)
 8001da2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001da4:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <HAL_RCC_OscConfig+0x2a4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ff13 	bl	8000bd4 <HAL_InitTick>
 8001dae:	4603      	mov	r3, r0
 8001db0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d052      	beq.n	8001e5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	e331      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d032      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dc4:	4b4d      	ldr	r3, [pc, #308]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a4c      	ldr	r2, [pc, #304]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe ff50 	bl	8000c74 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd8:	f7fe ff4c 	bl	8000c74 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e31a      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dea:	4b44      	ldr	r3, [pc, #272]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a40      	ldr	r2, [pc, #256]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b3e      	ldr	r3, [pc, #248]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	493b      	ldr	r1, [pc, #236]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e14:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	4936      	ldr	r1, [pc, #216]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
 8001e28:	e01a      	b.n	8001e60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e2a:	4b34      	ldr	r3, [pc, #208]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a33      	ldr	r2, [pc, #204]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e36:	f7fe ff1d 	bl	8000c74 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3e:	f7fe ff19 	bl	8000c74 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e2e7      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e50:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x1da>
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d074      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d005      	beq.n	8001e7e <HAL_RCC_OscConfig+0x21a>
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d10e      	bne.n	8001e96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d10b      	bne.n	8001e96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7e:	4b1f      	ldr	r3, [pc, #124]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d064      	beq.n	8001f54 <HAL_RCC_OscConfig+0x2f0>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d160      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e2c4      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x24a>
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a15      	ldr	r2, [pc, #84]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e01d      	b.n	8001eea <HAL_RCC_OscConfig+0x286>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb6:	d10c      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x26e>
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	e00b      	b.n	8001eea <HAL_RCC_OscConfig+0x286>
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_RCC_OscConfig+0x298>)
 8001ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7fe febf 	bl	8000c74 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef8:	e011      	b.n	8001f1e <HAL_RCC_OscConfig+0x2ba>
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08004254 	.word	0x08004254
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7fe feb2 	bl	8000c74 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e280      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1e:	4baf      	ldr	r3, [pc, #700]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x2a8>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fea2 	bl	8000c74 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe fe9e 	bl	8000c74 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e26c      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f46:	4ba5      	ldr	r3, [pc, #660]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2d0>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d060      	beq.n	8002024 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_OscConfig+0x310>
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d119      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d116      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f74:	4b99      	ldr	r3, [pc, #612]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_OscConfig+0x328>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e249      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b93      	ldr	r3, [pc, #588]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	4990      	ldr	r1, [pc, #576]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa0:	e040      	b.n	8002024 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d023      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001faa:	4b8c      	ldr	r3, [pc, #560]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a8b      	ldr	r2, [pc, #556]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb6:	f7fe fe5d 	bl	8000c74 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7fe fe59 	bl	8000c74 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e227      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd0:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b7f      	ldr	r3, [pc, #508]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	061b      	lsls	r3, r3, #24
 8001fea:	497c      	ldr	r1, [pc, #496]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	e018      	b.n	8002024 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff2:	4b7a      	ldr	r3, [pc, #488]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a79      	ldr	r2, [pc, #484]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8001ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fe39 	bl	8000c74 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002006:	f7fe fe35 	bl	8000c74 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e203      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002018:	4b70      	ldr	r3, [pc, #448]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f0      	bne.n	8002006 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d03c      	beq.n	80020aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01c      	beq.n	8002072 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002038:	4b68      	ldr	r3, [pc, #416]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203e:	4a67      	ldr	r2, [pc, #412]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7fe fe14 	bl	8000c74 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7fe fe10 	bl	8000c74 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1de      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002062:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ef      	beq.n	8002050 <HAL_RCC_OscConfig+0x3ec>
 8002070:	e01b      	b.n	80020aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002072:	4b5a      	ldr	r3, [pc, #360]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8002074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002078:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7fe fdf7 	bl	8000c74 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208a:	f7fe fdf3 	bl	8000c74 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e1c1      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800209c:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 800209e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1ef      	bne.n	800208a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80a6 	beq.w	8002204 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020bc:	4b47      	ldr	r3, [pc, #284]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	4b44      	ldr	r3, [pc, #272]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	4a43      	ldr	r2, [pc, #268]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	; 0x58
 80020d4:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e4:	4b3e      	ldr	r3, [pc, #248]	; (80021e0 <HAL_RCC_OscConfig+0x57c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d118      	bne.n	8002122 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f0:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <HAL_RCC_OscConfig+0x57c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <HAL_RCC_OscConfig+0x57c>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fc:	f7fe fdba 	bl	8000c74 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7fe fdb6 	bl	8000c74 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e184      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <HAL_RCC_OscConfig+0x57c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d108      	bne.n	800213c <HAL_RCC_OscConfig+0x4d8>
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002130:	4a2a      	ldr	r2, [pc, #168]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213a:	e024      	b.n	8002186 <HAL_RCC_OscConfig+0x522>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d110      	bne.n	8002166 <HAL_RCC_OscConfig+0x502>
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a24      	ldr	r2, [pc, #144]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	4a20      	ldr	r2, [pc, #128]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002164:	e00f      	b.n	8002186 <HAL_RCC_OscConfig+0x522>
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	4a1b      	ldr	r2, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 800217e:	f023 0304 	bic.w	r3, r3, #4
 8002182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218e:	f7fe fd71 	bl	8000c74 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002194:	e00a      	b.n	80021ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002196:	f7fe fd6d 	bl	8000c74 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e139      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x578>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ed      	beq.n	8002196 <HAL_RCC_OscConfig+0x532>
 80021ba:	e01a      	b.n	80021f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7fe fd5a 	bl	8000c74 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c2:	e00f      	b.n	80021e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7fe fd56 	bl	8000c74 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d906      	bls.n	80021e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e122      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e4:	4b90      	ldr	r3, [pc, #576]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1e8      	bne.n	80021c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f2:	7ffb      	ldrb	r3, [r7, #31]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b8b      	ldr	r3, [pc, #556]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	4a8a      	ldr	r2, [pc, #552]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80021fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002202:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8108 	beq.w	800241e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	2b02      	cmp	r3, #2
 8002214:	f040 80d0 	bne.w	80023b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002218:	4b83      	ldr	r3, [pc, #524]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0203 	and.w	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	429a      	cmp	r2, r3
 800222a:	d130      	bne.n	800228e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	3b01      	subs	r3, #1
 8002238:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d127      	bne.n	800228e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d11f      	bne.n	800228e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002258:	2a07      	cmp	r2, #7
 800225a:	bf14      	ite	ne
 800225c:	2201      	movne	r2, #1
 800225e:	2200      	moveq	r2, #0
 8002260:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002262:	4293      	cmp	r3, r2
 8002264:	d113      	bne.n	800228e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	3b01      	subs	r3, #1
 8002274:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d109      	bne.n	800228e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	3b01      	subs	r3, #1
 8002288:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d06e      	beq.n	800236c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b0c      	cmp	r3, #12
 8002292:	d069      	beq.n	8002368 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002294:	4b64      	ldr	r3, [pc, #400]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022a0:	4b61      	ldr	r3, [pc, #388]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b7      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022b0:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a5c      	ldr	r2, [pc, #368]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80022b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022bc:	f7fe fcda 	bl	8000c74 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fcd6 	bl	8000c74 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0a4      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d6:	4b54      	ldr	r3, [pc, #336]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e2:	4b51      	ldr	r3, [pc, #324]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	4b51      	ldr	r3, [pc, #324]	; (800242c <HAL_RCC_OscConfig+0x7c8>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022f2:	3a01      	subs	r2, #1
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022fc:	0212      	lsls	r2, r2, #8
 80022fe:	4311      	orrs	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002304:	0852      	lsrs	r2, r2, #1
 8002306:	3a01      	subs	r2, #1
 8002308:	0552      	lsls	r2, r2, #21
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002310:	0852      	lsrs	r2, r2, #1
 8002312:	3a01      	subs	r2, #1
 8002314:	0652      	lsls	r2, r2, #25
 8002316:	4311      	orrs	r1, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800231c:	0912      	lsrs	r2, r2, #4
 800231e:	0452      	lsls	r2, r2, #17
 8002320:	430a      	orrs	r2, r1
 8002322:	4941      	ldr	r1, [pc, #260]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002328:	4b3f      	ldr	r3, [pc, #252]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a3e      	ldr	r2, [pc, #248]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 800232e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002332:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002334:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a3b      	ldr	r2, [pc, #236]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 800233a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002340:	f7fe fc98 	bl	8000c74 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fc94 	bl	8000c74 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e062      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235a:	4b33      	ldr	r3, [pc, #204]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002366:	e05a      	b.n	800241e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e059      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236c:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d152      	bne.n	800241e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a2a      	ldr	r2, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a27      	ldr	r2, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002390:	f7fe fc70 	bl	8000c74 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe fc6c 	bl	8000c74 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e03a      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x734>
 80023b6:	e032      	b.n	800241e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d02d      	beq.n	800241a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80023c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80023dc:	f023 0303 	bic.w	r3, r3, #3
 80023e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 80023e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe fc3f 	bl	8000c74 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe fc3b 	bl	8000c74 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e009      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_OscConfig+0x7c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f0      	bne.n	80023fa <HAL_RCC_OscConfig+0x796>
 8002418:	e001      	b.n	800241e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	f99d808c 	.word	0xf99d808c

08002430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0c8      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002444:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d910      	bls.n	8002474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0207 	bic.w	r2, r3, #7
 800245a:	4961      	ldr	r1, [pc, #388]	; (80025e0 <HAL_RCC_ClockConfig+0x1b0>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b5f      	ldr	r3, [pc, #380]	; (80025e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0b0      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d04c      	beq.n	800251a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d107      	bne.n	8002498 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002488:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d121      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e09e      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a0:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d115      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e092      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024b8:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e086      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e07e      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024d8:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 0203 	bic.w	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	493f      	ldr	r1, [pc, #252]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ea:	f7fe fbc3 	bl	8000c74 <HAL_GetTick>
 80024ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f0:	e00a      	b.n	8002508 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f2:	f7fe fbbf 	bl	8000c74 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002500:	4293      	cmp	r3, r2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e066      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002508:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 020c 	and.w	r2, r3, #12
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	429a      	cmp	r2, r3
 8002518:	d1eb      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002526:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	492c      	ldr	r1, [pc, #176]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_RCC_ClockConfig+0x1b0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d210      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0207 	bic.w	r2, r3, #7
 800254e:	4924      	ldr	r1, [pc, #144]	; (80025e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_RCC_ClockConfig+0x1b0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e036      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4918      	ldr	r1, [pc, #96]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4910      	ldr	r1, [pc, #64]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025a6:	f000 f825 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_RCC_ClockConfig+0x1b4>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490c      	ldr	r1, [pc, #48]	; (80025e8 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	fa22 f303 	lsr.w	r3, r2, r3
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fb02 	bl	8000bd4 <HAL_InitTick>
 80025d0:	4603      	mov	r3, r0
 80025d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80025d4:	7afb      	ldrb	r3, [r7, #11]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40022000 	.word	0x40022000
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08004254 	.word	0x08004254
 80025ec:	20000000 	.word	0x20000000
 80025f0:	20000004 	.word	0x20000004

080025f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002602:	4b3e      	ldr	r3, [pc, #248]	; (80026fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800260c:	4b3b      	ldr	r3, [pc, #236]	; (80026fc <HAL_RCC_GetSysClockFreq+0x108>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x34>
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d121      	bne.n	8002666 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d11e      	bne.n	8002666 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002628:	4b34      	ldr	r3, [pc, #208]	; (80026fc <HAL_RCC_GetSysClockFreq+0x108>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d107      	bne.n	8002644 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002634:	4b31      	ldr	r3, [pc, #196]	; (80026fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	e005      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002650:	4a2b      	ldr	r2, [pc, #172]	; (8002700 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002658:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10d      	bne.n	800267c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002664:	e00a      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b04      	cmp	r3, #4
 800266a:	d102      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_RCC_GetSysClockFreq+0x110>)
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	e004      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d101      	bne.n	800267c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002678:	4b23      	ldr	r3, [pc, #140]	; (8002708 <HAL_RCC_GetSysClockFreq+0x114>)
 800267a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d134      	bne.n	80026ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d003      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0xa6>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d003      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002698:	e005      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_RCC_GetSysClockFreq+0x110>)
 800269c:	617b      	str	r3, [r7, #20]
      break;
 800269e:	e005      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_GetSysClockFreq+0x114>)
 80026a2:	617b      	str	r3, [r7, #20]
      break;
 80026a4:	e002      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	617b      	str	r3, [r7, #20]
      break;
 80026aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_RCC_GetSysClockFreq+0x108>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	3301      	adds	r3, #1
 80026b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <HAL_RCC_GetSysClockFreq+0x108>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	fb02 f203 	mul.w	r2, r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_RCC_GetSysClockFreq+0x108>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	0e5b      	lsrs	r3, r3, #25
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	3301      	adds	r3, #1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026ec:	69bb      	ldr	r3, [r7, #24]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	; 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	0800426c 	.word	0x0800426c
 8002704:	00f42400 	.word	0x00f42400
 8002708:	007a1200 	.word	0x007a1200

0800270c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_RCC_GetHCLKFreq+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000000 	.word	0x20000000

08002724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002728:	f7ff fff0 	bl	800270c <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4904      	ldr	r1, [pc, #16]	; (800274c <HAL_RCC_GetPCLK1Freq+0x28>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	08004264 	.word	0x08004264

08002750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002754:	f7ff ffda 	bl	800270c <HAL_RCC_GetHCLKFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0adb      	lsrs	r3, r3, #11
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	4904      	ldr	r1, [pc, #16]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	08004264 	.word	0x08004264

0800277c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002788:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002794:	f7ff fa02 	bl	8001b9c <HAL_PWREx_GetVoltageRange>
 8002798:	6178      	str	r0, [r7, #20]
 800279a:	e014      	b.n	80027c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	4a24      	ldr	r2, [pc, #144]	; (8002834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6593      	str	r3, [r2, #88]	; 0x58
 80027a8:	4b22      	ldr	r3, [pc, #136]	; (8002834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027b4:	f7ff f9f2 	bl	8001b9c <HAL_PWREx_GetVoltageRange>
 80027b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027cc:	d10b      	bne.n	80027e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b80      	cmp	r3, #128	; 0x80
 80027d2:	d919      	bls.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2ba0      	cmp	r3, #160	; 0xa0
 80027d8:	d902      	bls.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027da:	2302      	movs	r3, #2
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	e013      	b.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027e0:	2301      	movs	r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e010      	b.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b80      	cmp	r3, #128	; 0x80
 80027ea:	d902      	bls.n	80027f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027ec:	2303      	movs	r3, #3
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	e00a      	b.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b80      	cmp	r3, #128	; 0x80
 80027f6:	d102      	bne.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027f8:	2302      	movs	r3, #2
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	e004      	b.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b70      	cmp	r3, #112	; 0x70
 8002802:	d101      	bne.n	8002808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002804:	2301      	movs	r3, #1
 8002806:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 0207 	bic.w	r2, r3, #7
 8002810:	4909      	ldr	r1, [pc, #36]	; (8002838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	40022000 	.word	0x40022000

0800283c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002844:	2300      	movs	r3, #0
 8002846:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002848:	2300      	movs	r3, #0
 800284a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002854:	2b00      	cmp	r3, #0
 8002856:	d041      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800285c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002860:	d02a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002862:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002866:	d824      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002868:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800286c:	d008      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800286e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002872:	d81e      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800287c:	d010      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800287e:	e018      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002880:	4b86      	ldr	r3, [pc, #536]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a85      	ldr	r2, [pc, #532]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800288c:	e015      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fabb 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800289e:	e00c      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3320      	adds	r3, #32
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fba6 	bl	8002ff8 <RCCEx_PLLSAI2_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028b0:	e003      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	74fb      	strb	r3, [r7, #19]
      break;
 80028b6:	e000      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c0:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ce:	4973      	ldr	r1, [pc, #460]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028d6:	e001      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d041      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028f0:	d02a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028f6:	d824      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028fc:	d008      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002902:	d81e      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800290c:	d010      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800290e:	e018      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002910:	4b62      	ldr	r3, [pc, #392]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a61      	ldr	r2, [pc, #388]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800291c:	e015      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fa73 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 800292a:	4603      	mov	r3, r0
 800292c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800292e:	e00c      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3320      	adds	r3, #32
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fb5e 	bl	8002ff8 <RCCEx_PLLSAI2_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002940:	e003      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	74fb      	strb	r3, [r7, #19]
      break;
 8002946:	e000      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800294a:	7cfb      	ldrb	r3, [r7, #19]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002950:	4b52      	ldr	r3, [pc, #328]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800295e:	494f      	ldr	r1, [pc, #316]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002966:	e001      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a0 	beq.w	8002aba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800298e:	2300      	movs	r3, #0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b41      	ldr	r3, [pc, #260]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	4a40      	ldr	r2, [pc, #256]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299e:	6593      	str	r3, [r2, #88]	; 0x58
 80029a0:	4b3e      	ldr	r3, [pc, #248]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029b0:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a3a      	ldr	r2, [pc, #232]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029bc:	f7fe f95a 	bl	8000c74 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029c2:	e009      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fe f956 	bl	8000c74 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d902      	bls.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	74fb      	strb	r3, [r7, #19]
        break;
 80029d6:	e005      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029d8:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ef      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d15c      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ea:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01f      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d019      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a14:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	4a20      	ldr	r2, [pc, #128]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a46:	f7fe f915 	bl	8000c74 <HAL_GetTick>
 8002a4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a4c:	e00b      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe f911 	bl	8000c74 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d902      	bls.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	74fb      	strb	r3, [r7, #19]
            break;
 8002a64:	e006      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ec      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8a:	4904      	ldr	r1, [pc, #16]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a92:	e009      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	74bb      	strb	r3, [r7, #18]
 8002a98:	e006      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa8:	7c7b      	ldrb	r3, [r7, #17]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aae:	4b9e      	ldr	r3, [pc, #632]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	4a9d      	ldr	r2, [pc, #628]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac6:	4b98      	ldr	r3, [pc, #608]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f023 0203 	bic.w	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	4994      	ldr	r1, [pc, #592]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ae8:	4b8f      	ldr	r3, [pc, #572]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f023 020c 	bic.w	r2, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	498c      	ldr	r1, [pc, #560]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b0a:	4b87      	ldr	r3, [pc, #540]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	4983      	ldr	r1, [pc, #524]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b2c:	4b7e      	ldr	r3, [pc, #504]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	497b      	ldr	r1, [pc, #492]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b4e:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5c:	4972      	ldr	r1, [pc, #456]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b70:	4b6d      	ldr	r3, [pc, #436]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7e:	496a      	ldr	r1, [pc, #424]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b92:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	4961      	ldr	r1, [pc, #388]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bb4:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	4959      	ldr	r1, [pc, #356]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bd6:	4b54      	ldr	r3, [pc, #336]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be4:	4950      	ldr	r1, [pc, #320]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	4948      	ldr	r1, [pc, #288]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c1a:	4b43      	ldr	r3, [pc, #268]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	493f      	ldr	r1, [pc, #252]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d028      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c3c:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c4a:	4937      	ldr	r1, [pc, #220]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c5c:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c66:	60d3      	str	r3, [r2, #12]
 8002c68:	e011      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c72:	d10c      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	2101      	movs	r1, #1
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f8c8 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c8a:	7cfb      	ldrb	r3, [r7, #19]
 8002c8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d028      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	491f      	ldr	r1, [pc, #124]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb8:	d106      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc4:	60d3      	str	r3, [r2, #12]
 8002cc6:	e011      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f899 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce2:	7cfb      	ldrb	r3, [r7, #19]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ce8:	7cfb      	ldrb	r3, [r7, #19]
 8002cea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d02b      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d16:	d109      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a02      	ldr	r2, [pc, #8]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d22:	60d3      	str	r3, [r2, #12]
 8002d24:	e014      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 f867 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d02f      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d6a:	4928      	ldr	r1, [pc, #160]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	2102      	movs	r1, #2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f844 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d8c:	7cfb      	ldrb	r3, [r7, #19]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d014      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	74bb      	strb	r3, [r7, #18]
 8002d96:	e011      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3320      	adds	r3, #32
 8002da6:	2102      	movs	r1, #2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f925 	bl	8002ff8 <RCCEx_PLLSAI2_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd6:	490d      	ldr	r1, [pc, #52]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dea:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dfa:	4904      	ldr	r1, [pc, #16]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e02:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000

08002e10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e1e:	4b75      	ldr	r3, [pc, #468]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e2a:	4b72      	ldr	r3, [pc, #456]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10d      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e42:	4b6c      	ldr	r3, [pc, #432]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
       ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d047      	beq.n	8002ee6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	e044      	b.n	8002ee6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d018      	beq.n	8002e96 <RCCEx_PLLSAI1_Config+0x86>
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d825      	bhi.n	8002eb4 <RCCEx_PLLSAI1_Config+0xa4>
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d002      	beq.n	8002e72 <RCCEx_PLLSAI1_Config+0x62>
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d009      	beq.n	8002e84 <RCCEx_PLLSAI1_Config+0x74>
 8002e70:	e020      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e72:	4b60      	ldr	r3, [pc, #384]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d11d      	bne.n	8002eba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e82:	e01a      	b.n	8002eba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e84:	4b5b      	ldr	r3, [pc, #364]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d116      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e94:	e013      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e96:	4b57      	ldr	r3, [pc, #348]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ea2:	4b54      	ldr	r3, [pc, #336]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eb2:	e006      	b.n	8002ec2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb8:	e004      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e002      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e000      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ec2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10d      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eca:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	4944      	ldr	r1, [pc, #272]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d17d      	bne.n	8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a40      	ldr	r2, [pc, #256]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef8:	f7fd febc 	bl	8000c74 <HAL_GetTick>
 8002efc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002efe:	e009      	b.n	8002f14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f00:	f7fd feb8 	bl	8000c74 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d902      	bls.n	8002f14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	73fb      	strb	r3, [r7, #15]
        break;
 8002f12:	e005      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f14:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ef      	bne.n	8002f00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d160      	bne.n	8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d111      	bne.n	8002f50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f2c:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6892      	ldr	r2, [r2, #8]
 8002f3c:	0211      	lsls	r1, r2, #8
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68d2      	ldr	r2, [r2, #12]
 8002f42:	0912      	lsrs	r2, r2, #4
 8002f44:	0452      	lsls	r2, r2, #17
 8002f46:	430a      	orrs	r2, r1
 8002f48:	492a      	ldr	r1, [pc, #168]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	610b      	str	r3, [r1, #16]
 8002f4e:	e027      	b.n	8002fa0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d112      	bne.n	8002f7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f56:	4b27      	ldr	r3, [pc, #156]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	0211      	lsls	r1, r2, #8
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6912      	ldr	r2, [r2, #16]
 8002f6c:	0852      	lsrs	r2, r2, #1
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	0552      	lsls	r2, r2, #21
 8002f72:	430a      	orrs	r2, r1
 8002f74:	491f      	ldr	r1, [pc, #124]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	610b      	str	r3, [r1, #16]
 8002f7a:	e011      	b.n	8002fa0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6892      	ldr	r2, [r2, #8]
 8002f8c:	0211      	lsls	r1, r2, #8
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6952      	ldr	r2, [r2, #20]
 8002f92:	0852      	lsrs	r2, r2, #1
 8002f94:	3a01      	subs	r2, #1
 8002f96:	0652      	lsls	r2, r2, #25
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fd fe62 	bl	8000c74 <HAL_GetTick>
 8002fb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fb2:	e009      	b.n	8002fc8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fb4:	f7fd fe5e 	bl	8000c74 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d902      	bls.n	8002fc8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fc6:	e005      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ef      	beq.n	8002fb4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003006:	4b6a      	ldr	r3, [pc, #424]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d018      	beq.n	8003044 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003012:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f003 0203 	and.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d10d      	bne.n	800303e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
       ||
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800302a:	4b61      	ldr	r3, [pc, #388]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
       ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d047      	beq.n	80030ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e044      	b.n	80030ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d018      	beq.n	800307e <RCCEx_PLLSAI2_Config+0x86>
 800304c:	2b03      	cmp	r3, #3
 800304e:	d825      	bhi.n	800309c <RCCEx_PLLSAI2_Config+0xa4>
 8003050:	2b01      	cmp	r3, #1
 8003052:	d002      	beq.n	800305a <RCCEx_PLLSAI2_Config+0x62>
 8003054:	2b02      	cmp	r3, #2
 8003056:	d009      	beq.n	800306c <RCCEx_PLLSAI2_Config+0x74>
 8003058:	e020      	b.n	800309c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800305a:	4b55      	ldr	r3, [pc, #340]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d11d      	bne.n	80030a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306a:	e01a      	b.n	80030a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	2b00      	cmp	r3, #0
 8003076:	d116      	bne.n	80030a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307c:	e013      	b.n	80030a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800307e:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800308a:	4b49      	ldr	r3, [pc, #292]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800309a:	e006      	b.n	80030aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      break;
 80030a0:	e004      	b.n	80030ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030a2:	bf00      	nop
 80030a4:	e002      	b.n	80030ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030a6:	bf00      	nop
 80030a8:	e000      	b.n	80030ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10d      	bne.n	80030ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030b2:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6819      	ldr	r1, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	430b      	orrs	r3, r1
 80030c8:	4939      	ldr	r1, [pc, #228]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d167      	bne.n	80031a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030d4:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a35      	ldr	r2, [pc, #212]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e0:	f7fd fdc8 	bl	8000c74 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030e6:	e009      	b.n	80030fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030e8:	f7fd fdc4 	bl	8000c74 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d902      	bls.n	80030fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	73fb      	strb	r3, [r7, #15]
        break;
 80030fa:	e005      	b.n	8003108 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1ef      	bne.n	80030e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d14a      	bne.n	80031a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d111      	bne.n	8003138 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003114:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800311c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6892      	ldr	r2, [r2, #8]
 8003124:	0211      	lsls	r1, r2, #8
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68d2      	ldr	r2, [r2, #12]
 800312a:	0912      	lsrs	r2, r2, #4
 800312c:	0452      	lsls	r2, r2, #17
 800312e:	430a      	orrs	r2, r1
 8003130:	491f      	ldr	r1, [pc, #124]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003132:	4313      	orrs	r3, r2
 8003134:	614b      	str	r3, [r1, #20]
 8003136:	e011      	b.n	800315c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6892      	ldr	r2, [r2, #8]
 8003148:	0211      	lsls	r1, r2, #8
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6912      	ldr	r2, [r2, #16]
 800314e:	0852      	lsrs	r2, r2, #1
 8003150:	3a01      	subs	r2, #1
 8003152:	0652      	lsls	r2, r2, #25
 8003154:	430a      	orrs	r2, r1
 8003156:	4916      	ldr	r1, [pc, #88]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003158:	4313      	orrs	r3, r2
 800315a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003166:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fd fd84 	bl	8000c74 <HAL_GetTick>
 800316c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800316e:	e009      	b.n	8003184 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003170:	f7fd fd80 	bl	8000c74 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d902      	bls.n	8003184 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	73fb      	strb	r3, [r7, #15]
          break;
 8003182:	e005      	b.n	8003190 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ef      	beq.n	8003170 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4904      	ldr	r1, [pc, #16]	; (80031b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000

080031b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e049      	b.n	800325a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fba6 	bl	800092c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f000 f964 	bl	80034c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d001      	beq.n	800327c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e047      	b.n	800330c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a23      	ldr	r2, [pc, #140]	; (8003318 <HAL_TIM_Base_Start+0xb4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d018      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_TIM_Base_Start+0xb8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_TIM_Base_Start+0xbc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_TIM_Base_Start+0xc0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_TIM_Base_Start+0xc4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIM_Base_Start+0x66>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_TIM_Base_Start+0xc8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d115      	bne.n	80032f6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_TIM_Base_Start+0xcc>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d015      	beq.n	8003308 <HAL_TIM_Base_Start+0xa4>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d011      	beq.n	8003308 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	e008      	b.n	8003308 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e000      	b.n	800330a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40013400 	.word	0x40013400
 800332c:	40014000 	.word	0x40014000
 8003330:	00010007 	.word	0x00010007

08003334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_TIM_ConfigClockSource+0x18>
 8003348:	2302      	movs	r3, #2
 800334a:	e0b5      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x184>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800336e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003388:	d03e      	beq.n	8003408 <HAL_TIM_ConfigClockSource+0xd4>
 800338a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338e:	f200 8087 	bhi.w	80034a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003396:	f000 8085 	beq.w	80034a4 <HAL_TIM_ConfigClockSource+0x170>
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339e:	d87f      	bhi.n	80034a0 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b70      	cmp	r3, #112	; 0x70
 80033a2:	d01a      	beq.n	80033da <HAL_TIM_ConfigClockSource+0xa6>
 80033a4:	2b70      	cmp	r3, #112	; 0x70
 80033a6:	d87b      	bhi.n	80034a0 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b60      	cmp	r3, #96	; 0x60
 80033aa:	d050      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x11a>
 80033ac:	2b60      	cmp	r3, #96	; 0x60
 80033ae:	d877      	bhi.n	80034a0 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b50      	cmp	r3, #80	; 0x50
 80033b2:	d03c      	beq.n	800342e <HAL_TIM_ConfigClockSource+0xfa>
 80033b4:	2b50      	cmp	r3, #80	; 0x50
 80033b6:	d873      	bhi.n	80034a0 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d058      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x13a>
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d86f      	bhi.n	80034a0 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b30      	cmp	r3, #48	; 0x30
 80033c2:	d064      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x15a>
 80033c4:	2b30      	cmp	r3, #48	; 0x30
 80033c6:	d86b      	bhi.n	80034a0 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d060      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x15a>
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d867      	bhi.n	80034a0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d05c      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x15a>
 80033d4:	2b10      	cmp	r3, #16
 80033d6:	d05a      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033d8:	e062      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6899      	ldr	r1, [r3, #8]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f000 f97d 	bl	80036e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	609a      	str	r2, [r3, #8]
      break;
 8003406:	e04e      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6899      	ldr	r1, [r3, #8]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f000 f966 	bl	80036e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800342a:	609a      	str	r2, [r3, #8]
      break;
 800342c:	e03b      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	461a      	mov	r2, r3
 800343c:	f000 f8da 	bl	80035f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2150      	movs	r1, #80	; 0x50
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f933 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 800344c:	e02b      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6859      	ldr	r1, [r3, #4]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	461a      	mov	r2, r3
 800345c:	f000 f8f9 	bl	8003652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2160      	movs	r1, #96	; 0x60
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f923 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 800346c:	e01b      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	461a      	mov	r2, r3
 800347c:	f000 f8ba 	bl	80035f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2140      	movs	r1, #64	; 0x40
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f913 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 800348c:	e00b      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f000 f90a 	bl	80036b2 <TIM_ITRx_SetConfig>
        break;
 800349e:	e002      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80034a0:	bf00      	nop
 80034a2:	e000      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80034a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a40      	ldr	r2, [pc, #256]	; (80035d4 <TIM_Base_SetConfig+0x114>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d013      	beq.n	8003500 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034de:	d00f      	beq.n	8003500 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a3d      	ldr	r2, [pc, #244]	; (80035d8 <TIM_Base_SetConfig+0x118>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00b      	beq.n	8003500 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3c      	ldr	r2, [pc, #240]	; (80035dc <TIM_Base_SetConfig+0x11c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d007      	beq.n	8003500 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3b      	ldr	r2, [pc, #236]	; (80035e0 <TIM_Base_SetConfig+0x120>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d003      	beq.n	8003500 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3a      	ldr	r2, [pc, #232]	; (80035e4 <TIM_Base_SetConfig+0x124>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d108      	bne.n	8003512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <TIM_Base_SetConfig+0x114>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01f      	beq.n	800355a <TIM_Base_SetConfig+0x9a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003520:	d01b      	beq.n	800355a <TIM_Base_SetConfig+0x9a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2c      	ldr	r2, [pc, #176]	; (80035d8 <TIM_Base_SetConfig+0x118>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d017      	beq.n	800355a <TIM_Base_SetConfig+0x9a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2b      	ldr	r2, [pc, #172]	; (80035dc <TIM_Base_SetConfig+0x11c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <TIM_Base_SetConfig+0x9a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <TIM_Base_SetConfig+0x120>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00f      	beq.n	800355a <TIM_Base_SetConfig+0x9a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <TIM_Base_SetConfig+0x124>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00b      	beq.n	800355a <TIM_Base_SetConfig+0x9a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a28      	ldr	r2, [pc, #160]	; (80035e8 <TIM_Base_SetConfig+0x128>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <TIM_Base_SetConfig+0x9a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a27      	ldr	r2, [pc, #156]	; (80035ec <TIM_Base_SetConfig+0x12c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d003      	beq.n	800355a <TIM_Base_SetConfig+0x9a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a26      	ldr	r2, [pc, #152]	; (80035f0 <TIM_Base_SetConfig+0x130>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d108      	bne.n	800356c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a10      	ldr	r2, [pc, #64]	; (80035d4 <TIM_Base_SetConfig+0x114>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00f      	beq.n	80035b8 <TIM_Base_SetConfig+0xf8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <TIM_Base_SetConfig+0x124>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00b      	beq.n	80035b8 <TIM_Base_SetConfig+0xf8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <TIM_Base_SetConfig+0x128>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d007      	beq.n	80035b8 <TIM_Base_SetConfig+0xf8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a10      	ldr	r2, [pc, #64]	; (80035ec <TIM_Base_SetConfig+0x12c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <TIM_Base_SetConfig+0xf8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <TIM_Base_SetConfig+0x130>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d103      	bne.n	80035c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	615a      	str	r2, [r3, #20]
}
 80035c6:	bf00      	nop
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00
 80035e4:	40013400 	.word	0x40013400
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40014400 	.word	0x40014400
 80035f0:	40014800 	.word	0x40014800

080035f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 030a 	bic.w	r3, r3, #10
 8003630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003652:	b480      	push	{r7}
 8003654:	b087      	sub	sp, #28
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f023 0210 	bic.w	r2, r3, #16
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800367c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	031b      	lsls	r3, r3, #12
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800368e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f043 0307 	orr.w	r3, r3, #7
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	431a      	orrs	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800373c:	2302      	movs	r3, #2
 800373e:	e068      	b.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a2e      	ldr	r2, [pc, #184]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a2d      	ldr	r2, [pc, #180]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d108      	bne.n	8003786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800377a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01d      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b2:	d018      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a13      	ldr	r2, [pc, #76]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a14      	ldr	r2, [pc, #80]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10c      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40012c00 	.word	0x40012c00
 8003824:	40013400 	.word	0x40013400
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00
 8003834:	40014000 	.word	0x40014000

08003838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e040      	b.n	80038cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd f884 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2224      	movs	r2, #36	; 0x24
 8003864:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f82c 	bl	80038d4 <UART_SetConfig>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e022      	b.n	80038cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 faaa 	bl	8003de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fb31 	bl	8003f2c <UART_CheckIdleState>
 80038ca:	4603      	mov	r3, r0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	b5b0      	push	{r4, r5, r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4bad      	ldr	r3, [pc, #692]	; (8003bb4 <UART_SetConfig+0x2e0>)
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	69f9      	ldr	r1, [r7, #28]
 8003908:	430b      	orrs	r3, r1
 800390a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4aa2      	ldr	r2, [pc, #648]	; (8003bb8 <UART_SetConfig+0x2e4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	4313      	orrs	r3, r2
 800393a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	430a      	orrs	r2, r1
 800394e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a99      	ldr	r2, [pc, #612]	; (8003bbc <UART_SetConfig+0x2e8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d121      	bne.n	800399e <UART_SetConfig+0xca>
 800395a:	4b99      	ldr	r3, [pc, #612]	; (8003bc0 <UART_SetConfig+0x2ec>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b03      	cmp	r3, #3
 8003966:	d817      	bhi.n	8003998 <UART_SetConfig+0xc4>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <UART_SetConfig+0x9c>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003981 	.word	0x08003981
 8003974:	0800398d 	.word	0x0800398d
 8003978:	08003987 	.word	0x08003987
 800397c:	08003993 	.word	0x08003993
 8003980:	2301      	movs	r3, #1
 8003982:	76fb      	strb	r3, [r7, #27]
 8003984:	e0e7      	b.n	8003b56 <UART_SetConfig+0x282>
 8003986:	2302      	movs	r3, #2
 8003988:	76fb      	strb	r3, [r7, #27]
 800398a:	e0e4      	b.n	8003b56 <UART_SetConfig+0x282>
 800398c:	2304      	movs	r3, #4
 800398e:	76fb      	strb	r3, [r7, #27]
 8003990:	e0e1      	b.n	8003b56 <UART_SetConfig+0x282>
 8003992:	2308      	movs	r3, #8
 8003994:	76fb      	strb	r3, [r7, #27]
 8003996:	e0de      	b.n	8003b56 <UART_SetConfig+0x282>
 8003998:	2310      	movs	r3, #16
 800399a:	76fb      	strb	r3, [r7, #27]
 800399c:	e0db      	b.n	8003b56 <UART_SetConfig+0x282>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a88      	ldr	r2, [pc, #544]	; (8003bc4 <UART_SetConfig+0x2f0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d132      	bne.n	8003a0e <UART_SetConfig+0x13a>
 80039a8:	4b85      	ldr	r3, [pc, #532]	; (8003bc0 <UART_SetConfig+0x2ec>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b0c      	cmp	r3, #12
 80039b4:	d828      	bhi.n	8003a08 <UART_SetConfig+0x134>
 80039b6:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UART_SetConfig+0xe8>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039f1 	.word	0x080039f1
 80039c0:	08003a09 	.word	0x08003a09
 80039c4:	08003a09 	.word	0x08003a09
 80039c8:	08003a09 	.word	0x08003a09
 80039cc:	080039fd 	.word	0x080039fd
 80039d0:	08003a09 	.word	0x08003a09
 80039d4:	08003a09 	.word	0x08003a09
 80039d8:	08003a09 	.word	0x08003a09
 80039dc:	080039f7 	.word	0x080039f7
 80039e0:	08003a09 	.word	0x08003a09
 80039e4:	08003a09 	.word	0x08003a09
 80039e8:	08003a09 	.word	0x08003a09
 80039ec:	08003a03 	.word	0x08003a03
 80039f0:	2300      	movs	r3, #0
 80039f2:	76fb      	strb	r3, [r7, #27]
 80039f4:	e0af      	b.n	8003b56 <UART_SetConfig+0x282>
 80039f6:	2302      	movs	r3, #2
 80039f8:	76fb      	strb	r3, [r7, #27]
 80039fa:	e0ac      	b.n	8003b56 <UART_SetConfig+0x282>
 80039fc:	2304      	movs	r3, #4
 80039fe:	76fb      	strb	r3, [r7, #27]
 8003a00:	e0a9      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a02:	2308      	movs	r3, #8
 8003a04:	76fb      	strb	r3, [r7, #27]
 8003a06:	e0a6      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a08:	2310      	movs	r3, #16
 8003a0a:	76fb      	strb	r3, [r7, #27]
 8003a0c:	e0a3      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a6d      	ldr	r2, [pc, #436]	; (8003bc8 <UART_SetConfig+0x2f4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d120      	bne.n	8003a5a <UART_SetConfig+0x186>
 8003a18:	4b69      	ldr	r3, [pc, #420]	; (8003bc0 <UART_SetConfig+0x2ec>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a22:	2b30      	cmp	r3, #48	; 0x30
 8003a24:	d013      	beq.n	8003a4e <UART_SetConfig+0x17a>
 8003a26:	2b30      	cmp	r3, #48	; 0x30
 8003a28:	d814      	bhi.n	8003a54 <UART_SetConfig+0x180>
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d009      	beq.n	8003a42 <UART_SetConfig+0x16e>
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d810      	bhi.n	8003a54 <UART_SetConfig+0x180>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <UART_SetConfig+0x168>
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d006      	beq.n	8003a48 <UART_SetConfig+0x174>
 8003a3a:	e00b      	b.n	8003a54 <UART_SetConfig+0x180>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	76fb      	strb	r3, [r7, #27]
 8003a40:	e089      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a42:	2302      	movs	r3, #2
 8003a44:	76fb      	strb	r3, [r7, #27]
 8003a46:	e086      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	76fb      	strb	r3, [r7, #27]
 8003a4c:	e083      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a4e:	2308      	movs	r3, #8
 8003a50:	76fb      	strb	r3, [r7, #27]
 8003a52:	e080      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a54:	2310      	movs	r3, #16
 8003a56:	76fb      	strb	r3, [r7, #27]
 8003a58:	e07d      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a5b      	ldr	r2, [pc, #364]	; (8003bcc <UART_SetConfig+0x2f8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d120      	bne.n	8003aa6 <UART_SetConfig+0x1d2>
 8003a64:	4b56      	ldr	r3, [pc, #344]	; (8003bc0 <UART_SetConfig+0x2ec>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a70:	d013      	beq.n	8003a9a <UART_SetConfig+0x1c6>
 8003a72:	2bc0      	cmp	r3, #192	; 0xc0
 8003a74:	d814      	bhi.n	8003aa0 <UART_SetConfig+0x1cc>
 8003a76:	2b80      	cmp	r3, #128	; 0x80
 8003a78:	d009      	beq.n	8003a8e <UART_SetConfig+0x1ba>
 8003a7a:	2b80      	cmp	r3, #128	; 0x80
 8003a7c:	d810      	bhi.n	8003aa0 <UART_SetConfig+0x1cc>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <UART_SetConfig+0x1b4>
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d006      	beq.n	8003a94 <UART_SetConfig+0x1c0>
 8003a86:	e00b      	b.n	8003aa0 <UART_SetConfig+0x1cc>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	76fb      	strb	r3, [r7, #27]
 8003a8c:	e063      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	76fb      	strb	r3, [r7, #27]
 8003a92:	e060      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a94:	2304      	movs	r3, #4
 8003a96:	76fb      	strb	r3, [r7, #27]
 8003a98:	e05d      	b.n	8003b56 <UART_SetConfig+0x282>
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	76fb      	strb	r3, [r7, #27]
 8003a9e:	e05a      	b.n	8003b56 <UART_SetConfig+0x282>
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	76fb      	strb	r3, [r7, #27]
 8003aa4:	e057      	b.n	8003b56 <UART_SetConfig+0x282>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a49      	ldr	r2, [pc, #292]	; (8003bd0 <UART_SetConfig+0x2fc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d125      	bne.n	8003afc <UART_SetConfig+0x228>
 8003ab0:	4b43      	ldr	r3, [pc, #268]	; (8003bc0 <UART_SetConfig+0x2ec>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003abe:	d017      	beq.n	8003af0 <UART_SetConfig+0x21c>
 8003ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac4:	d817      	bhi.n	8003af6 <UART_SetConfig+0x222>
 8003ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aca:	d00b      	beq.n	8003ae4 <UART_SetConfig+0x210>
 8003acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad0:	d811      	bhi.n	8003af6 <UART_SetConfig+0x222>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <UART_SetConfig+0x20a>
 8003ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ada:	d006      	beq.n	8003aea <UART_SetConfig+0x216>
 8003adc:	e00b      	b.n	8003af6 <UART_SetConfig+0x222>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	76fb      	strb	r3, [r7, #27]
 8003ae2:	e038      	b.n	8003b56 <UART_SetConfig+0x282>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	76fb      	strb	r3, [r7, #27]
 8003ae8:	e035      	b.n	8003b56 <UART_SetConfig+0x282>
 8003aea:	2304      	movs	r3, #4
 8003aec:	76fb      	strb	r3, [r7, #27]
 8003aee:	e032      	b.n	8003b56 <UART_SetConfig+0x282>
 8003af0:	2308      	movs	r3, #8
 8003af2:	76fb      	strb	r3, [r7, #27]
 8003af4:	e02f      	b.n	8003b56 <UART_SetConfig+0x282>
 8003af6:	2310      	movs	r3, #16
 8003af8:	76fb      	strb	r3, [r7, #27]
 8003afa:	e02c      	b.n	8003b56 <UART_SetConfig+0x282>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a2d      	ldr	r2, [pc, #180]	; (8003bb8 <UART_SetConfig+0x2e4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d125      	bne.n	8003b52 <UART_SetConfig+0x27e>
 8003b06:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <UART_SetConfig+0x2ec>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b14:	d017      	beq.n	8003b46 <UART_SetConfig+0x272>
 8003b16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b1a:	d817      	bhi.n	8003b4c <UART_SetConfig+0x278>
 8003b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b20:	d00b      	beq.n	8003b3a <UART_SetConfig+0x266>
 8003b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b26:	d811      	bhi.n	8003b4c <UART_SetConfig+0x278>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <UART_SetConfig+0x260>
 8003b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b30:	d006      	beq.n	8003b40 <UART_SetConfig+0x26c>
 8003b32:	e00b      	b.n	8003b4c <UART_SetConfig+0x278>
 8003b34:	2300      	movs	r3, #0
 8003b36:	76fb      	strb	r3, [r7, #27]
 8003b38:	e00d      	b.n	8003b56 <UART_SetConfig+0x282>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	76fb      	strb	r3, [r7, #27]
 8003b3e:	e00a      	b.n	8003b56 <UART_SetConfig+0x282>
 8003b40:	2304      	movs	r3, #4
 8003b42:	76fb      	strb	r3, [r7, #27]
 8003b44:	e007      	b.n	8003b56 <UART_SetConfig+0x282>
 8003b46:	2308      	movs	r3, #8
 8003b48:	76fb      	strb	r3, [r7, #27]
 8003b4a:	e004      	b.n	8003b56 <UART_SetConfig+0x282>
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	76fb      	strb	r3, [r7, #27]
 8003b50:	e001      	b.n	8003b56 <UART_SetConfig+0x282>
 8003b52:	2310      	movs	r3, #16
 8003b54:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <UART_SetConfig+0x2e4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	f040 8087 	bne.w	8003c70 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b62:	7efb      	ldrb	r3, [r7, #27]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d837      	bhi.n	8003bd8 <UART_SetConfig+0x304>
 8003b68:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <UART_SetConfig+0x29c>)
 8003b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6e:	bf00      	nop
 8003b70:	08003b95 	.word	0x08003b95
 8003b74:	08003bd9 	.word	0x08003bd9
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003bd9 	.word	0x08003bd9
 8003b80:	08003ba3 	.word	0x08003ba3
 8003b84:	08003bd9 	.word	0x08003bd9
 8003b88:	08003bd9 	.word	0x08003bd9
 8003b8c:	08003bd9 	.word	0x08003bd9
 8003b90:	08003bab 	.word	0x08003bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b94:	f7fe fdc6 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 8003b98:	6178      	str	r0, [r7, #20]
        break;
 8003b9a:	e022      	b.n	8003be2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b9c:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <UART_SetConfig+0x300>)
 8003b9e:	617b      	str	r3, [r7, #20]
        break;
 8003ba0:	e01f      	b.n	8003be2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ba2:	f7fe fd27 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 8003ba6:	6178      	str	r0, [r7, #20]
        break;
 8003ba8:	e01b      	b.n	8003be2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bae:	617b      	str	r3, [r7, #20]
        break;
 8003bb0:	e017      	b.n	8003be2 <UART_SetConfig+0x30e>
 8003bb2:	bf00      	nop
 8003bb4:	efff69f3 	.word	0xefff69f3
 8003bb8:	40008000 	.word	0x40008000
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40004400 	.word	0x40004400
 8003bc8:	40004800 	.word	0x40004800
 8003bcc:	40004c00 	.word	0x40004c00
 8003bd0:	40005000 	.word	0x40005000
 8003bd4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	76bb      	strb	r3, [r7, #26]
        break;
 8003be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80f1 	beq.w	8003dcc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d305      	bcc.n	8003c06 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d902      	bls.n	8003c0c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	76bb      	strb	r3, [r7, #26]
 8003c0a:	e0df      	b.n	8003dcc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f04f 0100 	mov.w	r1, #0
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	020b      	lsls	r3, r1, #8
 8003c1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c22:	0202      	lsls	r2, r0, #8
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	6849      	ldr	r1, [r1, #4]
 8003c28:	0849      	lsrs	r1, r1, #1
 8003c2a:	4608      	mov	r0, r1
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	1814      	adds	r4, r2, r0
 8003c32:	eb43 0501 	adc.w	r5, r3, r1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	4620      	mov	r0, r4
 8003c42:	4629      	mov	r1, r5
 8003c44:	f7fc fac8 	bl	80001d8 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c56:	d308      	bcc.n	8003c6a <UART_SetConfig+0x396>
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5e:	d204      	bcs.n	8003c6a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	e0b0      	b.n	8003dcc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	76bb      	strb	r3, [r7, #26]
 8003c6e:	e0ad      	b.n	8003dcc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c78:	d15c      	bne.n	8003d34 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003c7a:	7efb      	ldrb	r3, [r7, #27]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d828      	bhi.n	8003cd2 <UART_SetConfig+0x3fe>
 8003c80:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <UART_SetConfig+0x3b4>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	08003cb5 	.word	0x08003cb5
 8003c90:	08003cbd 	.word	0x08003cbd
 8003c94:	08003cd3 	.word	0x08003cd3
 8003c98:	08003cc3 	.word	0x08003cc3
 8003c9c:	08003cd3 	.word	0x08003cd3
 8003ca0:	08003cd3 	.word	0x08003cd3
 8003ca4:	08003cd3 	.word	0x08003cd3
 8003ca8:	08003ccb 	.word	0x08003ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cac:	f7fe fd3a 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 8003cb0:	6178      	str	r0, [r7, #20]
        break;
 8003cb2:	e013      	b.n	8003cdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb4:	f7fe fd4c 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 8003cb8:	6178      	str	r0, [r7, #20]
        break;
 8003cba:	e00f      	b.n	8003cdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cbc:	4b49      	ldr	r3, [pc, #292]	; (8003de4 <UART_SetConfig+0x510>)
 8003cbe:	617b      	str	r3, [r7, #20]
        break;
 8003cc0:	e00c      	b.n	8003cdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc2:	f7fe fc97 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 8003cc6:	6178      	str	r0, [r7, #20]
        break;
 8003cc8:	e008      	b.n	8003cdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cce:	617b      	str	r3, [r7, #20]
        break;
 8003cd0:	e004      	b.n	8003cdc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	76bb      	strb	r3, [r7, #26]
        break;
 8003cda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d074      	beq.n	8003dcc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	005a      	lsls	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	441a      	add	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b0f      	cmp	r3, #15
 8003cfe:	d916      	bls.n	8003d2e <UART_SetConfig+0x45a>
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d06:	d212      	bcs.n	8003d2e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f023 030f 	bic.w	r3, r3, #15
 8003d10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	89fb      	ldrh	r3, [r7, #14]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	89fa      	ldrh	r2, [r7, #14]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	e04e      	b.n	8003dcc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	76bb      	strb	r3, [r7, #26]
 8003d32:	e04b      	b.n	8003dcc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d34:	7efb      	ldrb	r3, [r7, #27]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d827      	bhi.n	8003d8a <UART_SetConfig+0x4b6>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <UART_SetConfig+0x46c>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08003d6d 	.word	0x08003d6d
 8003d48:	08003d75 	.word	0x08003d75
 8003d4c:	08003d8b 	.word	0x08003d8b
 8003d50:	08003d7b 	.word	0x08003d7b
 8003d54:	08003d8b 	.word	0x08003d8b
 8003d58:	08003d8b 	.word	0x08003d8b
 8003d5c:	08003d8b 	.word	0x08003d8b
 8003d60:	08003d83 	.word	0x08003d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d64:	f7fe fcde 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 8003d68:	6178      	str	r0, [r7, #20]
        break;
 8003d6a:	e013      	b.n	8003d94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d6c:	f7fe fcf0 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 8003d70:	6178      	str	r0, [r7, #20]
        break;
 8003d72:	e00f      	b.n	8003d94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <UART_SetConfig+0x510>)
 8003d76:	617b      	str	r3, [r7, #20]
        break;
 8003d78:	e00c      	b.n	8003d94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7a:	f7fe fc3b 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 8003d7e:	6178      	str	r0, [r7, #20]
        break;
 8003d80:	e008      	b.n	8003d94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d86:	617b      	str	r3, [r7, #20]
        break;
 8003d88:	e004      	b.n	8003d94 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	76bb      	strb	r3, [r7, #26]
        break;
 8003d92:	bf00      	nop
    }

    if (pclk != 0U)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d018      	beq.n	8003dcc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	085a      	lsrs	r2, r3, #1
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	441a      	add	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b0f      	cmp	r3, #15
 8003db4:	d908      	bls.n	8003dc8 <UART_SetConfig+0x4f4>
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dbc:	d204      	bcs.n	8003dc8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	e001      	b.n	8003dcc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003dd8:	7ebb      	ldrb	r3, [r7, #26]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bdb0      	pop	{r4, r5, r7, pc}
 8003de2:	bf00      	nop
 8003de4:	00f42400 	.word	0x00f42400

08003de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01a      	beq.n	8003efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee6:	d10a      	bne.n	8003efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f3c:	f7fc fe9a 	bl	8000c74 <HAL_GetTick>
 8003f40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d10e      	bne.n	8003f6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f82d 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e023      	b.n	8003fb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d10e      	bne.n	8003f9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f817 	bl	8003fbe <UART_WaitOnFlagUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e00d      	b.n	8003fb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fce:	e05e      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d05a      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd8:	f7fc fe4c 	bl	8000c74 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d302      	bcc.n	8003fee <UART_WaitOnFlagUntilTimeout+0x30>
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d11b      	bne.n	8004026 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ffc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e043      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02c      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004042:	d124      	bne.n	800408e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800404c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800405c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e00f      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d091      	beq.n	8003fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <__libc_init_array>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4d0d      	ldr	r5, [pc, #52]	; (80040f0 <__libc_init_array+0x38>)
 80040bc:	4c0d      	ldr	r4, [pc, #52]	; (80040f4 <__libc_init_array+0x3c>)
 80040be:	1b64      	subs	r4, r4, r5
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	2600      	movs	r6, #0
 80040c4:	42a6      	cmp	r6, r4
 80040c6:	d109      	bne.n	80040dc <__libc_init_array+0x24>
 80040c8:	4d0b      	ldr	r5, [pc, #44]	; (80040f8 <__libc_init_array+0x40>)
 80040ca:	4c0c      	ldr	r4, [pc, #48]	; (80040fc <__libc_init_array+0x44>)
 80040cc:	f000 f82e 	bl	800412c <_init>
 80040d0:	1b64      	subs	r4, r4, r5
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	2600      	movs	r6, #0
 80040d6:	42a6      	cmp	r6, r4
 80040d8:	d105      	bne.n	80040e6 <__libc_init_array+0x2e>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e0:	4798      	blx	r3
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7ee      	b.n	80040c4 <__libc_init_array+0xc>
 80040e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ea:	4798      	blx	r3
 80040ec:	3601      	adds	r6, #1
 80040ee:	e7f2      	b.n	80040d6 <__libc_init_array+0x1e>
 80040f0:	080042a4 	.word	0x080042a4
 80040f4:	080042a4 	.word	0x080042a4
 80040f8:	080042a4 	.word	0x080042a4
 80040fc:	080042a8 	.word	0x080042a8

08004100 <memcpy>:
 8004100:	440a      	add	r2, r1
 8004102:	4291      	cmp	r1, r2
 8004104:	f100 33ff 	add.w	r3, r0, #4294967295
 8004108:	d100      	bne.n	800410c <memcpy+0xc>
 800410a:	4770      	bx	lr
 800410c:	b510      	push	{r4, lr}
 800410e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004116:	4291      	cmp	r1, r2
 8004118:	d1f9      	bne.n	800410e <memcpy+0xe>
 800411a:	bd10      	pop	{r4, pc}

0800411c <memset>:
 800411c:	4402      	add	r2, r0
 800411e:	4603      	mov	r3, r0
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <memset+0xa>
 8004124:	4770      	bx	lr
 8004126:	f803 1b01 	strb.w	r1, [r3], #1
 800412a:	e7f9      	b.n	8004120 <memset+0x4>

0800412c <_init>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	bf00      	nop
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr

08004138 <_fini>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr
