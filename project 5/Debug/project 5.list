
project 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08008590  08008590  00018590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b98  08008b98  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba0  08008ba0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004194  200001e8  08008d8c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000437c  08008d8c  0002437c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017742  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002faf  00000000  00000000  00037956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0003a908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0003ba60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029794  00000000  00000000  0003ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142c9  00000000  00000000  00066224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7bab  00000000  00000000  0007a4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172098  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be4  00000000  00000000  001720ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008574 	.word	0x08008574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08008574 	.word	0x08008574

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a4 	b.w	8000f48 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8083 	bne.w	8000d9a <__udivmoddi4+0x116>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4617      	mov	r7, r2
 8000c98:	d947      	bls.n	8000d2a <__udivmoddi4+0xa6>
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	b142      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000ca0:	f1c2 0020 	rsb	r0, r2, #32
 8000ca4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ca8:	4091      	lsls	r1, r2
 8000caa:	4097      	lsls	r7, r2
 8000cac:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cb6:	0c23      	lsrs	r3, r4, #16
 8000cb8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cbc:	fa1f fe87 	uxth.w	lr, r7
 8000cc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x60>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cd6:	f080 8119 	bcs.w	8000f0c <__udivmoddi4+0x288>
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	f240 8116 	bls.w	8000f0c <__udivmoddi4+0x288>
 8000ce0:	3e02      	subs	r6, #2
 8000ce2:	443b      	add	r3, r7
 8000ce4:	1a5b      	subs	r3, r3, r1
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x8c>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	f080 8105 	bcs.w	8000f10 <__udivmoddi4+0x28c>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f240 8102 	bls.w	8000f10 <__udivmoddi4+0x28c>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	443c      	add	r4, r7
 8000d10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d14:	eba4 040e 	sub.w	r4, r4, lr
 8000d18:	2600      	movs	r6, #0
 8000d1a:	b11d      	cbz	r5, 8000d24 <__udivmoddi4+0xa0>
 8000d1c:	40d4      	lsrs	r4, r2
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e9c5 4300 	strd	r4, r3, [r5]
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xaa>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f282 	clz	r2, r2
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d150      	bne.n	8000dd8 <__udivmoddi4+0x154>
 8000d36:	1bcb      	subs	r3, r1, r7
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa1f f887 	uxth.w	r8, r7
 8000d40:	2601      	movs	r6, #1
 8000d42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d46:	0c21      	lsrs	r1, r4, #16
 8000d48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d50:	fb08 f30c 	mul.w	r3, r8, ip
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0xe4>
 8000d58:	1879      	adds	r1, r7, r1
 8000d5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0xe2>
 8000d60:	428b      	cmp	r3, r1
 8000d62:	f200 80e9 	bhi.w	8000f38 <__udivmoddi4+0x2b4>
 8000d66:	4684      	mov	ip, r0
 8000d68:	1ac9      	subs	r1, r1, r3
 8000d6a:	b2a3      	uxth	r3, r4
 8000d6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d78:	fb08 f800 	mul.w	r8, r8, r0
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	d907      	bls.n	8000d90 <__udivmoddi4+0x10c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x10a>
 8000d88:	45a0      	cmp	r8, r4
 8000d8a:	f200 80d9 	bhi.w	8000f40 <__udivmoddi4+0x2bc>
 8000d8e:	4618      	mov	r0, r3
 8000d90:	eba4 0408 	sub.w	r4, r4, r8
 8000d94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d98:	e7bf      	b.n	8000d1a <__udivmoddi4+0x96>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x12e>
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	f000 80b1 	beq.w	8000f06 <__udivmoddi4+0x282>
 8000da4:	2600      	movs	r6, #0
 8000da6:	e9c5 0100 	strd	r0, r1, [r5]
 8000daa:	4630      	mov	r0, r6
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	fab3 f683 	clz	r6, r3
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d14a      	bne.n	8000e50 <__udivmoddi4+0x1cc>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0x140>
 8000dbe:	4282      	cmp	r2, r0
 8000dc0:	f200 80b8 	bhi.w	8000f34 <__udivmoddi4+0x2b0>
 8000dc4:	1a84      	subs	r4, r0, r2
 8000dc6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	468c      	mov	ip, r1
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	d0a8      	beq.n	8000d24 <__udivmoddi4+0xa0>
 8000dd2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f603 	lsr.w	r6, r0, r3
 8000de0:	4097      	lsls	r7, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dea:	40d9      	lsrs	r1, r3
 8000dec:	4330      	orrs	r0, r6
 8000dee:	0c03      	lsrs	r3, r0, #16
 8000df0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df4:	fa1f f887 	uxth.w	r8, r7
 8000df8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e00:	fb06 f108 	mul.w	r1, r6, r8
 8000e04:	4299      	cmp	r1, r3
 8000e06:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x19c>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e12:	f080 808d 	bcs.w	8000f30 <__udivmoddi4+0x2ac>
 8000e16:	4299      	cmp	r1, r3
 8000e18:	f240 808a 	bls.w	8000f30 <__udivmoddi4+0x2ac>
 8000e1c:	3e02      	subs	r6, #2
 8000e1e:	443b      	add	r3, r7
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b281      	uxth	r1, r0
 8000e24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb00 f308 	mul.w	r3, r0, r8
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0x1c4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3e:	d273      	bcs.n	8000f28 <__udivmoddi4+0x2a4>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d971      	bls.n	8000f28 <__udivmoddi4+0x2a4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4439      	add	r1, r7
 8000e48:	1acb      	subs	r3, r1, r3
 8000e4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e4e:	e778      	b.n	8000d42 <__udivmoddi4+0xbe>
 8000e50:	f1c6 0c20 	rsb	ip, r6, #32
 8000e54:	fa03 f406 	lsl.w	r4, r3, r6
 8000e58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e5c:	431c      	orrs	r4, r3
 8000e5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e62:	fa01 f306 	lsl.w	r3, r1, r6
 8000e66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	0c3b      	lsrs	r3, r7, #16
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fa1f f884 	uxth.w	r8, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e82:	fb09 fa08 	mul.w	sl, r9, r8
 8000e86:	458a      	cmp	sl, r1
 8000e88:	fa02 f206 	lsl.w	r2, r2, r6
 8000e8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x220>
 8000e92:	1861      	adds	r1, r4, r1
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	d248      	bcs.n	8000f2c <__udivmoddi4+0x2a8>
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	d946      	bls.n	8000f2c <__udivmoddi4+0x2a8>
 8000e9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea2:	4421      	add	r1, r4
 8000ea4:	eba1 010a 	sub.w	r1, r1, sl
 8000ea8:	b2bf      	uxth	r7, r7
 8000eaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eb6:	fb00 f808 	mul.w	r8, r0, r8
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x24a>
 8000ebe:	19e7      	adds	r7, r4, r7
 8000ec0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec4:	d22e      	bcs.n	8000f24 <__udivmoddi4+0x2a0>
 8000ec6:	45b8      	cmp	r8, r7
 8000ec8:	d92c      	bls.n	8000f24 <__udivmoddi4+0x2a0>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4427      	add	r7, r4
 8000ece:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed2:	eba7 0708 	sub.w	r7, r7, r8
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	454f      	cmp	r7, r9
 8000edc:	46c6      	mov	lr, r8
 8000ede:	4649      	mov	r1, r9
 8000ee0:	d31a      	bcc.n	8000f18 <__udivmoddi4+0x294>
 8000ee2:	d017      	beq.n	8000f14 <__udivmoddi4+0x290>
 8000ee4:	b15d      	cbz	r5, 8000efe <__udivmoddi4+0x27a>
 8000ee6:	ebb3 020e 	subs.w	r2, r3, lr
 8000eea:	eb67 0701 	sbc.w	r7, r7, r1
 8000eee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef2:	40f2      	lsrs	r2, r6
 8000ef4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ef8:	40f7      	lsrs	r7, r6
 8000efa:	e9c5 2700 	strd	r2, r7, [r5]
 8000efe:	2600      	movs	r6, #0
 8000f00:	4631      	mov	r1, r6
 8000f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f06:	462e      	mov	r6, r5
 8000f08:	4628      	mov	r0, r5
 8000f0a:	e70b      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	e6e9      	b.n	8000ce4 <__udivmoddi4+0x60>
 8000f10:	4618      	mov	r0, r3
 8000f12:	e6fd      	b.n	8000d10 <__udivmoddi4+0x8c>
 8000f14:	4543      	cmp	r3, r8
 8000f16:	d2e5      	bcs.n	8000ee4 <__udivmoddi4+0x260>
 8000f18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f20:	3801      	subs	r0, #1
 8000f22:	e7df      	b.n	8000ee4 <__udivmoddi4+0x260>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e7d2      	b.n	8000ece <__udivmoddi4+0x24a>
 8000f28:	4660      	mov	r0, ip
 8000f2a:	e78d      	b.n	8000e48 <__udivmoddi4+0x1c4>
 8000f2c:	4681      	mov	r9, r0
 8000f2e:	e7b9      	b.n	8000ea4 <__udivmoddi4+0x220>
 8000f30:	4666      	mov	r6, ip
 8000f32:	e775      	b.n	8000e20 <__udivmoddi4+0x19c>
 8000f34:	4630      	mov	r0, r6
 8000f36:	e74a      	b.n	8000dce <__udivmoddi4+0x14a>
 8000f38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f3c:	4439      	add	r1, r7
 8000f3e:	e713      	b.n	8000d68 <__udivmoddi4+0xe4>
 8000f40:	3802      	subs	r0, #2
 8000f42:	443c      	add	r4, r7
 8000f44:	e724      	b.n	8000d90 <__udivmoddi4+0x10c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <startup>:

/*
 * Simple function that prints a guide to Putty upon startup
 * RET: nothing
 * */
void startup(UART_HandleTypeDef uart){
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	b590      	push	{r4, r7, lr}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	f107 0418 	add.w	r4, r7, #24
 8000f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char *msg = "Welcome: Type freq min max\r\nType - type of wave S(sine) T(triangle) R(Rectangle)\r\n";
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <startup+0x50>)
 8000f5e:	607b      	str	r3, [r7, #4]
	char *msg2 = "freq - frequency of the wave (10Hz - 100kHz)\r\nmin - minimum voltage allowed(0V limit)\r\nmax - maximum voltage allowed(3.3V limit)\r\nMax Must Be Greater Than Min\r\n";
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <startup+0x54>)
 8000f62:	603b      	str	r3, [r7, #0]
	USART_Write(uart.Instance, (uint8_t *)msg, strlen(msg));
 8000f64:	69bc      	ldr	r4, [r7, #24]
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff f932 	bl	80001d0 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4620      	mov	r0, r4
 8000f74:	f000 fd49 	bl	8001a0a <USART_Write>
	USART_Write(uart.Instance, (uint8_t *)msg2, strlen(msg2));
 8000f78:	69bc      	ldr	r4, [r7, #24]
 8000f7a:	6838      	ldr	r0, [r7, #0]
 8000f7c:	f7ff f928 	bl	80001d0 <strlen>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	6839      	ldr	r1, [r7, #0]
 8000f86:	4620      	mov	r0, r4
 8000f88:	f000 fd3f 	bl	8001a0a <USART_Write>
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f96:	b004      	add	sp, #16
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	08008590 	.word	0x08008590
 8000fa0:	080085e4 	.word	0x080085e4

08000fa4 <get_cmd>:
 * 	size - the size of the buffer being written too
 *
 * RETURN
 * 	1 if the settings are valid, 0 otherwise
 * */
void get_cmd(UART_HandleTypeDef uart, char* buffer, int size){
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	f107 0c10 	add.w	ip, r7, #16
 8000fb0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//prints a prompt for the user to type the wave settings
	USART_Write(uart.Instance, "Wave Settings: ", strlen("Wave Settings: "));
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	4915      	ldr	r1, [pc, #84]	; (8001010 <get_cmd+0x6c>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fd25 	bl	8001a0a <USART_Write>
	//enters while loop as user types
	while(1){
		char ch = USART_Read(uart.Instance); //gets characters from user
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fd0c 	bl	80019e0 <USART_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
		if(ch == '\r' || ch == '\n'){ //if enter is pressed
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b0d      	cmp	r3, #13
 8000fd0:	d002      	beq.n	8000fd8 <get_cmd+0x34>
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b0a      	cmp	r3, #10
 8000fd6:	d106      	bne.n	8000fe6 <get_cmd+0x42>
				USART_Write(uart.Instance, (uint8_t *)"\r\n", strlen("\r\n"));
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	2202      	movs	r2, #2
 8000fdc:	490d      	ldr	r1, [pc, #52]	; (8001014 <get_cmd+0x70>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fd13 	bl	8001a0a <USART_Write>
				return;
 8000fe4:	e00d      	b.n	8001002 <get_cmd+0x5e>
		}
		USART_Write(uart.Instance, &ch, 1); //prints character as user types
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1df9      	adds	r1, r7, #7
 8000fea:	2201      	movs	r2, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fd0c 	bl	8001a0a <USART_Write>
		strncat(buffer, &ch, 1); //adds the last pressed key to the instruction string
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000ffc:	f004 fa6b 	bl	80054d6 <strncat>
	while(1){
 8001000:	e7de      	b.n	8000fc0 <get_cmd+0x1c>
	}
}
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800100a:	b004      	add	sp, #16
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	08008688 	.word	0x08008688
 8001014:	08008698 	.word	0x08008698

08001018 <parse>:

void parse(char* str, char* types, int* frequency, double* minimum, double* maximum){
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
	char* tok = strtok(str, " ");
 8001026:	4914      	ldr	r1, [pc, #80]	; (8001078 <parse+0x60>)
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f005 f89b 	bl	8006164 <strtok>
 800102e:	6138      	str	r0, [r7, #16]
	*types = (char)(*tok);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= 2; i++){
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e00f      	b.n	800105e <parse+0x46>
		tok = strtok(NULL, " "); //pull the next parameter
 800103e:	490e      	ldr	r1, [pc, #56]	; (8001078 <parse+0x60>)
 8001040:	2000      	movs	r0, #0
 8001042:	f005 f88f 	bl	8006164 <strtok>
 8001046:	6138      	str	r0, [r7, #16]
		assign(tok, i, frequency, minimum, maximum);
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6979      	ldr	r1, [r7, #20]
 8001052:	6938      	ldr	r0, [r7, #16]
 8001054:	f000 f812 	bl	800107c <assign>
	for(int i = 0; i <= 2; i++){
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b02      	cmp	r3, #2
 8001062:	ddec      	ble.n	800103e <parse+0x26>
	}
	memset(str, '\0', sizeof(str)); //clears the buffer for the next waveform settings
 8001064:	2204      	movs	r2, #4
 8001066:	2100      	movs	r1, #0
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f004 fa1f 	bl	80054ac <memset>
	return;
 800106e:	bf00      	nop
}
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	0800869c 	.word	0x0800869c

0800107c <assign>:

void assign(char* str, int c, int* frequency, double* minimum, double* maximum){
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
	switch (c){
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d01b      	beq.n	80010c8 <assign+0x4c>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b02      	cmp	r3, #2
 8001094:	dc24      	bgt.n	80010e0 <assign+0x64>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <assign+0x28>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d007      	beq.n	80010b2 <assign+0x36>
			break;
		case 2:
			*maximum = (double)atof(str);
			break;
		default:
			return;
 80010a2:	e01d      	b.n	80010e0 <assign+0x64>
			*frequency = atoi(str);
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f004 f9c5 	bl	8005434 <atoi>
 80010aa:	4602      	mov	r2, r0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	601a      	str	r2, [r3, #0]
			break;
 80010b0:	e015      	b.n	80010de <assign+0x62>
			*minimum = (double)atof(str);
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f004 f9bb 	bl	800542e <atof>
 80010b8:	eeb0 7a40 	vmov.f32	s14, s0
 80010bc:	eef0 7a60 	vmov.f32	s15, s1
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	ed83 7b00 	vstr	d7, [r3]
			break;
 80010c6:	e00a      	b.n	80010de <assign+0x62>
			*maximum = (double)atof(str);
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f004 f9b0 	bl	800542e <atof>
 80010ce:	eeb0 7a40 	vmov.f32	s14, s0
 80010d2:	eef0 7a60 	vmov.f32	s15, s1
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	ed83 7b00 	vstr	d7, [r3]
			break;
 80010dc:	bf00      	nop
	}
	return;
 80010de:	e000      	b.n	80010e2 <assign+0x66>
			return;
 80010e0:	bf00      	nop
}
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <check_input>:
/* USER CODE BEGIN 0 */

/*
 * Verifies the user requested an acceptable signal
 * */
int check_input(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	int flag = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
	if(!strchr("rstRST", type)){
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <check_input+0xc0>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	482c      	ldr	r0, [pc, #176]	; (80011ac <check_input+0xc4>)
 80010fa:	f004 f9df 	bl	80054bc <strchr>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <check_input+0x20>
		flag = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
	}
	if( (frequency < 10) || (frequency > 100000)){
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <check_input+0xc8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b09      	cmp	r3, #9
 800110e:	dd04      	ble.n	800111a <check_input+0x32>
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <check_input+0xc8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <check_input+0xcc>)
 8001116:	4293      	cmp	r3, r2
 8001118:	dd01      	ble.n	800111e <check_input+0x36>
		flag = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
	}
	if((min < 0.0) || (min >= max) || (min >= 3.3)){
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <check_input+0xd0>)
 8001120:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f7ff fcd6 	bl	8000adc <__aeabi_dcmplt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d115      	bne.n	8001162 <check_input+0x7a>
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <check_input+0xd0>)
 8001138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <check_input+0xd4>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fcdf 	bl	8000b04 <__aeabi_dcmpge>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10a      	bne.n	8001162 <check_input+0x7a>
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <check_input+0xd0>)
 800114e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001152:	a313      	add	r3, pc, #76	; (adr r3, 80011a0 <check_input+0xb8>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fcd4 	bl	8000b04 <__aeabi_dcmpge>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <check_input+0x7e>
		flag = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
	}
	if((max > 3.3) || (max <= min)){
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <check_input+0xd4>)
 8001168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116c:	a30c      	add	r3, pc, #48	; (adr r3, 80011a0 <check_input+0xb8>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fcd1 	bl	8000b18 <__aeabi_dcmpgt>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10a      	bne.n	8001192 <check_input+0xaa>
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <check_input+0xd4>)
 800117e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <check_input+0xd0>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fcb2 	bl	8000af0 <__aeabi_dcmple>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <check_input+0xae>
		flag = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
	}
	return flag;
 8001196:	687b      	ldr	r3, [r7, #4]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	66666666 	.word	0x66666666
 80011a4:	400a6666 	.word	0x400a6666
 80011a8:	20000214 	.word	0x20000214
 80011ac:	080086a0 	.word	0x080086a0
 80011b0:	20000210 	.word	0x20000210
 80011b4:	000186a0 	.word	0x000186a0
 80011b8:	20004290 	.word	0x20004290
 80011bc:	20000288 	.word	0x20000288

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	b0a5      	sub	sp, #148	; 0x94
 80011c4:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c6:	f000 fdfc 	bl	8001dc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ca:	f000 f893 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ce:	f000 f9b1 	bl	8001534 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011d2:	f000 f961 	bl	8001498 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80011d6:	f000 f98f 	bl	80014f8 <MX_DMA_Init>
  MX_DAC1_Init();
 80011da:	f000 f8dd 	bl	8001398 <MX_DAC1_Init>
  MX_TIM2_Init();
 80011de:	f000 f90d 	bl	80013fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  startup(huart2);
 80011e2:	4c3a      	ldr	r4, [pc, #232]	; (80012cc <main+0x10c>)
 80011e4:	4668      	mov	r0, sp
 80011e6:	f104 0310 	add.w	r3, r4, #16
 80011ea:	2274      	movs	r2, #116	; 0x74
 80011ec:	4619      	mov	r1, r3
 80011ee:	f004 f94f 	bl	8005490 <memcpy>
 80011f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011f6:	f7ff fea9 	bl	8000f4c <startup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	get_cmd(huart2, settings, BUFFER_SETTING_SIZE); //get the settings from the user
 80011fa:	4c34      	ldr	r4, [pc, #208]	; (80012cc <main+0x10c>)
 80011fc:	2314      	movs	r3, #20
 80011fe:	931e      	str	r3, [sp, #120]	; 0x78
 8001200:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <main+0x110>)
 8001202:	931d      	str	r3, [sp, #116]	; 0x74
 8001204:	4668      	mov	r0, sp
 8001206:	f104 0310 	add.w	r3, r4, #16
 800120a:	2274      	movs	r2, #116	; 0x74
 800120c:	4619      	mov	r1, r3
 800120e:	f004 f93f 	bl	8005490 <memcpy>
 8001212:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001216:	f7ff fec5 	bl	8000fa4 <get_cmd>
	parse(settings, &type, &frequency, &min, &max); //parses the user input and extracts the type, freq., and min/max of the wave
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <main+0x114>)
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <main+0x118>)
 8001220:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <main+0x11c>)
 8001222:	492f      	ldr	r1, [pc, #188]	; (80012e0 <main+0x120>)
 8001224:	482a      	ldr	r0, [pc, #168]	; (80012d0 <main+0x110>)
 8001226:	f7ff fef7 	bl	8001018 <parse>
	if(!check_input()){ //checks for valid input
 800122a:	f7ff ff5d 	bl	80010e8 <check_input>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d107      	bne.n	8001244 <main+0x84>
		USART_Write(huart2.Instance, (uint8_t *) "Invalid Input\r\n", strlen("Invalid Input\r\n"));
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <main+0x10c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	220f      	movs	r2, #15
 800123a:	492a      	ldr	r1, [pc, #168]	; (80012e4 <main+0x124>)
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fbe4 	bl	8001a0a <USART_Write>
		continue;
 8001242:	e041      	b.n	80012c8 <main+0x108>
	}
	sample(min, max, &DAC_MIN, &DAC_MAX, &samples); //calculates the number of samples and the min/max values for the dac to produce the proper min/max voltages
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <main+0x118>)
 8001246:	ed93 7b00 	vldr	d7, [r3]
 800124a:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <main+0x114>)
 800124c:	ed93 6b00 	vldr	d6, [r3]
 8001250:	1d3a      	adds	r2, r7, #4
 8001252:	f107 0108 	add.w	r1, r7, #8
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4618      	mov	r0, r3
 800125c:	eeb0 1a46 	vmov.f32	s2, s12
 8001260:	eef0 1a66 	vmov.f32	s3, s13
 8001264:	eeb0 0a47 	vmov.f32	s0, s14
 8001268:	eef0 0a67 	vmov.f32	s1, s15
 800126c:	f000 fc00 	bl	8001a70 <sample>
	update_timer(&htim2, &hdac1, frequency, samples);
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <main+0x11c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	491c      	ldr	r1, [pc, #112]	; (80012e8 <main+0x128>)
 8001278:	481c      	ldr	r0, [pc, #112]	; (80012ec <main+0x12c>)
 800127a:	f000 fc49 	bl	8001b10 <update_timer>
	update_data(htim2, hdac1, dac_buffer, type, samples, DAC_MIN, DAC_MAX);
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <main+0x130>)
 8001280:	b29b      	uxth	r3, r3
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <main+0x120>)
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	68bc      	ldr	r4, [r7, #8]
 800128c:	4e17      	ldr	r6, [pc, #92]	; (80012ec <main+0x12c>)
 800128e:	9418      	str	r4, [sp, #96]	; 0x60
 8001290:	9017      	str	r0, [sp, #92]	; 0x5c
 8001292:	9116      	str	r1, [sp, #88]	; 0x58
 8001294:	9215      	str	r2, [sp, #84]	; 0x54
 8001296:	9314      	str	r3, [sp, #80]	; 0x50
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <main+0x128>)
 800129a:	ac0f      	add	r4, sp, #60	; 0x3c
 800129c:	461d      	mov	r5, r3
 800129e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	6023      	str	r3, [r4, #0]
 80012a6:	466d      	mov	r5, sp
 80012a8:	f106 0410 	add.w	r4, r6, #16
 80012ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80012bc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80012c0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012c4:	f000 fc60 	bl	8001b88 <update_data>
	get_cmd(huart2, settings, BUFFER_SETTING_SIZE); //get the settings from the user
 80012c8:	e797      	b.n	80011fa <main+0x3a>
 80012ca:	bf00      	nop
 80012cc:	200042e4 	.word	0x200042e4
 80012d0:	20000218 	.word	0x20000218
 80012d4:	20000288 	.word	0x20000288
 80012d8:	20004290 	.word	0x20004290
 80012dc:	20000210 	.word	0x20000210
 80012e0:	20000214 	.word	0x20000214
 80012e4:	080086a8 	.word	0x080086a8
 80012e8:	2000022c 	.word	0x2000022c
 80012ec:	20004298 	.word	0x20004298
 80012f0:	20000290 	.word	0x20000290

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b096      	sub	sp, #88	; 0x58
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2244      	movs	r2, #68	; 0x44
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f004 f8d2 	bl	80054ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001316:	f44f 7000 	mov.w	r0, #512	; 0x200
 800131a:	f001 fde1 	bl	8002ee0 <HAL_PWREx_ControlVoltageScaling>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001324:	f000 f91e 	bl	8001564 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001328:	2310      	movs	r3, #16
 800132a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001334:	2360      	movs	r3, #96	; 0x60
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800133c:	2301      	movs	r3, #1
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001344:	2320      	movs	r3, #32
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001348:	2307      	movs	r3, #7
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001350:	2302      	movs	r3, #2
 8001352:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fe17 	bl	8002f8c <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001364:	f000 f8fe 	bl	8001564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2303      	movs	r3, #3
 800136e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	2103      	movs	r1, #3
 8001380:	4618      	mov	r0, r3
 8001382:	f002 f9e9 	bl	8003758 <HAL_RCC_ClockConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800138c:	f000 f8ea 	bl	8001564 <Error_Handler>
  }
}
 8001390:	bf00      	nop
 8001392:	3758      	adds	r7, #88	; 0x58
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2224      	movs	r2, #36	; 0x24
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 f881 	bl	80054ac <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_DAC1_Init+0x5c>)
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_DAC1_Init+0x60>)
 80013ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <MX_DAC1_Init+0x5c>)
 80013b2:	f000 feb0 	bl	8002116 <HAL_DAC_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013bc:	f000 f8d2 	bl	8001564 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80013c4:	2324      	movs	r3, #36	; 0x24
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_DAC1_Init+0x5c>)
 80013dc:	f000 ffed 	bl	80023ba <HAL_DAC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80013e6:	f000 f8bd 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000022c 	.word	0x2000022c
 80013f8:	40007400 	.word	0x40007400

080013fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <MX_TIM2_Init+0x98>)
 800141c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001420:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_TIM2_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_TIM2_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_TIM2_Init+0x98>)
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_TIM2_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_TIM2_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001442:	4814      	ldr	r0, [pc, #80]	; (8001494 <MX_TIM2_Init+0x98>)
 8001444:	f003 f84a 	bl	80044dc <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800144e:	f000 f889 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_TIM2_Init+0x98>)
 8001460:	f003 f923 	bl	80046aa <HAL_TIM_ConfigClockSource>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800146a:	f000 f87b 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800146e:	2320      	movs	r3, #32
 8001470:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_TIM2_Init+0x98>)
 800147c:	f003 fb10 	bl	8004aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001486:	f000 f86d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20004298 	.word	0x20004298

08001498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <MX_USART2_UART_Init+0x5c>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_USART2_UART_Init+0x58>)
 80014dc:	f003 fb68 	bl	8004bb0 <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014e6:	f000 f83d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200042e4 	.word	0x200042e4
 80014f4:	40004400 	.word	0x40004400

080014f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_DMA_Init+0x38>)
 8001500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <MX_DMA_Init+0x38>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6493      	str	r3, [r2, #72]	; 0x48
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_DMA_Init+0x38>)
 800150c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	200d      	movs	r0, #13
 800151c:	f000 fdc5 	bl	80020aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001520:	200d      	movs	r0, #13
 8001522:	f000 fdde 	bl	80020e2 <HAL_NVIC_EnableIRQ>

}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_GPIO_Init+0x2c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <MX_GPIO_Init+0x2c>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_GPIO_Init+0x2c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x44>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_MspInit+0x44>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6613      	str	r3, [r2, #96]	; 0x60
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_MspInit+0x44>)
 8001584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_MspInit+0x44>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_MspInit+0x44>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6593      	str	r3, [r2, #88]	; 0x58
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_MspInit+0x44>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <HAL_DAC_MspInit+0xcc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d150      	bne.n	800167c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_DAC_MspInit+0xd0>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a2a      	ldr	r2, [pc, #168]	; (8001688 <HAL_DAC_MspInit+0xd0>)
 80015e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_DAC_MspInit+0xd0>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_DAC_MspInit+0xd0>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_DAC_MspInit+0xd0>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_DAC_MspInit+0xd0>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800160a:	2310      	movs	r3, #16
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160e:	2303      	movs	r3, #3
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f001 faa6 	bl	8002b70 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_DAC_MspInit+0xd4>)
 8001626:	4a1a      	ldr	r2, [pc, #104]	; (8001690 <HAL_DAC_MspInit+0xd8>)
 8001628:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_DAC_MspInit+0xd4>)
 800162c:	2206      	movs	r2, #6
 800162e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_DAC_MspInit+0xd4>)
 8001632:	2210      	movs	r2, #16
 8001634:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_DAC_MspInit+0xd4>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_DAC_MspInit+0xd4>)
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_DAC_MspInit+0xd4>)
 8001644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001648:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <HAL_DAC_MspInit+0xd4>)
 800164c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001650:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_DAC_MspInit+0xd4>)
 8001654:	2220      	movs	r2, #32
 8001656:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_DAC_MspInit+0xd4>)
 800165a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800165e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001660:	480a      	ldr	r0, [pc, #40]	; (800168c <HAL_DAC_MspInit+0xd4>)
 8001662:	f001 f84f 	bl	8002704 <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 800166c:	f7ff ff7a 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_DAC_MspInit+0xd4>)
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <HAL_DAC_MspInit+0xd4>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40007400 	.word	0x40007400
 8001688:	40021000 	.word	0x40021000
 800168c:	20000240 	.word	0x20000240
 8001690:	40020030 	.word	0x40020030

08001694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a4:	d10b      	bne.n	80016be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_TIM_Base_MspInit+0x38>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_TIM_Base_MspInit+0x38>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_TIM_Base_MspInit+0x38>)
 80016b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b0ac      	sub	sp, #176	; 0xb0
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2288      	movs	r2, #136	; 0x88
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fedb 	bl	80054ac <memset>
  if(huart->Instance==USART2)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a21      	ldr	r2, [pc, #132]	; (8001780 <HAL_UART_MspInit+0xb0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d13b      	bne.n	8001778 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001700:	2302      	movs	r3, #2
 8001702:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001704:	2300      	movs	r3, #0
 8001706:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4618      	mov	r0, r3
 800170e:	f002 fa29 	bl	8003b64 <HAL_RCCEx_PeriphCLKConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001718:	f7ff ff24 	bl	8001564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_UART_MspInit+0xb4>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	4a18      	ldr	r2, [pc, #96]	; (8001784 <HAL_UART_MspInit+0xb4>)
 8001722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001726:	6593      	str	r3, [r2, #88]	; 0x58
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_UART_MspInit+0xb4>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_UART_MspInit+0xb4>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	4a12      	ldr	r2, [pc, #72]	; (8001784 <HAL_UART_MspInit+0xb4>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HAL_UART_MspInit+0xb4>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800174c:	230c      	movs	r3, #12
 800174e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001764:	2307      	movs	r3, #7
 8001766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001774:	f001 f9fc 	bl	8002b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	37b0      	adds	r7, #176	; 0xb0
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40004400 	.word	0x40004400
 8001784:	40021000 	.word	0x40021000

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d4:	f000 fb4a 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <DMA1_Channel3_IRQHandler+0x10>)
 80017e2:	f001 f8e5 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000240 	.word	0x20000240

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
	return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800180a:	f003 fe17 	bl	800543c <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
	return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0x12>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
	}

return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
	}
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f003 fd7c 	bl	800543c <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20018000 	.word	0x20018000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000204 	.word	0x20000204
 8001978:	20004380 	.word	0x20004380

0800197c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <SystemInit+0x5c>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <SystemInit+0x5c>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <SystemInit+0x60>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a11      	ldr	r2, [pc, #68]	; (80019dc <SystemInit+0x60>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <SystemInit+0x60>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <SystemInit+0x60>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <SystemInit+0x60>)
 80019a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <SystemInit+0x60>)
 80019b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <SystemInit+0x60>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a07      	ldr	r2, [pc, #28]	; (80019dc <SystemInit+0x60>)
 80019c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SystemInit+0x60>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00
 80019dc:	40021000 	.word	0x40021000

080019e0 <USART_Read>:
#include "main.h"

uint8_t USART_Read (USART_TypeDef * USARTx) {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
// SR_RXNE (Read data register not empty) bit is set by hardware
while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 80019e8:	bf00      	nop
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f9      	beq.n	80019ea <USART_Read+0xa>
// USART resets the RXNE flag automatically after reading DR
return ((uint8_t)(USARTx->RDR & 0xFF));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
// Reading USART_DR automatically clears the RXNE flag
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8001a0a:	b480      	push	{r7}
 8001a0c:	b087      	sub	sp, #28
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data egister), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e010      	b.n	8001a3e <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8001a1c:	bf00      	nop
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f9      	beq.n	8001a1e <USART_Write+0x14>
;    	// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF; // writing USART_TDR automatically clears the TXE flag
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	4413      	add	r3, r2
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d8ea      	bhi.n	8001a1c <USART_Write+0x12>
		}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001a46:	bf00      	nop
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f9      	beq.n	8001a48 <USART_Write+0x3e>
		;  // wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	61da      	str	r2, [r3, #28]
}
 8001a60:	bf00      	nop
 8001a62:	371c      	adds	r7, #28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	0000      	movs	r0, r0
	...

08001a70 <sample>:
#include "main.h"

void sample(double min, double max, int* dacmn, int* dacmx, int* samp){
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	ed87 0b06 	vstr	d0, [r7, #24]
 8001a7a:	ed87 1b04 	vstr	d1, [r7, #16]
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
	*dacmn = (int) ((min * 4095)/3.3); //assigns the minimum voltage the dac can output
 8001a84:	a31e      	add	r3, pc, #120	; (adr r3, 8001b00 <sample+0x90>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	a31b      	add	r3, pc, #108	; (adr r3, 8001b08 <sample+0x98>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fed4 	bl	800084c <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f854 	bl	8000b58 <__aeabi_d2iz>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	601a      	str	r2, [r3, #0]
	*dacmx = (int) ((max * 4095)/3.3); //assigns maximum voltage the dac can output
 8001ab6:	a312      	add	r3, pc, #72	; (adr r3, 8001b00 <sample+0x90>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ac0:	f7fe fd9a 	bl	80005f8 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	a30e      	add	r3, pc, #56	; (adr r3, 8001b08 <sample+0x98>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	f7fe febb 	bl	800084c <__aeabi_ddiv>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f83b 	bl	8000b58 <__aeabi_d2iz>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	601a      	str	r2, [r3, #0]
	*samp =  (*dacmx - *dacmn); // returns the number of samples
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	1ad2      	subs	r2, r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	601a      	str	r2, [r3, #0]
	return;
 8001af6:	bf00      	nop
}
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40affe00 	.word	0x40affe00
 8001b08:	66666666 	.word	0x66666666
 8001b0c:	400a6666 	.word	0x400a6666

08001b10 <update_timer>:

void update_timer(TIM_HandleTypeDef* timer, DAC_HandleTypeDef* dac, int freq, int sample){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
	//stops the timer and dac until we are finished updating
	HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_1);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	68b8      	ldr	r0, [r7, #8]
 8001b22:	f000 fbe7 	bl	80022f4 <HAL_DAC_Stop_DMA>
	HAL_TIM_Base_Stop(timer);
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f002 fd98 	bl	800465c <HAL_TIM_Base_Stop>
	int x = (int) (SCC/(freq * sample));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <update_timer+0x70>)
 8001b36:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
	x = sqrt(x) - 1;
 8001b3c:	6978      	ldr	r0, [r7, #20]
 8001b3e:	f7fe fcf1 	bl	8000524 <__aeabi_i2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	ec43 2b10 	vmov	d0, r2, r3
 8001b4a:	f006 fc2b 	bl	80083a4 <sqrt>
 8001b4e:	ec51 0b10 	vmov	r0, r1, d0
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <update_timer+0x74>)
 8001b58:	f7fe fb96 	bl	8000288 <__aeabi_dsub>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7fe fff8 	bl	8000b58 <__aeabi_d2iz>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	617b      	str	r3, [r7, #20]
	(timer->Init).Period = x;
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	60da      	str	r2, [r3, #12]
	(timer->Init).Prescaler = x;
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	605a      	str	r2, [r3, #4]
	return;
 8001b78:	bf00      	nop
}
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	03d09000 	.word	0x03d09000
 8001b84:	3ff00000 	.word	0x3ff00000

08001b88 <update_data>:

void update_data(TIM_HandleTypeDef timer, DAC_HandleTypeDef dac, uint16_t buffer, char form, int samples, int min, int max){
 8001b88:	b084      	sub	sp, #16
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af02      	add	r7, sp, #8
 8001b90:	f107 0c08 	add.w	ip, r7, #8
 8001b94:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	switch (form){
 8001b98:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001b9c:	3b52      	subs	r3, #82	; 0x52
 8001b9e:	2b22      	cmp	r3, #34	; 0x22
 8001ba0:	d85a      	bhi.n	8001c58 <update_data+0xd0>
 8001ba2:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <update_data+0x20>)
 8001ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba8:	08001c47 	.word	0x08001c47
 8001bac:	08001c59 	.word	0x08001c59
 8001bb0:	08001c35 	.word	0x08001c35
 8001bb4:	08001c59 	.word	0x08001c59
 8001bb8:	08001c59 	.word	0x08001c59
 8001bbc:	08001c59 	.word	0x08001c59
 8001bc0:	08001c59 	.word	0x08001c59
 8001bc4:	08001c59 	.word	0x08001c59
 8001bc8:	08001c59 	.word	0x08001c59
 8001bcc:	08001c59 	.word	0x08001c59
 8001bd0:	08001c59 	.word	0x08001c59
 8001bd4:	08001c59 	.word	0x08001c59
 8001bd8:	08001c59 	.word	0x08001c59
 8001bdc:	08001c59 	.word	0x08001c59
 8001be0:	08001c59 	.word	0x08001c59
 8001be4:	08001c59 	.word	0x08001c59
 8001be8:	08001c59 	.word	0x08001c59
 8001bec:	08001c59 	.word	0x08001c59
 8001bf0:	08001c59 	.word	0x08001c59
 8001bf4:	08001c59 	.word	0x08001c59
 8001bf8:	08001c59 	.word	0x08001c59
 8001bfc:	08001c59 	.word	0x08001c59
 8001c00:	08001c59 	.word	0x08001c59
 8001c04:	08001c59 	.word	0x08001c59
 8001c08:	08001c59 	.word	0x08001c59
 8001c0c:	08001c59 	.word	0x08001c59
 8001c10:	08001c59 	.word	0x08001c59
 8001c14:	08001c59 	.word	0x08001c59
 8001c18:	08001c59 	.word	0x08001c59
 8001c1c:	08001c59 	.word	0x08001c59
 8001c20:	08001c59 	.word	0x08001c59
 8001c24:	08001c59 	.word	0x08001c59
 8001c28:	08001c47 	.word	0x08001c47
 8001c2c:	08001c59 	.word	0x08001c59
 8001c30:	08001c35 	.word	0x08001c35
	case 't':
	case 'T':
		populate_triangle_wave(buffer, samples, min, max);
 8001c34:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001c38:	4618      	mov	r0, r3
 8001c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c3e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001c40:	f000 f822 	bl	8001c88 <populate_triangle_wave>
		break;
 8001c44:	e009      	b.n	8001c5a <update_data+0xd2>
	case 'r':
	case 'R':
		populate_rectangle_wave(buffer, samples, min, max);
 8001c46:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c50:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001c52:	f000 f857 	bl	8001d04 <populate_rectangle_wave>
		break;
 8001c56:	e000      	b.n	8001c5a <update_data+0xd2>
	case 's':
	case 'S':
		break;
	default:
		break;
 8001c58:	bf00      	nop
	}
	HAL_DAC_Start_DMA(&dac, DAC_CHANNEL_1, buffer, samples, DAC_ALIGN_12B_R);
 8001c5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c62:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001c66:	2200      	movs	r2, #0
 8001c68:	9200      	str	r2, [sp, #0]
 8001c6a:	460a      	mov	r2, r1
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	f000 fa75 	bl	800215c <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&timer);
 8001c72:	f107 0008 	add.w	r0, r7, #8
 8001c76:	f002 fc89 	bl	800458c <HAL_TIM_Base_Start>
	return;
 8001c7a:	bf00      	nop
}
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c82:	b004      	add	sp, #16
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop

08001c88 <populate_triangle_wave>:

void populate_triangle_wave(uint16_t* buffer, int samples, int min, int max){
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
	int idx = (samples/2);
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	0fda      	lsrs	r2, r3, #31
 8001c9a:	4413      	add	r3, r2
 8001c9c:	105b      	asrs	r3, r3, #1
 8001c9e:	613b      	str	r3, [r7, #16]
	int temp = max;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < idx; i++){
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	e00d      	b.n	8001cc6 <populate_triangle_wave+0x3e>
		buffer[i] = min + i;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	b299      	uxth	r1, r3
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	4403      	add	r3, r0
 8001cba:	440a      	add	r2, r1
 8001cbc:	b292      	uxth	r2, r2
 8001cbe:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < idx; i++){
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dbed      	blt.n	8001caa <populate_triangle_wave+0x22>
	}
	for(int j = idx; j < samples; j++){
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e00c      	b.n	8001cee <populate_triangle_wave+0x66>
		buffer[j] = temp;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	b292      	uxth	r2, r2
 8001ce0:	801a      	strh	r2, [r3, #0]
		temp--;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
	for(int j = idx; j < samples; j++){
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbee      	blt.n	8001cd4 <populate_triangle_wave+0x4c>
	}
}
 8001cf6:	bf00      	nop
 8001cf8:	bf00      	nop
 8001cfa:	3724      	adds	r7, #36	; 0x24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <populate_rectangle_wave>:

void populate_rectangle_wave(uint16_t* buffer, int samples, int min, int max){
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
	int idx = (samples/2);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	0fda      	lsrs	r2, r3, #31
 8001d16:	4413      	add	r3, r2
 8001d18:	105b      	asrs	r3, r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < idx; i++){
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	e009      	b.n	8001d36 <populate_rectangle_wave+0x32>
		buffer[i] = max;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4413      	add	r3, r2
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < idx; i++){
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	3301      	adds	r3, #1
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	dbf1      	blt.n	8001d22 <populate_rectangle_wave+0x1e>
	}
	for(int j = idx; j < samples; j++){
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e009      	b.n	8001d58 <populate_rectangle_wave+0x54>
		buffer[j] = min;
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	b292      	uxth	r2, r2
 8001d50:	801a      	strh	r2, [r3, #0]
	for(int j = idx; j < samples; j++){
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf1      	blt.n	8001d44 <populate_rectangle_wave+0x40>
	}
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d74:	f7ff fe02 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d7a:	e003      	b.n	8001d84 <LoopCopyDataInit>

08001d7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d82:	3104      	adds	r1, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d84:	480a      	ldr	r0, [pc, #40]	; (8001db0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d8c:	d3f6      	bcc.n	8001d7c <CopyDataInit>
	ldr	r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d90:	e002      	b.n	8001d98 <LoopFillZerobss>

08001d92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d94:	f842 3b04 	str.w	r3, [r2], #4

08001d98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <LoopForever+0x16>)
	cmp	r2, r3
 8001d9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d9c:	d3f9      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f003 fb53 	bl	8005448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001da2:	f7ff fa0d 	bl	80011c0 <main>

08001da6 <LoopForever>:

LoopForever:
    b LoopForever
 8001da6:	e7fe      	b.n	8001da6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001da8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001dac:	08008ba8 	.word	0x08008ba8
	ldr	r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001db4:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8001db8:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8001dbc:	2000437c 	.word	0x2000437c

08001dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_2_IRQHandler>

08001dc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f000 f961 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd2:	200f      	movs	r0, #15
 8001dd4:	f000 f80e 	bl	8001df4 <HAL_InitTick>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	e001      	b.n	8001de8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de4:	f7ff fbc4 	bl	8001570 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001de8:	79fb      	ldrb	r3, [r7, #7]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_InitTick+0x6c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d023      	beq.n	8001e50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_InitTick+0x70>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_InitTick+0x6c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f96d 	bl	80020fe <HAL_SYSTICK_Config>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10f      	bne.n	8001e4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b0f      	cmp	r3, #15
 8001e2e:	d809      	bhi.n	8001e44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e30:	2200      	movs	r2, #0
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f000 f937 	bl	80020aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <HAL_InitTick+0x74>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e007      	b.n	8001e54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e004      	b.n	8001e54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	e001      	b.n	8001e54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000004 	.word	0x20000004

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_IncTick+0x20>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x24>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <HAL_IncTick+0x24>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20004368 	.word	0x20004368

08001e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20004368 	.word	0x20004368

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff ffee 	bl	8001e94 <HAL_GetTick>
 8001eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d005      	beq.n	8001ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_Delay+0x44>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed2:	bf00      	nop
 8001ed4:	f7ff ffde 	bl	8001e94 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d8f7      	bhi.n	8001ed4 <HAL_Delay+0x28>
  {
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db0b      	blt.n	8001f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f003 021f 	and.w	r2, r3, #31
 8001f70:	4907      	ldr	r1, [pc, #28]	; (8001f90 <__NVIC_EnableIRQ+0x38>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2001      	movs	r0, #1
 8001f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002060:	d301      	bcc.n	8002066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002062:	2301      	movs	r3, #1
 8002064:	e00f      	b.n	8002086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <SysTick_Config+0x40>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206e:	210f      	movs	r1, #15
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f7ff ff8e 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SysTick_Config+0x40>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SysTick_Config+0x40>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff29 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff3e 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff8e 	bl	8001fe8 <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff5d 	bl	8001f94 <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff31 	bl	8001f58 <__NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffa2 	bl	8002050 <SysTick_Config>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e014      	b.n	8002152 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	791b      	ldrb	r3, [r3, #4]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d105      	bne.n	800213e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fa3d 	bl	80015b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2202      	movs	r2, #2
 8002142:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	795b      	ldrb	r3, [r3, #5]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_DAC_Start_DMA+0x1e>
 8002176:	2302      	movs	r3, #2
 8002178:	e0ab      	b.n	80022d2 <HAL_DAC_Start_DMA+0x176>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2201      	movs	r2, #1
 800217e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2202      	movs	r2, #2
 8002184:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d12f      	bne.n	80021ec <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a52      	ldr	r2, [pc, #328]	; (80022dc <HAL_DAC_Start_DMA+0x180>)
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a51      	ldr	r2, [pc, #324]	; (80022e0 <HAL_DAC_Start_DMA+0x184>)
 800219a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <HAL_DAC_Start_DMA+0x188>)
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d013      	beq.n	80021e2 <HAL_DAC_Start_DMA+0x86>
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d845      	bhi.n	800224c <HAL_DAC_Start_DMA+0xf0>
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_DAC_Start_DMA+0x72>
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d005      	beq.n	80021d8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80021cc:	e03e      	b.n	800224c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3308      	adds	r3, #8
 80021d4:	613b      	str	r3, [r7, #16]
        break;
 80021d6:	e03c      	b.n	8002252 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	330c      	adds	r3, #12
 80021de:	613b      	str	r3, [r7, #16]
        break;
 80021e0:	e037      	b.n	8002252 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3310      	adds	r3, #16
 80021e8:	613b      	str	r3, [r7, #16]
        break;
 80021ea:	e032      	b.n	8002252 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a3d      	ldr	r2, [pc, #244]	; (80022e8 <HAL_DAC_Start_DMA+0x18c>)
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a3c      	ldr	r2, [pc, #240]	; (80022ec <HAL_DAC_Start_DMA+0x190>)
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a3b      	ldr	r2, [pc, #236]	; (80022f0 <HAL_DAC_Start_DMA+0x194>)
 8002202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002212:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	2b08      	cmp	r3, #8
 8002218:	d013      	beq.n	8002242 <HAL_DAC_Start_DMA+0xe6>
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	2b08      	cmp	r3, #8
 800221e:	d817      	bhi.n	8002250 <HAL_DAC_Start_DMA+0xf4>
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_DAC_Start_DMA+0xd2>
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d005      	beq.n	8002238 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800222c:	e010      	b.n	8002250 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3314      	adds	r3, #20
 8002234:	613b      	str	r3, [r7, #16]
        break;
 8002236:	e00c      	b.n	8002252 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3318      	adds	r3, #24
 800223e:	613b      	str	r3, [r7, #16]
        break;
 8002240:	e007      	b.n	8002252 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	331c      	adds	r3, #28
 8002248:	613b      	str	r3, [r7, #16]
        break;
 800224a:	e002      	b.n	8002252 <HAL_DAC_Start_DMA+0xf6>
        break;
 800224c:	bf00      	nop
 800224e:	e000      	b.n	8002252 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002250:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d111      	bne.n	800227c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002266:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6898      	ldr	r0, [r3, #8]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	f000 faff 	bl	8002874 <HAL_DMA_Start_IT>
 8002276:	4603      	mov	r3, r0
 8002278:	75fb      	strb	r3, [r7, #23]
 800227a:	e010      	b.n	800229e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800228a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	68d8      	ldr	r0, [r3, #12]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	f000 faed 	bl	8002874 <HAL_DMA_Start_IT>
 800229a:	4603      	mov	r3, r0
 800229c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10c      	bne.n	80022c4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2201      	movs	r2, #1
 80022b8:	409a      	lsls	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	e005      	b.n	80022d0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f043 0204 	orr.w	r2, r3, #4
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80022d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	080025ef 	.word	0x080025ef
 80022e0:	08002611 	.word	0x08002611
 80022e4:	0800262d 	.word	0x0800262d
 80022e8:	08002697 	.word	0x08002697
 80022ec:	080026b9 	.word	0x080026b9
 80022f0:	080026d5 	.word	0x080026d5

080022f4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2201      	movs	r2, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	400a      	ands	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f000 faf6 	bl	8002934 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e00c      	b.n	8002374 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fae8 	bl	8002934 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002372:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b088      	sub	sp, #32
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	795b      	ldrb	r3, [r3, #5]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_DAC_ConfigChannel+0x1c>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e107      	b.n	80025e6 <HAL_DAC_ConfigChannel+0x22c>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2202      	movs	r2, #2
 80023e0:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d174      	bne.n	80024d4 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80023ea:	f7ff fd53 	bl	8001e94 <HAL_GetTick>
 80023ee:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d134      	bne.n	8002460 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80023f6:	e011      	b.n	800241c <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80023f8:	f7ff fd4c 	bl	8001e94 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d90a      	bls.n	800241c <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f043 0208 	orr.w	r2, r3, #8
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2203      	movs	r2, #3
 8002416:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e0e4      	b.n	80025e6 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e6      	bne.n	80023f8 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff fd3e 	bl	8001eac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	6992      	ldr	r2, [r2, #24]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
 800243a:	e01e      	b.n	800247a <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800243c:	f7ff fd2a 	bl	8001e94 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d90a      	bls.n	8002460 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f043 0208 	orr.w	r2, r3, #8
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2203      	movs	r2, #3
 800245a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0c2      	b.n	80025e6 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002466:	2b00      	cmp	r3, #0
 8002468:	dbe8      	blt.n	800243c <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800246a:	2001      	movs	r0, #1
 800246c:	f7ff fd1e 	bl	8001eac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	6992      	ldr	r2, [r2, #24]
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	ea02 0103 	and.w	r1, r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	21ff      	movs	r1, #255	; 0xff
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	ea02 0103 	and.w	r1, r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	6a1a      	ldr	r2, [r3, #32]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d11d      	bne.n	8002518 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	221f      	movs	r2, #31
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2207      	movs	r2, #7
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	431a      	orrs	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43da      	mvns	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	400a      	ands	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6819      	ldr	r1, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	22c0      	movs	r2, #192	; 0xc0
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	400a      	ands	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff febe 	bl	800237e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	711a      	strb	r2, [r3, #4]
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff feb7 	bl	8002392 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f043 0204 	orr.w	r2, r3, #4
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff fead 	bl	80023a6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	711a      	strb	r2, [r3, #4]
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff ffd8 	bl	800265a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	711a      	strb	r2, [r3, #4]
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f7ff ffd1 	bl	800266e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f043 0204 	orr.w	r2, r3, #4
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f7ff ffc7 	bl	8002682 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	711a      	strb	r2, [r3, #4]
}
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e098      	b.n	8002848 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <HAL_DMA_Init+0x150>)
 800271e:	429a      	cmp	r2, r3
 8002720:	d80f      	bhi.n	8002742 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	4b4b      	ldr	r3, [pc, #300]	; (8002858 <HAL_DMA_Init+0x154>)
 800272a:	4413      	add	r3, r2
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_DMA_Init+0x158>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	009a      	lsls	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a48      	ldr	r2, [pc, #288]	; (8002860 <HAL_DMA_Init+0x15c>)
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
 8002740:	e00e      	b.n	8002760 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	4b46      	ldr	r3, [pc, #280]	; (8002864 <HAL_DMA_Init+0x160>)
 800274a:	4413      	add	r3, r2
 800274c:	4a43      	ldr	r2, [pc, #268]	; (800285c <HAL_DMA_Init+0x158>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	009a      	lsls	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a42      	ldr	r2, [pc, #264]	; (8002868 <HAL_DMA_Init+0x164>)
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ba:	d039      	beq.n	8002830 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_DMA_Init+0x15c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d11a      	bne.n	80027fc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027c6:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_DMA_Init+0x168>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f003 031c 	and.w	r3, r3, #28
 80027d2:	210f      	movs	r1, #15
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	4924      	ldr	r1, [pc, #144]	; (800286c <HAL_DMA_Init+0x168>)
 80027dc:	4013      	ands	r3, r2
 80027de:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027e0:	4b22      	ldr	r3, [pc, #136]	; (800286c <HAL_DMA_Init+0x168>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f003 031c 	and.w	r3, r3, #28
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	491d      	ldr	r1, [pc, #116]	; (800286c <HAL_DMA_Init+0x168>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
 80027fa:	e019      	b.n	8002830 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <HAL_DMA_Init+0x16c>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f003 031c 	and.w	r3, r3, #28
 8002808:	210f      	movs	r1, #15
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	4917      	ldr	r1, [pc, #92]	; (8002870 <HAL_DMA_Init+0x16c>)
 8002812:	4013      	ands	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_DMA_Init+0x16c>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f003 031c 	and.w	r3, r3, #28
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	4911      	ldr	r1, [pc, #68]	; (8002870 <HAL_DMA_Init+0x16c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40020407 	.word	0x40020407
 8002858:	bffdfff8 	.word	0xbffdfff8
 800285c:	cccccccd 	.word	0xcccccccd
 8002860:	40020000 	.word	0x40020000
 8002864:	bffdfbf8 	.word	0xbffdfbf8
 8002868:	40020400 	.word	0x40020400
 800286c:	400200a8 	.word	0x400200a8
 8002870:	400204a8 	.word	0x400204a8

08002874 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_DMA_Start_IT+0x20>
 8002890:	2302      	movs	r3, #2
 8002892:	e04b      	b.n	800292c <HAL_DMA_Start_IT+0xb8>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d13a      	bne.n	800291e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f91e 	bl	8002b0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 020e 	orr.w	r2, r2, #14
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e00f      	b.n	800290c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 020a 	orr.w	r2, r2, #10
 800290a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e005      	b.n	800292a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002926:	2302      	movs	r3, #2
 8002928:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d008      	beq.n	800295e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2204      	movs	r2, #4
 8002950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e022      	b.n	80029a4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 020e 	bic.w	r2, r2, #14
 800296c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f003 021c 	and.w	r2, r3, #28
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f003 031c 	and.w	r3, r3, #28
 80029d0:	2204      	movs	r2, #4
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d026      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x7a>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d021      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d107      	bne.n	8002a04 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0204 	bic.w	r2, r2, #4
 8002a02:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f003 021c 	and.w	r2, r3, #28
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2104      	movs	r1, #4
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d071      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002a28:	e06c      	b.n	8002b04 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f003 031c 	and.w	r3, r3, #28
 8002a32:	2202      	movs	r2, #2
 8002a34:	409a      	lsls	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d02e      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xec>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d029      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10b      	bne.n	8002a6e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 020a 	bic.w	r2, r2, #10
 8002a64:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	f003 021c 	and.w	r2, r3, #28
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a80:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d038      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a9a:	e033      	b.n	8002b04 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	f003 031c 	and.w	r3, r3, #28
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d02a      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x156>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d025      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 020e 	bic.w	r2, r2, #14
 8002ac8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f003 021c 	and.w	r2, r3, #28
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8002adc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
}
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	f003 021c 	and.w	r2, r3, #28
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d108      	bne.n	8002b52 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b50:	e007      	b.n	8002b62 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	60da      	str	r2, [r3, #12]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7e:	e17f      	b.n	8002e80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2101      	movs	r1, #1
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8171 	beq.w	8002e7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_GPIO_Init+0x48>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d007      	beq.n	8002bb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bac:	2b11      	cmp	r3, #17
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b12      	cmp	r3, #18
 8002bb6:	d130      	bne.n	8002c1a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bee:	2201      	movs	r2, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0201 	and.w	r2, r3, #1
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d118      	bne.n	8002c58 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	f003 0201 	and.w	r2, r3, #1
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x128>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b12      	cmp	r3, #18
 8002c96:	d123      	bne.n	8002ce0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	08da      	lsrs	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3208      	adds	r2, #8
 8002ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	220f      	movs	r2, #15
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	08da      	lsrs	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3208      	adds	r2, #8
 8002cda:	6939      	ldr	r1, [r7, #16]
 8002cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0203 	and.w	r2, r3, #3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80ac 	beq.w	8002e7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d22:	4b5f      	ldr	r3, [pc, #380]	; (8002ea0 <HAL_GPIO_Init+0x330>)
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	4a5e      	ldr	r2, [pc, #376]	; (8002ea0 <HAL_GPIO_Init+0x330>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ea0 <HAL_GPIO_Init+0x330>)
 8002d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d64:	d025      	beq.n	8002db2 <HAL_GPIO_Init+0x242>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4f      	ldr	r2, [pc, #316]	; (8002ea8 <HAL_GPIO_Init+0x338>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01f      	beq.n	8002dae <HAL_GPIO_Init+0x23e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4e      	ldr	r2, [pc, #312]	; (8002eac <HAL_GPIO_Init+0x33c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d019      	beq.n	8002daa <HAL_GPIO_Init+0x23a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4d      	ldr	r2, [pc, #308]	; (8002eb0 <HAL_GPIO_Init+0x340>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_GPIO_Init+0x236>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4c      	ldr	r2, [pc, #304]	; (8002eb4 <HAL_GPIO_Init+0x344>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00d      	beq.n	8002da2 <HAL_GPIO_Init+0x232>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4b      	ldr	r2, [pc, #300]	; (8002eb8 <HAL_GPIO_Init+0x348>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <HAL_GPIO_Init+0x22e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4a      	ldr	r2, [pc, #296]	; (8002ebc <HAL_GPIO_Init+0x34c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_GPIO_Init+0x22a>
 8002d96:	2306      	movs	r3, #6
 8002d98:	e00c      	b.n	8002db4 <HAL_GPIO_Init+0x244>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e00a      	b.n	8002db4 <HAL_GPIO_Init+0x244>
 8002d9e:	2305      	movs	r3, #5
 8002da0:	e008      	b.n	8002db4 <HAL_GPIO_Init+0x244>
 8002da2:	2304      	movs	r3, #4
 8002da4:	e006      	b.n	8002db4 <HAL_GPIO_Init+0x244>
 8002da6:	2303      	movs	r3, #3
 8002da8:	e004      	b.n	8002db4 <HAL_GPIO_Init+0x244>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e002      	b.n	8002db4 <HAL_GPIO_Init+0x244>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_GPIO_Init+0x244>
 8002db2:	2300      	movs	r3, #0
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	f002 0203 	and.w	r2, r2, #3
 8002dba:	0092      	lsls	r2, r2, #2
 8002dbc:	4093      	lsls	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dc4:	4937      	ldr	r1, [pc, #220]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_GPIO_Init+0x350>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002df6:	4a32      	ldr	r2, [pc, #200]	; (8002ec0 <HAL_GPIO_Init+0x350>)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002dfc:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <HAL_GPIO_Init+0x350>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e20:	4a27      	ldr	r2, [pc, #156]	; (8002ec0 <HAL_GPIO_Init+0x350>)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <HAL_GPIO_Init+0x350>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <HAL_GPIO_Init+0x350>)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_GPIO_Init+0x350>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e74:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <HAL_GPIO_Init+0x350>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f47f ae78 	bne.w	8002b80 <HAL_GPIO_Init+0x10>
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40010000 	.word	0x40010000
 8002ea8:	48000400 	.word	0x48000400
 8002eac:	48000800 	.word	0x48000800
 8002eb0:	48000c00 	.word	0x48000c00
 8002eb4:	48001000 	.word	0x48001000
 8002eb8:	48001400 	.word	0x48001400
 8002ebc:	48001800 	.word	0x48001800
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <HAL_PWREx_GetVoltageRange+0x18>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40007000 	.word	0x40007000

08002ee0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eee:	d130      	bne.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef0:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efc:	d038      	beq.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f06:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2232      	movs	r2, #50	; 0x32
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	4a1b      	ldr	r2, [pc, #108]	; (8002f88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0c9b      	lsrs	r3, r3, #18
 8002f20:	3301      	adds	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f24:	e002      	b.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f38:	d102      	bne.n	8002f40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f2      	bne.n	8002f26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f40:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4c:	d110      	bne.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e00f      	b.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5e:	d007      	beq.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f68:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40007000 	.word	0x40007000
 8002f84:	20000000 	.word	0x20000000
 8002f88:	431bde83 	.word	0x431bde83

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e3d4      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f9e:	4ba1      	ldr	r3, [pc, #644]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa8:	4b9e      	ldr	r3, [pc, #632]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80e4 	beq.w	8003188 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x4a>
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	f040 808b 	bne.w	80030e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	f040 8087 	bne.w	80030e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fd6:	4b93      	ldr	r3, [pc, #588]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_RCC_OscConfig+0x62>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e3ac      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	4b8c      	ldr	r3, [pc, #560]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <HAL_RCC_OscConfig+0x7c>
 8002ffe:	4b89      	ldr	r3, [pc, #548]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003006:	e005      	b.n	8003014 <HAL_RCC_OscConfig+0x88>
 8003008:	4b86      	ldr	r3, [pc, #536]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003014:	4293      	cmp	r3, r2
 8003016:	d223      	bcs.n	8003060 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fd41 	bl	8003aa4 <RCC_SetFlashLatencyFromMSIRange>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e38d      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800302c:	4b7d      	ldr	r3, [pc, #500]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7c      	ldr	r2, [pc, #496]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003032:	f043 0308 	orr.w	r3, r3, #8
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b7a      	ldr	r3, [pc, #488]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4977      	ldr	r1, [pc, #476]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304a:	4b76      	ldr	r3, [pc, #472]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	4972      	ldr	r1, [pc, #456]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
 800305e:	e025      	b.n	80030ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003060:	4b70      	ldr	r3, [pc, #448]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a6f      	ldr	r2, [pc, #444]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003066:	f043 0308 	orr.w	r3, r3, #8
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	496a      	ldr	r1, [pc, #424]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800307e:	4b69      	ldr	r3, [pc, #420]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	4965      	ldr	r1, [pc, #404]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fd01 	bl	8003aa4 <RCC_SetFlashLatencyFromMSIRange>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e34d      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ac:	f000 fc36 	bl	800391c <HAL_RCC_GetSysClockFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b5c      	ldr	r3, [pc, #368]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	495a      	ldr	r1, [pc, #360]	; (8003228 <HAL_RCC_OscConfig+0x29c>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
 80030c8:	4a58      	ldr	r2, [pc, #352]	; (800322c <HAL_RCC_OscConfig+0x2a0>)
 80030ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030cc:	4b58      	ldr	r3, [pc, #352]	; (8003230 <HAL_RCC_OscConfig+0x2a4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe fe8f 	bl	8001df4 <HAL_InitTick>
 80030d6:	4603      	mov	r3, r0
 80030d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d052      	beq.n	8003186 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	e331      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d032      	beq.n	8003152 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030ec:	4b4d      	ldr	r3, [pc, #308]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a4c      	ldr	r2, [pc, #304]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f8:	f7fe fecc 	bl	8001e94 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003100:	f7fe fec8 	bl	8001e94 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e31a      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003112:	4b44      	ldr	r3, [pc, #272]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800311e:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a40      	ldr	r2, [pc, #256]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003124:	f043 0308 	orr.w	r3, r3, #8
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b3e      	ldr	r3, [pc, #248]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	493b      	ldr	r1, [pc, #236]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313c:	4b39      	ldr	r3, [pc, #228]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	4936      	ldr	r1, [pc, #216]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
 8003150:	e01a      	b.n	8003188 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003152:	4b34      	ldr	r3, [pc, #208]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a33      	ldr	r2, [pc, #204]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800315e:	f7fe fe99 	bl	8001e94 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003166:	f7fe fe95 	bl	8001e94 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e2e7      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x1da>
 8003184:	e000      	b.n	8003188 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003186:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d074      	beq.n	800327e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b08      	cmp	r3, #8
 8003198:	d005      	beq.n	80031a6 <HAL_RCC_OscConfig+0x21a>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d10e      	bne.n	80031be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d10b      	bne.n	80031be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a6:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d064      	beq.n	800327c <HAL_RCC_OscConfig+0x2f0>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d160      	bne.n	800327c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e2c4      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x24a>
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a15      	ldr	r2, [pc, #84]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	e01d      	b.n	8003212 <HAL_RCC_OscConfig+0x286>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031de:	d10c      	bne.n	80031fa <HAL_RCC_OscConfig+0x26e>
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0f      	ldr	r2, [pc, #60]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	e00b      	b.n	8003212 <HAL_RCC_OscConfig+0x286>
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a09      	ldr	r2, [pc, #36]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a06      	ldr	r2, [pc, #24]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800320c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01c      	beq.n	8003254 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe fe3b 	bl	8001e94 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003220:	e011      	b.n	8003246 <HAL_RCC_OscConfig+0x2ba>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	080086b8 	.word	0x080086b8
 800322c:	20000000 	.word	0x20000000
 8003230:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7fe fe2e 	bl	8001e94 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	; 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e280      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003246:	4baf      	ldr	r3, [pc, #700]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x2a8>
 8003252:	e014      	b.n	800327e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fe1e 	bl	8001e94 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe fe1a 	bl	8001e94 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e26c      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326e:	4ba5      	ldr	r3, [pc, #660]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x2d0>
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d060      	beq.n	800334c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d005      	beq.n	800329c <HAL_RCC_OscConfig+0x310>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d119      	bne.n	80032ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d116      	bne.n	80032ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800329c:	4b99      	ldr	r3, [pc, #612]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x328>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e249      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b93      	ldr	r3, [pc, #588]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	4990      	ldr	r1, [pc, #576]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c8:	e040      	b.n	800334c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d023      	beq.n	800331a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d2:	4b8c      	ldr	r3, [pc, #560]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a8b      	ldr	r2, [pc, #556]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe fdd9 	bl	8001e94 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e6:	f7fe fdd5 	bl	8001e94 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e227      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f8:	4b82      	ldr	r3, [pc, #520]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003304:	4b7f      	ldr	r3, [pc, #508]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	497c      	ldr	r1, [pc, #496]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
 8003318:	e018      	b.n	800334c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331a:	4b7a      	ldr	r3, [pc, #488]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a79      	ldr	r2, [pc, #484]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe fdb5 	bl	8001e94 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332e:	f7fe fdb1 	bl	8001e94 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e203      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003340:	4b70      	ldr	r3, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d03c      	beq.n	80033d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01c      	beq.n	800339a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003360:	4b68      	ldr	r3, [pc, #416]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003366:	4a67      	ldr	r2, [pc, #412]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe fd90 	bl	8001e94 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003378:	f7fe fd8c 	bl	8001e94 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1de      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800338a:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800338c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ef      	beq.n	8003378 <HAL_RCC_OscConfig+0x3ec>
 8003398:	e01b      	b.n	80033d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339a:	4b5a      	ldr	r3, [pc, #360]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800339c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a0:	4a58      	ldr	r2, [pc, #352]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fe fd73 	bl	8001e94 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b2:	f7fe fd6f 	bl	8001e94 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1c1      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c4:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ef      	bne.n	80033b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80a6 	beq.w	800352c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e0:	2300      	movs	r3, #0
 80033e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033e4:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10d      	bne.n	800340c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f0:	4b44      	ldr	r3, [pc, #272]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	4a43      	ldr	r2, [pc, #268]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6593      	str	r3, [r2, #88]	; 0x58
 80033fc:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003408:	2301      	movs	r3, #1
 800340a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340c:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d118      	bne.n	800344a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003424:	f7fe fd36 	bl	8001e94 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342c:	f7fe fd32 	bl	8001e94 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e184      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343e:	4b32      	ldr	r3, [pc, #200]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d108      	bne.n	8003464 <HAL_RCC_OscConfig+0x4d8>
 8003452:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003462:	e024      	b.n	80034ae <HAL_RCC_OscConfig+0x522>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d110      	bne.n	800348e <HAL_RCC_OscConfig+0x502>
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	4a20      	ldr	r2, [pc, #128]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800348c:	e00f      	b.n	80034ae <HAL_RCC_OscConfig+0x522>
 800348e:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fe fced 	bl	8001e94 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034bc:	e00a      	b.n	80034d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7fe fce9 	bl	8001e94 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e139      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ed      	beq.n	80034be <HAL_RCC_OscConfig+0x532>
 80034e2:	e01a      	b.n	800351a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fcd6 	bl	8001e94 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ea:	e00f      	b.n	800350c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe fcd2 	bl	8001e94 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d906      	bls.n	800350c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e122      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800350c:	4b90      	ldr	r3, [pc, #576]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e8      	bne.n	80034ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351a:	7ffb      	ldrb	r3, [r7, #31]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003520:	4b8b      	ldr	r3, [pc, #556]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	4a8a      	ldr	r2, [pc, #552]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8108 	beq.w	8003746 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	2b02      	cmp	r3, #2
 800353c:	f040 80d0 	bne.w	80036e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003540:	4b83      	ldr	r3, [pc, #524]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 0203 	and.w	r2, r3, #3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	429a      	cmp	r2, r3
 8003552:	d130      	bne.n	80035b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	3b01      	subs	r3, #1
 8003560:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d127      	bne.n	80035b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003570:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d11f      	bne.n	80035b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003580:	2a07      	cmp	r2, #7
 8003582:	bf14      	ite	ne
 8003584:	2201      	movne	r2, #1
 8003586:	2200      	moveq	r2, #0
 8003588:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800358a:	4293      	cmp	r3, r2
 800358c:	d113      	bne.n	80035b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	3b01      	subs	r3, #1
 800359c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800359e:	429a      	cmp	r2, r3
 80035a0:	d109      	bne.n	80035b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	3b01      	subs	r3, #1
 80035b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d06e      	beq.n	8003694 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	d069      	beq.n	8003690 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035bc:	4b64      	ldr	r3, [pc, #400]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d105      	bne.n	80035d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035c8:	4b61      	ldr	r3, [pc, #388]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0b7      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035d8:	4b5d      	ldr	r3, [pc, #372]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5c      	ldr	r2, [pc, #368]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80035de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e4:	f7fe fc56 	bl	8001e94 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe fc52 	bl	8001e94 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0a4      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fe:	4b54      	ldr	r3, [pc, #336]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360a:	4b51      	ldr	r3, [pc, #324]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	4b51      	ldr	r3, [pc, #324]	; (8003754 <HAL_RCC_OscConfig+0x7c8>)
 8003610:	4013      	ands	r3, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800361a:	3a01      	subs	r2, #1
 800361c:	0112      	lsls	r2, r2, #4
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003624:	0212      	lsls	r2, r2, #8
 8003626:	4311      	orrs	r1, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800362c:	0852      	lsrs	r2, r2, #1
 800362e:	3a01      	subs	r2, #1
 8003630:	0552      	lsls	r2, r2, #21
 8003632:	4311      	orrs	r1, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003638:	0852      	lsrs	r2, r2, #1
 800363a:	3a01      	subs	r2, #1
 800363c:	0652      	lsls	r2, r2, #25
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003644:	0912      	lsrs	r2, r2, #4
 8003646:	0452      	lsls	r2, r2, #17
 8003648:	430a      	orrs	r2, r1
 800364a:	4941      	ldr	r1, [pc, #260]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 800364c:	4313      	orrs	r3, r2
 800364e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003650:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a3e      	ldr	r2, [pc, #248]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800365c:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a3b      	ldr	r2, [pc, #236]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003666:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003668:	f7fe fc14 	bl	8001e94 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7fe fc10 	bl	8001e94 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e062      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003682:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800368e:	e05a      	b.n	8003746 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e059      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d152      	bne.n	8003746 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036a0:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80036a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036ac:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a27      	ldr	r2, [pc, #156]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80036b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036b8:	f7fe fbec 	bl	8001e94 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fe fbe8 	bl	8001e94 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e03a      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x734>
 80036de:	e032      	b.n	8003746 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	d02d      	beq.n	8003742 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e6:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a19      	ldr	r2, [pc, #100]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80036ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036f2:	4b17      	ldr	r3, [pc, #92]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003704:	f023 0303 	bic.w	r3, r3, #3
 8003708:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800370a:	4b11      	ldr	r3, [pc, #68]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	4a10      	ldr	r2, [pc, #64]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003710:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003718:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371a:	f7fe fbbb 	bl	8001e94 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003722:	f7fe fbb7 	bl	8001e94 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e009      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_OscConfig+0x7c4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f0      	bne.n	8003722 <HAL_RCC_OscConfig+0x796>
 8003740:	e001      	b.n	8003746 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	f99d808c 	.word	0xf99d808c

08003758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0c8      	b.n	80038fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800376c:	4b66      	ldr	r3, [pc, #408]	; (8003908 <HAL_RCC_ClockConfig+0x1b0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d910      	bls.n	800379c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800377a:	4b63      	ldr	r3, [pc, #396]	; (8003908 <HAL_RCC_ClockConfig+0x1b0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 0207 	bic.w	r2, r3, #7
 8003782:	4961      	ldr	r1, [pc, #388]	; (8003908 <HAL_RCC_ClockConfig+0x1b0>)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800378a:	4b5f      	ldr	r3, [pc, #380]	; (8003908 <HAL_RCC_ClockConfig+0x1b0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0b0      	b.n	80038fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d04c      	beq.n	8003842 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b0:	4b56      	ldr	r3, [pc, #344]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d121      	bne.n	8003800 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e09e      	b.n	80038fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d107      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c8:	4b50      	ldr	r3, [pc, #320]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d115      	bne.n	8003800 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e092      	b.n	80038fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037e0:	4b4a      	ldr	r3, [pc, #296]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e086      	b.n	80038fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f0:	4b46      	ldr	r3, [pc, #280]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e07e      	b.n	80038fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003800:	4b42      	ldr	r3, [pc, #264]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f023 0203 	bic.w	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	493f      	ldr	r1, [pc, #252]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003812:	f7fe fb3f 	bl	8001e94 <HAL_GetTick>
 8003816:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003818:	e00a      	b.n	8003830 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381a:	f7fe fb3b 	bl	8001e94 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	f241 3288 	movw	r2, #5000	; 0x1388
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e066      	b.n	80038fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003830:	4b36      	ldr	r3, [pc, #216]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 020c 	and.w	r2, r3, #12
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	429a      	cmp	r2, r3
 8003840:	d1eb      	bne.n	800381a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384e:	4b2f      	ldr	r3, [pc, #188]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	492c      	ldr	r1, [pc, #176]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 800385c:	4313      	orrs	r3, r2
 800385e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003860:	4b29      	ldr	r3, [pc, #164]	; (8003908 <HAL_RCC_ClockConfig+0x1b0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d210      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b26      	ldr	r3, [pc, #152]	; (8003908 <HAL_RCC_ClockConfig+0x1b0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 0207 	bic.w	r2, r3, #7
 8003876:	4924      	ldr	r1, [pc, #144]	; (8003908 <HAL_RCC_ClockConfig+0x1b0>)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b22      	ldr	r3, [pc, #136]	; (8003908 <HAL_RCC_ClockConfig+0x1b0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e036      	b.n	80038fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4918      	ldr	r1, [pc, #96]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4910      	ldr	r1, [pc, #64]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ce:	f000 f825 	bl	800391c <HAL_RCC_GetSysClockFreq>
 80038d2:	4602      	mov	r2, r0
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_RCC_ClockConfig+0x1b4>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	490c      	ldr	r1, [pc, #48]	; (8003910 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	5ccb      	ldrb	r3, [r1, r3]
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ea:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_ClockConfig+0x1c0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fa7e 	bl	8001df4 <HAL_InitTick>
 80038f8:	4603      	mov	r3, r0
 80038fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80038fc:	7afb      	ldrb	r3, [r7, #11]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40022000 	.word	0x40022000
 800390c:	40021000 	.word	0x40021000
 8003910:	080086b8 	.word	0x080086b8
 8003914:	20000000 	.word	0x20000000
 8003918:	20000004 	.word	0x20000004

0800391c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392a:	4b3e      	ldr	r3, [pc, #248]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x108>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003934:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x34>
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d121      	bne.n	800398e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d11e      	bne.n	800398e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003950:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d107      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x108>)
 800395e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e005      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800396c:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x108>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003978:	4a2b      	ldr	r2, [pc, #172]	; (8003a28 <HAL_RCC_GetSysClockFreq+0x10c>)
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003980:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10d      	bne.n	80039a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800398c:	e00a      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b04      	cmp	r3, #4
 8003992:	d102      	bne.n	800399a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003994:	4b25      	ldr	r3, [pc, #148]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003996:	61bb      	str	r3, [r7, #24]
 8003998:	e004      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039a0:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x114>)
 80039a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d134      	bne.n	8003a14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039aa:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x108>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d003      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d003      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0xac>
 80039c0:	e005      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039c2:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <HAL_RCC_GetSysClockFreq+0x110>)
 80039c4:	617b      	str	r3, [r7, #20]
      break;
 80039c6:	e005      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x114>)
 80039ca:	617b      	str	r3, [r7, #20]
      break;
 80039cc:	e002      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	617b      	str	r3, [r7, #20]
      break;
 80039d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	3301      	adds	r3, #1
 80039e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	fb02 f203 	mul.w	r2, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_RCC_GetSysClockFreq+0x108>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	0e5b      	lsrs	r3, r3, #25
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	3301      	adds	r3, #1
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a14:	69bb      	ldr	r3, [r7, #24]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3724      	adds	r7, #36	; 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40021000 	.word	0x40021000
 8003a28:	080086d0 	.word	0x080086d0
 8003a2c:	00f42400 	.word	0x00f42400
 8003a30:	007a1200 	.word	0x007a1200

08003a34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20000000 	.word	0x20000000

08003a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a50:	f7ff fff0 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4904      	ldr	r1, [pc, #16]	; (8003a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	080086c8 	.word	0x080086c8

08003a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a7c:	f7ff ffda 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	0adb      	lsrs	r3, r3, #11
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4904      	ldr	r1, [pc, #16]	; (8003aa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	080086c8 	.word	0x080086c8

08003aa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ab0:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003abc:	f7ff fa02 	bl	8002ec4 <HAL_PWREx_GetVoltageRange>
 8003ac0:	6178      	str	r0, [r7, #20]
 8003ac2:	e014      	b.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	4b25      	ldr	r3, [pc, #148]	; (8003b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	4a24      	ldr	r2, [pc, #144]	; (8003b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6593      	str	r3, [r2, #88]	; 0x58
 8003ad0:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003adc:	f7ff f9f2 	bl	8002ec4 <HAL_PWREx_GetVoltageRange>
 8003ae0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ae2:	4b1e      	ldr	r3, [pc, #120]	; (8003b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af4:	d10b      	bne.n	8003b0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d919      	bls.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2ba0      	cmp	r3, #160	; 0xa0
 8003b00:	d902      	bls.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b02:	2302      	movs	r3, #2
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e013      	b.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b08:	2301      	movs	r3, #1
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	e010      	b.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b80      	cmp	r3, #128	; 0x80
 8003b12:	d902      	bls.n	8003b1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b14:	2303      	movs	r3, #3
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	e00a      	b.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b80      	cmp	r3, #128	; 0x80
 8003b1e:	d102      	bne.n	8003b26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b20:	2302      	movs	r3, #2
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	e004      	b.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b70      	cmp	r3, #112	; 0x70
 8003b2a:	d101      	bne.n	8003b30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 0207 	bic.w	r2, r3, #7
 8003b38:	4909      	ldr	r1, [pc, #36]	; (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d001      	beq.n	8003b52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40022000 	.word	0x40022000

08003b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b70:	2300      	movs	r3, #0
 8003b72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d041      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b88:	d02a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b8e:	d824      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b94:	d008      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b9a:	d81e      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba4:	d010      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ba6:	e018      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ba8:	4b86      	ldr	r3, [pc, #536]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4a85      	ldr	r2, [pc, #532]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb4:	e015      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fabb 	bl	8004138 <RCCEx_PLLSAI1_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bc6:	e00c      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3320      	adds	r3, #32
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fba6 	bl	8004320 <RCCEx_PLLSAI2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	74fb      	strb	r3, [r7, #19]
      break;
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10b      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003be8:	4b76      	ldr	r3, [pc, #472]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bf6:	4973      	ldr	r1, [pc, #460]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bfe:	e001      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c00:	7cfb      	ldrb	r3, [r7, #19]
 8003c02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d041      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c18:	d02a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c1e:	d824      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c24:	d008      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c2a:	d81e      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c34:	d010      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c36:	e018      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c38:	4b62      	ldr	r3, [pc, #392]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a61      	ldr	r2, [pc, #388]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c44:	e015      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fa73 	bl	8004138 <RCCEx_PLLSAI1_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c56:	e00c      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3320      	adds	r3, #32
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fb5e 	bl	8004320 <RCCEx_PLLSAI2_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c68:	e003      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10b      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c78:	4b52      	ldr	r3, [pc, #328]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c86:	494f      	ldr	r1, [pc, #316]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c8e:	e001      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80a0 	beq.w	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ca6:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00d      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbc:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	4a40      	ldr	r2, [pc, #256]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc8:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a3a      	ldr	r2, [pc, #232]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ce4:	f7fe f8d6 	bl	8001e94 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cea:	e009      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cec:	f7fe f8d2 	bl	8001e94 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	74fb      	strb	r3, [r7, #19]
        break;
 8003cfe:	e005      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d00:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0ef      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d15c      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d12:	4b2c      	ldr	r3, [pc, #176]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01f      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d019      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d3c:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	4a20      	ldr	r2, [pc, #128]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fe f891 	bl	8001e94 <HAL_GetTick>
 8003d72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d74:	e00b      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fe f88d 	bl	8001e94 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d902      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d8c:	e006      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ec      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db2:	4904      	ldr	r1, [pc, #16]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dba:	e009      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	74bb      	strb	r3, [r7, #18]
 8003dc0:	e006      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd0:	7c7b      	ldrb	r3, [r7, #17]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d105      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd6:	4b9e      	ldr	r3, [pc, #632]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	4a9d      	ldr	r2, [pc, #628]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dee:	4b98      	ldr	r3, [pc, #608]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	f023 0203 	bic.w	r2, r3, #3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	4994      	ldr	r1, [pc, #592]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e10:	4b8f      	ldr	r3, [pc, #572]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	f023 020c 	bic.w	r2, r3, #12
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	498c      	ldr	r1, [pc, #560]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e32:	4b87      	ldr	r3, [pc, #540]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	4983      	ldr	r1, [pc, #524]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e54:	4b7e      	ldr	r3, [pc, #504]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	497b      	ldr	r1, [pc, #492]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e76:	4b76      	ldr	r3, [pc, #472]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e84:	4972      	ldr	r1, [pc, #456]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e98:	4b6d      	ldr	r3, [pc, #436]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea6:	496a      	ldr	r1, [pc, #424]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eba:	4b65      	ldr	r3, [pc, #404]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	4961      	ldr	r1, [pc, #388]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003edc:	4b5c      	ldr	r3, [pc, #368]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eea:	4959      	ldr	r1, [pc, #356]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003efe:	4b54      	ldr	r3, [pc, #336]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0c:	4950      	ldr	r1, [pc, #320]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f20:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	4948      	ldr	r1, [pc, #288]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f42:	4b43      	ldr	r3, [pc, #268]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	493f      	ldr	r1, [pc, #252]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d028      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f64:	4b3a      	ldr	r3, [pc, #232]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f72:	4937      	ldr	r1, [pc, #220]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f82:	d106      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a31      	ldr	r2, [pc, #196]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f8e:	60d3      	str	r3, [r2, #12]
 8003f90:	e011      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f8c8 	bl	8004138 <RCCEx_PLLSAI1_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d028      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fc2:	4b23      	ldr	r3, [pc, #140]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	491f      	ldr	r1, [pc, #124]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe0:	d106      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fec:	60d3      	str	r3, [r2, #12]
 8003fee:	e011      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	2101      	movs	r1, #1
 8004000:	4618      	mov	r0, r3
 8004002:	f000 f899 	bl	8004138 <RCCEx_PLLSAI1_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800400a:	7cfb      	ldrb	r3, [r7, #19]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004010:	7cfb      	ldrb	r3, [r7, #19]
 8004012:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d02b      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402e:	4908      	ldr	r1, [pc, #32]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800403e:	d109      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004040:	4b03      	ldr	r3, [pc, #12]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4a02      	ldr	r2, [pc, #8]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004046:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800404a:	60d3      	str	r3, [r2, #12]
 800404c:	e014      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800405c:	d10c      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f867 	bl	8004138 <RCCEx_PLLSAI1_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d02f      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004084:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004092:	4928      	ldr	r1, [pc, #160]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a2:	d10d      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	2102      	movs	r1, #2
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f844 	bl	8004138 <RCCEx_PLLSAI1_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d014      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	74bb      	strb	r3, [r7, #18]
 80040be:	e011      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3320      	adds	r3, #32
 80040ce:	2102      	movs	r1, #2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f925 	bl	8004320 <RCCEx_PLLSAI2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fe:	490d      	ldr	r1, [pc, #52]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004122:	4904      	ldr	r1, [pc, #16]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800412a:	7cbb      	ldrb	r3, [r7, #18]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000

08004138 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004146:	4b75      	ldr	r3, [pc, #468]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004152:	4b72      	ldr	r3, [pc, #456]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0203 	and.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d10d      	bne.n	800417e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
       ||
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800416a:	4b6c      	ldr	r3, [pc, #432]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
       ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d047      	beq.n	800420e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
 8004182:	e044      	b.n	800420e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d018      	beq.n	80041be <RCCEx_PLLSAI1_Config+0x86>
 800418c:	2b03      	cmp	r3, #3
 800418e:	d825      	bhi.n	80041dc <RCCEx_PLLSAI1_Config+0xa4>
 8004190:	2b01      	cmp	r3, #1
 8004192:	d002      	beq.n	800419a <RCCEx_PLLSAI1_Config+0x62>
 8004194:	2b02      	cmp	r3, #2
 8004196:	d009      	beq.n	80041ac <RCCEx_PLLSAI1_Config+0x74>
 8004198:	e020      	b.n	80041dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800419a:	4b60      	ldr	r3, [pc, #384]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d11d      	bne.n	80041e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041aa:	e01a      	b.n	80041e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041ac:	4b5b      	ldr	r3, [pc, #364]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d116      	bne.n	80041e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041bc:	e013      	b.n	80041e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041be:	4b57      	ldr	r3, [pc, #348]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ca:	4b54      	ldr	r3, [pc, #336]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041da:	e006      	b.n	80041ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      break;
 80041e0:	e004      	b.n	80041ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041e2:	bf00      	nop
 80041e4:	e002      	b.n	80041ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041f2:	4b4a      	ldr	r3, [pc, #296]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6819      	ldr	r1, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	3b01      	subs	r3, #1
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	430b      	orrs	r3, r1
 8004208:	4944      	ldr	r1, [pc, #272]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d17d      	bne.n	8004310 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004214:	4b41      	ldr	r3, [pc, #260]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a40      	ldr	r2, [pc, #256]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 800421a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800421e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004220:	f7fd fe38 	bl	8001e94 <HAL_GetTick>
 8004224:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004226:	e009      	b.n	800423c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004228:	f7fd fe34 	bl	8001e94 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d902      	bls.n	800423c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	73fb      	strb	r3, [r7, #15]
        break;
 800423a:	e005      	b.n	8004248 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800423c:	4b37      	ldr	r3, [pc, #220]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1ef      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d160      	bne.n	8004310 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d111      	bne.n	8004278 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004254:	4b31      	ldr	r3, [pc, #196]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800425c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6892      	ldr	r2, [r2, #8]
 8004264:	0211      	lsls	r1, r2, #8
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68d2      	ldr	r2, [r2, #12]
 800426a:	0912      	lsrs	r2, r2, #4
 800426c:	0452      	lsls	r2, r2, #17
 800426e:	430a      	orrs	r2, r1
 8004270:	492a      	ldr	r1, [pc, #168]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004272:	4313      	orrs	r3, r2
 8004274:	610b      	str	r3, [r1, #16]
 8004276:	e027      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d112      	bne.n	80042a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800427e:	4b27      	ldr	r3, [pc, #156]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004286:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	0211      	lsls	r1, r2, #8
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6912      	ldr	r2, [r2, #16]
 8004294:	0852      	lsrs	r2, r2, #1
 8004296:	3a01      	subs	r2, #1
 8004298:	0552      	lsls	r2, r2, #21
 800429a:	430a      	orrs	r2, r1
 800429c:	491f      	ldr	r1, [pc, #124]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	610b      	str	r3, [r1, #16]
 80042a2:	e011      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a4:	4b1d      	ldr	r3, [pc, #116]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6892      	ldr	r2, [r2, #8]
 80042b4:	0211      	lsls	r1, r2, #8
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6952      	ldr	r2, [r2, #20]
 80042ba:	0852      	lsrs	r2, r2, #1
 80042bc:	3a01      	subs	r2, #1
 80042be:	0652      	lsls	r2, r2, #25
 80042c0:	430a      	orrs	r2, r1
 80042c2:	4916      	ldr	r1, [pc, #88]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a13      	ldr	r2, [pc, #76]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fd fdde 	bl	8001e94 <HAL_GetTick>
 80042d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042da:	e009      	b.n	80042f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042dc:	f7fd fdda 	bl	8001e94 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d902      	bls.n	80042f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	73fb      	strb	r3, [r7, #15]
          break;
 80042ee:	e005      	b.n	80042fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ef      	beq.n	80042dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	4904      	ldr	r1, [pc, #16]	; (800431c <RCCEx_PLLSAI1_Config+0x1e4>)
 800430c:	4313      	orrs	r3, r2
 800430e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000

08004320 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800432e:	4b6a      	ldr	r3, [pc, #424]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800433a:	4b67      	ldr	r3, [pc, #412]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0203 	and.w	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d10d      	bne.n	8004366 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
       ||
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004352:	4b61      	ldr	r3, [pc, #388]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
       ||
 8004362:	429a      	cmp	r2, r3
 8004364:	d047      	beq.n	80043f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
 800436a:	e044      	b.n	80043f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d018      	beq.n	80043a6 <RCCEx_PLLSAI2_Config+0x86>
 8004374:	2b03      	cmp	r3, #3
 8004376:	d825      	bhi.n	80043c4 <RCCEx_PLLSAI2_Config+0xa4>
 8004378:	2b01      	cmp	r3, #1
 800437a:	d002      	beq.n	8004382 <RCCEx_PLLSAI2_Config+0x62>
 800437c:	2b02      	cmp	r3, #2
 800437e:	d009      	beq.n	8004394 <RCCEx_PLLSAI2_Config+0x74>
 8004380:	e020      	b.n	80043c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004382:	4b55      	ldr	r3, [pc, #340]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d11d      	bne.n	80043ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004392:	e01a      	b.n	80043ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004394:	4b50      	ldr	r3, [pc, #320]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439c:	2b00      	cmp	r3, #0
 800439e:	d116      	bne.n	80043ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a4:	e013      	b.n	80043ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043a6:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043b2:	4b49      	ldr	r3, [pc, #292]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043c2:	e006      	b.n	80043d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
      break;
 80043c8:	e004      	b.n	80043d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ca:	bf00      	nop
 80043cc:	e002      	b.n	80043d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10d      	bne.n	80043f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043da:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6819      	ldr	r1, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	430b      	orrs	r3, r1
 80043f0:	4939      	ldr	r1, [pc, #228]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d167      	bne.n	80044cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043fc:	4b36      	ldr	r3, [pc, #216]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a35      	ldr	r2, [pc, #212]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004408:	f7fd fd44 	bl	8001e94 <HAL_GetTick>
 800440c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800440e:	e009      	b.n	8004424 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004410:	f7fd fd40 	bl	8001e94 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d902      	bls.n	8004424 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	73fb      	strb	r3, [r7, #15]
        break;
 8004422:	e005      	b.n	8004430 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004424:	4b2c      	ldr	r3, [pc, #176]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ef      	bne.n	8004410 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d14a      	bne.n	80044cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d111      	bne.n	8004460 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800443c:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6892      	ldr	r2, [r2, #8]
 800444c:	0211      	lsls	r1, r2, #8
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68d2      	ldr	r2, [r2, #12]
 8004452:	0912      	lsrs	r2, r2, #4
 8004454:	0452      	lsls	r2, r2, #17
 8004456:	430a      	orrs	r2, r1
 8004458:	491f      	ldr	r1, [pc, #124]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445a:	4313      	orrs	r3, r2
 800445c:	614b      	str	r3, [r1, #20]
 800445e:	e011      	b.n	8004484 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004460:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004468:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6892      	ldr	r2, [r2, #8]
 8004470:	0211      	lsls	r1, r2, #8
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6912      	ldr	r2, [r2, #16]
 8004476:	0852      	lsrs	r2, r2, #1
 8004478:	3a01      	subs	r2, #1
 800447a:	0652      	lsls	r2, r2, #25
 800447c:	430a      	orrs	r2, r1
 800447e:	4916      	ldr	r1, [pc, #88]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004484:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a13      	ldr	r2, [pc, #76]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd fd00 	bl	8001e94 <HAL_GetTick>
 8004494:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004496:	e009      	b.n	80044ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004498:	f7fd fcfc 	bl	8001e94 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d902      	bls.n	80044ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	73fb      	strb	r3, [r7, #15]
          break;
 80044aa:	e005      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ef      	beq.n	8004498 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4904      	ldr	r1, [pc, #16]	; (80044d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000

080044dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e049      	b.n	8004582 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fd f8c6 	bl	8001694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f000 f98c 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d001      	beq.n	80045a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e047      	b.n	8004634 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a23      	ldr	r2, [pc, #140]	; (8004640 <HAL_TIM_Base_Start+0xb4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01d      	beq.n	80045f2 <HAL_TIM_Base_Start+0x66>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045be:	d018      	beq.n	80045f2 <HAL_TIM_Base_Start+0x66>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <HAL_TIM_Base_Start+0xb8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <HAL_TIM_Base_Start+0x66>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <HAL_TIM_Base_Start+0xbc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00e      	beq.n	80045f2 <HAL_TIM_Base_Start+0x66>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1c      	ldr	r2, [pc, #112]	; (800464c <HAL_TIM_Base_Start+0xc0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d009      	beq.n	80045f2 <HAL_TIM_Base_Start+0x66>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <HAL_TIM_Base_Start+0xc4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_TIM_Base_Start+0x66>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <HAL_TIM_Base_Start+0xc8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d115      	bne.n	800461e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	4b17      	ldr	r3, [pc, #92]	; (8004658 <HAL_TIM_Base_Start+0xcc>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b06      	cmp	r3, #6
 8004602:	d015      	beq.n	8004630 <HAL_TIM_Base_Start+0xa4>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460a:	d011      	beq.n	8004630 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461c:	e008      	b.n	8004630 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	e000      	b.n	8004632 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004630:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40000c00 	.word	0x40000c00
 8004650:	40013400 	.word	0x40013400
 8004654:	40014000 	.word	0x40014000
 8004658:	00010007 	.word	0x00010007

0800465c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6a1a      	ldr	r2, [r3, #32]
 800466a:	f241 1311 	movw	r3, #4369	; 0x1111
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10f      	bne.n	8004694 <HAL_TIM_Base_Stop+0x38>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	f240 4344 	movw	r3, #1092	; 0x444
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d107      	bne.n	8004694 <HAL_TIM_Base_Stop+0x38>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_ConfigClockSource+0x18>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0b5      	b.n	800482e <HAL_TIM_ConfigClockSource+0x184>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fe:	d03e      	beq.n	800477e <HAL_TIM_ConfigClockSource+0xd4>
 8004700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004704:	f200 8087 	bhi.w	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470c:	f000 8085 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x170>
 8004710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004714:	d87f      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 8004716:	2b70      	cmp	r3, #112	; 0x70
 8004718:	d01a      	beq.n	8004750 <HAL_TIM_ConfigClockSource+0xa6>
 800471a:	2b70      	cmp	r3, #112	; 0x70
 800471c:	d87b      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 800471e:	2b60      	cmp	r3, #96	; 0x60
 8004720:	d050      	beq.n	80047c4 <HAL_TIM_ConfigClockSource+0x11a>
 8004722:	2b60      	cmp	r3, #96	; 0x60
 8004724:	d877      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 8004726:	2b50      	cmp	r3, #80	; 0x50
 8004728:	d03c      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0xfa>
 800472a:	2b50      	cmp	r3, #80	; 0x50
 800472c:	d873      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 800472e:	2b40      	cmp	r3, #64	; 0x40
 8004730:	d058      	beq.n	80047e4 <HAL_TIM_ConfigClockSource+0x13a>
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d86f      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 8004736:	2b30      	cmp	r3, #48	; 0x30
 8004738:	d064      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0x15a>
 800473a:	2b30      	cmp	r3, #48	; 0x30
 800473c:	d86b      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 800473e:	2b20      	cmp	r3, #32
 8004740:	d060      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0x15a>
 8004742:	2b20      	cmp	r3, #32
 8004744:	d867      	bhi.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
 8004746:	2b00      	cmp	r3, #0
 8004748:	d05c      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0x15a>
 800474a:	2b10      	cmp	r3, #16
 800474c:	d05a      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800474e:	e062      	b.n	8004816 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6899      	ldr	r1, [r3, #8]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f000 f97e 	bl	8004a60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004772:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	609a      	str	r2, [r3, #8]
      break;
 800477c:	e04e      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6899      	ldr	r1, [r3, #8]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f000 f967 	bl	8004a60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047a0:	609a      	str	r2, [r3, #8]
      break;
 80047a2:	e03b      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6859      	ldr	r1, [r3, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	461a      	mov	r2, r3
 80047b2:	f000 f8db 	bl	800496c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2150      	movs	r1, #80	; 0x50
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 f934 	bl	8004a2a <TIM_ITRx_SetConfig>
      break;
 80047c2:	e02b      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6859      	ldr	r1, [r3, #4]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	461a      	mov	r2, r3
 80047d2:	f000 f8fa 	bl	80049ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2160      	movs	r1, #96	; 0x60
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f924 	bl	8004a2a <TIM_ITRx_SetConfig>
      break;
 80047e2:	e01b      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6859      	ldr	r1, [r3, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	461a      	mov	r2, r3
 80047f2:	f000 f8bb 	bl	800496c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2140      	movs	r1, #64	; 0x40
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 f914 	bl	8004a2a <TIM_ITRx_SetConfig>
      break;
 8004802:	e00b      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 f90b 	bl	8004a2a <TIM_ITRx_SetConfig>
        break;
 8004814:	e002      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800481a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a40      	ldr	r2, [pc, #256]	; (800494c <TIM_Base_SetConfig+0x114>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d00f      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3d      	ldr	r2, [pc, #244]	; (8004950 <TIM_Base_SetConfig+0x118>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00b      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3c      	ldr	r2, [pc, #240]	; (8004954 <TIM_Base_SetConfig+0x11c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d007      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3b      	ldr	r2, [pc, #236]	; (8004958 <TIM_Base_SetConfig+0x120>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d003      	beq.n	8004878 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3a      	ldr	r2, [pc, #232]	; (800495c <TIM_Base_SetConfig+0x124>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d108      	bne.n	800488a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2f      	ldr	r2, [pc, #188]	; (800494c <TIM_Base_SetConfig+0x114>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01f      	beq.n	80048d2 <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d01b      	beq.n	80048d2 <TIM_Base_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2c      	ldr	r2, [pc, #176]	; (8004950 <TIM_Base_SetConfig+0x118>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d017      	beq.n	80048d2 <TIM_Base_SetConfig+0x9a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2b      	ldr	r2, [pc, #172]	; (8004954 <TIM_Base_SetConfig+0x11c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <TIM_Base_SetConfig+0x9a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2a      	ldr	r2, [pc, #168]	; (8004958 <TIM_Base_SetConfig+0x120>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00f      	beq.n	80048d2 <TIM_Base_SetConfig+0x9a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a29      	ldr	r2, [pc, #164]	; (800495c <TIM_Base_SetConfig+0x124>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00b      	beq.n	80048d2 <TIM_Base_SetConfig+0x9a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a28      	ldr	r2, [pc, #160]	; (8004960 <TIM_Base_SetConfig+0x128>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d007      	beq.n	80048d2 <TIM_Base_SetConfig+0x9a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a27      	ldr	r2, [pc, #156]	; (8004964 <TIM_Base_SetConfig+0x12c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d003      	beq.n	80048d2 <TIM_Base_SetConfig+0x9a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a26      	ldr	r2, [pc, #152]	; (8004968 <TIM_Base_SetConfig+0x130>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d108      	bne.n	80048e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a10      	ldr	r2, [pc, #64]	; (800494c <TIM_Base_SetConfig+0x114>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00f      	beq.n	8004930 <TIM_Base_SetConfig+0xf8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a12      	ldr	r2, [pc, #72]	; (800495c <TIM_Base_SetConfig+0x124>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00b      	beq.n	8004930 <TIM_Base_SetConfig+0xf8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a11      	ldr	r2, [pc, #68]	; (8004960 <TIM_Base_SetConfig+0x128>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_Base_SetConfig+0xf8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a10      	ldr	r2, [pc, #64]	; (8004964 <TIM_Base_SetConfig+0x12c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_Base_SetConfig+0xf8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a0f      	ldr	r2, [pc, #60]	; (8004968 <TIM_Base_SetConfig+0x130>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d103      	bne.n	8004938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	615a      	str	r2, [r3, #20]
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00
 800495c:	40013400 	.word	0x40013400
 8004960:	40014000 	.word	0x40014000
 8004964:	40014400 	.word	0x40014400
 8004968:	40014800 	.word	0x40014800

0800496c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f023 030a 	bic.w	r3, r3, #10
 80049a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b087      	sub	sp, #28
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f023 0210 	bic.w	r2, r3, #16
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	031b      	lsls	r3, r3, #12
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	621a      	str	r2, [r3, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f043 0307 	orr.w	r3, r3, #7
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	609a      	str	r2, [r3, #8]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e068      	b.n	8004b8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2e      	ldr	r2, [pc, #184]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2d      	ldr	r2, [pc, #180]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d108      	bne.n	8004afe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004af2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01d      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2a:	d018      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1b      	ldr	r2, [pc, #108]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d013      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1a      	ldr	r2, [pc, #104]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00e      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d009      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a14      	ldr	r2, [pc, #80]	; (8004bac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10c      	bne.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40013400 	.word	0x40013400
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40000800 	.word	0x40000800
 8004ba8:	40000c00 	.word	0x40000c00
 8004bac:	40014000 	.word	0x40014000

08004bb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e040      	b.n	8004c44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc fd7c 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	; 0x24
 8004bdc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f82c 	bl	8004c4c <UART_SetConfig>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e022      	b.n	8004c44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 faaa 	bl	8005160 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fb31 	bl	80052a4 <UART_CheckIdleState>
 8004c42:	4603      	mov	r3, r0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	b5b0      	push	{r4, r5, r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4bad      	ldr	r3, [pc, #692]	; (8004f2c <UART_SetConfig+0x2e0>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	69f9      	ldr	r1, [r7, #28]
 8004c80:	430b      	orrs	r3, r1
 8004c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4aa2      	ldr	r2, [pc, #648]	; (8004f30 <UART_SetConfig+0x2e4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a99      	ldr	r2, [pc, #612]	; (8004f34 <UART_SetConfig+0x2e8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d121      	bne.n	8004d16 <UART_SetConfig+0xca>
 8004cd2:	4b99      	ldr	r3, [pc, #612]	; (8004f38 <UART_SetConfig+0x2ec>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d817      	bhi.n	8004d10 <UART_SetConfig+0xc4>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <UART_SetConfig+0x9c>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004d05 	.word	0x08004d05
 8004cf0:	08004cff 	.word	0x08004cff
 8004cf4:	08004d0b 	.word	0x08004d0b
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	76fb      	strb	r3, [r7, #27]
 8004cfc:	e0e7      	b.n	8004ece <UART_SetConfig+0x282>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	76fb      	strb	r3, [r7, #27]
 8004d02:	e0e4      	b.n	8004ece <UART_SetConfig+0x282>
 8004d04:	2304      	movs	r3, #4
 8004d06:	76fb      	strb	r3, [r7, #27]
 8004d08:	e0e1      	b.n	8004ece <UART_SetConfig+0x282>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	76fb      	strb	r3, [r7, #27]
 8004d0e:	e0de      	b.n	8004ece <UART_SetConfig+0x282>
 8004d10:	2310      	movs	r3, #16
 8004d12:	76fb      	strb	r3, [r7, #27]
 8004d14:	e0db      	b.n	8004ece <UART_SetConfig+0x282>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a88      	ldr	r2, [pc, #544]	; (8004f3c <UART_SetConfig+0x2f0>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d132      	bne.n	8004d86 <UART_SetConfig+0x13a>
 8004d20:	4b85      	ldr	r3, [pc, #532]	; (8004f38 <UART_SetConfig+0x2ec>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d828      	bhi.n	8004d80 <UART_SetConfig+0x134>
 8004d2e:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <UART_SetConfig+0xe8>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d69 	.word	0x08004d69
 8004d38:	08004d81 	.word	0x08004d81
 8004d3c:	08004d81 	.word	0x08004d81
 8004d40:	08004d81 	.word	0x08004d81
 8004d44:	08004d75 	.word	0x08004d75
 8004d48:	08004d81 	.word	0x08004d81
 8004d4c:	08004d81 	.word	0x08004d81
 8004d50:	08004d81 	.word	0x08004d81
 8004d54:	08004d6f 	.word	0x08004d6f
 8004d58:	08004d81 	.word	0x08004d81
 8004d5c:	08004d81 	.word	0x08004d81
 8004d60:	08004d81 	.word	0x08004d81
 8004d64:	08004d7b 	.word	0x08004d7b
 8004d68:	2300      	movs	r3, #0
 8004d6a:	76fb      	strb	r3, [r7, #27]
 8004d6c:	e0af      	b.n	8004ece <UART_SetConfig+0x282>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	76fb      	strb	r3, [r7, #27]
 8004d72:	e0ac      	b.n	8004ece <UART_SetConfig+0x282>
 8004d74:	2304      	movs	r3, #4
 8004d76:	76fb      	strb	r3, [r7, #27]
 8004d78:	e0a9      	b.n	8004ece <UART_SetConfig+0x282>
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	76fb      	strb	r3, [r7, #27]
 8004d7e:	e0a6      	b.n	8004ece <UART_SetConfig+0x282>
 8004d80:	2310      	movs	r3, #16
 8004d82:	76fb      	strb	r3, [r7, #27]
 8004d84:	e0a3      	b.n	8004ece <UART_SetConfig+0x282>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a6d      	ldr	r2, [pc, #436]	; (8004f40 <UART_SetConfig+0x2f4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d120      	bne.n	8004dd2 <UART_SetConfig+0x186>
 8004d90:	4b69      	ldr	r3, [pc, #420]	; (8004f38 <UART_SetConfig+0x2ec>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d9a:	2b30      	cmp	r3, #48	; 0x30
 8004d9c:	d013      	beq.n	8004dc6 <UART_SetConfig+0x17a>
 8004d9e:	2b30      	cmp	r3, #48	; 0x30
 8004da0:	d814      	bhi.n	8004dcc <UART_SetConfig+0x180>
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d009      	beq.n	8004dba <UART_SetConfig+0x16e>
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d810      	bhi.n	8004dcc <UART_SetConfig+0x180>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <UART_SetConfig+0x168>
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d006      	beq.n	8004dc0 <UART_SetConfig+0x174>
 8004db2:	e00b      	b.n	8004dcc <UART_SetConfig+0x180>
 8004db4:	2300      	movs	r3, #0
 8004db6:	76fb      	strb	r3, [r7, #27]
 8004db8:	e089      	b.n	8004ece <UART_SetConfig+0x282>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	76fb      	strb	r3, [r7, #27]
 8004dbe:	e086      	b.n	8004ece <UART_SetConfig+0x282>
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	76fb      	strb	r3, [r7, #27]
 8004dc4:	e083      	b.n	8004ece <UART_SetConfig+0x282>
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	76fb      	strb	r3, [r7, #27]
 8004dca:	e080      	b.n	8004ece <UART_SetConfig+0x282>
 8004dcc:	2310      	movs	r3, #16
 8004dce:	76fb      	strb	r3, [r7, #27]
 8004dd0:	e07d      	b.n	8004ece <UART_SetConfig+0x282>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a5b      	ldr	r2, [pc, #364]	; (8004f44 <UART_SetConfig+0x2f8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d120      	bne.n	8004e1e <UART_SetConfig+0x1d2>
 8004ddc:	4b56      	ldr	r3, [pc, #344]	; (8004f38 <UART_SetConfig+0x2ec>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004de6:	2bc0      	cmp	r3, #192	; 0xc0
 8004de8:	d013      	beq.n	8004e12 <UART_SetConfig+0x1c6>
 8004dea:	2bc0      	cmp	r3, #192	; 0xc0
 8004dec:	d814      	bhi.n	8004e18 <UART_SetConfig+0x1cc>
 8004dee:	2b80      	cmp	r3, #128	; 0x80
 8004df0:	d009      	beq.n	8004e06 <UART_SetConfig+0x1ba>
 8004df2:	2b80      	cmp	r3, #128	; 0x80
 8004df4:	d810      	bhi.n	8004e18 <UART_SetConfig+0x1cc>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <UART_SetConfig+0x1b4>
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d006      	beq.n	8004e0c <UART_SetConfig+0x1c0>
 8004dfe:	e00b      	b.n	8004e18 <UART_SetConfig+0x1cc>
 8004e00:	2300      	movs	r3, #0
 8004e02:	76fb      	strb	r3, [r7, #27]
 8004e04:	e063      	b.n	8004ece <UART_SetConfig+0x282>
 8004e06:	2302      	movs	r3, #2
 8004e08:	76fb      	strb	r3, [r7, #27]
 8004e0a:	e060      	b.n	8004ece <UART_SetConfig+0x282>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	76fb      	strb	r3, [r7, #27]
 8004e10:	e05d      	b.n	8004ece <UART_SetConfig+0x282>
 8004e12:	2308      	movs	r3, #8
 8004e14:	76fb      	strb	r3, [r7, #27]
 8004e16:	e05a      	b.n	8004ece <UART_SetConfig+0x282>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	76fb      	strb	r3, [r7, #27]
 8004e1c:	e057      	b.n	8004ece <UART_SetConfig+0x282>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a49      	ldr	r2, [pc, #292]	; (8004f48 <UART_SetConfig+0x2fc>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d125      	bne.n	8004e74 <UART_SetConfig+0x228>
 8004e28:	4b43      	ldr	r3, [pc, #268]	; (8004f38 <UART_SetConfig+0x2ec>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e36:	d017      	beq.n	8004e68 <UART_SetConfig+0x21c>
 8004e38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e3c:	d817      	bhi.n	8004e6e <UART_SetConfig+0x222>
 8004e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e42:	d00b      	beq.n	8004e5c <UART_SetConfig+0x210>
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e48:	d811      	bhi.n	8004e6e <UART_SetConfig+0x222>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <UART_SetConfig+0x20a>
 8004e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e52:	d006      	beq.n	8004e62 <UART_SetConfig+0x216>
 8004e54:	e00b      	b.n	8004e6e <UART_SetConfig+0x222>
 8004e56:	2300      	movs	r3, #0
 8004e58:	76fb      	strb	r3, [r7, #27]
 8004e5a:	e038      	b.n	8004ece <UART_SetConfig+0x282>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	76fb      	strb	r3, [r7, #27]
 8004e60:	e035      	b.n	8004ece <UART_SetConfig+0x282>
 8004e62:	2304      	movs	r3, #4
 8004e64:	76fb      	strb	r3, [r7, #27]
 8004e66:	e032      	b.n	8004ece <UART_SetConfig+0x282>
 8004e68:	2308      	movs	r3, #8
 8004e6a:	76fb      	strb	r3, [r7, #27]
 8004e6c:	e02f      	b.n	8004ece <UART_SetConfig+0x282>
 8004e6e:	2310      	movs	r3, #16
 8004e70:	76fb      	strb	r3, [r7, #27]
 8004e72:	e02c      	b.n	8004ece <UART_SetConfig+0x282>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a2d      	ldr	r2, [pc, #180]	; (8004f30 <UART_SetConfig+0x2e4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d125      	bne.n	8004eca <UART_SetConfig+0x27e>
 8004e7e:	4b2e      	ldr	r3, [pc, #184]	; (8004f38 <UART_SetConfig+0x2ec>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e8c:	d017      	beq.n	8004ebe <UART_SetConfig+0x272>
 8004e8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e92:	d817      	bhi.n	8004ec4 <UART_SetConfig+0x278>
 8004e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e98:	d00b      	beq.n	8004eb2 <UART_SetConfig+0x266>
 8004e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9e:	d811      	bhi.n	8004ec4 <UART_SetConfig+0x278>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <UART_SetConfig+0x260>
 8004ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea8:	d006      	beq.n	8004eb8 <UART_SetConfig+0x26c>
 8004eaa:	e00b      	b.n	8004ec4 <UART_SetConfig+0x278>
 8004eac:	2300      	movs	r3, #0
 8004eae:	76fb      	strb	r3, [r7, #27]
 8004eb0:	e00d      	b.n	8004ece <UART_SetConfig+0x282>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	76fb      	strb	r3, [r7, #27]
 8004eb6:	e00a      	b.n	8004ece <UART_SetConfig+0x282>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	76fb      	strb	r3, [r7, #27]
 8004ebc:	e007      	b.n	8004ece <UART_SetConfig+0x282>
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	76fb      	strb	r3, [r7, #27]
 8004ec2:	e004      	b.n	8004ece <UART_SetConfig+0x282>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	76fb      	strb	r3, [r7, #27]
 8004ec8:	e001      	b.n	8004ece <UART_SetConfig+0x282>
 8004eca:	2310      	movs	r3, #16
 8004ecc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a17      	ldr	r2, [pc, #92]	; (8004f30 <UART_SetConfig+0x2e4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	f040 8087 	bne.w	8004fe8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eda:	7efb      	ldrb	r3, [r7, #27]
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d837      	bhi.n	8004f50 <UART_SetConfig+0x304>
 8004ee0:	a201      	add	r2, pc, #4	; (adr r2, 8004ee8 <UART_SetConfig+0x29c>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	08004f51 	.word	0x08004f51
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f51 	.word	0x08004f51
 8004ef8:	08004f1b 	.word	0x08004f1b
 8004efc:	08004f51 	.word	0x08004f51
 8004f00:	08004f51 	.word	0x08004f51
 8004f04:	08004f51 	.word	0x08004f51
 8004f08:	08004f23 	.word	0x08004f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f0c:	f7fe fd9e 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8004f10:	6178      	str	r0, [r7, #20]
        break;
 8004f12:	e022      	b.n	8004f5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f14:	4b0d      	ldr	r3, [pc, #52]	; (8004f4c <UART_SetConfig+0x300>)
 8004f16:	617b      	str	r3, [r7, #20]
        break;
 8004f18:	e01f      	b.n	8004f5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f1a:	f7fe fcff 	bl	800391c <HAL_RCC_GetSysClockFreq>
 8004f1e:	6178      	str	r0, [r7, #20]
        break;
 8004f20:	e01b      	b.n	8004f5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f26:	617b      	str	r3, [r7, #20]
        break;
 8004f28:	e017      	b.n	8004f5a <UART_SetConfig+0x30e>
 8004f2a:	bf00      	nop
 8004f2c:	efff69f3 	.word	0xefff69f3
 8004f30:	40008000 	.word	0x40008000
 8004f34:	40013800 	.word	0x40013800
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40004400 	.word	0x40004400
 8004f40:	40004800 	.word	0x40004800
 8004f44:	40004c00 	.word	0x40004c00
 8004f48:	40005000 	.word	0x40005000
 8004f4c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	76bb      	strb	r3, [r7, #26]
        break;
 8004f58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80f1 	beq.w	8005144 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	4413      	add	r3, r2
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d305      	bcc.n	8004f7e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d902      	bls.n	8004f84 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	76bb      	strb	r3, [r7, #26]
 8004f82:	e0df      	b.n	8005144 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f04f 0100 	mov.w	r1, #0
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	020b      	lsls	r3, r1, #8
 8004f96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f9a:	0202      	lsls	r2, r0, #8
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	6849      	ldr	r1, [r1, #4]
 8004fa0:	0849      	lsrs	r1, r1, #1
 8004fa2:	4608      	mov	r0, r1
 8004fa4:	f04f 0100 	mov.w	r1, #0
 8004fa8:	1814      	adds	r4, r2, r0
 8004faa:	eb43 0501 	adc.w	r5, r3, r1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4629      	mov	r1, r5
 8004fbc:	f7fb fe14 	bl	8000be8 <__aeabi_uldivmod>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fce:	d308      	bcc.n	8004fe2 <UART_SetConfig+0x396>
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fd6:	d204      	bcs.n	8004fe2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	60da      	str	r2, [r3, #12]
 8004fe0:	e0b0      	b.n	8005144 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	76bb      	strb	r3, [r7, #26]
 8004fe6:	e0ad      	b.n	8005144 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff0:	d15c      	bne.n	80050ac <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004ff2:	7efb      	ldrb	r3, [r7, #27]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d828      	bhi.n	800504a <UART_SetConfig+0x3fe>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <UART_SetConfig+0x3b4>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	08005025 	.word	0x08005025
 8005004:	0800502d 	.word	0x0800502d
 8005008:	08005035 	.word	0x08005035
 800500c:	0800504b 	.word	0x0800504b
 8005010:	0800503b 	.word	0x0800503b
 8005014:	0800504b 	.word	0x0800504b
 8005018:	0800504b 	.word	0x0800504b
 800501c:	0800504b 	.word	0x0800504b
 8005020:	08005043 	.word	0x08005043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005024:	f7fe fd12 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8005028:	6178      	str	r0, [r7, #20]
        break;
 800502a:	e013      	b.n	8005054 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800502c:	f7fe fd24 	bl	8003a78 <HAL_RCC_GetPCLK2Freq>
 8005030:	6178      	str	r0, [r7, #20]
        break;
 8005032:	e00f      	b.n	8005054 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005034:	4b49      	ldr	r3, [pc, #292]	; (800515c <UART_SetConfig+0x510>)
 8005036:	617b      	str	r3, [r7, #20]
        break;
 8005038:	e00c      	b.n	8005054 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503a:	f7fe fc6f 	bl	800391c <HAL_RCC_GetSysClockFreq>
 800503e:	6178      	str	r0, [r7, #20]
        break;
 8005040:	e008      	b.n	8005054 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005046:	617b      	str	r3, [r7, #20]
        break;
 8005048:	e004      	b.n	8005054 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	76bb      	strb	r3, [r7, #26]
        break;
 8005052:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d074      	beq.n	8005144 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	005a      	lsls	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	085b      	lsrs	r3, r3, #1
 8005064:	441a      	add	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	fbb2 f3f3 	udiv	r3, r2, r3
 800506e:	b29b      	uxth	r3, r3
 8005070:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b0f      	cmp	r3, #15
 8005076:	d916      	bls.n	80050a6 <UART_SetConfig+0x45a>
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800507e:	d212      	bcs.n	80050a6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f023 030f 	bic.w	r3, r3, #15
 8005088:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	b29b      	uxth	r3, r3
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	b29a      	uxth	r2, r3
 8005096:	89fb      	ldrh	r3, [r7, #14]
 8005098:	4313      	orrs	r3, r2
 800509a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	89fa      	ldrh	r2, [r7, #14]
 80050a2:	60da      	str	r2, [r3, #12]
 80050a4:	e04e      	b.n	8005144 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	76bb      	strb	r3, [r7, #26]
 80050aa:	e04b      	b.n	8005144 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050ac:	7efb      	ldrb	r3, [r7, #27]
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d827      	bhi.n	8005102 <UART_SetConfig+0x4b6>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x46c>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050dd 	.word	0x080050dd
 80050bc:	080050e5 	.word	0x080050e5
 80050c0:	080050ed 	.word	0x080050ed
 80050c4:	08005103 	.word	0x08005103
 80050c8:	080050f3 	.word	0x080050f3
 80050cc:	08005103 	.word	0x08005103
 80050d0:	08005103 	.word	0x08005103
 80050d4:	08005103 	.word	0x08005103
 80050d8:	080050fb 	.word	0x080050fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050dc:	f7fe fcb6 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 80050e0:	6178      	str	r0, [r7, #20]
        break;
 80050e2:	e013      	b.n	800510c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050e4:	f7fe fcc8 	bl	8003a78 <HAL_RCC_GetPCLK2Freq>
 80050e8:	6178      	str	r0, [r7, #20]
        break;
 80050ea:	e00f      	b.n	800510c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <UART_SetConfig+0x510>)
 80050ee:	617b      	str	r3, [r7, #20]
        break;
 80050f0:	e00c      	b.n	800510c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f2:	f7fe fc13 	bl	800391c <HAL_RCC_GetSysClockFreq>
 80050f6:	6178      	str	r0, [r7, #20]
        break;
 80050f8:	e008      	b.n	800510c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050fe:	617b      	str	r3, [r7, #20]
        break;
 8005100:	e004      	b.n	800510c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	76bb      	strb	r3, [r7, #26]
        break;
 800510a:	bf00      	nop
    }

    if (pclk != 0U)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d018      	beq.n	8005144 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	085a      	lsrs	r2, r3, #1
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	441a      	add	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	fbb2 f3f3 	udiv	r3, r2, r3
 8005124:	b29b      	uxth	r3, r3
 8005126:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b0f      	cmp	r3, #15
 800512c:	d908      	bls.n	8005140 <UART_SetConfig+0x4f4>
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d204      	bcs.n	8005140 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	e001      	b.n	8005144 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005150:	7ebb      	ldrb	r3, [r7, #26]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bdb0      	pop	{r4, r5, r7, pc}
 800515a:	bf00      	nop
 800515c:	00f42400 	.word	0x00f42400

08005160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01a      	beq.n	8005276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800525e:	d10a      	bne.n	8005276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	605a      	str	r2, [r3, #4]
  }
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052b4:	f7fc fdee 	bl	8001e94 <HAL_GetTick>
 80052b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d10e      	bne.n	80052e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f82d 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e023      	b.n	800532e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d10e      	bne.n	8005312 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f817 	bl	8005336 <UART_WaitOnFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e00d      	b.n	800532e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2220      	movs	r2, #32
 8005316:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2220      	movs	r2, #32
 800531c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	603b      	str	r3, [r7, #0]
 8005342:	4613      	mov	r3, r2
 8005344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005346:	e05e      	b.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d05a      	beq.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005350:	f7fc fda0 	bl	8001e94 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	429a      	cmp	r2, r3
 800535e:	d302      	bcc.n	8005366 <UART_WaitOnFlagUntilTimeout+0x30>
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d11b      	bne.n	800539e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005374:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e043      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d02c      	beq.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ba:	d124      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053d4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e00f      	b.n	8005426 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	429a      	cmp	r2, r3
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	429a      	cmp	r2, r3
 8005422:	d091      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <atof>:
 800542e:	2100      	movs	r1, #0
 8005430:	f000 be8c 	b.w	800614c <strtod>

08005434 <atoi>:
 8005434:	220a      	movs	r2, #10
 8005436:	2100      	movs	r1, #0
 8005438:	f000 bf74 	b.w	8006324 <strtol>

0800543c <__errno>:
 800543c:	4b01      	ldr	r3, [pc, #4]	; (8005444 <__errno+0x8>)
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	2000000c 	.word	0x2000000c

08005448 <__libc_init_array>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4d0d      	ldr	r5, [pc, #52]	; (8005480 <__libc_init_array+0x38>)
 800544c:	4c0d      	ldr	r4, [pc, #52]	; (8005484 <__libc_init_array+0x3c>)
 800544e:	1b64      	subs	r4, r4, r5
 8005450:	10a4      	asrs	r4, r4, #2
 8005452:	2600      	movs	r6, #0
 8005454:	42a6      	cmp	r6, r4
 8005456:	d109      	bne.n	800546c <__libc_init_array+0x24>
 8005458:	4d0b      	ldr	r5, [pc, #44]	; (8005488 <__libc_init_array+0x40>)
 800545a:	4c0c      	ldr	r4, [pc, #48]	; (800548c <__libc_init_array+0x44>)
 800545c:	f003 f88a 	bl	8008574 <_init>
 8005460:	1b64      	subs	r4, r4, r5
 8005462:	10a4      	asrs	r4, r4, #2
 8005464:	2600      	movs	r6, #0
 8005466:	42a6      	cmp	r6, r4
 8005468:	d105      	bne.n	8005476 <__libc_init_array+0x2e>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005470:	4798      	blx	r3
 8005472:	3601      	adds	r6, #1
 8005474:	e7ee      	b.n	8005454 <__libc_init_array+0xc>
 8005476:	f855 3b04 	ldr.w	r3, [r5], #4
 800547a:	4798      	blx	r3
 800547c:	3601      	adds	r6, #1
 800547e:	e7f2      	b.n	8005466 <__libc_init_array+0x1e>
 8005480:	08008ba0 	.word	0x08008ba0
 8005484:	08008ba0 	.word	0x08008ba0
 8005488:	08008ba0 	.word	0x08008ba0
 800548c:	08008ba4 	.word	0x08008ba4

08005490 <memcpy>:
 8005490:	440a      	add	r2, r1
 8005492:	4291      	cmp	r1, r2
 8005494:	f100 33ff 	add.w	r3, r0, #4294967295
 8005498:	d100      	bne.n	800549c <memcpy+0xc>
 800549a:	4770      	bx	lr
 800549c:	b510      	push	{r4, lr}
 800549e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a6:	4291      	cmp	r1, r2
 80054a8:	d1f9      	bne.n	800549e <memcpy+0xe>
 80054aa:	bd10      	pop	{r4, pc}

080054ac <memset>:
 80054ac:	4402      	add	r2, r0
 80054ae:	4603      	mov	r3, r0
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d100      	bne.n	80054b6 <memset+0xa>
 80054b4:	4770      	bx	lr
 80054b6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ba:	e7f9      	b.n	80054b0 <memset+0x4>

080054bc <strchr>:
 80054bc:	b2c9      	uxtb	r1, r1
 80054be:	4603      	mov	r3, r0
 80054c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054c4:	b11a      	cbz	r2, 80054ce <strchr+0x12>
 80054c6:	428a      	cmp	r2, r1
 80054c8:	d1f9      	bne.n	80054be <strchr+0x2>
 80054ca:	4618      	mov	r0, r3
 80054cc:	4770      	bx	lr
 80054ce:	2900      	cmp	r1, #0
 80054d0:	bf18      	it	ne
 80054d2:	2300      	movne	r3, #0
 80054d4:	e7f9      	b.n	80054ca <strchr+0xe>

080054d6 <strncat>:
 80054d6:	b530      	push	{r4, r5, lr}
 80054d8:	4604      	mov	r4, r0
 80054da:	7825      	ldrb	r5, [r4, #0]
 80054dc:	4623      	mov	r3, r4
 80054de:	3401      	adds	r4, #1
 80054e0:	2d00      	cmp	r5, #0
 80054e2:	d1fa      	bne.n	80054da <strncat+0x4>
 80054e4:	3a01      	subs	r2, #1
 80054e6:	d304      	bcc.n	80054f2 <strncat+0x1c>
 80054e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054ec:	f803 4b01 	strb.w	r4, [r3], #1
 80054f0:	b904      	cbnz	r4, 80054f4 <strncat+0x1e>
 80054f2:	bd30      	pop	{r4, r5, pc}
 80054f4:	2a00      	cmp	r2, #0
 80054f6:	d1f5      	bne.n	80054e4 <strncat+0xe>
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e7f3      	b.n	80054e4 <strncat+0xe>

080054fc <sulp>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4604      	mov	r4, r0
 8005500:	460d      	mov	r5, r1
 8005502:	ec45 4b10 	vmov	d0, r4, r5
 8005506:	4616      	mov	r6, r2
 8005508:	f001 fe3c 	bl	8007184 <__ulp>
 800550c:	ec51 0b10 	vmov	r0, r1, d0
 8005510:	b17e      	cbz	r6, 8005532 <sulp+0x36>
 8005512:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005516:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800551a:	2b00      	cmp	r3, #0
 800551c:	dd09      	ble.n	8005532 <sulp+0x36>
 800551e:	051b      	lsls	r3, r3, #20
 8005520:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005524:	2400      	movs	r4, #0
 8005526:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800552a:	4622      	mov	r2, r4
 800552c:	462b      	mov	r3, r5
 800552e:	f7fb f863 	bl	80005f8 <__aeabi_dmul>
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	0000      	movs	r0, r0
	...

08005538 <_strtod_l>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	b0a3      	sub	sp, #140	; 0x8c
 800553e:	461f      	mov	r7, r3
 8005540:	2300      	movs	r3, #0
 8005542:	931e      	str	r3, [sp, #120]	; 0x78
 8005544:	4ba4      	ldr	r3, [pc, #656]	; (80057d8 <_strtod_l+0x2a0>)
 8005546:	9219      	str	r2, [sp, #100]	; 0x64
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	9307      	str	r3, [sp, #28]
 800554c:	4604      	mov	r4, r0
 800554e:	4618      	mov	r0, r3
 8005550:	4688      	mov	r8, r1
 8005552:	f7fa fe3d 	bl	80001d0 <strlen>
 8005556:	f04f 0a00 	mov.w	sl, #0
 800555a:	4605      	mov	r5, r0
 800555c:	f04f 0b00 	mov.w	fp, #0
 8005560:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005564:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005566:	781a      	ldrb	r2, [r3, #0]
 8005568:	2a2b      	cmp	r2, #43	; 0x2b
 800556a:	d04c      	beq.n	8005606 <_strtod_l+0xce>
 800556c:	d839      	bhi.n	80055e2 <_strtod_l+0xaa>
 800556e:	2a0d      	cmp	r2, #13
 8005570:	d832      	bhi.n	80055d8 <_strtod_l+0xa0>
 8005572:	2a08      	cmp	r2, #8
 8005574:	d832      	bhi.n	80055dc <_strtod_l+0xa4>
 8005576:	2a00      	cmp	r2, #0
 8005578:	d03c      	beq.n	80055f4 <_strtod_l+0xbc>
 800557a:	2300      	movs	r3, #0
 800557c:	930e      	str	r3, [sp, #56]	; 0x38
 800557e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005580:	7833      	ldrb	r3, [r6, #0]
 8005582:	2b30      	cmp	r3, #48	; 0x30
 8005584:	f040 80b4 	bne.w	80056f0 <_strtod_l+0x1b8>
 8005588:	7873      	ldrb	r3, [r6, #1]
 800558a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800558e:	2b58      	cmp	r3, #88	; 0x58
 8005590:	d16c      	bne.n	800566c <_strtod_l+0x134>
 8005592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	ab1e      	add	r3, sp, #120	; 0x78
 8005598:	9702      	str	r7, [sp, #8]
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	4a8f      	ldr	r2, [pc, #572]	; (80057dc <_strtod_l+0x2a4>)
 800559e:	ab1f      	add	r3, sp, #124	; 0x7c
 80055a0:	a91d      	add	r1, sp, #116	; 0x74
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 ff60 	bl	8006468 <__gethex>
 80055a8:	f010 0707 	ands.w	r7, r0, #7
 80055ac:	4605      	mov	r5, r0
 80055ae:	d005      	beq.n	80055bc <_strtod_l+0x84>
 80055b0:	2f06      	cmp	r7, #6
 80055b2:	d12a      	bne.n	800560a <_strtod_l+0xd2>
 80055b4:	3601      	adds	r6, #1
 80055b6:	2300      	movs	r3, #0
 80055b8:	961d      	str	r6, [sp, #116]	; 0x74
 80055ba:	930e      	str	r3, [sp, #56]	; 0x38
 80055bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 8596 	bne.w	80060f0 <_strtod_l+0xbb8>
 80055c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055c6:	b1db      	cbz	r3, 8005600 <_strtod_l+0xc8>
 80055c8:	4652      	mov	r2, sl
 80055ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80055ce:	ec43 2b10 	vmov	d0, r2, r3
 80055d2:	b023      	add	sp, #140	; 0x8c
 80055d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d8:	2a20      	cmp	r2, #32
 80055da:	d1ce      	bne.n	800557a <_strtod_l+0x42>
 80055dc:	3301      	adds	r3, #1
 80055de:	931d      	str	r3, [sp, #116]	; 0x74
 80055e0:	e7c0      	b.n	8005564 <_strtod_l+0x2c>
 80055e2:	2a2d      	cmp	r2, #45	; 0x2d
 80055e4:	d1c9      	bne.n	800557a <_strtod_l+0x42>
 80055e6:	2201      	movs	r2, #1
 80055e8:	920e      	str	r2, [sp, #56]	; 0x38
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	921d      	str	r2, [sp, #116]	; 0x74
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1c4      	bne.n	800557e <_strtod_l+0x46>
 80055f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f040 8576 	bne.w	80060ec <_strtod_l+0xbb4>
 8005600:	4652      	mov	r2, sl
 8005602:	465b      	mov	r3, fp
 8005604:	e7e3      	b.n	80055ce <_strtod_l+0x96>
 8005606:	2200      	movs	r2, #0
 8005608:	e7ee      	b.n	80055e8 <_strtod_l+0xb0>
 800560a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800560c:	b13a      	cbz	r2, 800561e <_strtod_l+0xe6>
 800560e:	2135      	movs	r1, #53	; 0x35
 8005610:	a820      	add	r0, sp, #128	; 0x80
 8005612:	f001 fec2 	bl	800739a <__copybits>
 8005616:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005618:	4620      	mov	r0, r4
 800561a:	f001 fa87 	bl	8006b2c <_Bfree>
 800561e:	3f01      	subs	r7, #1
 8005620:	2f05      	cmp	r7, #5
 8005622:	d807      	bhi.n	8005634 <_strtod_l+0xfc>
 8005624:	e8df f007 	tbb	[pc, r7]
 8005628:	1d180b0e 	.word	0x1d180b0e
 800562c:	030e      	.short	0x030e
 800562e:	f04f 0b00 	mov.w	fp, #0
 8005632:	46da      	mov	sl, fp
 8005634:	0728      	lsls	r0, r5, #28
 8005636:	d5c1      	bpl.n	80055bc <_strtod_l+0x84>
 8005638:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800563c:	e7be      	b.n	80055bc <_strtod_l+0x84>
 800563e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005642:	e7f7      	b.n	8005634 <_strtod_l+0xfc>
 8005644:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005648:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800564a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800564e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005652:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005656:	e7ed      	b.n	8005634 <_strtod_l+0xfc>
 8005658:	f8df b184 	ldr.w	fp, [pc, #388]	; 80057e0 <_strtod_l+0x2a8>
 800565c:	f04f 0a00 	mov.w	sl, #0
 8005660:	e7e8      	b.n	8005634 <_strtod_l+0xfc>
 8005662:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005666:	f04f 3aff 	mov.w	sl, #4294967295
 800566a:	e7e3      	b.n	8005634 <_strtod_l+0xfc>
 800566c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	921d      	str	r2, [sp, #116]	; 0x74
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	2b30      	cmp	r3, #48	; 0x30
 8005676:	d0f9      	beq.n	800566c <_strtod_l+0x134>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d09f      	beq.n	80055bc <_strtod_l+0x84>
 800567c:	2301      	movs	r3, #1
 800567e:	f04f 0900 	mov.w	r9, #0
 8005682:	9304      	str	r3, [sp, #16]
 8005684:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005686:	930a      	str	r3, [sp, #40]	; 0x28
 8005688:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800568c:	464f      	mov	r7, r9
 800568e:	220a      	movs	r2, #10
 8005690:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005692:	7806      	ldrb	r6, [r0, #0]
 8005694:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005698:	b2d9      	uxtb	r1, r3
 800569a:	2909      	cmp	r1, #9
 800569c:	d92a      	bls.n	80056f4 <_strtod_l+0x1bc>
 800569e:	9907      	ldr	r1, [sp, #28]
 80056a0:	462a      	mov	r2, r5
 80056a2:	f002 fa7d 	bl	8007ba0 <strncmp>
 80056a6:	b398      	cbz	r0, 8005710 <_strtod_l+0x1d8>
 80056a8:	2000      	movs	r0, #0
 80056aa:	4633      	mov	r3, r6
 80056ac:	463d      	mov	r5, r7
 80056ae:	9007      	str	r0, [sp, #28]
 80056b0:	4602      	mov	r2, r0
 80056b2:	2b65      	cmp	r3, #101	; 0x65
 80056b4:	d001      	beq.n	80056ba <_strtod_l+0x182>
 80056b6:	2b45      	cmp	r3, #69	; 0x45
 80056b8:	d118      	bne.n	80056ec <_strtod_l+0x1b4>
 80056ba:	b91d      	cbnz	r5, 80056c4 <_strtod_l+0x18c>
 80056bc:	9b04      	ldr	r3, [sp, #16]
 80056be:	4303      	orrs	r3, r0
 80056c0:	d098      	beq.n	80055f4 <_strtod_l+0xbc>
 80056c2:	2500      	movs	r5, #0
 80056c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80056c8:	f108 0301 	add.w	r3, r8, #1
 80056cc:	931d      	str	r3, [sp, #116]	; 0x74
 80056ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80056d2:	2b2b      	cmp	r3, #43	; 0x2b
 80056d4:	d075      	beq.n	80057c2 <_strtod_l+0x28a>
 80056d6:	2b2d      	cmp	r3, #45	; 0x2d
 80056d8:	d07b      	beq.n	80057d2 <_strtod_l+0x29a>
 80056da:	f04f 0c00 	mov.w	ip, #0
 80056de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80056e2:	2909      	cmp	r1, #9
 80056e4:	f240 8082 	bls.w	80057ec <_strtod_l+0x2b4>
 80056e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80056ec:	2600      	movs	r6, #0
 80056ee:	e09d      	b.n	800582c <_strtod_l+0x2f4>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e7c4      	b.n	800567e <_strtod_l+0x146>
 80056f4:	2f08      	cmp	r7, #8
 80056f6:	bfd8      	it	le
 80056f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80056fa:	f100 0001 	add.w	r0, r0, #1
 80056fe:	bfda      	itte	le
 8005700:	fb02 3301 	mlale	r3, r2, r1, r3
 8005704:	9309      	strle	r3, [sp, #36]	; 0x24
 8005706:	fb02 3909 	mlagt	r9, r2, r9, r3
 800570a:	3701      	adds	r7, #1
 800570c:	901d      	str	r0, [sp, #116]	; 0x74
 800570e:	e7bf      	b.n	8005690 <_strtod_l+0x158>
 8005710:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005712:	195a      	adds	r2, r3, r5
 8005714:	921d      	str	r2, [sp, #116]	; 0x74
 8005716:	5d5b      	ldrb	r3, [r3, r5]
 8005718:	2f00      	cmp	r7, #0
 800571a:	d037      	beq.n	800578c <_strtod_l+0x254>
 800571c:	9007      	str	r0, [sp, #28]
 800571e:	463d      	mov	r5, r7
 8005720:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005724:	2a09      	cmp	r2, #9
 8005726:	d912      	bls.n	800574e <_strtod_l+0x216>
 8005728:	2201      	movs	r2, #1
 800572a:	e7c2      	b.n	80056b2 <_strtod_l+0x17a>
 800572c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	921d      	str	r2, [sp, #116]	; 0x74
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	3001      	adds	r0, #1
 8005736:	2b30      	cmp	r3, #48	; 0x30
 8005738:	d0f8      	beq.n	800572c <_strtod_l+0x1f4>
 800573a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800573e:	2a08      	cmp	r2, #8
 8005740:	f200 84db 	bhi.w	80060fa <_strtod_l+0xbc2>
 8005744:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005746:	9007      	str	r0, [sp, #28]
 8005748:	2000      	movs	r0, #0
 800574a:	920a      	str	r2, [sp, #40]	; 0x28
 800574c:	4605      	mov	r5, r0
 800574e:	3b30      	subs	r3, #48	; 0x30
 8005750:	f100 0201 	add.w	r2, r0, #1
 8005754:	d014      	beq.n	8005780 <_strtod_l+0x248>
 8005756:	9907      	ldr	r1, [sp, #28]
 8005758:	4411      	add	r1, r2
 800575a:	9107      	str	r1, [sp, #28]
 800575c:	462a      	mov	r2, r5
 800575e:	eb00 0e05 	add.w	lr, r0, r5
 8005762:	210a      	movs	r1, #10
 8005764:	4572      	cmp	r2, lr
 8005766:	d113      	bne.n	8005790 <_strtod_l+0x258>
 8005768:	182a      	adds	r2, r5, r0
 800576a:	2a08      	cmp	r2, #8
 800576c:	f105 0501 	add.w	r5, r5, #1
 8005770:	4405      	add	r5, r0
 8005772:	dc1c      	bgt.n	80057ae <_strtod_l+0x276>
 8005774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005776:	220a      	movs	r2, #10
 8005778:	fb02 3301 	mla	r3, r2, r1, r3
 800577c:	9309      	str	r3, [sp, #36]	; 0x24
 800577e:	2200      	movs	r2, #0
 8005780:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	911d      	str	r1, [sp, #116]	; 0x74
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	4610      	mov	r0, r2
 800578a:	e7c9      	b.n	8005720 <_strtod_l+0x1e8>
 800578c:	4638      	mov	r0, r7
 800578e:	e7d2      	b.n	8005736 <_strtod_l+0x1fe>
 8005790:	2a08      	cmp	r2, #8
 8005792:	dc04      	bgt.n	800579e <_strtod_l+0x266>
 8005794:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005796:	434e      	muls	r6, r1
 8005798:	9609      	str	r6, [sp, #36]	; 0x24
 800579a:	3201      	adds	r2, #1
 800579c:	e7e2      	b.n	8005764 <_strtod_l+0x22c>
 800579e:	f102 0c01 	add.w	ip, r2, #1
 80057a2:	f1bc 0f10 	cmp.w	ip, #16
 80057a6:	bfd8      	it	le
 80057a8:	fb01 f909 	mulle.w	r9, r1, r9
 80057ac:	e7f5      	b.n	800579a <_strtod_l+0x262>
 80057ae:	2d10      	cmp	r5, #16
 80057b0:	bfdc      	itt	le
 80057b2:	220a      	movle	r2, #10
 80057b4:	fb02 3909 	mlale	r9, r2, r9, r3
 80057b8:	e7e1      	b.n	800577e <_strtod_l+0x246>
 80057ba:	2300      	movs	r3, #0
 80057bc:	9307      	str	r3, [sp, #28]
 80057be:	2201      	movs	r2, #1
 80057c0:	e77c      	b.n	80056bc <_strtod_l+0x184>
 80057c2:	f04f 0c00 	mov.w	ip, #0
 80057c6:	f108 0302 	add.w	r3, r8, #2
 80057ca:	931d      	str	r3, [sp, #116]	; 0x74
 80057cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80057d0:	e785      	b.n	80056de <_strtod_l+0x1a6>
 80057d2:	f04f 0c01 	mov.w	ip, #1
 80057d6:	e7f6      	b.n	80057c6 <_strtod_l+0x28e>
 80057d8:	08008990 	.word	0x08008990
 80057dc:	08008710 	.word	0x08008710
 80057e0:	7ff00000 	.word	0x7ff00000
 80057e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057e6:	1c59      	adds	r1, r3, #1
 80057e8:	911d      	str	r1, [sp, #116]	; 0x74
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	2b30      	cmp	r3, #48	; 0x30
 80057ee:	d0f9      	beq.n	80057e4 <_strtod_l+0x2ac>
 80057f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80057f4:	2908      	cmp	r1, #8
 80057f6:	f63f af79 	bhi.w	80056ec <_strtod_l+0x1b4>
 80057fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80057fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005800:	9308      	str	r3, [sp, #32]
 8005802:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005804:	1c59      	adds	r1, r3, #1
 8005806:	911d      	str	r1, [sp, #116]	; 0x74
 8005808:	785b      	ldrb	r3, [r3, #1]
 800580a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800580e:	2e09      	cmp	r6, #9
 8005810:	d937      	bls.n	8005882 <_strtod_l+0x34a>
 8005812:	9e08      	ldr	r6, [sp, #32]
 8005814:	1b89      	subs	r1, r1, r6
 8005816:	2908      	cmp	r1, #8
 8005818:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800581c:	dc02      	bgt.n	8005824 <_strtod_l+0x2ec>
 800581e:	4576      	cmp	r6, lr
 8005820:	bfa8      	it	ge
 8005822:	4676      	movge	r6, lr
 8005824:	f1bc 0f00 	cmp.w	ip, #0
 8005828:	d000      	beq.n	800582c <_strtod_l+0x2f4>
 800582a:	4276      	negs	r6, r6
 800582c:	2d00      	cmp	r5, #0
 800582e:	d14f      	bne.n	80058d0 <_strtod_l+0x398>
 8005830:	9904      	ldr	r1, [sp, #16]
 8005832:	4301      	orrs	r1, r0
 8005834:	f47f aec2 	bne.w	80055bc <_strtod_l+0x84>
 8005838:	2a00      	cmp	r2, #0
 800583a:	f47f aedb 	bne.w	80055f4 <_strtod_l+0xbc>
 800583e:	2b69      	cmp	r3, #105	; 0x69
 8005840:	d027      	beq.n	8005892 <_strtod_l+0x35a>
 8005842:	dc24      	bgt.n	800588e <_strtod_l+0x356>
 8005844:	2b49      	cmp	r3, #73	; 0x49
 8005846:	d024      	beq.n	8005892 <_strtod_l+0x35a>
 8005848:	2b4e      	cmp	r3, #78	; 0x4e
 800584a:	f47f aed3 	bne.w	80055f4 <_strtod_l+0xbc>
 800584e:	499e      	ldr	r1, [pc, #632]	; (8005ac8 <_strtod_l+0x590>)
 8005850:	a81d      	add	r0, sp, #116	; 0x74
 8005852:	f001 f861 	bl	8006918 <__match>
 8005856:	2800      	cmp	r0, #0
 8005858:	f43f aecc 	beq.w	80055f4 <_strtod_l+0xbc>
 800585c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b28      	cmp	r3, #40	; 0x28
 8005862:	d12d      	bne.n	80058c0 <_strtod_l+0x388>
 8005864:	4999      	ldr	r1, [pc, #612]	; (8005acc <_strtod_l+0x594>)
 8005866:	aa20      	add	r2, sp, #128	; 0x80
 8005868:	a81d      	add	r0, sp, #116	; 0x74
 800586a:	f001 f869 	bl	8006940 <__hexnan>
 800586e:	2805      	cmp	r0, #5
 8005870:	d126      	bne.n	80058c0 <_strtod_l+0x388>
 8005872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005874:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005878:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800587c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005880:	e69c      	b.n	80055bc <_strtod_l+0x84>
 8005882:	210a      	movs	r1, #10
 8005884:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005888:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800588c:	e7b9      	b.n	8005802 <_strtod_l+0x2ca>
 800588e:	2b6e      	cmp	r3, #110	; 0x6e
 8005890:	e7db      	b.n	800584a <_strtod_l+0x312>
 8005892:	498f      	ldr	r1, [pc, #572]	; (8005ad0 <_strtod_l+0x598>)
 8005894:	a81d      	add	r0, sp, #116	; 0x74
 8005896:	f001 f83f 	bl	8006918 <__match>
 800589a:	2800      	cmp	r0, #0
 800589c:	f43f aeaa 	beq.w	80055f4 <_strtod_l+0xbc>
 80058a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80058a2:	498c      	ldr	r1, [pc, #560]	; (8005ad4 <_strtod_l+0x59c>)
 80058a4:	3b01      	subs	r3, #1
 80058a6:	a81d      	add	r0, sp, #116	; 0x74
 80058a8:	931d      	str	r3, [sp, #116]	; 0x74
 80058aa:	f001 f835 	bl	8006918 <__match>
 80058ae:	b910      	cbnz	r0, 80058b6 <_strtod_l+0x37e>
 80058b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80058b2:	3301      	adds	r3, #1
 80058b4:	931d      	str	r3, [sp, #116]	; 0x74
 80058b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005ae4 <_strtod_l+0x5ac>
 80058ba:	f04f 0a00 	mov.w	sl, #0
 80058be:	e67d      	b.n	80055bc <_strtod_l+0x84>
 80058c0:	4885      	ldr	r0, [pc, #532]	; (8005ad8 <_strtod_l+0x5a0>)
 80058c2:	f002 f955 	bl	8007b70 <nan>
 80058c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80058ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80058ce:	e675      	b.n	80055bc <_strtod_l+0x84>
 80058d0:	9b07      	ldr	r3, [sp, #28]
 80058d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058d4:	1af3      	subs	r3, r6, r3
 80058d6:	2f00      	cmp	r7, #0
 80058d8:	bf08      	it	eq
 80058da:	462f      	moveq	r7, r5
 80058dc:	2d10      	cmp	r5, #16
 80058de:	9308      	str	r3, [sp, #32]
 80058e0:	46a8      	mov	r8, r5
 80058e2:	bfa8      	it	ge
 80058e4:	f04f 0810 	movge.w	r8, #16
 80058e8:	f7fa fe0c 	bl	8000504 <__aeabi_ui2d>
 80058ec:	2d09      	cmp	r5, #9
 80058ee:	4682      	mov	sl, r0
 80058f0:	468b      	mov	fp, r1
 80058f2:	dd13      	ble.n	800591c <_strtod_l+0x3e4>
 80058f4:	4b79      	ldr	r3, [pc, #484]	; (8005adc <_strtod_l+0x5a4>)
 80058f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80058fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80058fe:	f7fa fe7b 	bl	80005f8 <__aeabi_dmul>
 8005902:	4682      	mov	sl, r0
 8005904:	4648      	mov	r0, r9
 8005906:	468b      	mov	fp, r1
 8005908:	f7fa fdfc 	bl	8000504 <__aeabi_ui2d>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4650      	mov	r0, sl
 8005912:	4659      	mov	r1, fp
 8005914:	f7fa fcba 	bl	800028c <__adddf3>
 8005918:	4682      	mov	sl, r0
 800591a:	468b      	mov	fp, r1
 800591c:	2d0f      	cmp	r5, #15
 800591e:	dc38      	bgt.n	8005992 <_strtod_l+0x45a>
 8005920:	9b08      	ldr	r3, [sp, #32]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f43f ae4a 	beq.w	80055bc <_strtod_l+0x84>
 8005928:	dd24      	ble.n	8005974 <_strtod_l+0x43c>
 800592a:	2b16      	cmp	r3, #22
 800592c:	dc0b      	bgt.n	8005946 <_strtod_l+0x40e>
 800592e:	4d6b      	ldr	r5, [pc, #428]	; (8005adc <_strtod_l+0x5a4>)
 8005930:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005934:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005938:	4652      	mov	r2, sl
 800593a:	465b      	mov	r3, fp
 800593c:	f7fa fe5c 	bl	80005f8 <__aeabi_dmul>
 8005940:	4682      	mov	sl, r0
 8005942:	468b      	mov	fp, r1
 8005944:	e63a      	b.n	80055bc <_strtod_l+0x84>
 8005946:	9a08      	ldr	r2, [sp, #32]
 8005948:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800594c:	4293      	cmp	r3, r2
 800594e:	db20      	blt.n	8005992 <_strtod_l+0x45a>
 8005950:	4c62      	ldr	r4, [pc, #392]	; (8005adc <_strtod_l+0x5a4>)
 8005952:	f1c5 050f 	rsb	r5, r5, #15
 8005956:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800595a:	4652      	mov	r2, sl
 800595c:	465b      	mov	r3, fp
 800595e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005962:	f7fa fe49 	bl	80005f8 <__aeabi_dmul>
 8005966:	9b08      	ldr	r3, [sp, #32]
 8005968:	1b5d      	subs	r5, r3, r5
 800596a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800596e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005972:	e7e3      	b.n	800593c <_strtod_l+0x404>
 8005974:	9b08      	ldr	r3, [sp, #32]
 8005976:	3316      	adds	r3, #22
 8005978:	db0b      	blt.n	8005992 <_strtod_l+0x45a>
 800597a:	9b07      	ldr	r3, [sp, #28]
 800597c:	4a57      	ldr	r2, [pc, #348]	; (8005adc <_strtod_l+0x5a4>)
 800597e:	1b9e      	subs	r6, r3, r6
 8005980:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005984:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005988:	4650      	mov	r0, sl
 800598a:	4659      	mov	r1, fp
 800598c:	f7fa ff5e 	bl	800084c <__aeabi_ddiv>
 8005990:	e7d6      	b.n	8005940 <_strtod_l+0x408>
 8005992:	9b08      	ldr	r3, [sp, #32]
 8005994:	eba5 0808 	sub.w	r8, r5, r8
 8005998:	4498      	add	r8, r3
 800599a:	f1b8 0f00 	cmp.w	r8, #0
 800599e:	dd71      	ble.n	8005a84 <_strtod_l+0x54c>
 80059a0:	f018 030f 	ands.w	r3, r8, #15
 80059a4:	d00a      	beq.n	80059bc <_strtod_l+0x484>
 80059a6:	494d      	ldr	r1, [pc, #308]	; (8005adc <_strtod_l+0x5a4>)
 80059a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80059ac:	4652      	mov	r2, sl
 80059ae:	465b      	mov	r3, fp
 80059b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059b4:	f7fa fe20 	bl	80005f8 <__aeabi_dmul>
 80059b8:	4682      	mov	sl, r0
 80059ba:	468b      	mov	fp, r1
 80059bc:	f038 080f 	bics.w	r8, r8, #15
 80059c0:	d04d      	beq.n	8005a5e <_strtod_l+0x526>
 80059c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80059c6:	dd22      	ble.n	8005a0e <_strtod_l+0x4d6>
 80059c8:	2500      	movs	r5, #0
 80059ca:	462e      	mov	r6, r5
 80059cc:	9509      	str	r5, [sp, #36]	; 0x24
 80059ce:	9507      	str	r5, [sp, #28]
 80059d0:	2322      	movs	r3, #34	; 0x22
 80059d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005ae4 <_strtod_l+0x5ac>
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	f04f 0a00 	mov.w	sl, #0
 80059dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f43f adec 	beq.w	80055bc <_strtod_l+0x84>
 80059e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80059e6:	4620      	mov	r0, r4
 80059e8:	f001 f8a0 	bl	8006b2c <_Bfree>
 80059ec:	9907      	ldr	r1, [sp, #28]
 80059ee:	4620      	mov	r0, r4
 80059f0:	f001 f89c 	bl	8006b2c <_Bfree>
 80059f4:	4631      	mov	r1, r6
 80059f6:	4620      	mov	r0, r4
 80059f8:	f001 f898 	bl	8006b2c <_Bfree>
 80059fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059fe:	4620      	mov	r0, r4
 8005a00:	f001 f894 	bl	8006b2c <_Bfree>
 8005a04:	4629      	mov	r1, r5
 8005a06:	4620      	mov	r0, r4
 8005a08:	f001 f890 	bl	8006b2c <_Bfree>
 8005a0c:	e5d6      	b.n	80055bc <_strtod_l+0x84>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005a14:	4650      	mov	r0, sl
 8005a16:	4659      	mov	r1, fp
 8005a18:	4699      	mov	r9, r3
 8005a1a:	f1b8 0f01 	cmp.w	r8, #1
 8005a1e:	dc21      	bgt.n	8005a64 <_strtod_l+0x52c>
 8005a20:	b10b      	cbz	r3, 8005a26 <_strtod_l+0x4ee>
 8005a22:	4682      	mov	sl, r0
 8005a24:	468b      	mov	fp, r1
 8005a26:	4b2e      	ldr	r3, [pc, #184]	; (8005ae0 <_strtod_l+0x5a8>)
 8005a28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005a2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005a30:	4652      	mov	r2, sl
 8005a32:	465b      	mov	r3, fp
 8005a34:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005a38:	f7fa fdde 	bl	80005f8 <__aeabi_dmul>
 8005a3c:	4b29      	ldr	r3, [pc, #164]	; (8005ae4 <_strtod_l+0x5ac>)
 8005a3e:	460a      	mov	r2, r1
 8005a40:	400b      	ands	r3, r1
 8005a42:	4929      	ldr	r1, [pc, #164]	; (8005ae8 <_strtod_l+0x5b0>)
 8005a44:	428b      	cmp	r3, r1
 8005a46:	4682      	mov	sl, r0
 8005a48:	d8be      	bhi.n	80059c8 <_strtod_l+0x490>
 8005a4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005a4e:	428b      	cmp	r3, r1
 8005a50:	bf86      	itte	hi
 8005a52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005aec <_strtod_l+0x5b4>
 8005a56:	f04f 3aff 	movhi.w	sl, #4294967295
 8005a5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9304      	str	r3, [sp, #16]
 8005a62:	e081      	b.n	8005b68 <_strtod_l+0x630>
 8005a64:	f018 0f01 	tst.w	r8, #1
 8005a68:	d007      	beq.n	8005a7a <_strtod_l+0x542>
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	; (8005ae0 <_strtod_l+0x5a8>)
 8005a6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f7fa fdc0 	bl	80005f8 <__aeabi_dmul>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f109 0901 	add.w	r9, r9, #1
 8005a7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a82:	e7ca      	b.n	8005a1a <_strtod_l+0x4e2>
 8005a84:	d0eb      	beq.n	8005a5e <_strtod_l+0x526>
 8005a86:	f1c8 0800 	rsb	r8, r8, #0
 8005a8a:	f018 020f 	ands.w	r2, r8, #15
 8005a8e:	d00a      	beq.n	8005aa6 <_strtod_l+0x56e>
 8005a90:	4b12      	ldr	r3, [pc, #72]	; (8005adc <_strtod_l+0x5a4>)
 8005a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a96:	4650      	mov	r0, sl
 8005a98:	4659      	mov	r1, fp
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f7fa fed5 	bl	800084c <__aeabi_ddiv>
 8005aa2:	4682      	mov	sl, r0
 8005aa4:	468b      	mov	fp, r1
 8005aa6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005aaa:	d0d8      	beq.n	8005a5e <_strtod_l+0x526>
 8005aac:	f1b8 0f1f 	cmp.w	r8, #31
 8005ab0:	dd1e      	ble.n	8005af0 <_strtod_l+0x5b8>
 8005ab2:	2500      	movs	r5, #0
 8005ab4:	462e      	mov	r6, r5
 8005ab6:	9509      	str	r5, [sp, #36]	; 0x24
 8005ab8:	9507      	str	r5, [sp, #28]
 8005aba:	2322      	movs	r3, #34	; 0x22
 8005abc:	f04f 0a00 	mov.w	sl, #0
 8005ac0:	f04f 0b00 	mov.w	fp, #0
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	e789      	b.n	80059dc <_strtod_l+0x4a4>
 8005ac8:	0800870d 	.word	0x0800870d
 8005acc:	08008724 	.word	0x08008724
 8005ad0:	08008704 	.word	0x08008704
 8005ad4:	08008707 	.word	0x08008707
 8005ad8:	08008813 	.word	0x08008813
 8005adc:	08008a30 	.word	0x08008a30
 8005ae0:	08008a08 	.word	0x08008a08
 8005ae4:	7ff00000 	.word	0x7ff00000
 8005ae8:	7ca00000 	.word	0x7ca00000
 8005aec:	7fefffff 	.word	0x7fefffff
 8005af0:	f018 0310 	ands.w	r3, r8, #16
 8005af4:	bf18      	it	ne
 8005af6:	236a      	movne	r3, #106	; 0x6a
 8005af8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005eb0 <_strtod_l+0x978>
 8005afc:	9304      	str	r3, [sp, #16]
 8005afe:	4650      	mov	r0, sl
 8005b00:	4659      	mov	r1, fp
 8005b02:	2300      	movs	r3, #0
 8005b04:	f018 0f01 	tst.w	r8, #1
 8005b08:	d004      	beq.n	8005b14 <_strtod_l+0x5dc>
 8005b0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b0e:	f7fa fd73 	bl	80005f8 <__aeabi_dmul>
 8005b12:	2301      	movs	r3, #1
 8005b14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005b18:	f109 0908 	add.w	r9, r9, #8
 8005b1c:	d1f2      	bne.n	8005b04 <_strtod_l+0x5cc>
 8005b1e:	b10b      	cbz	r3, 8005b24 <_strtod_l+0x5ec>
 8005b20:	4682      	mov	sl, r0
 8005b22:	468b      	mov	fp, r1
 8005b24:	9b04      	ldr	r3, [sp, #16]
 8005b26:	b1bb      	cbz	r3, 8005b58 <_strtod_l+0x620>
 8005b28:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005b2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	4659      	mov	r1, fp
 8005b34:	dd10      	ble.n	8005b58 <_strtod_l+0x620>
 8005b36:	2b1f      	cmp	r3, #31
 8005b38:	f340 8128 	ble.w	8005d8c <_strtod_l+0x854>
 8005b3c:	2b34      	cmp	r3, #52	; 0x34
 8005b3e:	bfde      	ittt	le
 8005b40:	3b20      	suble	r3, #32
 8005b42:	f04f 32ff 	movle.w	r2, #4294967295
 8005b46:	fa02 f303 	lslle.w	r3, r2, r3
 8005b4a:	f04f 0a00 	mov.w	sl, #0
 8005b4e:	bfcc      	ite	gt
 8005b50:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005b54:	ea03 0b01 	andle.w	fp, r3, r1
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4650      	mov	r0, sl
 8005b5e:	4659      	mov	r1, fp
 8005b60:	f7fa ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d1a4      	bne.n	8005ab2 <_strtod_l+0x57a>
 8005b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b6e:	462b      	mov	r3, r5
 8005b70:	463a      	mov	r2, r7
 8005b72:	4620      	mov	r0, r4
 8005b74:	f001 f846 	bl	8006c04 <__s2b>
 8005b78:	9009      	str	r0, [sp, #36]	; 0x24
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	f43f af24 	beq.w	80059c8 <_strtod_l+0x490>
 8005b80:	9b07      	ldr	r3, [sp, #28]
 8005b82:	1b9e      	subs	r6, r3, r6
 8005b84:	9b08      	ldr	r3, [sp, #32]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfb4      	ite	lt
 8005b8a:	4633      	movlt	r3, r6
 8005b8c:	2300      	movge	r3, #0
 8005b8e:	9310      	str	r3, [sp, #64]	; 0x40
 8005b90:	9b08      	ldr	r3, [sp, #32]
 8005b92:	2500      	movs	r5, #0
 8005b94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005b98:	9318      	str	r3, [sp, #96]	; 0x60
 8005b9a:	462e      	mov	r6, r5
 8005b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	6859      	ldr	r1, [r3, #4]
 8005ba2:	f000 ff83 	bl	8006aac <_Balloc>
 8005ba6:	9007      	str	r0, [sp, #28]
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f43f af11 	beq.w	80059d0 <_strtod_l+0x498>
 8005bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	3202      	adds	r2, #2
 8005bb4:	f103 010c 	add.w	r1, r3, #12
 8005bb8:	0092      	lsls	r2, r2, #2
 8005bba:	300c      	adds	r0, #12
 8005bbc:	f7ff fc68 	bl	8005490 <memcpy>
 8005bc0:	ec4b ab10 	vmov	d0, sl, fp
 8005bc4:	aa20      	add	r2, sp, #128	; 0x80
 8005bc6:	a91f      	add	r1, sp, #124	; 0x7c
 8005bc8:	4620      	mov	r0, r4
 8005bca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005bce:	f001 fb55 	bl	800727c <__d2b>
 8005bd2:	901e      	str	r0, [sp, #120]	; 0x78
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	f43f aefb 	beq.w	80059d0 <_strtod_l+0x498>
 8005bda:	2101      	movs	r1, #1
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f001 f8ab 	bl	8006d38 <__i2b>
 8005be2:	4606      	mov	r6, r0
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f43f aef3 	beq.w	80059d0 <_strtod_l+0x498>
 8005bea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bec:	9904      	ldr	r1, [sp, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfab      	itete	ge
 8005bf2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005bf4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005bf6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005bf8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005bfc:	bfac      	ite	ge
 8005bfe:	eb03 0902 	addge.w	r9, r3, r2
 8005c02:	1ad7      	sublt	r7, r2, r3
 8005c04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c06:	eba3 0801 	sub.w	r8, r3, r1
 8005c0a:	4490      	add	r8, r2
 8005c0c:	4ba3      	ldr	r3, [pc, #652]	; (8005e9c <_strtod_l+0x964>)
 8005c0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c12:	4598      	cmp	r8, r3
 8005c14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005c18:	f280 80cc 	bge.w	8005db4 <_strtod_l+0x87c>
 8005c1c:	eba3 0308 	sub.w	r3, r3, r8
 8005c20:	2b1f      	cmp	r3, #31
 8005c22:	eba2 0203 	sub.w	r2, r2, r3
 8005c26:	f04f 0101 	mov.w	r1, #1
 8005c2a:	f300 80b6 	bgt.w	8005d9a <_strtod_l+0x862>
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	9311      	str	r3, [sp, #68]	; 0x44
 8005c34:	2300      	movs	r3, #0
 8005c36:	930c      	str	r3, [sp, #48]	; 0x30
 8005c38:	eb09 0802 	add.w	r8, r9, r2
 8005c3c:	9b04      	ldr	r3, [sp, #16]
 8005c3e:	45c1      	cmp	r9, r8
 8005c40:	4417      	add	r7, r2
 8005c42:	441f      	add	r7, r3
 8005c44:	464b      	mov	r3, r9
 8005c46:	bfa8      	it	ge
 8005c48:	4643      	movge	r3, r8
 8005c4a:	42bb      	cmp	r3, r7
 8005c4c:	bfa8      	it	ge
 8005c4e:	463b      	movge	r3, r7
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bfc2      	ittt	gt
 8005c54:	eba8 0803 	subgt.w	r8, r8, r3
 8005c58:	1aff      	subgt	r7, r7, r3
 8005c5a:	eba9 0903 	subgt.w	r9, r9, r3
 8005c5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	dd17      	ble.n	8005c94 <_strtod_l+0x75c>
 8005c64:	4631      	mov	r1, r6
 8005c66:	461a      	mov	r2, r3
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f001 f921 	bl	8006eb0 <__pow5mult>
 8005c6e:	4606      	mov	r6, r0
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f43f aead 	beq.w	80059d0 <_strtod_l+0x498>
 8005c76:	4601      	mov	r1, r0
 8005c78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f001 f872 	bl	8006d64 <__multiply>
 8005c80:	900f      	str	r0, [sp, #60]	; 0x3c
 8005c82:	2800      	cmp	r0, #0
 8005c84:	f43f aea4 	beq.w	80059d0 <_strtod_l+0x498>
 8005c88:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 ff4e 	bl	8006b2c <_Bfree>
 8005c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c92:	931e      	str	r3, [sp, #120]	; 0x78
 8005c94:	f1b8 0f00 	cmp.w	r8, #0
 8005c98:	f300 8091 	bgt.w	8005dbe <_strtod_l+0x886>
 8005c9c:	9b08      	ldr	r3, [sp, #32]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	dd08      	ble.n	8005cb4 <_strtod_l+0x77c>
 8005ca2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005ca4:	9907      	ldr	r1, [sp, #28]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f001 f902 	bl	8006eb0 <__pow5mult>
 8005cac:	9007      	str	r0, [sp, #28]
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f43f ae8e 	beq.w	80059d0 <_strtod_l+0x498>
 8005cb4:	2f00      	cmp	r7, #0
 8005cb6:	dd08      	ble.n	8005cca <_strtod_l+0x792>
 8005cb8:	9907      	ldr	r1, [sp, #28]
 8005cba:	463a      	mov	r2, r7
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f001 f951 	bl	8006f64 <__lshift>
 8005cc2:	9007      	str	r0, [sp, #28]
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	f43f ae83 	beq.w	80059d0 <_strtod_l+0x498>
 8005cca:	f1b9 0f00 	cmp.w	r9, #0
 8005cce:	dd08      	ble.n	8005ce2 <_strtod_l+0x7aa>
 8005cd0:	4631      	mov	r1, r6
 8005cd2:	464a      	mov	r2, r9
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f001 f945 	bl	8006f64 <__lshift>
 8005cda:	4606      	mov	r6, r0
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f43f ae77 	beq.w	80059d0 <_strtod_l+0x498>
 8005ce2:	9a07      	ldr	r2, [sp, #28]
 8005ce4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f001 f9c4 	bl	8007074 <__mdiff>
 8005cec:	4605      	mov	r5, r0
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f43f ae6e 	beq.w	80059d0 <_strtod_l+0x498>
 8005cf4:	68c3      	ldr	r3, [r0, #12]
 8005cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60c3      	str	r3, [r0, #12]
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	f001 f99d 	bl	800703c <__mcmp>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	da65      	bge.n	8005dd2 <_strtod_l+0x89a>
 8005d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d08:	ea53 030a 	orrs.w	r3, r3, sl
 8005d0c:	f040 8087 	bne.w	8005e1e <_strtod_l+0x8e6>
 8005d10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f040 8082 	bne.w	8005e1e <_strtod_l+0x8e6>
 8005d1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d1e:	0d1b      	lsrs	r3, r3, #20
 8005d20:	051b      	lsls	r3, r3, #20
 8005d22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005d26:	d97a      	bls.n	8005e1e <_strtod_l+0x8e6>
 8005d28:	696b      	ldr	r3, [r5, #20]
 8005d2a:	b913      	cbnz	r3, 8005d32 <_strtod_l+0x7fa>
 8005d2c:	692b      	ldr	r3, [r5, #16]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	dd75      	ble.n	8005e1e <_strtod_l+0x8e6>
 8005d32:	4629      	mov	r1, r5
 8005d34:	2201      	movs	r2, #1
 8005d36:	4620      	mov	r0, r4
 8005d38:	f001 f914 	bl	8006f64 <__lshift>
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4605      	mov	r5, r0
 8005d40:	f001 f97c 	bl	800703c <__mcmp>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	dd6a      	ble.n	8005e1e <_strtod_l+0x8e6>
 8005d48:	9904      	ldr	r1, [sp, #16]
 8005d4a:	4a55      	ldr	r2, [pc, #340]	; (8005ea0 <_strtod_l+0x968>)
 8005d4c:	465b      	mov	r3, fp
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	f000 8085 	beq.w	8005e5e <_strtod_l+0x926>
 8005d54:	ea02 010b 	and.w	r1, r2, fp
 8005d58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005d5c:	dc7f      	bgt.n	8005e5e <_strtod_l+0x926>
 8005d5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005d62:	f77f aeaa 	ble.w	8005aba <_strtod_l+0x582>
 8005d66:	4a4f      	ldr	r2, [pc, #316]	; (8005ea4 <_strtod_l+0x96c>)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005d6e:	4650      	mov	r0, sl
 8005d70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005d74:	4659      	mov	r1, fp
 8005d76:	f7fa fc3f 	bl	80005f8 <__aeabi_dmul>
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4303      	orrs	r3, r0
 8005d7e:	bf08      	it	eq
 8005d80:	2322      	moveq	r3, #34	; 0x22
 8005d82:	4682      	mov	sl, r0
 8005d84:	468b      	mov	fp, r1
 8005d86:	bf08      	it	eq
 8005d88:	6023      	streq	r3, [r4, #0]
 8005d8a:	e62b      	b.n	80059e4 <_strtod_l+0x4ac>
 8005d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	ea03 0a0a 	and.w	sl, r3, sl
 8005d98:	e6de      	b.n	8005b58 <_strtod_l+0x620>
 8005d9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005d9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005da2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005da6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005daa:	fa01 f308 	lsl.w	r3, r1, r8
 8005dae:	930c      	str	r3, [sp, #48]	; 0x30
 8005db0:	9111      	str	r1, [sp, #68]	; 0x44
 8005db2:	e741      	b.n	8005c38 <_strtod_l+0x700>
 8005db4:	2300      	movs	r3, #0
 8005db6:	930c      	str	r3, [sp, #48]	; 0x30
 8005db8:	2301      	movs	r3, #1
 8005dba:	9311      	str	r3, [sp, #68]	; 0x44
 8005dbc:	e73c      	b.n	8005c38 <_strtod_l+0x700>
 8005dbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f001 f8ce 	bl	8006f64 <__lshift>
 8005dc8:	901e      	str	r0, [sp, #120]	; 0x78
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	f47f af66 	bne.w	8005c9c <_strtod_l+0x764>
 8005dd0:	e5fe      	b.n	80059d0 <_strtod_l+0x498>
 8005dd2:	465f      	mov	r7, fp
 8005dd4:	d16e      	bne.n	8005eb4 <_strtod_l+0x97c>
 8005dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ddc:	b342      	cbz	r2, 8005e30 <_strtod_l+0x8f8>
 8005dde:	4a32      	ldr	r2, [pc, #200]	; (8005ea8 <_strtod_l+0x970>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d128      	bne.n	8005e36 <_strtod_l+0x8fe>
 8005de4:	9b04      	ldr	r3, [sp, #16]
 8005de6:	4650      	mov	r0, sl
 8005de8:	b1eb      	cbz	r3, 8005e26 <_strtod_l+0x8ee>
 8005dea:	4a2d      	ldr	r2, [pc, #180]	; (8005ea0 <_strtod_l+0x968>)
 8005dec:	403a      	ands	r2, r7
 8005dee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005df2:	f04f 31ff 	mov.w	r1, #4294967295
 8005df6:	d819      	bhi.n	8005e2c <_strtod_l+0x8f4>
 8005df8:	0d12      	lsrs	r2, r2, #20
 8005dfa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005e02:	4298      	cmp	r0, r3
 8005e04:	d117      	bne.n	8005e36 <_strtod_l+0x8fe>
 8005e06:	4b29      	ldr	r3, [pc, #164]	; (8005eac <_strtod_l+0x974>)
 8005e08:	429f      	cmp	r7, r3
 8005e0a:	d102      	bne.n	8005e12 <_strtod_l+0x8da>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f43f addf 	beq.w	80059d0 <_strtod_l+0x498>
 8005e12:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <_strtod_l+0x968>)
 8005e14:	403b      	ands	r3, r7
 8005e16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005e1a:	f04f 0a00 	mov.w	sl, #0
 8005e1e:	9b04      	ldr	r3, [sp, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1a0      	bne.n	8005d66 <_strtod_l+0x82e>
 8005e24:	e5de      	b.n	80059e4 <_strtod_l+0x4ac>
 8005e26:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2a:	e7ea      	b.n	8005e02 <_strtod_l+0x8ca>
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	e7e8      	b.n	8005e02 <_strtod_l+0x8ca>
 8005e30:	ea53 030a 	orrs.w	r3, r3, sl
 8005e34:	d088      	beq.n	8005d48 <_strtod_l+0x810>
 8005e36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e38:	b1db      	cbz	r3, 8005e72 <_strtod_l+0x93a>
 8005e3a:	423b      	tst	r3, r7
 8005e3c:	d0ef      	beq.n	8005e1e <_strtod_l+0x8e6>
 8005e3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e40:	9a04      	ldr	r2, [sp, #16]
 8005e42:	4650      	mov	r0, sl
 8005e44:	4659      	mov	r1, fp
 8005e46:	b1c3      	cbz	r3, 8005e7a <_strtod_l+0x942>
 8005e48:	f7ff fb58 	bl	80054fc <sulp>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e54:	f7fa fa1a 	bl	800028c <__adddf3>
 8005e58:	4682      	mov	sl, r0
 8005e5a:	468b      	mov	fp, r1
 8005e5c:	e7df      	b.n	8005e1e <_strtod_l+0x8e6>
 8005e5e:	4013      	ands	r3, r2
 8005e60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005e64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005e68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005e6c:	f04f 3aff 	mov.w	sl, #4294967295
 8005e70:	e7d5      	b.n	8005e1e <_strtod_l+0x8e6>
 8005e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e74:	ea13 0f0a 	tst.w	r3, sl
 8005e78:	e7e0      	b.n	8005e3c <_strtod_l+0x904>
 8005e7a:	f7ff fb3f 	bl	80054fc <sulp>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e86:	f7fa f9ff 	bl	8000288 <__aeabi_dsub>
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	4682      	mov	sl, r0
 8005e90:	468b      	mov	fp, r1
 8005e92:	f7fa fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d0c1      	beq.n	8005e1e <_strtod_l+0x8e6>
 8005e9a:	e60e      	b.n	8005aba <_strtod_l+0x582>
 8005e9c:	fffffc02 	.word	0xfffffc02
 8005ea0:	7ff00000 	.word	0x7ff00000
 8005ea4:	39500000 	.word	0x39500000
 8005ea8:	000fffff 	.word	0x000fffff
 8005eac:	7fefffff 	.word	0x7fefffff
 8005eb0:	08008738 	.word	0x08008738
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f001 fa3c 	bl	8007334 <__ratio>
 8005ebc:	ec59 8b10 	vmov	r8, r9, d0
 8005ec0:	ee10 0a10 	vmov	r0, s0
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005eca:	4649      	mov	r1, r9
 8005ecc:	f7fa fe10 	bl	8000af0 <__aeabi_dcmple>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d07c      	beq.n	8005fce <_strtod_l+0xa96>
 8005ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d04c      	beq.n	8005f74 <_strtod_l+0xa3c>
 8005eda:	4b95      	ldr	r3, [pc, #596]	; (8006130 <_strtod_l+0xbf8>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005ee2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006130 <_strtod_l+0xbf8>
 8005ee6:	f04f 0800 	mov.w	r8, #0
 8005eea:	4b92      	ldr	r3, [pc, #584]	; (8006134 <_strtod_l+0xbfc>)
 8005eec:	403b      	ands	r3, r7
 8005eee:	9311      	str	r3, [sp, #68]	; 0x44
 8005ef0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ef2:	4b91      	ldr	r3, [pc, #580]	; (8006138 <_strtod_l+0xc00>)
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	f040 80b2 	bne.w	800605e <_strtod_l+0xb26>
 8005efa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f02:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005f06:	ec4b ab10 	vmov	d0, sl, fp
 8005f0a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005f0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005f12:	f001 f937 	bl	8007184 <__ulp>
 8005f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005f1a:	ec53 2b10 	vmov	r2, r3, d0
 8005f1e:	f7fa fb6b 	bl	80005f8 <__aeabi_dmul>
 8005f22:	4652      	mov	r2, sl
 8005f24:	465b      	mov	r3, fp
 8005f26:	f7fa f9b1 	bl	800028c <__adddf3>
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4981      	ldr	r1, [pc, #516]	; (8006134 <_strtod_l+0xbfc>)
 8005f2e:	4a83      	ldr	r2, [pc, #524]	; (800613c <_strtod_l+0xc04>)
 8005f30:	4019      	ands	r1, r3
 8005f32:	4291      	cmp	r1, r2
 8005f34:	4682      	mov	sl, r0
 8005f36:	d95e      	bls.n	8005ff6 <_strtod_l+0xabe>
 8005f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f3a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d103      	bne.n	8005f4a <_strtod_l+0xa12>
 8005f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f44:	3301      	adds	r3, #1
 8005f46:	f43f ad43 	beq.w	80059d0 <_strtod_l+0x498>
 8005f4a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006148 <_strtod_l+0xc10>
 8005f4e:	f04f 3aff 	mov.w	sl, #4294967295
 8005f52:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 fde9 	bl	8006b2c <_Bfree>
 8005f5a:	9907      	ldr	r1, [sp, #28]
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f000 fde5 	bl	8006b2c <_Bfree>
 8005f62:	4631      	mov	r1, r6
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 fde1 	bl	8006b2c <_Bfree>
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f000 fddd 	bl	8006b2c <_Bfree>
 8005f72:	e613      	b.n	8005b9c <_strtod_l+0x664>
 8005f74:	f1ba 0f00 	cmp.w	sl, #0
 8005f78:	d11b      	bne.n	8005fb2 <_strtod_l+0xa7a>
 8005f7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f7e:	b9f3      	cbnz	r3, 8005fbe <_strtod_l+0xa86>
 8005f80:	4b6b      	ldr	r3, [pc, #428]	; (8006130 <_strtod_l+0xbf8>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	4640      	mov	r0, r8
 8005f86:	4649      	mov	r1, r9
 8005f88:	f7fa fda8 	bl	8000adc <__aeabi_dcmplt>
 8005f8c:	b9d0      	cbnz	r0, 8005fc4 <_strtod_l+0xa8c>
 8005f8e:	4640      	mov	r0, r8
 8005f90:	4649      	mov	r1, r9
 8005f92:	4b6b      	ldr	r3, [pc, #428]	; (8006140 <_strtod_l+0xc08>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	f7fa fb2f 	bl	80005f8 <__aeabi_dmul>
 8005f9a:	4680      	mov	r8, r0
 8005f9c:	4689      	mov	r9, r1
 8005f9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005fa2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8005fa6:	931b      	str	r3, [sp, #108]	; 0x6c
 8005fa8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005fac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005fb0:	e79b      	b.n	8005eea <_strtod_l+0x9b2>
 8005fb2:	f1ba 0f01 	cmp.w	sl, #1
 8005fb6:	d102      	bne.n	8005fbe <_strtod_l+0xa86>
 8005fb8:	2f00      	cmp	r7, #0
 8005fba:	f43f ad7e 	beq.w	8005aba <_strtod_l+0x582>
 8005fbe:	4b61      	ldr	r3, [pc, #388]	; (8006144 <_strtod_l+0xc0c>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	e78c      	b.n	8005ede <_strtod_l+0x9a6>
 8005fc4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006140 <_strtod_l+0xc08>
 8005fc8:	f04f 0800 	mov.w	r8, #0
 8005fcc:	e7e7      	b.n	8005f9e <_strtod_l+0xa66>
 8005fce:	4b5c      	ldr	r3, [pc, #368]	; (8006140 <_strtod_l+0xc08>)
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f7fa fb0f 	bl	80005f8 <__aeabi_dmul>
 8005fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fdc:	4680      	mov	r8, r0
 8005fde:	4689      	mov	r9, r1
 8005fe0:	b933      	cbnz	r3, 8005ff0 <_strtod_l+0xab8>
 8005fe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fe6:	9012      	str	r0, [sp, #72]	; 0x48
 8005fe8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005fea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005fee:	e7dd      	b.n	8005fac <_strtod_l+0xa74>
 8005ff0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8005ff4:	e7f9      	b.n	8005fea <_strtod_l+0xab2>
 8005ff6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005ffa:	9b04      	ldr	r3, [sp, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1a8      	bne.n	8005f52 <_strtod_l+0xa1a>
 8006000:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006004:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006006:	0d1b      	lsrs	r3, r3, #20
 8006008:	051b      	lsls	r3, r3, #20
 800600a:	429a      	cmp	r2, r3
 800600c:	d1a1      	bne.n	8005f52 <_strtod_l+0xa1a>
 800600e:	4640      	mov	r0, r8
 8006010:	4649      	mov	r1, r9
 8006012:	f7fa fe01 	bl	8000c18 <__aeabi_d2lz>
 8006016:	f7fa fac1 	bl	800059c <__aeabi_l2d>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4640      	mov	r0, r8
 8006020:	4649      	mov	r1, r9
 8006022:	f7fa f931 	bl	8000288 <__aeabi_dsub>
 8006026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006028:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800602c:	ea43 030a 	orr.w	r3, r3, sl
 8006030:	4313      	orrs	r3, r2
 8006032:	4680      	mov	r8, r0
 8006034:	4689      	mov	r9, r1
 8006036:	d053      	beq.n	80060e0 <_strtod_l+0xba8>
 8006038:	a335      	add	r3, pc, #212	; (adr r3, 8006110 <_strtod_l+0xbd8>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	f7fa fd4d 	bl	8000adc <__aeabi_dcmplt>
 8006042:	2800      	cmp	r0, #0
 8006044:	f47f acce 	bne.w	80059e4 <_strtod_l+0x4ac>
 8006048:	a333      	add	r3, pc, #204	; (adr r3, 8006118 <_strtod_l+0xbe0>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	4640      	mov	r0, r8
 8006050:	4649      	mov	r1, r9
 8006052:	f7fa fd61 	bl	8000b18 <__aeabi_dcmpgt>
 8006056:	2800      	cmp	r0, #0
 8006058:	f43f af7b 	beq.w	8005f52 <_strtod_l+0xa1a>
 800605c:	e4c2      	b.n	80059e4 <_strtod_l+0x4ac>
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	b333      	cbz	r3, 80060b0 <_strtod_l+0xb78>
 8006062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006064:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006068:	d822      	bhi.n	80060b0 <_strtod_l+0xb78>
 800606a:	a32d      	add	r3, pc, #180	; (adr r3, 8006120 <_strtod_l+0xbe8>)
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	4640      	mov	r0, r8
 8006072:	4649      	mov	r1, r9
 8006074:	f7fa fd3c 	bl	8000af0 <__aeabi_dcmple>
 8006078:	b1a0      	cbz	r0, 80060a4 <_strtod_l+0xb6c>
 800607a:	4649      	mov	r1, r9
 800607c:	4640      	mov	r0, r8
 800607e:	f7fa fd93 	bl	8000ba8 <__aeabi_d2uiz>
 8006082:	2801      	cmp	r0, #1
 8006084:	bf38      	it	cc
 8006086:	2001      	movcc	r0, #1
 8006088:	f7fa fa3c 	bl	8000504 <__aeabi_ui2d>
 800608c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800608e:	4680      	mov	r8, r0
 8006090:	4689      	mov	r9, r1
 8006092:	bb13      	cbnz	r3, 80060da <_strtod_l+0xba2>
 8006094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006098:	9014      	str	r0, [sp, #80]	; 0x50
 800609a:	9315      	str	r3, [sp, #84]	; 0x54
 800609c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80060a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80060a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	930d      	str	r3, [sp, #52]	; 0x34
 80060b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80060b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80060bc:	f001 f862 	bl	8007184 <__ulp>
 80060c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060c4:	ec53 2b10 	vmov	r2, r3, d0
 80060c8:	f7fa fa96 	bl	80005f8 <__aeabi_dmul>
 80060cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060d0:	f7fa f8dc 	bl	800028c <__adddf3>
 80060d4:	4682      	mov	sl, r0
 80060d6:	468b      	mov	fp, r1
 80060d8:	e78f      	b.n	8005ffa <_strtod_l+0xac2>
 80060da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80060de:	e7dd      	b.n	800609c <_strtod_l+0xb64>
 80060e0:	a311      	add	r3, pc, #68	; (adr r3, 8006128 <_strtod_l+0xbf0>)
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f7fa fcf9 	bl	8000adc <__aeabi_dcmplt>
 80060ea:	e7b4      	b.n	8006056 <_strtod_l+0xb1e>
 80060ec:	2300      	movs	r3, #0
 80060ee:	930e      	str	r3, [sp, #56]	; 0x38
 80060f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80060f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	f7ff ba65 	b.w	80055c4 <_strtod_l+0x8c>
 80060fa:	2b65      	cmp	r3, #101	; 0x65
 80060fc:	f43f ab5d 	beq.w	80057ba <_strtod_l+0x282>
 8006100:	2b45      	cmp	r3, #69	; 0x45
 8006102:	f43f ab5a 	beq.w	80057ba <_strtod_l+0x282>
 8006106:	2201      	movs	r2, #1
 8006108:	f7ff bb92 	b.w	8005830 <_strtod_l+0x2f8>
 800610c:	f3af 8000 	nop.w
 8006110:	94a03595 	.word	0x94a03595
 8006114:	3fdfffff 	.word	0x3fdfffff
 8006118:	35afe535 	.word	0x35afe535
 800611c:	3fe00000 	.word	0x3fe00000
 8006120:	ffc00000 	.word	0xffc00000
 8006124:	41dfffff 	.word	0x41dfffff
 8006128:	94a03595 	.word	0x94a03595
 800612c:	3fcfffff 	.word	0x3fcfffff
 8006130:	3ff00000 	.word	0x3ff00000
 8006134:	7ff00000 	.word	0x7ff00000
 8006138:	7fe00000 	.word	0x7fe00000
 800613c:	7c9fffff 	.word	0x7c9fffff
 8006140:	3fe00000 	.word	0x3fe00000
 8006144:	bff00000 	.word	0xbff00000
 8006148:	7fefffff 	.word	0x7fefffff

0800614c <strtod>:
 800614c:	460a      	mov	r2, r1
 800614e:	4601      	mov	r1, r0
 8006150:	4802      	ldr	r0, [pc, #8]	; (800615c <strtod+0x10>)
 8006152:	4b03      	ldr	r3, [pc, #12]	; (8006160 <strtod+0x14>)
 8006154:	6800      	ldr	r0, [r0, #0]
 8006156:	f7ff b9ef 	b.w	8005538 <_strtod_l>
 800615a:	bf00      	nop
 800615c:	2000000c 	.word	0x2000000c
 8006160:	20000074 	.word	0x20000074

08006164 <strtok>:
 8006164:	4b16      	ldr	r3, [pc, #88]	; (80061c0 <strtok+0x5c>)
 8006166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006168:	681e      	ldr	r6, [r3, #0]
 800616a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800616c:	4605      	mov	r5, r0
 800616e:	b9fc      	cbnz	r4, 80061b0 <strtok+0x4c>
 8006170:	2050      	movs	r0, #80	; 0x50
 8006172:	9101      	str	r1, [sp, #4]
 8006174:	f000 fc80 	bl	8006a78 <malloc>
 8006178:	9901      	ldr	r1, [sp, #4]
 800617a:	65b0      	str	r0, [r6, #88]	; 0x58
 800617c:	4602      	mov	r2, r0
 800617e:	b920      	cbnz	r0, 800618a <strtok+0x26>
 8006180:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <strtok+0x60>)
 8006182:	4811      	ldr	r0, [pc, #68]	; (80061c8 <strtok+0x64>)
 8006184:	2157      	movs	r1, #87	; 0x57
 8006186:	f000 f8d7 	bl	8006338 <__assert_func>
 800618a:	e9c0 4400 	strd	r4, r4, [r0]
 800618e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006192:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006196:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800619a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800619e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80061a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80061a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80061aa:	6184      	str	r4, [r0, #24]
 80061ac:	7704      	strb	r4, [r0, #28]
 80061ae:	6244      	str	r4, [r0, #36]	; 0x24
 80061b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80061b2:	2301      	movs	r3, #1
 80061b4:	4628      	mov	r0, r5
 80061b6:	b002      	add	sp, #8
 80061b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80061bc:	f000 b806 	b.w	80061cc <__strtok_r>
 80061c0:	2000000c 	.word	0x2000000c
 80061c4:	08008760 	.word	0x08008760
 80061c8:	08008777 	.word	0x08008777

080061cc <__strtok_r>:
 80061cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ce:	b908      	cbnz	r0, 80061d4 <__strtok_r+0x8>
 80061d0:	6810      	ldr	r0, [r2, #0]
 80061d2:	b188      	cbz	r0, 80061f8 <__strtok_r+0x2c>
 80061d4:	4604      	mov	r4, r0
 80061d6:	4620      	mov	r0, r4
 80061d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80061dc:	460f      	mov	r7, r1
 80061de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80061e2:	b91e      	cbnz	r6, 80061ec <__strtok_r+0x20>
 80061e4:	b965      	cbnz	r5, 8006200 <__strtok_r+0x34>
 80061e6:	6015      	str	r5, [r2, #0]
 80061e8:	4628      	mov	r0, r5
 80061ea:	e005      	b.n	80061f8 <__strtok_r+0x2c>
 80061ec:	42b5      	cmp	r5, r6
 80061ee:	d1f6      	bne.n	80061de <__strtok_r+0x12>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f0      	bne.n	80061d6 <__strtok_r+0xa>
 80061f4:	6014      	str	r4, [r2, #0]
 80061f6:	7003      	strb	r3, [r0, #0]
 80061f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061fa:	461c      	mov	r4, r3
 80061fc:	e00c      	b.n	8006218 <__strtok_r+0x4c>
 80061fe:	b915      	cbnz	r5, 8006206 <__strtok_r+0x3a>
 8006200:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006204:	460e      	mov	r6, r1
 8006206:	f816 5b01 	ldrb.w	r5, [r6], #1
 800620a:	42ab      	cmp	r3, r5
 800620c:	d1f7      	bne.n	80061fe <__strtok_r+0x32>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f3      	beq.n	80061fa <__strtok_r+0x2e>
 8006212:	2300      	movs	r3, #0
 8006214:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006218:	6014      	str	r4, [r2, #0]
 800621a:	e7ed      	b.n	80061f8 <__strtok_r+0x2c>

0800621c <_strtol_l.isra.0>:
 800621c:	2b01      	cmp	r3, #1
 800621e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006222:	d001      	beq.n	8006228 <_strtol_l.isra.0+0xc>
 8006224:	2b24      	cmp	r3, #36	; 0x24
 8006226:	d906      	bls.n	8006236 <_strtol_l.isra.0+0x1a>
 8006228:	f7ff f908 	bl	800543c <__errno>
 800622c:	2316      	movs	r3, #22
 800622e:	6003      	str	r3, [r0, #0]
 8006230:	2000      	movs	r0, #0
 8006232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006236:	4f3a      	ldr	r7, [pc, #232]	; (8006320 <_strtol_l.isra.0+0x104>)
 8006238:	468e      	mov	lr, r1
 800623a:	4676      	mov	r6, lr
 800623c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006240:	5de5      	ldrb	r5, [r4, r7]
 8006242:	f015 0508 	ands.w	r5, r5, #8
 8006246:	d1f8      	bne.n	800623a <_strtol_l.isra.0+0x1e>
 8006248:	2c2d      	cmp	r4, #45	; 0x2d
 800624a:	d134      	bne.n	80062b6 <_strtol_l.isra.0+0x9a>
 800624c:	f89e 4000 	ldrb.w	r4, [lr]
 8006250:	f04f 0801 	mov.w	r8, #1
 8006254:	f106 0e02 	add.w	lr, r6, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d05c      	beq.n	8006316 <_strtol_l.isra.0+0xfa>
 800625c:	2b10      	cmp	r3, #16
 800625e:	d10c      	bne.n	800627a <_strtol_l.isra.0+0x5e>
 8006260:	2c30      	cmp	r4, #48	; 0x30
 8006262:	d10a      	bne.n	800627a <_strtol_l.isra.0+0x5e>
 8006264:	f89e 4000 	ldrb.w	r4, [lr]
 8006268:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800626c:	2c58      	cmp	r4, #88	; 0x58
 800626e:	d14d      	bne.n	800630c <_strtol_l.isra.0+0xf0>
 8006270:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006274:	2310      	movs	r3, #16
 8006276:	f10e 0e02 	add.w	lr, lr, #2
 800627a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800627e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006282:	2600      	movs	r6, #0
 8006284:	fbbc f9f3 	udiv	r9, ip, r3
 8006288:	4635      	mov	r5, r6
 800628a:	fb03 ca19 	mls	sl, r3, r9, ip
 800628e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006292:	2f09      	cmp	r7, #9
 8006294:	d818      	bhi.n	80062c8 <_strtol_l.isra.0+0xac>
 8006296:	463c      	mov	r4, r7
 8006298:	42a3      	cmp	r3, r4
 800629a:	dd24      	ble.n	80062e6 <_strtol_l.isra.0+0xca>
 800629c:	2e00      	cmp	r6, #0
 800629e:	db1f      	blt.n	80062e0 <_strtol_l.isra.0+0xc4>
 80062a0:	45a9      	cmp	r9, r5
 80062a2:	d31d      	bcc.n	80062e0 <_strtol_l.isra.0+0xc4>
 80062a4:	d101      	bne.n	80062aa <_strtol_l.isra.0+0x8e>
 80062a6:	45a2      	cmp	sl, r4
 80062a8:	db1a      	blt.n	80062e0 <_strtol_l.isra.0+0xc4>
 80062aa:	fb05 4503 	mla	r5, r5, r3, r4
 80062ae:	2601      	movs	r6, #1
 80062b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80062b4:	e7eb      	b.n	800628e <_strtol_l.isra.0+0x72>
 80062b6:	2c2b      	cmp	r4, #43	; 0x2b
 80062b8:	bf08      	it	eq
 80062ba:	f89e 4000 	ldrbeq.w	r4, [lr]
 80062be:	46a8      	mov	r8, r5
 80062c0:	bf08      	it	eq
 80062c2:	f106 0e02 	addeq.w	lr, r6, #2
 80062c6:	e7c7      	b.n	8006258 <_strtol_l.isra.0+0x3c>
 80062c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80062cc:	2f19      	cmp	r7, #25
 80062ce:	d801      	bhi.n	80062d4 <_strtol_l.isra.0+0xb8>
 80062d0:	3c37      	subs	r4, #55	; 0x37
 80062d2:	e7e1      	b.n	8006298 <_strtol_l.isra.0+0x7c>
 80062d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80062d8:	2f19      	cmp	r7, #25
 80062da:	d804      	bhi.n	80062e6 <_strtol_l.isra.0+0xca>
 80062dc:	3c57      	subs	r4, #87	; 0x57
 80062de:	e7db      	b.n	8006298 <_strtol_l.isra.0+0x7c>
 80062e0:	f04f 36ff 	mov.w	r6, #4294967295
 80062e4:	e7e4      	b.n	80062b0 <_strtol_l.isra.0+0x94>
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	da05      	bge.n	80062f6 <_strtol_l.isra.0+0xda>
 80062ea:	2322      	movs	r3, #34	; 0x22
 80062ec:	6003      	str	r3, [r0, #0]
 80062ee:	4665      	mov	r5, ip
 80062f0:	b942      	cbnz	r2, 8006304 <_strtol_l.isra.0+0xe8>
 80062f2:	4628      	mov	r0, r5
 80062f4:	e79d      	b.n	8006232 <_strtol_l.isra.0+0x16>
 80062f6:	f1b8 0f00 	cmp.w	r8, #0
 80062fa:	d000      	beq.n	80062fe <_strtol_l.isra.0+0xe2>
 80062fc:	426d      	negs	r5, r5
 80062fe:	2a00      	cmp	r2, #0
 8006300:	d0f7      	beq.n	80062f2 <_strtol_l.isra.0+0xd6>
 8006302:	b10e      	cbz	r6, 8006308 <_strtol_l.isra.0+0xec>
 8006304:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006308:	6011      	str	r1, [r2, #0]
 800630a:	e7f2      	b.n	80062f2 <_strtol_l.isra.0+0xd6>
 800630c:	2430      	movs	r4, #48	; 0x30
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1b3      	bne.n	800627a <_strtol_l.isra.0+0x5e>
 8006312:	2308      	movs	r3, #8
 8006314:	e7b1      	b.n	800627a <_strtol_l.isra.0+0x5e>
 8006316:	2c30      	cmp	r4, #48	; 0x30
 8006318:	d0a4      	beq.n	8006264 <_strtol_l.isra.0+0x48>
 800631a:	230a      	movs	r3, #10
 800631c:	e7ad      	b.n	800627a <_strtol_l.isra.0+0x5e>
 800631e:	bf00      	nop
 8006320:	08008815 	.word	0x08008815

08006324 <strtol>:
 8006324:	4613      	mov	r3, r2
 8006326:	460a      	mov	r2, r1
 8006328:	4601      	mov	r1, r0
 800632a:	4802      	ldr	r0, [pc, #8]	; (8006334 <strtol+0x10>)
 800632c:	6800      	ldr	r0, [r0, #0]
 800632e:	f7ff bf75 	b.w	800621c <_strtol_l.isra.0>
 8006332:	bf00      	nop
 8006334:	2000000c 	.word	0x2000000c

08006338 <__assert_func>:
 8006338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800633a:	4614      	mov	r4, r2
 800633c:	461a      	mov	r2, r3
 800633e:	4b09      	ldr	r3, [pc, #36]	; (8006364 <__assert_func+0x2c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4605      	mov	r5, r0
 8006344:	68d8      	ldr	r0, [r3, #12]
 8006346:	b14c      	cbz	r4, 800635c <__assert_func+0x24>
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <__assert_func+0x30>)
 800634a:	9100      	str	r1, [sp, #0]
 800634c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006350:	4906      	ldr	r1, [pc, #24]	; (800636c <__assert_func+0x34>)
 8006352:	462b      	mov	r3, r5
 8006354:	f000 f80e 	bl	8006374 <fiprintf>
 8006358:	f001 fd02 	bl	8007d60 <abort>
 800635c:	4b04      	ldr	r3, [pc, #16]	; (8006370 <__assert_func+0x38>)
 800635e:	461c      	mov	r4, r3
 8006360:	e7f3      	b.n	800634a <__assert_func+0x12>
 8006362:	bf00      	nop
 8006364:	2000000c 	.word	0x2000000c
 8006368:	080087d8 	.word	0x080087d8
 800636c:	080087e5 	.word	0x080087e5
 8006370:	08008813 	.word	0x08008813

08006374 <fiprintf>:
 8006374:	b40e      	push	{r1, r2, r3}
 8006376:	b503      	push	{r0, r1, lr}
 8006378:	4601      	mov	r1, r0
 800637a:	ab03      	add	r3, sp, #12
 800637c:	4805      	ldr	r0, [pc, #20]	; (8006394 <fiprintf+0x20>)
 800637e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006382:	6800      	ldr	r0, [r0, #0]
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	f001 f92f 	bl	80075e8 <_vfiprintf_r>
 800638a:	b002      	add	sp, #8
 800638c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006390:	b003      	add	sp, #12
 8006392:	4770      	bx	lr
 8006394:	2000000c 	.word	0x2000000c

08006398 <rshift>:
 8006398:	6903      	ldr	r3, [r0, #16]
 800639a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800639e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80063a6:	f100 0414 	add.w	r4, r0, #20
 80063aa:	dd45      	ble.n	8006438 <rshift+0xa0>
 80063ac:	f011 011f 	ands.w	r1, r1, #31
 80063b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80063b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80063b8:	d10c      	bne.n	80063d4 <rshift+0x3c>
 80063ba:	f100 0710 	add.w	r7, r0, #16
 80063be:	4629      	mov	r1, r5
 80063c0:	42b1      	cmp	r1, r6
 80063c2:	d334      	bcc.n	800642e <rshift+0x96>
 80063c4:	1a9b      	subs	r3, r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	1eea      	subs	r2, r5, #3
 80063ca:	4296      	cmp	r6, r2
 80063cc:	bf38      	it	cc
 80063ce:	2300      	movcc	r3, #0
 80063d0:	4423      	add	r3, r4
 80063d2:	e015      	b.n	8006400 <rshift+0x68>
 80063d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80063d8:	f1c1 0820 	rsb	r8, r1, #32
 80063dc:	40cf      	lsrs	r7, r1
 80063de:	f105 0e04 	add.w	lr, r5, #4
 80063e2:	46a1      	mov	r9, r4
 80063e4:	4576      	cmp	r6, lr
 80063e6:	46f4      	mov	ip, lr
 80063e8:	d815      	bhi.n	8006416 <rshift+0x7e>
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	009a      	lsls	r2, r3, #2
 80063ee:	3a04      	subs	r2, #4
 80063f0:	3501      	adds	r5, #1
 80063f2:	42ae      	cmp	r6, r5
 80063f4:	bf38      	it	cc
 80063f6:	2200      	movcc	r2, #0
 80063f8:	18a3      	adds	r3, r4, r2
 80063fa:	50a7      	str	r7, [r4, r2]
 80063fc:	b107      	cbz	r7, 8006400 <rshift+0x68>
 80063fe:	3304      	adds	r3, #4
 8006400:	1b1a      	subs	r2, r3, r4
 8006402:	42a3      	cmp	r3, r4
 8006404:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006408:	bf08      	it	eq
 800640a:	2300      	moveq	r3, #0
 800640c:	6102      	str	r2, [r0, #16]
 800640e:	bf08      	it	eq
 8006410:	6143      	streq	r3, [r0, #20]
 8006412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006416:	f8dc c000 	ldr.w	ip, [ip]
 800641a:	fa0c fc08 	lsl.w	ip, ip, r8
 800641e:	ea4c 0707 	orr.w	r7, ip, r7
 8006422:	f849 7b04 	str.w	r7, [r9], #4
 8006426:	f85e 7b04 	ldr.w	r7, [lr], #4
 800642a:	40cf      	lsrs	r7, r1
 800642c:	e7da      	b.n	80063e4 <rshift+0x4c>
 800642e:	f851 cb04 	ldr.w	ip, [r1], #4
 8006432:	f847 cf04 	str.w	ip, [r7, #4]!
 8006436:	e7c3      	b.n	80063c0 <rshift+0x28>
 8006438:	4623      	mov	r3, r4
 800643a:	e7e1      	b.n	8006400 <rshift+0x68>

0800643c <__hexdig_fun>:
 800643c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006440:	2b09      	cmp	r3, #9
 8006442:	d802      	bhi.n	800644a <__hexdig_fun+0xe>
 8006444:	3820      	subs	r0, #32
 8006446:	b2c0      	uxtb	r0, r0
 8006448:	4770      	bx	lr
 800644a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800644e:	2b05      	cmp	r3, #5
 8006450:	d801      	bhi.n	8006456 <__hexdig_fun+0x1a>
 8006452:	3847      	subs	r0, #71	; 0x47
 8006454:	e7f7      	b.n	8006446 <__hexdig_fun+0xa>
 8006456:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800645a:	2b05      	cmp	r3, #5
 800645c:	d801      	bhi.n	8006462 <__hexdig_fun+0x26>
 800645e:	3827      	subs	r0, #39	; 0x27
 8006460:	e7f1      	b.n	8006446 <__hexdig_fun+0xa>
 8006462:	2000      	movs	r0, #0
 8006464:	4770      	bx	lr
	...

08006468 <__gethex>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	ed2d 8b02 	vpush	{d8}
 8006470:	b089      	sub	sp, #36	; 0x24
 8006472:	ee08 0a10 	vmov	s16, r0
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	4bbc      	ldr	r3, [pc, #752]	; (800676c <__gethex+0x304>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	4618      	mov	r0, r3
 8006480:	468b      	mov	fp, r1
 8006482:	4690      	mov	r8, r2
 8006484:	f7f9 fea4 	bl	80001d0 <strlen>
 8006488:	9b01      	ldr	r3, [sp, #4]
 800648a:	f8db 2000 	ldr.w	r2, [fp]
 800648e:	4403      	add	r3, r0
 8006490:	4682      	mov	sl, r0
 8006492:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006496:	9305      	str	r3, [sp, #20]
 8006498:	1c93      	adds	r3, r2, #2
 800649a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800649e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80064a2:	32fe      	adds	r2, #254	; 0xfe
 80064a4:	18d1      	adds	r1, r2, r3
 80064a6:	461f      	mov	r7, r3
 80064a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80064ac:	9100      	str	r1, [sp, #0]
 80064ae:	2830      	cmp	r0, #48	; 0x30
 80064b0:	d0f8      	beq.n	80064a4 <__gethex+0x3c>
 80064b2:	f7ff ffc3 	bl	800643c <__hexdig_fun>
 80064b6:	4604      	mov	r4, r0
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d13a      	bne.n	8006532 <__gethex+0xca>
 80064bc:	9901      	ldr	r1, [sp, #4]
 80064be:	4652      	mov	r2, sl
 80064c0:	4638      	mov	r0, r7
 80064c2:	f001 fb6d 	bl	8007ba0 <strncmp>
 80064c6:	4605      	mov	r5, r0
 80064c8:	2800      	cmp	r0, #0
 80064ca:	d168      	bne.n	800659e <__gethex+0x136>
 80064cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80064d0:	eb07 060a 	add.w	r6, r7, sl
 80064d4:	f7ff ffb2 	bl	800643c <__hexdig_fun>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d062      	beq.n	80065a2 <__gethex+0x13a>
 80064dc:	4633      	mov	r3, r6
 80064de:	7818      	ldrb	r0, [r3, #0]
 80064e0:	2830      	cmp	r0, #48	; 0x30
 80064e2:	461f      	mov	r7, r3
 80064e4:	f103 0301 	add.w	r3, r3, #1
 80064e8:	d0f9      	beq.n	80064de <__gethex+0x76>
 80064ea:	f7ff ffa7 	bl	800643c <__hexdig_fun>
 80064ee:	2301      	movs	r3, #1
 80064f0:	fab0 f480 	clz	r4, r0
 80064f4:	0964      	lsrs	r4, r4, #5
 80064f6:	4635      	mov	r5, r6
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	463a      	mov	r2, r7
 80064fc:	4616      	mov	r6, r2
 80064fe:	3201      	adds	r2, #1
 8006500:	7830      	ldrb	r0, [r6, #0]
 8006502:	f7ff ff9b 	bl	800643c <__hexdig_fun>
 8006506:	2800      	cmp	r0, #0
 8006508:	d1f8      	bne.n	80064fc <__gethex+0x94>
 800650a:	9901      	ldr	r1, [sp, #4]
 800650c:	4652      	mov	r2, sl
 800650e:	4630      	mov	r0, r6
 8006510:	f001 fb46 	bl	8007ba0 <strncmp>
 8006514:	b980      	cbnz	r0, 8006538 <__gethex+0xd0>
 8006516:	b94d      	cbnz	r5, 800652c <__gethex+0xc4>
 8006518:	eb06 050a 	add.w	r5, r6, sl
 800651c:	462a      	mov	r2, r5
 800651e:	4616      	mov	r6, r2
 8006520:	3201      	adds	r2, #1
 8006522:	7830      	ldrb	r0, [r6, #0]
 8006524:	f7ff ff8a 	bl	800643c <__hexdig_fun>
 8006528:	2800      	cmp	r0, #0
 800652a:	d1f8      	bne.n	800651e <__gethex+0xb6>
 800652c:	1bad      	subs	r5, r5, r6
 800652e:	00ad      	lsls	r5, r5, #2
 8006530:	e004      	b.n	800653c <__gethex+0xd4>
 8006532:	2400      	movs	r4, #0
 8006534:	4625      	mov	r5, r4
 8006536:	e7e0      	b.n	80064fa <__gethex+0x92>
 8006538:	2d00      	cmp	r5, #0
 800653a:	d1f7      	bne.n	800652c <__gethex+0xc4>
 800653c:	7833      	ldrb	r3, [r6, #0]
 800653e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006542:	2b50      	cmp	r3, #80	; 0x50
 8006544:	d13b      	bne.n	80065be <__gethex+0x156>
 8006546:	7873      	ldrb	r3, [r6, #1]
 8006548:	2b2b      	cmp	r3, #43	; 0x2b
 800654a:	d02c      	beq.n	80065a6 <__gethex+0x13e>
 800654c:	2b2d      	cmp	r3, #45	; 0x2d
 800654e:	d02e      	beq.n	80065ae <__gethex+0x146>
 8006550:	1c71      	adds	r1, r6, #1
 8006552:	f04f 0900 	mov.w	r9, #0
 8006556:	7808      	ldrb	r0, [r1, #0]
 8006558:	f7ff ff70 	bl	800643c <__hexdig_fun>
 800655c:	1e43      	subs	r3, r0, #1
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b18      	cmp	r3, #24
 8006562:	d82c      	bhi.n	80065be <__gethex+0x156>
 8006564:	f1a0 0210 	sub.w	r2, r0, #16
 8006568:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800656c:	f7ff ff66 	bl	800643c <__hexdig_fun>
 8006570:	1e43      	subs	r3, r0, #1
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b18      	cmp	r3, #24
 8006576:	d91d      	bls.n	80065b4 <__gethex+0x14c>
 8006578:	f1b9 0f00 	cmp.w	r9, #0
 800657c:	d000      	beq.n	8006580 <__gethex+0x118>
 800657e:	4252      	negs	r2, r2
 8006580:	4415      	add	r5, r2
 8006582:	f8cb 1000 	str.w	r1, [fp]
 8006586:	b1e4      	cbz	r4, 80065c2 <__gethex+0x15a>
 8006588:	9b00      	ldr	r3, [sp, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	bf14      	ite	ne
 800658e:	2700      	movne	r7, #0
 8006590:	2706      	moveq	r7, #6
 8006592:	4638      	mov	r0, r7
 8006594:	b009      	add	sp, #36	; 0x24
 8006596:	ecbd 8b02 	vpop	{d8}
 800659a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800659e:	463e      	mov	r6, r7
 80065a0:	4625      	mov	r5, r4
 80065a2:	2401      	movs	r4, #1
 80065a4:	e7ca      	b.n	800653c <__gethex+0xd4>
 80065a6:	f04f 0900 	mov.w	r9, #0
 80065aa:	1cb1      	adds	r1, r6, #2
 80065ac:	e7d3      	b.n	8006556 <__gethex+0xee>
 80065ae:	f04f 0901 	mov.w	r9, #1
 80065b2:	e7fa      	b.n	80065aa <__gethex+0x142>
 80065b4:	230a      	movs	r3, #10
 80065b6:	fb03 0202 	mla	r2, r3, r2, r0
 80065ba:	3a10      	subs	r2, #16
 80065bc:	e7d4      	b.n	8006568 <__gethex+0x100>
 80065be:	4631      	mov	r1, r6
 80065c0:	e7df      	b.n	8006582 <__gethex+0x11a>
 80065c2:	1bf3      	subs	r3, r6, r7
 80065c4:	3b01      	subs	r3, #1
 80065c6:	4621      	mov	r1, r4
 80065c8:	2b07      	cmp	r3, #7
 80065ca:	dc0b      	bgt.n	80065e4 <__gethex+0x17c>
 80065cc:	ee18 0a10 	vmov	r0, s16
 80065d0:	f000 fa6c 	bl	8006aac <_Balloc>
 80065d4:	4604      	mov	r4, r0
 80065d6:	b940      	cbnz	r0, 80065ea <__gethex+0x182>
 80065d8:	4b65      	ldr	r3, [pc, #404]	; (8006770 <__gethex+0x308>)
 80065da:	4602      	mov	r2, r0
 80065dc:	21de      	movs	r1, #222	; 0xde
 80065de:	4865      	ldr	r0, [pc, #404]	; (8006774 <__gethex+0x30c>)
 80065e0:	f7ff feaa 	bl	8006338 <__assert_func>
 80065e4:	3101      	adds	r1, #1
 80065e6:	105b      	asrs	r3, r3, #1
 80065e8:	e7ee      	b.n	80065c8 <__gethex+0x160>
 80065ea:	f100 0914 	add.w	r9, r0, #20
 80065ee:	f04f 0b00 	mov.w	fp, #0
 80065f2:	f1ca 0301 	rsb	r3, sl, #1
 80065f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80065fa:	f8cd b000 	str.w	fp, [sp]
 80065fe:	9306      	str	r3, [sp, #24]
 8006600:	42b7      	cmp	r7, r6
 8006602:	d340      	bcc.n	8006686 <__gethex+0x21e>
 8006604:	9802      	ldr	r0, [sp, #8]
 8006606:	9b00      	ldr	r3, [sp, #0]
 8006608:	f840 3b04 	str.w	r3, [r0], #4
 800660c:	eba0 0009 	sub.w	r0, r0, r9
 8006610:	1080      	asrs	r0, r0, #2
 8006612:	0146      	lsls	r6, r0, #5
 8006614:	6120      	str	r0, [r4, #16]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fb3e 	bl	8006c98 <__hi0bits>
 800661c:	1a30      	subs	r0, r6, r0
 800661e:	f8d8 6000 	ldr.w	r6, [r8]
 8006622:	42b0      	cmp	r0, r6
 8006624:	dd63      	ble.n	80066ee <__gethex+0x286>
 8006626:	1b87      	subs	r7, r0, r6
 8006628:	4639      	mov	r1, r7
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fed8 	bl	80073e0 <__any_on>
 8006630:	4682      	mov	sl, r0
 8006632:	b1a8      	cbz	r0, 8006660 <__gethex+0x1f8>
 8006634:	1e7b      	subs	r3, r7, #1
 8006636:	1159      	asrs	r1, r3, #5
 8006638:	f003 021f 	and.w	r2, r3, #31
 800663c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006640:	f04f 0a01 	mov.w	sl, #1
 8006644:	fa0a f202 	lsl.w	r2, sl, r2
 8006648:	420a      	tst	r2, r1
 800664a:	d009      	beq.n	8006660 <__gethex+0x1f8>
 800664c:	4553      	cmp	r3, sl
 800664e:	dd05      	ble.n	800665c <__gethex+0x1f4>
 8006650:	1eb9      	subs	r1, r7, #2
 8006652:	4620      	mov	r0, r4
 8006654:	f000 fec4 	bl	80073e0 <__any_on>
 8006658:	2800      	cmp	r0, #0
 800665a:	d145      	bne.n	80066e8 <__gethex+0x280>
 800665c:	f04f 0a02 	mov.w	sl, #2
 8006660:	4639      	mov	r1, r7
 8006662:	4620      	mov	r0, r4
 8006664:	f7ff fe98 	bl	8006398 <rshift>
 8006668:	443d      	add	r5, r7
 800666a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800666e:	42ab      	cmp	r3, r5
 8006670:	da4c      	bge.n	800670c <__gethex+0x2a4>
 8006672:	ee18 0a10 	vmov	r0, s16
 8006676:	4621      	mov	r1, r4
 8006678:	f000 fa58 	bl	8006b2c <_Bfree>
 800667c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800667e:	2300      	movs	r3, #0
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	27a3      	movs	r7, #163	; 0xa3
 8006684:	e785      	b.n	8006592 <__gethex+0x12a>
 8006686:	1e73      	subs	r3, r6, #1
 8006688:	9a05      	ldr	r2, [sp, #20]
 800668a:	9303      	str	r3, [sp, #12]
 800668c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006690:	4293      	cmp	r3, r2
 8006692:	d019      	beq.n	80066c8 <__gethex+0x260>
 8006694:	f1bb 0f20 	cmp.w	fp, #32
 8006698:	d107      	bne.n	80066aa <__gethex+0x242>
 800669a:	9b02      	ldr	r3, [sp, #8]
 800669c:	9a00      	ldr	r2, [sp, #0]
 800669e:	f843 2b04 	str.w	r2, [r3], #4
 80066a2:	9302      	str	r3, [sp, #8]
 80066a4:	2300      	movs	r3, #0
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	469b      	mov	fp, r3
 80066aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80066ae:	f7ff fec5 	bl	800643c <__hexdig_fun>
 80066b2:	9b00      	ldr	r3, [sp, #0]
 80066b4:	f000 000f 	and.w	r0, r0, #15
 80066b8:	fa00 f00b 	lsl.w	r0, r0, fp
 80066bc:	4303      	orrs	r3, r0
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	f10b 0b04 	add.w	fp, fp, #4
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	e00d      	b.n	80066e4 <__gethex+0x27c>
 80066c8:	9b03      	ldr	r3, [sp, #12]
 80066ca:	9a06      	ldr	r2, [sp, #24]
 80066cc:	4413      	add	r3, r2
 80066ce:	42bb      	cmp	r3, r7
 80066d0:	d3e0      	bcc.n	8006694 <__gethex+0x22c>
 80066d2:	4618      	mov	r0, r3
 80066d4:	9901      	ldr	r1, [sp, #4]
 80066d6:	9307      	str	r3, [sp, #28]
 80066d8:	4652      	mov	r2, sl
 80066da:	f001 fa61 	bl	8007ba0 <strncmp>
 80066de:	9b07      	ldr	r3, [sp, #28]
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d1d7      	bne.n	8006694 <__gethex+0x22c>
 80066e4:	461e      	mov	r6, r3
 80066e6:	e78b      	b.n	8006600 <__gethex+0x198>
 80066e8:	f04f 0a03 	mov.w	sl, #3
 80066ec:	e7b8      	b.n	8006660 <__gethex+0x1f8>
 80066ee:	da0a      	bge.n	8006706 <__gethex+0x29e>
 80066f0:	1a37      	subs	r7, r6, r0
 80066f2:	4621      	mov	r1, r4
 80066f4:	ee18 0a10 	vmov	r0, s16
 80066f8:	463a      	mov	r2, r7
 80066fa:	f000 fc33 	bl	8006f64 <__lshift>
 80066fe:	1bed      	subs	r5, r5, r7
 8006700:	4604      	mov	r4, r0
 8006702:	f100 0914 	add.w	r9, r0, #20
 8006706:	f04f 0a00 	mov.w	sl, #0
 800670a:	e7ae      	b.n	800666a <__gethex+0x202>
 800670c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006710:	42a8      	cmp	r0, r5
 8006712:	dd72      	ble.n	80067fa <__gethex+0x392>
 8006714:	1b45      	subs	r5, r0, r5
 8006716:	42ae      	cmp	r6, r5
 8006718:	dc36      	bgt.n	8006788 <__gethex+0x320>
 800671a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d02a      	beq.n	8006778 <__gethex+0x310>
 8006722:	2b03      	cmp	r3, #3
 8006724:	d02c      	beq.n	8006780 <__gethex+0x318>
 8006726:	2b01      	cmp	r3, #1
 8006728:	d115      	bne.n	8006756 <__gethex+0x2ee>
 800672a:	42ae      	cmp	r6, r5
 800672c:	d113      	bne.n	8006756 <__gethex+0x2ee>
 800672e:	2e01      	cmp	r6, #1
 8006730:	d10b      	bne.n	800674a <__gethex+0x2e2>
 8006732:	9a04      	ldr	r2, [sp, #16]
 8006734:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	2301      	movs	r3, #1
 800673c:	6123      	str	r3, [r4, #16]
 800673e:	f8c9 3000 	str.w	r3, [r9]
 8006742:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006744:	2762      	movs	r7, #98	; 0x62
 8006746:	601c      	str	r4, [r3, #0]
 8006748:	e723      	b.n	8006592 <__gethex+0x12a>
 800674a:	1e71      	subs	r1, r6, #1
 800674c:	4620      	mov	r0, r4
 800674e:	f000 fe47 	bl	80073e0 <__any_on>
 8006752:	2800      	cmp	r0, #0
 8006754:	d1ed      	bne.n	8006732 <__gethex+0x2ca>
 8006756:	ee18 0a10 	vmov	r0, s16
 800675a:	4621      	mov	r1, r4
 800675c:	f000 f9e6 	bl	8006b2c <_Bfree>
 8006760:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006762:	2300      	movs	r3, #0
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	2750      	movs	r7, #80	; 0x50
 8006768:	e713      	b.n	8006592 <__gethex+0x12a>
 800676a:	bf00      	nop
 800676c:	08008990 	.word	0x08008990
 8006770:	08008915 	.word	0x08008915
 8006774:	08008926 	.word	0x08008926
 8006778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1eb      	bne.n	8006756 <__gethex+0x2ee>
 800677e:	e7d8      	b.n	8006732 <__gethex+0x2ca>
 8006780:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1d5      	bne.n	8006732 <__gethex+0x2ca>
 8006786:	e7e6      	b.n	8006756 <__gethex+0x2ee>
 8006788:	1e6f      	subs	r7, r5, #1
 800678a:	f1ba 0f00 	cmp.w	sl, #0
 800678e:	d131      	bne.n	80067f4 <__gethex+0x38c>
 8006790:	b127      	cbz	r7, 800679c <__gethex+0x334>
 8006792:	4639      	mov	r1, r7
 8006794:	4620      	mov	r0, r4
 8006796:	f000 fe23 	bl	80073e0 <__any_on>
 800679a:	4682      	mov	sl, r0
 800679c:	117b      	asrs	r3, r7, #5
 800679e:	2101      	movs	r1, #1
 80067a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80067a4:	f007 071f 	and.w	r7, r7, #31
 80067a8:	fa01 f707 	lsl.w	r7, r1, r7
 80067ac:	421f      	tst	r7, r3
 80067ae:	4629      	mov	r1, r5
 80067b0:	4620      	mov	r0, r4
 80067b2:	bf18      	it	ne
 80067b4:	f04a 0a02 	orrne.w	sl, sl, #2
 80067b8:	1b76      	subs	r6, r6, r5
 80067ba:	f7ff fded 	bl	8006398 <rshift>
 80067be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80067c2:	2702      	movs	r7, #2
 80067c4:	f1ba 0f00 	cmp.w	sl, #0
 80067c8:	d048      	beq.n	800685c <__gethex+0x3f4>
 80067ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d015      	beq.n	80067fe <__gethex+0x396>
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d017      	beq.n	8006806 <__gethex+0x39e>
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d109      	bne.n	80067ee <__gethex+0x386>
 80067da:	f01a 0f02 	tst.w	sl, #2
 80067de:	d006      	beq.n	80067ee <__gethex+0x386>
 80067e0:	f8d9 0000 	ldr.w	r0, [r9]
 80067e4:	ea4a 0a00 	orr.w	sl, sl, r0
 80067e8:	f01a 0f01 	tst.w	sl, #1
 80067ec:	d10e      	bne.n	800680c <__gethex+0x3a4>
 80067ee:	f047 0710 	orr.w	r7, r7, #16
 80067f2:	e033      	b.n	800685c <__gethex+0x3f4>
 80067f4:	f04f 0a01 	mov.w	sl, #1
 80067f8:	e7d0      	b.n	800679c <__gethex+0x334>
 80067fa:	2701      	movs	r7, #1
 80067fc:	e7e2      	b.n	80067c4 <__gethex+0x35c>
 80067fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006800:	f1c3 0301 	rsb	r3, r3, #1
 8006804:	9315      	str	r3, [sp, #84]	; 0x54
 8006806:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0f0      	beq.n	80067ee <__gethex+0x386>
 800680c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006810:	f104 0314 	add.w	r3, r4, #20
 8006814:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006818:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800681c:	f04f 0c00 	mov.w	ip, #0
 8006820:	4618      	mov	r0, r3
 8006822:	f853 2b04 	ldr.w	r2, [r3], #4
 8006826:	f1b2 3fff 	cmp.w	r2, #4294967295
 800682a:	d01c      	beq.n	8006866 <__gethex+0x3fe>
 800682c:	3201      	adds	r2, #1
 800682e:	6002      	str	r2, [r0, #0]
 8006830:	2f02      	cmp	r7, #2
 8006832:	f104 0314 	add.w	r3, r4, #20
 8006836:	d13f      	bne.n	80068b8 <__gethex+0x450>
 8006838:	f8d8 2000 	ldr.w	r2, [r8]
 800683c:	3a01      	subs	r2, #1
 800683e:	42b2      	cmp	r2, r6
 8006840:	d10a      	bne.n	8006858 <__gethex+0x3f0>
 8006842:	1171      	asrs	r1, r6, #5
 8006844:	2201      	movs	r2, #1
 8006846:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800684a:	f006 061f 	and.w	r6, r6, #31
 800684e:	fa02 f606 	lsl.w	r6, r2, r6
 8006852:	421e      	tst	r6, r3
 8006854:	bf18      	it	ne
 8006856:	4617      	movne	r7, r2
 8006858:	f047 0720 	orr.w	r7, r7, #32
 800685c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800685e:	601c      	str	r4, [r3, #0]
 8006860:	9b04      	ldr	r3, [sp, #16]
 8006862:	601d      	str	r5, [r3, #0]
 8006864:	e695      	b.n	8006592 <__gethex+0x12a>
 8006866:	4299      	cmp	r1, r3
 8006868:	f843 cc04 	str.w	ip, [r3, #-4]
 800686c:	d8d8      	bhi.n	8006820 <__gethex+0x3b8>
 800686e:	68a3      	ldr	r3, [r4, #8]
 8006870:	459b      	cmp	fp, r3
 8006872:	db19      	blt.n	80068a8 <__gethex+0x440>
 8006874:	6861      	ldr	r1, [r4, #4]
 8006876:	ee18 0a10 	vmov	r0, s16
 800687a:	3101      	adds	r1, #1
 800687c:	f000 f916 	bl	8006aac <_Balloc>
 8006880:	4681      	mov	r9, r0
 8006882:	b918      	cbnz	r0, 800688c <__gethex+0x424>
 8006884:	4b1a      	ldr	r3, [pc, #104]	; (80068f0 <__gethex+0x488>)
 8006886:	4602      	mov	r2, r0
 8006888:	2184      	movs	r1, #132	; 0x84
 800688a:	e6a8      	b.n	80065de <__gethex+0x176>
 800688c:	6922      	ldr	r2, [r4, #16]
 800688e:	3202      	adds	r2, #2
 8006890:	f104 010c 	add.w	r1, r4, #12
 8006894:	0092      	lsls	r2, r2, #2
 8006896:	300c      	adds	r0, #12
 8006898:	f7fe fdfa 	bl	8005490 <memcpy>
 800689c:	4621      	mov	r1, r4
 800689e:	ee18 0a10 	vmov	r0, s16
 80068a2:	f000 f943 	bl	8006b2c <_Bfree>
 80068a6:	464c      	mov	r4, r9
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068b0:	6122      	str	r2, [r4, #16]
 80068b2:	2201      	movs	r2, #1
 80068b4:	615a      	str	r2, [r3, #20]
 80068b6:	e7bb      	b.n	8006830 <__gethex+0x3c8>
 80068b8:	6922      	ldr	r2, [r4, #16]
 80068ba:	455a      	cmp	r2, fp
 80068bc:	dd0b      	ble.n	80068d6 <__gethex+0x46e>
 80068be:	2101      	movs	r1, #1
 80068c0:	4620      	mov	r0, r4
 80068c2:	f7ff fd69 	bl	8006398 <rshift>
 80068c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068ca:	3501      	adds	r5, #1
 80068cc:	42ab      	cmp	r3, r5
 80068ce:	f6ff aed0 	blt.w	8006672 <__gethex+0x20a>
 80068d2:	2701      	movs	r7, #1
 80068d4:	e7c0      	b.n	8006858 <__gethex+0x3f0>
 80068d6:	f016 061f 	ands.w	r6, r6, #31
 80068da:	d0fa      	beq.n	80068d2 <__gethex+0x46a>
 80068dc:	449a      	add	sl, r3
 80068de:	f1c6 0620 	rsb	r6, r6, #32
 80068e2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80068e6:	f000 f9d7 	bl	8006c98 <__hi0bits>
 80068ea:	42b0      	cmp	r0, r6
 80068ec:	dbe7      	blt.n	80068be <__gethex+0x456>
 80068ee:	e7f0      	b.n	80068d2 <__gethex+0x46a>
 80068f0:	08008915 	.word	0x08008915

080068f4 <L_shift>:
 80068f4:	f1c2 0208 	rsb	r2, r2, #8
 80068f8:	0092      	lsls	r2, r2, #2
 80068fa:	b570      	push	{r4, r5, r6, lr}
 80068fc:	f1c2 0620 	rsb	r6, r2, #32
 8006900:	6843      	ldr	r3, [r0, #4]
 8006902:	6804      	ldr	r4, [r0, #0]
 8006904:	fa03 f506 	lsl.w	r5, r3, r6
 8006908:	432c      	orrs	r4, r5
 800690a:	40d3      	lsrs	r3, r2
 800690c:	6004      	str	r4, [r0, #0]
 800690e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006912:	4288      	cmp	r0, r1
 8006914:	d3f4      	bcc.n	8006900 <L_shift+0xc>
 8006916:	bd70      	pop	{r4, r5, r6, pc}

08006918 <__match>:
 8006918:	b530      	push	{r4, r5, lr}
 800691a:	6803      	ldr	r3, [r0, #0]
 800691c:	3301      	adds	r3, #1
 800691e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006922:	b914      	cbnz	r4, 800692a <__match+0x12>
 8006924:	6003      	str	r3, [r0, #0]
 8006926:	2001      	movs	r0, #1
 8006928:	bd30      	pop	{r4, r5, pc}
 800692a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800692e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006932:	2d19      	cmp	r5, #25
 8006934:	bf98      	it	ls
 8006936:	3220      	addls	r2, #32
 8006938:	42a2      	cmp	r2, r4
 800693a:	d0f0      	beq.n	800691e <__match+0x6>
 800693c:	2000      	movs	r0, #0
 800693e:	e7f3      	b.n	8006928 <__match+0x10>

08006940 <__hexnan>:
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	680b      	ldr	r3, [r1, #0]
 8006946:	6801      	ldr	r1, [r0, #0]
 8006948:	115e      	asrs	r6, r3, #5
 800694a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800694e:	f013 031f 	ands.w	r3, r3, #31
 8006952:	b087      	sub	sp, #28
 8006954:	bf18      	it	ne
 8006956:	3604      	addne	r6, #4
 8006958:	2500      	movs	r5, #0
 800695a:	1f37      	subs	r7, r6, #4
 800695c:	4682      	mov	sl, r0
 800695e:	4690      	mov	r8, r2
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	f846 5c04 	str.w	r5, [r6, #-4]
 8006966:	46b9      	mov	r9, r7
 8006968:	463c      	mov	r4, r7
 800696a:	9502      	str	r5, [sp, #8]
 800696c:	46ab      	mov	fp, r5
 800696e:	784a      	ldrb	r2, [r1, #1]
 8006970:	1c4b      	adds	r3, r1, #1
 8006972:	9303      	str	r3, [sp, #12]
 8006974:	b342      	cbz	r2, 80069c8 <__hexnan+0x88>
 8006976:	4610      	mov	r0, r2
 8006978:	9105      	str	r1, [sp, #20]
 800697a:	9204      	str	r2, [sp, #16]
 800697c:	f7ff fd5e 	bl	800643c <__hexdig_fun>
 8006980:	2800      	cmp	r0, #0
 8006982:	d14f      	bne.n	8006a24 <__hexnan+0xe4>
 8006984:	9a04      	ldr	r2, [sp, #16]
 8006986:	9905      	ldr	r1, [sp, #20]
 8006988:	2a20      	cmp	r2, #32
 800698a:	d818      	bhi.n	80069be <__hexnan+0x7e>
 800698c:	9b02      	ldr	r3, [sp, #8]
 800698e:	459b      	cmp	fp, r3
 8006990:	dd13      	ble.n	80069ba <__hexnan+0x7a>
 8006992:	454c      	cmp	r4, r9
 8006994:	d206      	bcs.n	80069a4 <__hexnan+0x64>
 8006996:	2d07      	cmp	r5, #7
 8006998:	dc04      	bgt.n	80069a4 <__hexnan+0x64>
 800699a:	462a      	mov	r2, r5
 800699c:	4649      	mov	r1, r9
 800699e:	4620      	mov	r0, r4
 80069a0:	f7ff ffa8 	bl	80068f4 <L_shift>
 80069a4:	4544      	cmp	r4, r8
 80069a6:	d950      	bls.n	8006a4a <__hexnan+0x10a>
 80069a8:	2300      	movs	r3, #0
 80069aa:	f1a4 0904 	sub.w	r9, r4, #4
 80069ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80069b2:	f8cd b008 	str.w	fp, [sp, #8]
 80069b6:	464c      	mov	r4, r9
 80069b8:	461d      	mov	r5, r3
 80069ba:	9903      	ldr	r1, [sp, #12]
 80069bc:	e7d7      	b.n	800696e <__hexnan+0x2e>
 80069be:	2a29      	cmp	r2, #41	; 0x29
 80069c0:	d156      	bne.n	8006a70 <__hexnan+0x130>
 80069c2:	3102      	adds	r1, #2
 80069c4:	f8ca 1000 	str.w	r1, [sl]
 80069c8:	f1bb 0f00 	cmp.w	fp, #0
 80069cc:	d050      	beq.n	8006a70 <__hexnan+0x130>
 80069ce:	454c      	cmp	r4, r9
 80069d0:	d206      	bcs.n	80069e0 <__hexnan+0xa0>
 80069d2:	2d07      	cmp	r5, #7
 80069d4:	dc04      	bgt.n	80069e0 <__hexnan+0xa0>
 80069d6:	462a      	mov	r2, r5
 80069d8:	4649      	mov	r1, r9
 80069da:	4620      	mov	r0, r4
 80069dc:	f7ff ff8a 	bl	80068f4 <L_shift>
 80069e0:	4544      	cmp	r4, r8
 80069e2:	d934      	bls.n	8006a4e <__hexnan+0x10e>
 80069e4:	f1a8 0204 	sub.w	r2, r8, #4
 80069e8:	4623      	mov	r3, r4
 80069ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80069ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80069f2:	429f      	cmp	r7, r3
 80069f4:	d2f9      	bcs.n	80069ea <__hexnan+0xaa>
 80069f6:	1b3b      	subs	r3, r7, r4
 80069f8:	f023 0303 	bic.w	r3, r3, #3
 80069fc:	3304      	adds	r3, #4
 80069fe:	3401      	adds	r4, #1
 8006a00:	3e03      	subs	r6, #3
 8006a02:	42b4      	cmp	r4, r6
 8006a04:	bf88      	it	hi
 8006a06:	2304      	movhi	r3, #4
 8006a08:	4443      	add	r3, r8
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f843 2b04 	str.w	r2, [r3], #4
 8006a10:	429f      	cmp	r7, r3
 8006a12:	d2fb      	bcs.n	8006a0c <__hexnan+0xcc>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	b91b      	cbnz	r3, 8006a20 <__hexnan+0xe0>
 8006a18:	4547      	cmp	r7, r8
 8006a1a:	d127      	bne.n	8006a6c <__hexnan+0x12c>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	603b      	str	r3, [r7, #0]
 8006a20:	2005      	movs	r0, #5
 8006a22:	e026      	b.n	8006a72 <__hexnan+0x132>
 8006a24:	3501      	adds	r5, #1
 8006a26:	2d08      	cmp	r5, #8
 8006a28:	f10b 0b01 	add.w	fp, fp, #1
 8006a2c:	dd06      	ble.n	8006a3c <__hexnan+0xfc>
 8006a2e:	4544      	cmp	r4, r8
 8006a30:	d9c3      	bls.n	80069ba <__hexnan+0x7a>
 8006a32:	2300      	movs	r3, #0
 8006a34:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a38:	2501      	movs	r5, #1
 8006a3a:	3c04      	subs	r4, #4
 8006a3c:	6822      	ldr	r2, [r4, #0]
 8006a3e:	f000 000f 	and.w	r0, r0, #15
 8006a42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006a46:	6022      	str	r2, [r4, #0]
 8006a48:	e7b7      	b.n	80069ba <__hexnan+0x7a>
 8006a4a:	2508      	movs	r5, #8
 8006a4c:	e7b5      	b.n	80069ba <__hexnan+0x7a>
 8006a4e:	9b01      	ldr	r3, [sp, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0df      	beq.n	8006a14 <__hexnan+0xd4>
 8006a54:	f04f 32ff 	mov.w	r2, #4294967295
 8006a58:	f1c3 0320 	rsb	r3, r3, #32
 8006a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a60:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006a64:	401a      	ands	r2, r3
 8006a66:	f846 2c04 	str.w	r2, [r6, #-4]
 8006a6a:	e7d3      	b.n	8006a14 <__hexnan+0xd4>
 8006a6c:	3f04      	subs	r7, #4
 8006a6e:	e7d1      	b.n	8006a14 <__hexnan+0xd4>
 8006a70:	2004      	movs	r0, #4
 8006a72:	b007      	add	sp, #28
 8006a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a78 <malloc>:
 8006a78:	4b02      	ldr	r3, [pc, #8]	; (8006a84 <malloc+0xc>)
 8006a7a:	4601      	mov	r1, r0
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	f000 bd2f 	b.w	80074e0 <_malloc_r>
 8006a82:	bf00      	nop
 8006a84:	2000000c 	.word	0x2000000c

08006a88 <__ascii_mbtowc>:
 8006a88:	b082      	sub	sp, #8
 8006a8a:	b901      	cbnz	r1, 8006a8e <__ascii_mbtowc+0x6>
 8006a8c:	a901      	add	r1, sp, #4
 8006a8e:	b142      	cbz	r2, 8006aa2 <__ascii_mbtowc+0x1a>
 8006a90:	b14b      	cbz	r3, 8006aa6 <__ascii_mbtowc+0x1e>
 8006a92:	7813      	ldrb	r3, [r2, #0]
 8006a94:	600b      	str	r3, [r1, #0]
 8006a96:	7812      	ldrb	r2, [r2, #0]
 8006a98:	1e10      	subs	r0, r2, #0
 8006a9a:	bf18      	it	ne
 8006a9c:	2001      	movne	r0, #1
 8006a9e:	b002      	add	sp, #8
 8006aa0:	4770      	bx	lr
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	e7fb      	b.n	8006a9e <__ascii_mbtowc+0x16>
 8006aa6:	f06f 0001 	mvn.w	r0, #1
 8006aaa:	e7f8      	b.n	8006a9e <__ascii_mbtowc+0x16>

08006aac <_Balloc>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	460d      	mov	r5, r1
 8006ab4:	b976      	cbnz	r6, 8006ad4 <_Balloc+0x28>
 8006ab6:	2010      	movs	r0, #16
 8006ab8:	f7ff ffde 	bl	8006a78 <malloc>
 8006abc:	4602      	mov	r2, r0
 8006abe:	6260      	str	r0, [r4, #36]	; 0x24
 8006ac0:	b920      	cbnz	r0, 8006acc <_Balloc+0x20>
 8006ac2:	4b18      	ldr	r3, [pc, #96]	; (8006b24 <_Balloc+0x78>)
 8006ac4:	4818      	ldr	r0, [pc, #96]	; (8006b28 <_Balloc+0x7c>)
 8006ac6:	2166      	movs	r1, #102	; 0x66
 8006ac8:	f7ff fc36 	bl	8006338 <__assert_func>
 8006acc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ad0:	6006      	str	r6, [r0, #0]
 8006ad2:	60c6      	str	r6, [r0, #12]
 8006ad4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ad6:	68f3      	ldr	r3, [r6, #12]
 8006ad8:	b183      	cbz	r3, 8006afc <_Balloc+0x50>
 8006ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ae2:	b9b8      	cbnz	r0, 8006b14 <_Balloc+0x68>
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	fa01 f605 	lsl.w	r6, r1, r5
 8006aea:	1d72      	adds	r2, r6, #5
 8006aec:	0092      	lsls	r2, r2, #2
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 fc97 	bl	8007422 <_calloc_r>
 8006af4:	b160      	cbz	r0, 8006b10 <_Balloc+0x64>
 8006af6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006afa:	e00e      	b.n	8006b1a <_Balloc+0x6e>
 8006afc:	2221      	movs	r2, #33	; 0x21
 8006afe:	2104      	movs	r1, #4
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 fc8e 	bl	8007422 <_calloc_r>
 8006b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b08:	60f0      	str	r0, [r6, #12]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e4      	bne.n	8006ada <_Balloc+0x2e>
 8006b10:	2000      	movs	r0, #0
 8006b12:	bd70      	pop	{r4, r5, r6, pc}
 8006b14:	6802      	ldr	r2, [r0, #0]
 8006b16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b20:	e7f7      	b.n	8006b12 <_Balloc+0x66>
 8006b22:	bf00      	nop
 8006b24:	08008760 	.word	0x08008760
 8006b28:	080089a4 	.word	0x080089a4

08006b2c <_Bfree>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b30:	4605      	mov	r5, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	b976      	cbnz	r6, 8006b54 <_Bfree+0x28>
 8006b36:	2010      	movs	r0, #16
 8006b38:	f7ff ff9e 	bl	8006a78 <malloc>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6268      	str	r0, [r5, #36]	; 0x24
 8006b40:	b920      	cbnz	r0, 8006b4c <_Bfree+0x20>
 8006b42:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <_Bfree+0x3c>)
 8006b44:	4809      	ldr	r0, [pc, #36]	; (8006b6c <_Bfree+0x40>)
 8006b46:	218a      	movs	r1, #138	; 0x8a
 8006b48:	f7ff fbf6 	bl	8006338 <__assert_func>
 8006b4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b50:	6006      	str	r6, [r0, #0]
 8006b52:	60c6      	str	r6, [r0, #12]
 8006b54:	b13c      	cbz	r4, 8006b66 <_Bfree+0x3a>
 8006b56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b58:	6862      	ldr	r2, [r4, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b60:	6021      	str	r1, [r4, #0]
 8006b62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	08008760 	.word	0x08008760
 8006b6c:	080089a4 	.word	0x080089a4

08006b70 <__multadd>:
 8006b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	690e      	ldr	r6, [r1, #16]
 8006b76:	4607      	mov	r7, r0
 8006b78:	4698      	mov	r8, r3
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	f101 0014 	add.w	r0, r1, #20
 8006b80:	2300      	movs	r3, #0
 8006b82:	6805      	ldr	r5, [r0, #0]
 8006b84:	b2a9      	uxth	r1, r5
 8006b86:	fb02 8101 	mla	r1, r2, r1, r8
 8006b8a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006b8e:	0c2d      	lsrs	r5, r5, #16
 8006b90:	fb02 c505 	mla	r5, r2, r5, ip
 8006b94:	b289      	uxth	r1, r1
 8006b96:	3301      	adds	r3, #1
 8006b98:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006b9c:	429e      	cmp	r6, r3
 8006b9e:	f840 1b04 	str.w	r1, [r0], #4
 8006ba2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006ba6:	dcec      	bgt.n	8006b82 <__multadd+0x12>
 8006ba8:	f1b8 0f00 	cmp.w	r8, #0
 8006bac:	d022      	beq.n	8006bf4 <__multadd+0x84>
 8006bae:	68a3      	ldr	r3, [r4, #8]
 8006bb0:	42b3      	cmp	r3, r6
 8006bb2:	dc19      	bgt.n	8006be8 <__multadd+0x78>
 8006bb4:	6861      	ldr	r1, [r4, #4]
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	3101      	adds	r1, #1
 8006bba:	f7ff ff77 	bl	8006aac <_Balloc>
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	b928      	cbnz	r0, 8006bce <__multadd+0x5e>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	; (8006bfc <__multadd+0x8c>)
 8006bc6:	480e      	ldr	r0, [pc, #56]	; (8006c00 <__multadd+0x90>)
 8006bc8:	21b5      	movs	r1, #181	; 0xb5
 8006bca:	f7ff fbb5 	bl	8006338 <__assert_func>
 8006bce:	6922      	ldr	r2, [r4, #16]
 8006bd0:	3202      	adds	r2, #2
 8006bd2:	f104 010c 	add.w	r1, r4, #12
 8006bd6:	0092      	lsls	r2, r2, #2
 8006bd8:	300c      	adds	r0, #12
 8006bda:	f7fe fc59 	bl	8005490 <memcpy>
 8006bde:	4621      	mov	r1, r4
 8006be0:	4638      	mov	r0, r7
 8006be2:	f7ff ffa3 	bl	8006b2c <_Bfree>
 8006be6:	462c      	mov	r4, r5
 8006be8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006bec:	3601      	adds	r6, #1
 8006bee:	f8c3 8014 	str.w	r8, [r3, #20]
 8006bf2:	6126      	str	r6, [r4, #16]
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bfa:	bf00      	nop
 8006bfc:	08008915 	.word	0x08008915
 8006c00:	080089a4 	.word	0x080089a4

08006c04 <__s2b>:
 8006c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c08:	460c      	mov	r4, r1
 8006c0a:	4615      	mov	r5, r2
 8006c0c:	461f      	mov	r7, r3
 8006c0e:	2209      	movs	r2, #9
 8006c10:	3308      	adds	r3, #8
 8006c12:	4606      	mov	r6, r0
 8006c14:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c18:	2100      	movs	r1, #0
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	db09      	blt.n	8006c34 <__s2b+0x30>
 8006c20:	4630      	mov	r0, r6
 8006c22:	f7ff ff43 	bl	8006aac <_Balloc>
 8006c26:	b940      	cbnz	r0, 8006c3a <__s2b+0x36>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	4b19      	ldr	r3, [pc, #100]	; (8006c90 <__s2b+0x8c>)
 8006c2c:	4819      	ldr	r0, [pc, #100]	; (8006c94 <__s2b+0x90>)
 8006c2e:	21ce      	movs	r1, #206	; 0xce
 8006c30:	f7ff fb82 	bl	8006338 <__assert_func>
 8006c34:	0052      	lsls	r2, r2, #1
 8006c36:	3101      	adds	r1, #1
 8006c38:	e7f0      	b.n	8006c1c <__s2b+0x18>
 8006c3a:	9b08      	ldr	r3, [sp, #32]
 8006c3c:	6143      	str	r3, [r0, #20]
 8006c3e:	2d09      	cmp	r5, #9
 8006c40:	f04f 0301 	mov.w	r3, #1
 8006c44:	6103      	str	r3, [r0, #16]
 8006c46:	dd16      	ble.n	8006c76 <__s2b+0x72>
 8006c48:	f104 0909 	add.w	r9, r4, #9
 8006c4c:	46c8      	mov	r8, r9
 8006c4e:	442c      	add	r4, r5
 8006c50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c54:	4601      	mov	r1, r0
 8006c56:	3b30      	subs	r3, #48	; 0x30
 8006c58:	220a      	movs	r2, #10
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ff88 	bl	8006b70 <__multadd>
 8006c60:	45a0      	cmp	r8, r4
 8006c62:	d1f5      	bne.n	8006c50 <__s2b+0x4c>
 8006c64:	f1a5 0408 	sub.w	r4, r5, #8
 8006c68:	444c      	add	r4, r9
 8006c6a:	1b2d      	subs	r5, r5, r4
 8006c6c:	1963      	adds	r3, r4, r5
 8006c6e:	42bb      	cmp	r3, r7
 8006c70:	db04      	blt.n	8006c7c <__s2b+0x78>
 8006c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c76:	340a      	adds	r4, #10
 8006c78:	2509      	movs	r5, #9
 8006c7a:	e7f6      	b.n	8006c6a <__s2b+0x66>
 8006c7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c80:	4601      	mov	r1, r0
 8006c82:	3b30      	subs	r3, #48	; 0x30
 8006c84:	220a      	movs	r2, #10
 8006c86:	4630      	mov	r0, r6
 8006c88:	f7ff ff72 	bl	8006b70 <__multadd>
 8006c8c:	e7ee      	b.n	8006c6c <__s2b+0x68>
 8006c8e:	bf00      	nop
 8006c90:	08008915 	.word	0x08008915
 8006c94:	080089a4 	.word	0x080089a4

08006c98 <__hi0bits>:
 8006c98:	0c03      	lsrs	r3, r0, #16
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	b9d3      	cbnz	r3, 8006cd4 <__hi0bits+0x3c>
 8006c9e:	0400      	lsls	r0, r0, #16
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ca6:	bf04      	itt	eq
 8006ca8:	0200      	lsleq	r0, r0, #8
 8006caa:	3308      	addeq	r3, #8
 8006cac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006cb0:	bf04      	itt	eq
 8006cb2:	0100      	lsleq	r0, r0, #4
 8006cb4:	3304      	addeq	r3, #4
 8006cb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006cba:	bf04      	itt	eq
 8006cbc:	0080      	lsleq	r0, r0, #2
 8006cbe:	3302      	addeq	r3, #2
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	db05      	blt.n	8006cd0 <__hi0bits+0x38>
 8006cc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006cc8:	f103 0301 	add.w	r3, r3, #1
 8006ccc:	bf08      	it	eq
 8006cce:	2320      	moveq	r3, #32
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	4770      	bx	lr
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e7e4      	b.n	8006ca2 <__hi0bits+0xa>

08006cd8 <__lo0bits>:
 8006cd8:	6803      	ldr	r3, [r0, #0]
 8006cda:	f013 0207 	ands.w	r2, r3, #7
 8006cde:	4601      	mov	r1, r0
 8006ce0:	d00b      	beq.n	8006cfa <__lo0bits+0x22>
 8006ce2:	07da      	lsls	r2, r3, #31
 8006ce4:	d424      	bmi.n	8006d30 <__lo0bits+0x58>
 8006ce6:	0798      	lsls	r0, r3, #30
 8006ce8:	bf49      	itett	mi
 8006cea:	085b      	lsrmi	r3, r3, #1
 8006cec:	089b      	lsrpl	r3, r3, #2
 8006cee:	2001      	movmi	r0, #1
 8006cf0:	600b      	strmi	r3, [r1, #0]
 8006cf2:	bf5c      	itt	pl
 8006cf4:	600b      	strpl	r3, [r1, #0]
 8006cf6:	2002      	movpl	r0, #2
 8006cf8:	4770      	bx	lr
 8006cfa:	b298      	uxth	r0, r3
 8006cfc:	b9b0      	cbnz	r0, 8006d2c <__lo0bits+0x54>
 8006cfe:	0c1b      	lsrs	r3, r3, #16
 8006d00:	2010      	movs	r0, #16
 8006d02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006d06:	bf04      	itt	eq
 8006d08:	0a1b      	lsreq	r3, r3, #8
 8006d0a:	3008      	addeq	r0, #8
 8006d0c:	071a      	lsls	r2, r3, #28
 8006d0e:	bf04      	itt	eq
 8006d10:	091b      	lsreq	r3, r3, #4
 8006d12:	3004      	addeq	r0, #4
 8006d14:	079a      	lsls	r2, r3, #30
 8006d16:	bf04      	itt	eq
 8006d18:	089b      	lsreq	r3, r3, #2
 8006d1a:	3002      	addeq	r0, #2
 8006d1c:	07da      	lsls	r2, r3, #31
 8006d1e:	d403      	bmi.n	8006d28 <__lo0bits+0x50>
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	f100 0001 	add.w	r0, r0, #1
 8006d26:	d005      	beq.n	8006d34 <__lo0bits+0x5c>
 8006d28:	600b      	str	r3, [r1, #0]
 8006d2a:	4770      	bx	lr
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	e7e8      	b.n	8006d02 <__lo0bits+0x2a>
 8006d30:	2000      	movs	r0, #0
 8006d32:	4770      	bx	lr
 8006d34:	2020      	movs	r0, #32
 8006d36:	4770      	bx	lr

08006d38 <__i2b>:
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	f7ff feb5 	bl	8006aac <_Balloc>
 8006d42:	4602      	mov	r2, r0
 8006d44:	b928      	cbnz	r0, 8006d52 <__i2b+0x1a>
 8006d46:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <__i2b+0x24>)
 8006d48:	4805      	ldr	r0, [pc, #20]	; (8006d60 <__i2b+0x28>)
 8006d4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d4e:	f7ff faf3 	bl	8006338 <__assert_func>
 8006d52:	2301      	movs	r3, #1
 8006d54:	6144      	str	r4, [r0, #20]
 8006d56:	6103      	str	r3, [r0, #16]
 8006d58:	bd10      	pop	{r4, pc}
 8006d5a:	bf00      	nop
 8006d5c:	08008915 	.word	0x08008915
 8006d60:	080089a4 	.word	0x080089a4

08006d64 <__multiply>:
 8006d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d68:	4614      	mov	r4, r2
 8006d6a:	690a      	ldr	r2, [r1, #16]
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	bfb8      	it	lt
 8006d72:	460b      	movlt	r3, r1
 8006d74:	460d      	mov	r5, r1
 8006d76:	bfbc      	itt	lt
 8006d78:	4625      	movlt	r5, r4
 8006d7a:	461c      	movlt	r4, r3
 8006d7c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006d80:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d84:	68ab      	ldr	r3, [r5, #8]
 8006d86:	6869      	ldr	r1, [r5, #4]
 8006d88:	eb0a 0709 	add.w	r7, sl, r9
 8006d8c:	42bb      	cmp	r3, r7
 8006d8e:	b085      	sub	sp, #20
 8006d90:	bfb8      	it	lt
 8006d92:	3101      	addlt	r1, #1
 8006d94:	f7ff fe8a 	bl	8006aac <_Balloc>
 8006d98:	b930      	cbnz	r0, 8006da8 <__multiply+0x44>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4b42      	ldr	r3, [pc, #264]	; (8006ea8 <__multiply+0x144>)
 8006d9e:	4843      	ldr	r0, [pc, #268]	; (8006eac <__multiply+0x148>)
 8006da0:	f240 115d 	movw	r1, #349	; 0x15d
 8006da4:	f7ff fac8 	bl	8006338 <__assert_func>
 8006da8:	f100 0614 	add.w	r6, r0, #20
 8006dac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006db0:	4633      	mov	r3, r6
 8006db2:	2200      	movs	r2, #0
 8006db4:	4543      	cmp	r3, r8
 8006db6:	d31e      	bcc.n	8006df6 <__multiply+0x92>
 8006db8:	f105 0c14 	add.w	ip, r5, #20
 8006dbc:	f104 0314 	add.w	r3, r4, #20
 8006dc0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006dc4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006dc8:	9202      	str	r2, [sp, #8]
 8006dca:	ebac 0205 	sub.w	r2, ip, r5
 8006dce:	3a15      	subs	r2, #21
 8006dd0:	f022 0203 	bic.w	r2, r2, #3
 8006dd4:	3204      	adds	r2, #4
 8006dd6:	f105 0115 	add.w	r1, r5, #21
 8006dda:	458c      	cmp	ip, r1
 8006ddc:	bf38      	it	cc
 8006dde:	2204      	movcc	r2, #4
 8006de0:	9201      	str	r2, [sp, #4]
 8006de2:	9a02      	ldr	r2, [sp, #8]
 8006de4:	9303      	str	r3, [sp, #12]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d808      	bhi.n	8006dfc <__multiply+0x98>
 8006dea:	2f00      	cmp	r7, #0
 8006dec:	dc55      	bgt.n	8006e9a <__multiply+0x136>
 8006dee:	6107      	str	r7, [r0, #16]
 8006df0:	b005      	add	sp, #20
 8006df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df6:	f843 2b04 	str.w	r2, [r3], #4
 8006dfa:	e7db      	b.n	8006db4 <__multiply+0x50>
 8006dfc:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e00:	f1ba 0f00 	cmp.w	sl, #0
 8006e04:	d020      	beq.n	8006e48 <__multiply+0xe4>
 8006e06:	f105 0e14 	add.w	lr, r5, #20
 8006e0a:	46b1      	mov	r9, r6
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006e12:	f8d9 b000 	ldr.w	fp, [r9]
 8006e16:	b2a1      	uxth	r1, r4
 8006e18:	fa1f fb8b 	uxth.w	fp, fp
 8006e1c:	fb0a b101 	mla	r1, sl, r1, fp
 8006e20:	4411      	add	r1, r2
 8006e22:	f8d9 2000 	ldr.w	r2, [r9]
 8006e26:	0c24      	lsrs	r4, r4, #16
 8006e28:	0c12      	lsrs	r2, r2, #16
 8006e2a:	fb0a 2404 	mla	r4, sl, r4, r2
 8006e2e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006e32:	b289      	uxth	r1, r1
 8006e34:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006e38:	45f4      	cmp	ip, lr
 8006e3a:	f849 1b04 	str.w	r1, [r9], #4
 8006e3e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006e42:	d8e4      	bhi.n	8006e0e <__multiply+0xaa>
 8006e44:	9901      	ldr	r1, [sp, #4]
 8006e46:	5072      	str	r2, [r6, r1]
 8006e48:	9a03      	ldr	r2, [sp, #12]
 8006e4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	f1b9 0f00 	cmp.w	r9, #0
 8006e54:	d01f      	beq.n	8006e96 <__multiply+0x132>
 8006e56:	6834      	ldr	r4, [r6, #0]
 8006e58:	f105 0114 	add.w	r1, r5, #20
 8006e5c:	46b6      	mov	lr, r6
 8006e5e:	f04f 0a00 	mov.w	sl, #0
 8006e62:	880a      	ldrh	r2, [r1, #0]
 8006e64:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006e68:	fb09 b202 	mla	r2, r9, r2, fp
 8006e6c:	4492      	add	sl, r2
 8006e6e:	b2a4      	uxth	r4, r4
 8006e70:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006e74:	f84e 4b04 	str.w	r4, [lr], #4
 8006e78:	f851 4b04 	ldr.w	r4, [r1], #4
 8006e7c:	f8be 2000 	ldrh.w	r2, [lr]
 8006e80:	0c24      	lsrs	r4, r4, #16
 8006e82:	fb09 2404 	mla	r4, r9, r4, r2
 8006e86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006e8a:	458c      	cmp	ip, r1
 8006e8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006e90:	d8e7      	bhi.n	8006e62 <__multiply+0xfe>
 8006e92:	9a01      	ldr	r2, [sp, #4]
 8006e94:	50b4      	str	r4, [r6, r2]
 8006e96:	3604      	adds	r6, #4
 8006e98:	e7a3      	b.n	8006de2 <__multiply+0x7e>
 8006e9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1a5      	bne.n	8006dee <__multiply+0x8a>
 8006ea2:	3f01      	subs	r7, #1
 8006ea4:	e7a1      	b.n	8006dea <__multiply+0x86>
 8006ea6:	bf00      	nop
 8006ea8:	08008915 	.word	0x08008915
 8006eac:	080089a4 	.word	0x080089a4

08006eb0 <__pow5mult>:
 8006eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb4:	4615      	mov	r5, r2
 8006eb6:	f012 0203 	ands.w	r2, r2, #3
 8006eba:	4606      	mov	r6, r0
 8006ebc:	460f      	mov	r7, r1
 8006ebe:	d007      	beq.n	8006ed0 <__pow5mult+0x20>
 8006ec0:	4c25      	ldr	r4, [pc, #148]	; (8006f58 <__pow5mult+0xa8>)
 8006ec2:	3a01      	subs	r2, #1
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006eca:	f7ff fe51 	bl	8006b70 <__multadd>
 8006ece:	4607      	mov	r7, r0
 8006ed0:	10ad      	asrs	r5, r5, #2
 8006ed2:	d03d      	beq.n	8006f50 <__pow5mult+0xa0>
 8006ed4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ed6:	b97c      	cbnz	r4, 8006ef8 <__pow5mult+0x48>
 8006ed8:	2010      	movs	r0, #16
 8006eda:	f7ff fdcd 	bl	8006a78 <malloc>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	6270      	str	r0, [r6, #36]	; 0x24
 8006ee2:	b928      	cbnz	r0, 8006ef0 <__pow5mult+0x40>
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <__pow5mult+0xac>)
 8006ee6:	481e      	ldr	r0, [pc, #120]	; (8006f60 <__pow5mult+0xb0>)
 8006ee8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006eec:	f7ff fa24 	bl	8006338 <__assert_func>
 8006ef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ef4:	6004      	str	r4, [r0, #0]
 8006ef6:	60c4      	str	r4, [r0, #12]
 8006ef8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006efc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f00:	b94c      	cbnz	r4, 8006f16 <__pow5mult+0x66>
 8006f02:	f240 2171 	movw	r1, #625	; 0x271
 8006f06:	4630      	mov	r0, r6
 8006f08:	f7ff ff16 	bl	8006d38 <__i2b>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f12:	4604      	mov	r4, r0
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	f04f 0900 	mov.w	r9, #0
 8006f1a:	07eb      	lsls	r3, r5, #31
 8006f1c:	d50a      	bpl.n	8006f34 <__pow5mult+0x84>
 8006f1e:	4639      	mov	r1, r7
 8006f20:	4622      	mov	r2, r4
 8006f22:	4630      	mov	r0, r6
 8006f24:	f7ff ff1e 	bl	8006d64 <__multiply>
 8006f28:	4639      	mov	r1, r7
 8006f2a:	4680      	mov	r8, r0
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff fdfd 	bl	8006b2c <_Bfree>
 8006f32:	4647      	mov	r7, r8
 8006f34:	106d      	asrs	r5, r5, #1
 8006f36:	d00b      	beq.n	8006f50 <__pow5mult+0xa0>
 8006f38:	6820      	ldr	r0, [r4, #0]
 8006f3a:	b938      	cbnz	r0, 8006f4c <__pow5mult+0x9c>
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4630      	mov	r0, r6
 8006f42:	f7ff ff0f 	bl	8006d64 <__multiply>
 8006f46:	6020      	str	r0, [r4, #0]
 8006f48:	f8c0 9000 	str.w	r9, [r0]
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	e7e4      	b.n	8006f1a <__pow5mult+0x6a>
 8006f50:	4638      	mov	r0, r7
 8006f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f56:	bf00      	nop
 8006f58:	08008af8 	.word	0x08008af8
 8006f5c:	08008760 	.word	0x08008760
 8006f60:	080089a4 	.word	0x080089a4

08006f64 <__lshift>:
 8006f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f68:	460c      	mov	r4, r1
 8006f6a:	6849      	ldr	r1, [r1, #4]
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f72:	68a3      	ldr	r3, [r4, #8]
 8006f74:	4607      	mov	r7, r0
 8006f76:	4691      	mov	r9, r2
 8006f78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f7c:	f108 0601 	add.w	r6, r8, #1
 8006f80:	42b3      	cmp	r3, r6
 8006f82:	db0b      	blt.n	8006f9c <__lshift+0x38>
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff fd91 	bl	8006aac <_Balloc>
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	b948      	cbnz	r0, 8006fa2 <__lshift+0x3e>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	4b28      	ldr	r3, [pc, #160]	; (8007034 <__lshift+0xd0>)
 8006f92:	4829      	ldr	r0, [pc, #164]	; (8007038 <__lshift+0xd4>)
 8006f94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f98:	f7ff f9ce 	bl	8006338 <__assert_func>
 8006f9c:	3101      	adds	r1, #1
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	e7ee      	b.n	8006f80 <__lshift+0x1c>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f100 0114 	add.w	r1, r0, #20
 8006fa8:	f100 0210 	add.w	r2, r0, #16
 8006fac:	4618      	mov	r0, r3
 8006fae:	4553      	cmp	r3, sl
 8006fb0:	db33      	blt.n	800701a <__lshift+0xb6>
 8006fb2:	6920      	ldr	r0, [r4, #16]
 8006fb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fb8:	f104 0314 	add.w	r3, r4, #20
 8006fbc:	f019 091f 	ands.w	r9, r9, #31
 8006fc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fc8:	d02b      	beq.n	8007022 <__lshift+0xbe>
 8006fca:	f1c9 0e20 	rsb	lr, r9, #32
 8006fce:	468a      	mov	sl, r1
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	fa00 f009 	lsl.w	r0, r0, r9
 8006fd8:	4302      	orrs	r2, r0
 8006fda:	f84a 2b04 	str.w	r2, [sl], #4
 8006fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe2:	459c      	cmp	ip, r3
 8006fe4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fe8:	d8f3      	bhi.n	8006fd2 <__lshift+0x6e>
 8006fea:	ebac 0304 	sub.w	r3, ip, r4
 8006fee:	3b15      	subs	r3, #21
 8006ff0:	f023 0303 	bic.w	r3, r3, #3
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	f104 0015 	add.w	r0, r4, #21
 8006ffa:	4584      	cmp	ip, r0
 8006ffc:	bf38      	it	cc
 8006ffe:	2304      	movcc	r3, #4
 8007000:	50ca      	str	r2, [r1, r3]
 8007002:	b10a      	cbz	r2, 8007008 <__lshift+0xa4>
 8007004:	f108 0602 	add.w	r6, r8, #2
 8007008:	3e01      	subs	r6, #1
 800700a:	4638      	mov	r0, r7
 800700c:	612e      	str	r6, [r5, #16]
 800700e:	4621      	mov	r1, r4
 8007010:	f7ff fd8c 	bl	8006b2c <_Bfree>
 8007014:	4628      	mov	r0, r5
 8007016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701a:	f842 0f04 	str.w	r0, [r2, #4]!
 800701e:	3301      	adds	r3, #1
 8007020:	e7c5      	b.n	8006fae <__lshift+0x4a>
 8007022:	3904      	subs	r1, #4
 8007024:	f853 2b04 	ldr.w	r2, [r3], #4
 8007028:	f841 2f04 	str.w	r2, [r1, #4]!
 800702c:	459c      	cmp	ip, r3
 800702e:	d8f9      	bhi.n	8007024 <__lshift+0xc0>
 8007030:	e7ea      	b.n	8007008 <__lshift+0xa4>
 8007032:	bf00      	nop
 8007034:	08008915 	.word	0x08008915
 8007038:	080089a4 	.word	0x080089a4

0800703c <__mcmp>:
 800703c:	b530      	push	{r4, r5, lr}
 800703e:	6902      	ldr	r2, [r0, #16]
 8007040:	690c      	ldr	r4, [r1, #16]
 8007042:	1b12      	subs	r2, r2, r4
 8007044:	d10e      	bne.n	8007064 <__mcmp+0x28>
 8007046:	f100 0314 	add.w	r3, r0, #20
 800704a:	3114      	adds	r1, #20
 800704c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007050:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007054:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007058:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800705c:	42a5      	cmp	r5, r4
 800705e:	d003      	beq.n	8007068 <__mcmp+0x2c>
 8007060:	d305      	bcc.n	800706e <__mcmp+0x32>
 8007062:	2201      	movs	r2, #1
 8007064:	4610      	mov	r0, r2
 8007066:	bd30      	pop	{r4, r5, pc}
 8007068:	4283      	cmp	r3, r0
 800706a:	d3f3      	bcc.n	8007054 <__mcmp+0x18>
 800706c:	e7fa      	b.n	8007064 <__mcmp+0x28>
 800706e:	f04f 32ff 	mov.w	r2, #4294967295
 8007072:	e7f7      	b.n	8007064 <__mcmp+0x28>

08007074 <__mdiff>:
 8007074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	460c      	mov	r4, r1
 800707a:	4606      	mov	r6, r0
 800707c:	4611      	mov	r1, r2
 800707e:	4620      	mov	r0, r4
 8007080:	4617      	mov	r7, r2
 8007082:	f7ff ffdb 	bl	800703c <__mcmp>
 8007086:	1e05      	subs	r5, r0, #0
 8007088:	d110      	bne.n	80070ac <__mdiff+0x38>
 800708a:	4629      	mov	r1, r5
 800708c:	4630      	mov	r0, r6
 800708e:	f7ff fd0d 	bl	8006aac <_Balloc>
 8007092:	b930      	cbnz	r0, 80070a2 <__mdiff+0x2e>
 8007094:	4b39      	ldr	r3, [pc, #228]	; (800717c <__mdiff+0x108>)
 8007096:	4602      	mov	r2, r0
 8007098:	f240 2132 	movw	r1, #562	; 0x232
 800709c:	4838      	ldr	r0, [pc, #224]	; (8007180 <__mdiff+0x10c>)
 800709e:	f7ff f94b 	bl	8006338 <__assert_func>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	bfa4      	itt	ge
 80070ae:	463b      	movge	r3, r7
 80070b0:	4627      	movge	r7, r4
 80070b2:	4630      	mov	r0, r6
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	bfa6      	itte	ge
 80070b8:	461c      	movge	r4, r3
 80070ba:	2500      	movge	r5, #0
 80070bc:	2501      	movlt	r5, #1
 80070be:	f7ff fcf5 	bl	8006aac <_Balloc>
 80070c2:	b920      	cbnz	r0, 80070ce <__mdiff+0x5a>
 80070c4:	4b2d      	ldr	r3, [pc, #180]	; (800717c <__mdiff+0x108>)
 80070c6:	4602      	mov	r2, r0
 80070c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80070cc:	e7e6      	b.n	800709c <__mdiff+0x28>
 80070ce:	693e      	ldr	r6, [r7, #16]
 80070d0:	60c5      	str	r5, [r0, #12]
 80070d2:	6925      	ldr	r5, [r4, #16]
 80070d4:	f107 0114 	add.w	r1, r7, #20
 80070d8:	f104 0914 	add.w	r9, r4, #20
 80070dc:	f100 0e14 	add.w	lr, r0, #20
 80070e0:	f107 0210 	add.w	r2, r7, #16
 80070e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80070e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80070ec:	46f2      	mov	sl, lr
 80070ee:	2700      	movs	r7, #0
 80070f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80070f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80070f8:	fa1f f883 	uxth.w	r8, r3
 80070fc:	fa17 f78b 	uxtah	r7, r7, fp
 8007100:	0c1b      	lsrs	r3, r3, #16
 8007102:	eba7 0808 	sub.w	r8, r7, r8
 8007106:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800710a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800710e:	fa1f f888 	uxth.w	r8, r8
 8007112:	141f      	asrs	r7, r3, #16
 8007114:	454d      	cmp	r5, r9
 8007116:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800711a:	f84a 3b04 	str.w	r3, [sl], #4
 800711e:	d8e7      	bhi.n	80070f0 <__mdiff+0x7c>
 8007120:	1b2b      	subs	r3, r5, r4
 8007122:	3b15      	subs	r3, #21
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	3304      	adds	r3, #4
 800712a:	3415      	adds	r4, #21
 800712c:	42a5      	cmp	r5, r4
 800712e:	bf38      	it	cc
 8007130:	2304      	movcc	r3, #4
 8007132:	4419      	add	r1, r3
 8007134:	4473      	add	r3, lr
 8007136:	469e      	mov	lr, r3
 8007138:	460d      	mov	r5, r1
 800713a:	4565      	cmp	r5, ip
 800713c:	d30e      	bcc.n	800715c <__mdiff+0xe8>
 800713e:	f10c 0203 	add.w	r2, ip, #3
 8007142:	1a52      	subs	r2, r2, r1
 8007144:	f022 0203 	bic.w	r2, r2, #3
 8007148:	3903      	subs	r1, #3
 800714a:	458c      	cmp	ip, r1
 800714c:	bf38      	it	cc
 800714e:	2200      	movcc	r2, #0
 8007150:	441a      	add	r2, r3
 8007152:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007156:	b17b      	cbz	r3, 8007178 <__mdiff+0x104>
 8007158:	6106      	str	r6, [r0, #16]
 800715a:	e7a5      	b.n	80070a8 <__mdiff+0x34>
 800715c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007160:	fa17 f488 	uxtah	r4, r7, r8
 8007164:	1422      	asrs	r2, r4, #16
 8007166:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800716a:	b2a4      	uxth	r4, r4
 800716c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007170:	f84e 4b04 	str.w	r4, [lr], #4
 8007174:	1417      	asrs	r7, r2, #16
 8007176:	e7e0      	b.n	800713a <__mdiff+0xc6>
 8007178:	3e01      	subs	r6, #1
 800717a:	e7ea      	b.n	8007152 <__mdiff+0xde>
 800717c:	08008915 	.word	0x08008915
 8007180:	080089a4 	.word	0x080089a4

08007184 <__ulp>:
 8007184:	b082      	sub	sp, #8
 8007186:	ed8d 0b00 	vstr	d0, [sp]
 800718a:	9b01      	ldr	r3, [sp, #4]
 800718c:	4912      	ldr	r1, [pc, #72]	; (80071d8 <__ulp+0x54>)
 800718e:	4019      	ands	r1, r3
 8007190:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007194:	2900      	cmp	r1, #0
 8007196:	dd05      	ble.n	80071a4 <__ulp+0x20>
 8007198:	2200      	movs	r2, #0
 800719a:	460b      	mov	r3, r1
 800719c:	ec43 2b10 	vmov	d0, r2, r3
 80071a0:	b002      	add	sp, #8
 80071a2:	4770      	bx	lr
 80071a4:	4249      	negs	r1, r1
 80071a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80071aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	da04      	bge.n	80071c2 <__ulp+0x3e>
 80071b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80071bc:	fa41 f300 	asr.w	r3, r1, r0
 80071c0:	e7ec      	b.n	800719c <__ulp+0x18>
 80071c2:	f1a0 0114 	sub.w	r1, r0, #20
 80071c6:	291e      	cmp	r1, #30
 80071c8:	bfda      	itte	le
 80071ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80071ce:	fa20 f101 	lsrle.w	r1, r0, r1
 80071d2:	2101      	movgt	r1, #1
 80071d4:	460a      	mov	r2, r1
 80071d6:	e7e1      	b.n	800719c <__ulp+0x18>
 80071d8:	7ff00000 	.word	0x7ff00000

080071dc <__b2d>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	6905      	ldr	r5, [r0, #16]
 80071e0:	f100 0714 	add.w	r7, r0, #20
 80071e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80071e8:	1f2e      	subs	r6, r5, #4
 80071ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80071ee:	4620      	mov	r0, r4
 80071f0:	f7ff fd52 	bl	8006c98 <__hi0bits>
 80071f4:	f1c0 0320 	rsb	r3, r0, #32
 80071f8:	280a      	cmp	r0, #10
 80071fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007278 <__b2d+0x9c>
 80071fe:	600b      	str	r3, [r1, #0]
 8007200:	dc14      	bgt.n	800722c <__b2d+0x50>
 8007202:	f1c0 0e0b 	rsb	lr, r0, #11
 8007206:	fa24 f10e 	lsr.w	r1, r4, lr
 800720a:	42b7      	cmp	r7, r6
 800720c:	ea41 030c 	orr.w	r3, r1, ip
 8007210:	bf34      	ite	cc
 8007212:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007216:	2100      	movcs	r1, #0
 8007218:	3015      	adds	r0, #21
 800721a:	fa04 f000 	lsl.w	r0, r4, r0
 800721e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007222:	ea40 0201 	orr.w	r2, r0, r1
 8007226:	ec43 2b10 	vmov	d0, r2, r3
 800722a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800722c:	42b7      	cmp	r7, r6
 800722e:	bf3a      	itte	cc
 8007230:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007234:	f1a5 0608 	subcc.w	r6, r5, #8
 8007238:	2100      	movcs	r1, #0
 800723a:	380b      	subs	r0, #11
 800723c:	d017      	beq.n	800726e <__b2d+0x92>
 800723e:	f1c0 0c20 	rsb	ip, r0, #32
 8007242:	fa04 f500 	lsl.w	r5, r4, r0
 8007246:	42be      	cmp	r6, r7
 8007248:	fa21 f40c 	lsr.w	r4, r1, ip
 800724c:	ea45 0504 	orr.w	r5, r5, r4
 8007250:	bf8c      	ite	hi
 8007252:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007256:	2400      	movls	r4, #0
 8007258:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800725c:	fa01 f000 	lsl.w	r0, r1, r0
 8007260:	fa24 f40c 	lsr.w	r4, r4, ip
 8007264:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007268:	ea40 0204 	orr.w	r2, r0, r4
 800726c:	e7db      	b.n	8007226 <__b2d+0x4a>
 800726e:	ea44 030c 	orr.w	r3, r4, ip
 8007272:	460a      	mov	r2, r1
 8007274:	e7d7      	b.n	8007226 <__b2d+0x4a>
 8007276:	bf00      	nop
 8007278:	3ff00000 	.word	0x3ff00000

0800727c <__d2b>:
 800727c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007280:	4689      	mov	r9, r1
 8007282:	2101      	movs	r1, #1
 8007284:	ec57 6b10 	vmov	r6, r7, d0
 8007288:	4690      	mov	r8, r2
 800728a:	f7ff fc0f 	bl	8006aac <_Balloc>
 800728e:	4604      	mov	r4, r0
 8007290:	b930      	cbnz	r0, 80072a0 <__d2b+0x24>
 8007292:	4602      	mov	r2, r0
 8007294:	4b25      	ldr	r3, [pc, #148]	; (800732c <__d2b+0xb0>)
 8007296:	4826      	ldr	r0, [pc, #152]	; (8007330 <__d2b+0xb4>)
 8007298:	f240 310a 	movw	r1, #778	; 0x30a
 800729c:	f7ff f84c 	bl	8006338 <__assert_func>
 80072a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80072a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072a8:	bb35      	cbnz	r5, 80072f8 <__d2b+0x7c>
 80072aa:	2e00      	cmp	r6, #0
 80072ac:	9301      	str	r3, [sp, #4]
 80072ae:	d028      	beq.n	8007302 <__d2b+0x86>
 80072b0:	4668      	mov	r0, sp
 80072b2:	9600      	str	r6, [sp, #0]
 80072b4:	f7ff fd10 	bl	8006cd8 <__lo0bits>
 80072b8:	9900      	ldr	r1, [sp, #0]
 80072ba:	b300      	cbz	r0, 80072fe <__d2b+0x82>
 80072bc:	9a01      	ldr	r2, [sp, #4]
 80072be:	f1c0 0320 	rsb	r3, r0, #32
 80072c2:	fa02 f303 	lsl.w	r3, r2, r3
 80072c6:	430b      	orrs	r3, r1
 80072c8:	40c2      	lsrs	r2, r0
 80072ca:	6163      	str	r3, [r4, #20]
 80072cc:	9201      	str	r2, [sp, #4]
 80072ce:	9b01      	ldr	r3, [sp, #4]
 80072d0:	61a3      	str	r3, [r4, #24]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bf14      	ite	ne
 80072d6:	2202      	movne	r2, #2
 80072d8:	2201      	moveq	r2, #1
 80072da:	6122      	str	r2, [r4, #16]
 80072dc:	b1d5      	cbz	r5, 8007314 <__d2b+0x98>
 80072de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072e2:	4405      	add	r5, r0
 80072e4:	f8c9 5000 	str.w	r5, [r9]
 80072e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072ec:	f8c8 0000 	str.w	r0, [r8]
 80072f0:	4620      	mov	r0, r4
 80072f2:	b003      	add	sp, #12
 80072f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072fc:	e7d5      	b.n	80072aa <__d2b+0x2e>
 80072fe:	6161      	str	r1, [r4, #20]
 8007300:	e7e5      	b.n	80072ce <__d2b+0x52>
 8007302:	a801      	add	r0, sp, #4
 8007304:	f7ff fce8 	bl	8006cd8 <__lo0bits>
 8007308:	9b01      	ldr	r3, [sp, #4]
 800730a:	6163      	str	r3, [r4, #20]
 800730c:	2201      	movs	r2, #1
 800730e:	6122      	str	r2, [r4, #16]
 8007310:	3020      	adds	r0, #32
 8007312:	e7e3      	b.n	80072dc <__d2b+0x60>
 8007314:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007318:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800731c:	f8c9 0000 	str.w	r0, [r9]
 8007320:	6918      	ldr	r0, [r3, #16]
 8007322:	f7ff fcb9 	bl	8006c98 <__hi0bits>
 8007326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800732a:	e7df      	b.n	80072ec <__d2b+0x70>
 800732c:	08008915 	.word	0x08008915
 8007330:	080089a4 	.word	0x080089a4

08007334 <__ratio>:
 8007334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	4688      	mov	r8, r1
 800733a:	4669      	mov	r1, sp
 800733c:	4681      	mov	r9, r0
 800733e:	f7ff ff4d 	bl	80071dc <__b2d>
 8007342:	a901      	add	r1, sp, #4
 8007344:	4640      	mov	r0, r8
 8007346:	ec55 4b10 	vmov	r4, r5, d0
 800734a:	f7ff ff47 	bl	80071dc <__b2d>
 800734e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007352:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007356:	eba3 0c02 	sub.w	ip, r3, r2
 800735a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007364:	ec51 0b10 	vmov	r0, r1, d0
 8007368:	2b00      	cmp	r3, #0
 800736a:	bfd6      	itet	le
 800736c:	460a      	movle	r2, r1
 800736e:	462a      	movgt	r2, r5
 8007370:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007374:	468b      	mov	fp, r1
 8007376:	462f      	mov	r7, r5
 8007378:	bfd4      	ite	le
 800737a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800737e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007382:	4620      	mov	r0, r4
 8007384:	ee10 2a10 	vmov	r2, s0
 8007388:	465b      	mov	r3, fp
 800738a:	4639      	mov	r1, r7
 800738c:	f7f9 fa5e 	bl	800084c <__aeabi_ddiv>
 8007390:	ec41 0b10 	vmov	d0, r0, r1
 8007394:	b003      	add	sp, #12
 8007396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800739a <__copybits>:
 800739a:	3901      	subs	r1, #1
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	1149      	asrs	r1, r1, #5
 80073a0:	6914      	ldr	r4, [r2, #16]
 80073a2:	3101      	adds	r1, #1
 80073a4:	f102 0314 	add.w	r3, r2, #20
 80073a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073b0:	1f05      	subs	r5, r0, #4
 80073b2:	42a3      	cmp	r3, r4
 80073b4:	d30c      	bcc.n	80073d0 <__copybits+0x36>
 80073b6:	1aa3      	subs	r3, r4, r2
 80073b8:	3b11      	subs	r3, #17
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	3211      	adds	r2, #17
 80073c0:	42a2      	cmp	r2, r4
 80073c2:	bf88      	it	hi
 80073c4:	2300      	movhi	r3, #0
 80073c6:	4418      	add	r0, r3
 80073c8:	2300      	movs	r3, #0
 80073ca:	4288      	cmp	r0, r1
 80073cc:	d305      	bcc.n	80073da <__copybits+0x40>
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	f853 6b04 	ldr.w	r6, [r3], #4
 80073d4:	f845 6f04 	str.w	r6, [r5, #4]!
 80073d8:	e7eb      	b.n	80073b2 <__copybits+0x18>
 80073da:	f840 3b04 	str.w	r3, [r0], #4
 80073de:	e7f4      	b.n	80073ca <__copybits+0x30>

080073e0 <__any_on>:
 80073e0:	f100 0214 	add.w	r2, r0, #20
 80073e4:	6900      	ldr	r0, [r0, #16]
 80073e6:	114b      	asrs	r3, r1, #5
 80073e8:	4298      	cmp	r0, r3
 80073ea:	b510      	push	{r4, lr}
 80073ec:	db11      	blt.n	8007412 <__any_on+0x32>
 80073ee:	dd0a      	ble.n	8007406 <__any_on+0x26>
 80073f0:	f011 011f 	ands.w	r1, r1, #31
 80073f4:	d007      	beq.n	8007406 <__any_on+0x26>
 80073f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073fa:	fa24 f001 	lsr.w	r0, r4, r1
 80073fe:	fa00 f101 	lsl.w	r1, r0, r1
 8007402:	428c      	cmp	r4, r1
 8007404:	d10b      	bne.n	800741e <__any_on+0x3e>
 8007406:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800740a:	4293      	cmp	r3, r2
 800740c:	d803      	bhi.n	8007416 <__any_on+0x36>
 800740e:	2000      	movs	r0, #0
 8007410:	bd10      	pop	{r4, pc}
 8007412:	4603      	mov	r3, r0
 8007414:	e7f7      	b.n	8007406 <__any_on+0x26>
 8007416:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800741a:	2900      	cmp	r1, #0
 800741c:	d0f5      	beq.n	800740a <__any_on+0x2a>
 800741e:	2001      	movs	r0, #1
 8007420:	e7f6      	b.n	8007410 <__any_on+0x30>

08007422 <_calloc_r>:
 8007422:	b513      	push	{r0, r1, r4, lr}
 8007424:	434a      	muls	r2, r1
 8007426:	4611      	mov	r1, r2
 8007428:	9201      	str	r2, [sp, #4]
 800742a:	f000 f859 	bl	80074e0 <_malloc_r>
 800742e:	4604      	mov	r4, r0
 8007430:	b118      	cbz	r0, 800743a <_calloc_r+0x18>
 8007432:	9a01      	ldr	r2, [sp, #4]
 8007434:	2100      	movs	r1, #0
 8007436:	f7fe f839 	bl	80054ac <memset>
 800743a:	4620      	mov	r0, r4
 800743c:	b002      	add	sp, #8
 800743e:	bd10      	pop	{r4, pc}

08007440 <_free_r>:
 8007440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007442:	2900      	cmp	r1, #0
 8007444:	d048      	beq.n	80074d8 <_free_r+0x98>
 8007446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800744a:	9001      	str	r0, [sp, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f1a1 0404 	sub.w	r4, r1, #4
 8007452:	bfb8      	it	lt
 8007454:	18e4      	addlt	r4, r4, r3
 8007456:	f000 fea9 	bl	80081ac <__malloc_lock>
 800745a:	4a20      	ldr	r2, [pc, #128]	; (80074dc <_free_r+0x9c>)
 800745c:	9801      	ldr	r0, [sp, #4]
 800745e:	6813      	ldr	r3, [r2, #0]
 8007460:	4615      	mov	r5, r2
 8007462:	b933      	cbnz	r3, 8007472 <_free_r+0x32>
 8007464:	6063      	str	r3, [r4, #4]
 8007466:	6014      	str	r4, [r2, #0]
 8007468:	b003      	add	sp, #12
 800746a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800746e:	f000 bea3 	b.w	80081b8 <__malloc_unlock>
 8007472:	42a3      	cmp	r3, r4
 8007474:	d90b      	bls.n	800748e <_free_r+0x4e>
 8007476:	6821      	ldr	r1, [r4, #0]
 8007478:	1862      	adds	r2, r4, r1
 800747a:	4293      	cmp	r3, r2
 800747c:	bf04      	itt	eq
 800747e:	681a      	ldreq	r2, [r3, #0]
 8007480:	685b      	ldreq	r3, [r3, #4]
 8007482:	6063      	str	r3, [r4, #4]
 8007484:	bf04      	itt	eq
 8007486:	1852      	addeq	r2, r2, r1
 8007488:	6022      	streq	r2, [r4, #0]
 800748a:	602c      	str	r4, [r5, #0]
 800748c:	e7ec      	b.n	8007468 <_free_r+0x28>
 800748e:	461a      	mov	r2, r3
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	b10b      	cbz	r3, 8007498 <_free_r+0x58>
 8007494:	42a3      	cmp	r3, r4
 8007496:	d9fa      	bls.n	800748e <_free_r+0x4e>
 8007498:	6811      	ldr	r1, [r2, #0]
 800749a:	1855      	adds	r5, r2, r1
 800749c:	42a5      	cmp	r5, r4
 800749e:	d10b      	bne.n	80074b8 <_free_r+0x78>
 80074a0:	6824      	ldr	r4, [r4, #0]
 80074a2:	4421      	add	r1, r4
 80074a4:	1854      	adds	r4, r2, r1
 80074a6:	42a3      	cmp	r3, r4
 80074a8:	6011      	str	r1, [r2, #0]
 80074aa:	d1dd      	bne.n	8007468 <_free_r+0x28>
 80074ac:	681c      	ldr	r4, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	6053      	str	r3, [r2, #4]
 80074b2:	4421      	add	r1, r4
 80074b4:	6011      	str	r1, [r2, #0]
 80074b6:	e7d7      	b.n	8007468 <_free_r+0x28>
 80074b8:	d902      	bls.n	80074c0 <_free_r+0x80>
 80074ba:	230c      	movs	r3, #12
 80074bc:	6003      	str	r3, [r0, #0]
 80074be:	e7d3      	b.n	8007468 <_free_r+0x28>
 80074c0:	6825      	ldr	r5, [r4, #0]
 80074c2:	1961      	adds	r1, r4, r5
 80074c4:	428b      	cmp	r3, r1
 80074c6:	bf04      	itt	eq
 80074c8:	6819      	ldreq	r1, [r3, #0]
 80074ca:	685b      	ldreq	r3, [r3, #4]
 80074cc:	6063      	str	r3, [r4, #4]
 80074ce:	bf04      	itt	eq
 80074d0:	1949      	addeq	r1, r1, r5
 80074d2:	6021      	streq	r1, [r4, #0]
 80074d4:	6054      	str	r4, [r2, #4]
 80074d6:	e7c7      	b.n	8007468 <_free_r+0x28>
 80074d8:	b003      	add	sp, #12
 80074da:	bd30      	pop	{r4, r5, pc}
 80074dc:	20000208 	.word	0x20000208

080074e0 <_malloc_r>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	1ccd      	adds	r5, r1, #3
 80074e4:	f025 0503 	bic.w	r5, r5, #3
 80074e8:	3508      	adds	r5, #8
 80074ea:	2d0c      	cmp	r5, #12
 80074ec:	bf38      	it	cc
 80074ee:	250c      	movcc	r5, #12
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	4606      	mov	r6, r0
 80074f4:	db01      	blt.n	80074fa <_malloc_r+0x1a>
 80074f6:	42a9      	cmp	r1, r5
 80074f8:	d903      	bls.n	8007502 <_malloc_r+0x22>
 80074fa:	230c      	movs	r3, #12
 80074fc:	6033      	str	r3, [r6, #0]
 80074fe:	2000      	movs	r0, #0
 8007500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007502:	f000 fe53 	bl	80081ac <__malloc_lock>
 8007506:	4921      	ldr	r1, [pc, #132]	; (800758c <_malloc_r+0xac>)
 8007508:	680a      	ldr	r2, [r1, #0]
 800750a:	4614      	mov	r4, r2
 800750c:	b99c      	cbnz	r4, 8007536 <_malloc_r+0x56>
 800750e:	4f20      	ldr	r7, [pc, #128]	; (8007590 <_malloc_r+0xb0>)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	b923      	cbnz	r3, 800751e <_malloc_r+0x3e>
 8007514:	4621      	mov	r1, r4
 8007516:	4630      	mov	r0, r6
 8007518:	f000 fb32 	bl	8007b80 <_sbrk_r>
 800751c:	6038      	str	r0, [r7, #0]
 800751e:	4629      	mov	r1, r5
 8007520:	4630      	mov	r0, r6
 8007522:	f000 fb2d 	bl	8007b80 <_sbrk_r>
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	d123      	bne.n	8007572 <_malloc_r+0x92>
 800752a:	230c      	movs	r3, #12
 800752c:	6033      	str	r3, [r6, #0]
 800752e:	4630      	mov	r0, r6
 8007530:	f000 fe42 	bl	80081b8 <__malloc_unlock>
 8007534:	e7e3      	b.n	80074fe <_malloc_r+0x1e>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	1b5b      	subs	r3, r3, r5
 800753a:	d417      	bmi.n	800756c <_malloc_r+0x8c>
 800753c:	2b0b      	cmp	r3, #11
 800753e:	d903      	bls.n	8007548 <_malloc_r+0x68>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	441c      	add	r4, r3
 8007544:	6025      	str	r5, [r4, #0]
 8007546:	e004      	b.n	8007552 <_malloc_r+0x72>
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	42a2      	cmp	r2, r4
 800754c:	bf0c      	ite	eq
 800754e:	600b      	streq	r3, [r1, #0]
 8007550:	6053      	strne	r3, [r2, #4]
 8007552:	4630      	mov	r0, r6
 8007554:	f000 fe30 	bl	80081b8 <__malloc_unlock>
 8007558:	f104 000b 	add.w	r0, r4, #11
 800755c:	1d23      	adds	r3, r4, #4
 800755e:	f020 0007 	bic.w	r0, r0, #7
 8007562:	1ac2      	subs	r2, r0, r3
 8007564:	d0cc      	beq.n	8007500 <_malloc_r+0x20>
 8007566:	1a1b      	subs	r3, r3, r0
 8007568:	50a3      	str	r3, [r4, r2]
 800756a:	e7c9      	b.n	8007500 <_malloc_r+0x20>
 800756c:	4622      	mov	r2, r4
 800756e:	6864      	ldr	r4, [r4, #4]
 8007570:	e7cc      	b.n	800750c <_malloc_r+0x2c>
 8007572:	1cc4      	adds	r4, r0, #3
 8007574:	f024 0403 	bic.w	r4, r4, #3
 8007578:	42a0      	cmp	r0, r4
 800757a:	d0e3      	beq.n	8007544 <_malloc_r+0x64>
 800757c:	1a21      	subs	r1, r4, r0
 800757e:	4630      	mov	r0, r6
 8007580:	f000 fafe 	bl	8007b80 <_sbrk_r>
 8007584:	3001      	adds	r0, #1
 8007586:	d1dd      	bne.n	8007544 <_malloc_r+0x64>
 8007588:	e7cf      	b.n	800752a <_malloc_r+0x4a>
 800758a:	bf00      	nop
 800758c:	20000208 	.word	0x20000208
 8007590:	2000020c 	.word	0x2000020c

08007594 <__sfputc_r>:
 8007594:	6893      	ldr	r3, [r2, #8]
 8007596:	3b01      	subs	r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	b410      	push	{r4}
 800759c:	6093      	str	r3, [r2, #8]
 800759e:	da08      	bge.n	80075b2 <__sfputc_r+0x1e>
 80075a0:	6994      	ldr	r4, [r2, #24]
 80075a2:	42a3      	cmp	r3, r4
 80075a4:	db01      	blt.n	80075aa <__sfputc_r+0x16>
 80075a6:	290a      	cmp	r1, #10
 80075a8:	d103      	bne.n	80075b2 <__sfputc_r+0x1e>
 80075aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075ae:	f000 bb09 	b.w	8007bc4 <__swbuf_r>
 80075b2:	6813      	ldr	r3, [r2, #0]
 80075b4:	1c58      	adds	r0, r3, #1
 80075b6:	6010      	str	r0, [r2, #0]
 80075b8:	7019      	strb	r1, [r3, #0]
 80075ba:	4608      	mov	r0, r1
 80075bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <__sfputs_r>:
 80075c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c4:	4606      	mov	r6, r0
 80075c6:	460f      	mov	r7, r1
 80075c8:	4614      	mov	r4, r2
 80075ca:	18d5      	adds	r5, r2, r3
 80075cc:	42ac      	cmp	r4, r5
 80075ce:	d101      	bne.n	80075d4 <__sfputs_r+0x12>
 80075d0:	2000      	movs	r0, #0
 80075d2:	e007      	b.n	80075e4 <__sfputs_r+0x22>
 80075d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d8:	463a      	mov	r2, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	f7ff ffda 	bl	8007594 <__sfputc_r>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d1f3      	bne.n	80075cc <__sfputs_r+0xa>
 80075e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075e8 <_vfiprintf_r>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	460d      	mov	r5, r1
 80075ee:	b09d      	sub	sp, #116	; 0x74
 80075f0:	4614      	mov	r4, r2
 80075f2:	4698      	mov	r8, r3
 80075f4:	4606      	mov	r6, r0
 80075f6:	b118      	cbz	r0, 8007600 <_vfiprintf_r+0x18>
 80075f8:	6983      	ldr	r3, [r0, #24]
 80075fa:	b90b      	cbnz	r3, 8007600 <_vfiprintf_r+0x18>
 80075fc:	f000 fcd2 	bl	8007fa4 <__sinit>
 8007600:	4b89      	ldr	r3, [pc, #548]	; (8007828 <_vfiprintf_r+0x240>)
 8007602:	429d      	cmp	r5, r3
 8007604:	d11b      	bne.n	800763e <_vfiprintf_r+0x56>
 8007606:	6875      	ldr	r5, [r6, #4]
 8007608:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800760a:	07d9      	lsls	r1, r3, #31
 800760c:	d405      	bmi.n	800761a <_vfiprintf_r+0x32>
 800760e:	89ab      	ldrh	r3, [r5, #12]
 8007610:	059a      	lsls	r2, r3, #22
 8007612:	d402      	bmi.n	800761a <_vfiprintf_r+0x32>
 8007614:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007616:	f000 fd63 	bl	80080e0 <__retarget_lock_acquire_recursive>
 800761a:	89ab      	ldrh	r3, [r5, #12]
 800761c:	071b      	lsls	r3, r3, #28
 800761e:	d501      	bpl.n	8007624 <_vfiprintf_r+0x3c>
 8007620:	692b      	ldr	r3, [r5, #16]
 8007622:	b9eb      	cbnz	r3, 8007660 <_vfiprintf_r+0x78>
 8007624:	4629      	mov	r1, r5
 8007626:	4630      	mov	r0, r6
 8007628:	f000 fb2c 	bl	8007c84 <__swsetup_r>
 800762c:	b1c0      	cbz	r0, 8007660 <_vfiprintf_r+0x78>
 800762e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007630:	07dc      	lsls	r4, r3, #31
 8007632:	d50e      	bpl.n	8007652 <_vfiprintf_r+0x6a>
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	b01d      	add	sp, #116	; 0x74
 800763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763e:	4b7b      	ldr	r3, [pc, #492]	; (800782c <_vfiprintf_r+0x244>)
 8007640:	429d      	cmp	r5, r3
 8007642:	d101      	bne.n	8007648 <_vfiprintf_r+0x60>
 8007644:	68b5      	ldr	r5, [r6, #8]
 8007646:	e7df      	b.n	8007608 <_vfiprintf_r+0x20>
 8007648:	4b79      	ldr	r3, [pc, #484]	; (8007830 <_vfiprintf_r+0x248>)
 800764a:	429d      	cmp	r5, r3
 800764c:	bf08      	it	eq
 800764e:	68f5      	ldreq	r5, [r6, #12]
 8007650:	e7da      	b.n	8007608 <_vfiprintf_r+0x20>
 8007652:	89ab      	ldrh	r3, [r5, #12]
 8007654:	0598      	lsls	r0, r3, #22
 8007656:	d4ed      	bmi.n	8007634 <_vfiprintf_r+0x4c>
 8007658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800765a:	f000 fd42 	bl	80080e2 <__retarget_lock_release_recursive>
 800765e:	e7e9      	b.n	8007634 <_vfiprintf_r+0x4c>
 8007660:	2300      	movs	r3, #0
 8007662:	9309      	str	r3, [sp, #36]	; 0x24
 8007664:	2320      	movs	r3, #32
 8007666:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800766a:	f8cd 800c 	str.w	r8, [sp, #12]
 800766e:	2330      	movs	r3, #48	; 0x30
 8007670:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007834 <_vfiprintf_r+0x24c>
 8007674:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007678:	f04f 0901 	mov.w	r9, #1
 800767c:	4623      	mov	r3, r4
 800767e:	469a      	mov	sl, r3
 8007680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007684:	b10a      	cbz	r2, 800768a <_vfiprintf_r+0xa2>
 8007686:	2a25      	cmp	r2, #37	; 0x25
 8007688:	d1f9      	bne.n	800767e <_vfiprintf_r+0x96>
 800768a:	ebba 0b04 	subs.w	fp, sl, r4
 800768e:	d00b      	beq.n	80076a8 <_vfiprintf_r+0xc0>
 8007690:	465b      	mov	r3, fp
 8007692:	4622      	mov	r2, r4
 8007694:	4629      	mov	r1, r5
 8007696:	4630      	mov	r0, r6
 8007698:	f7ff ff93 	bl	80075c2 <__sfputs_r>
 800769c:	3001      	adds	r0, #1
 800769e:	f000 80aa 	beq.w	80077f6 <_vfiprintf_r+0x20e>
 80076a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076a4:	445a      	add	r2, fp
 80076a6:	9209      	str	r2, [sp, #36]	; 0x24
 80076a8:	f89a 3000 	ldrb.w	r3, [sl]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 80a2 	beq.w	80077f6 <_vfiprintf_r+0x20e>
 80076b2:	2300      	movs	r3, #0
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076bc:	f10a 0a01 	add.w	sl, sl, #1
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	9307      	str	r3, [sp, #28]
 80076c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076c8:	931a      	str	r3, [sp, #104]	; 0x68
 80076ca:	4654      	mov	r4, sl
 80076cc:	2205      	movs	r2, #5
 80076ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d2:	4858      	ldr	r0, [pc, #352]	; (8007834 <_vfiprintf_r+0x24c>)
 80076d4:	f7f8 fd84 	bl	80001e0 <memchr>
 80076d8:	9a04      	ldr	r2, [sp, #16]
 80076da:	b9d8      	cbnz	r0, 8007714 <_vfiprintf_r+0x12c>
 80076dc:	06d1      	lsls	r1, r2, #27
 80076de:	bf44      	itt	mi
 80076e0:	2320      	movmi	r3, #32
 80076e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076e6:	0713      	lsls	r3, r2, #28
 80076e8:	bf44      	itt	mi
 80076ea:	232b      	movmi	r3, #43	; 0x2b
 80076ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076f0:	f89a 3000 	ldrb.w	r3, [sl]
 80076f4:	2b2a      	cmp	r3, #42	; 0x2a
 80076f6:	d015      	beq.n	8007724 <_vfiprintf_r+0x13c>
 80076f8:	9a07      	ldr	r2, [sp, #28]
 80076fa:	4654      	mov	r4, sl
 80076fc:	2000      	movs	r0, #0
 80076fe:	f04f 0c0a 	mov.w	ip, #10
 8007702:	4621      	mov	r1, r4
 8007704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007708:	3b30      	subs	r3, #48	; 0x30
 800770a:	2b09      	cmp	r3, #9
 800770c:	d94e      	bls.n	80077ac <_vfiprintf_r+0x1c4>
 800770e:	b1b0      	cbz	r0, 800773e <_vfiprintf_r+0x156>
 8007710:	9207      	str	r2, [sp, #28]
 8007712:	e014      	b.n	800773e <_vfiprintf_r+0x156>
 8007714:	eba0 0308 	sub.w	r3, r0, r8
 8007718:	fa09 f303 	lsl.w	r3, r9, r3
 800771c:	4313      	orrs	r3, r2
 800771e:	9304      	str	r3, [sp, #16]
 8007720:	46a2      	mov	sl, r4
 8007722:	e7d2      	b.n	80076ca <_vfiprintf_r+0xe2>
 8007724:	9b03      	ldr	r3, [sp, #12]
 8007726:	1d19      	adds	r1, r3, #4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	9103      	str	r1, [sp, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	bfbb      	ittet	lt
 8007730:	425b      	neglt	r3, r3
 8007732:	f042 0202 	orrlt.w	r2, r2, #2
 8007736:	9307      	strge	r3, [sp, #28]
 8007738:	9307      	strlt	r3, [sp, #28]
 800773a:	bfb8      	it	lt
 800773c:	9204      	strlt	r2, [sp, #16]
 800773e:	7823      	ldrb	r3, [r4, #0]
 8007740:	2b2e      	cmp	r3, #46	; 0x2e
 8007742:	d10c      	bne.n	800775e <_vfiprintf_r+0x176>
 8007744:	7863      	ldrb	r3, [r4, #1]
 8007746:	2b2a      	cmp	r3, #42	; 0x2a
 8007748:	d135      	bne.n	80077b6 <_vfiprintf_r+0x1ce>
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	1d1a      	adds	r2, r3, #4
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	9203      	str	r2, [sp, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	bfb8      	it	lt
 8007756:	f04f 33ff 	movlt.w	r3, #4294967295
 800775a:	3402      	adds	r4, #2
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007844 <_vfiprintf_r+0x25c>
 8007762:	7821      	ldrb	r1, [r4, #0]
 8007764:	2203      	movs	r2, #3
 8007766:	4650      	mov	r0, sl
 8007768:	f7f8 fd3a 	bl	80001e0 <memchr>
 800776c:	b140      	cbz	r0, 8007780 <_vfiprintf_r+0x198>
 800776e:	2340      	movs	r3, #64	; 0x40
 8007770:	eba0 000a 	sub.w	r0, r0, sl
 8007774:	fa03 f000 	lsl.w	r0, r3, r0
 8007778:	9b04      	ldr	r3, [sp, #16]
 800777a:	4303      	orrs	r3, r0
 800777c:	3401      	adds	r4, #1
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007784:	482c      	ldr	r0, [pc, #176]	; (8007838 <_vfiprintf_r+0x250>)
 8007786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800778a:	2206      	movs	r2, #6
 800778c:	f7f8 fd28 	bl	80001e0 <memchr>
 8007790:	2800      	cmp	r0, #0
 8007792:	d03f      	beq.n	8007814 <_vfiprintf_r+0x22c>
 8007794:	4b29      	ldr	r3, [pc, #164]	; (800783c <_vfiprintf_r+0x254>)
 8007796:	bb1b      	cbnz	r3, 80077e0 <_vfiprintf_r+0x1f8>
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	3307      	adds	r3, #7
 800779c:	f023 0307 	bic.w	r3, r3, #7
 80077a0:	3308      	adds	r3, #8
 80077a2:	9303      	str	r3, [sp, #12]
 80077a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a6:	443b      	add	r3, r7
 80077a8:	9309      	str	r3, [sp, #36]	; 0x24
 80077aa:	e767      	b.n	800767c <_vfiprintf_r+0x94>
 80077ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80077b0:	460c      	mov	r4, r1
 80077b2:	2001      	movs	r0, #1
 80077b4:	e7a5      	b.n	8007702 <_vfiprintf_r+0x11a>
 80077b6:	2300      	movs	r3, #0
 80077b8:	3401      	adds	r4, #1
 80077ba:	9305      	str	r3, [sp, #20]
 80077bc:	4619      	mov	r1, r3
 80077be:	f04f 0c0a 	mov.w	ip, #10
 80077c2:	4620      	mov	r0, r4
 80077c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077c8:	3a30      	subs	r2, #48	; 0x30
 80077ca:	2a09      	cmp	r2, #9
 80077cc:	d903      	bls.n	80077d6 <_vfiprintf_r+0x1ee>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0c5      	beq.n	800775e <_vfiprintf_r+0x176>
 80077d2:	9105      	str	r1, [sp, #20]
 80077d4:	e7c3      	b.n	800775e <_vfiprintf_r+0x176>
 80077d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80077da:	4604      	mov	r4, r0
 80077dc:	2301      	movs	r3, #1
 80077de:	e7f0      	b.n	80077c2 <_vfiprintf_r+0x1da>
 80077e0:	ab03      	add	r3, sp, #12
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	462a      	mov	r2, r5
 80077e6:	4b16      	ldr	r3, [pc, #88]	; (8007840 <_vfiprintf_r+0x258>)
 80077e8:	a904      	add	r1, sp, #16
 80077ea:	4630      	mov	r0, r6
 80077ec:	f3af 8000 	nop.w
 80077f0:	4607      	mov	r7, r0
 80077f2:	1c78      	adds	r0, r7, #1
 80077f4:	d1d6      	bne.n	80077a4 <_vfiprintf_r+0x1bc>
 80077f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077f8:	07d9      	lsls	r1, r3, #31
 80077fa:	d405      	bmi.n	8007808 <_vfiprintf_r+0x220>
 80077fc:	89ab      	ldrh	r3, [r5, #12]
 80077fe:	059a      	lsls	r2, r3, #22
 8007800:	d402      	bmi.n	8007808 <_vfiprintf_r+0x220>
 8007802:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007804:	f000 fc6d 	bl	80080e2 <__retarget_lock_release_recursive>
 8007808:	89ab      	ldrh	r3, [r5, #12]
 800780a:	065b      	lsls	r3, r3, #25
 800780c:	f53f af12 	bmi.w	8007634 <_vfiprintf_r+0x4c>
 8007810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007812:	e711      	b.n	8007638 <_vfiprintf_r+0x50>
 8007814:	ab03      	add	r3, sp, #12
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	462a      	mov	r2, r5
 800781a:	4b09      	ldr	r3, [pc, #36]	; (8007840 <_vfiprintf_r+0x258>)
 800781c:	a904      	add	r1, sp, #16
 800781e:	4630      	mov	r0, r6
 8007820:	f000 f880 	bl	8007924 <_printf_i>
 8007824:	e7e4      	b.n	80077f0 <_vfiprintf_r+0x208>
 8007826:	bf00      	nop
 8007828:	08008b58 	.word	0x08008b58
 800782c:	08008b78 	.word	0x08008b78
 8007830:	08008b38 	.word	0x08008b38
 8007834:	08008b04 	.word	0x08008b04
 8007838:	08008b0e 	.word	0x08008b0e
 800783c:	00000000 	.word	0x00000000
 8007840:	080075c3 	.word	0x080075c3
 8007844:	08008b0a 	.word	0x08008b0a

08007848 <_printf_common>:
 8007848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800784c:	4616      	mov	r6, r2
 800784e:	4699      	mov	r9, r3
 8007850:	688a      	ldr	r2, [r1, #8]
 8007852:	690b      	ldr	r3, [r1, #16]
 8007854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007858:	4293      	cmp	r3, r2
 800785a:	bfb8      	it	lt
 800785c:	4613      	movlt	r3, r2
 800785e:	6033      	str	r3, [r6, #0]
 8007860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007864:	4607      	mov	r7, r0
 8007866:	460c      	mov	r4, r1
 8007868:	b10a      	cbz	r2, 800786e <_printf_common+0x26>
 800786a:	3301      	adds	r3, #1
 800786c:	6033      	str	r3, [r6, #0]
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	0699      	lsls	r1, r3, #26
 8007872:	bf42      	ittt	mi
 8007874:	6833      	ldrmi	r3, [r6, #0]
 8007876:	3302      	addmi	r3, #2
 8007878:	6033      	strmi	r3, [r6, #0]
 800787a:	6825      	ldr	r5, [r4, #0]
 800787c:	f015 0506 	ands.w	r5, r5, #6
 8007880:	d106      	bne.n	8007890 <_printf_common+0x48>
 8007882:	f104 0a19 	add.w	sl, r4, #25
 8007886:	68e3      	ldr	r3, [r4, #12]
 8007888:	6832      	ldr	r2, [r6, #0]
 800788a:	1a9b      	subs	r3, r3, r2
 800788c:	42ab      	cmp	r3, r5
 800788e:	dc26      	bgt.n	80078de <_printf_common+0x96>
 8007890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007894:	1e13      	subs	r3, r2, #0
 8007896:	6822      	ldr	r2, [r4, #0]
 8007898:	bf18      	it	ne
 800789a:	2301      	movne	r3, #1
 800789c:	0692      	lsls	r2, r2, #26
 800789e:	d42b      	bmi.n	80078f8 <_printf_common+0xb0>
 80078a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078a4:	4649      	mov	r1, r9
 80078a6:	4638      	mov	r0, r7
 80078a8:	47c0      	blx	r8
 80078aa:	3001      	adds	r0, #1
 80078ac:	d01e      	beq.n	80078ec <_printf_common+0xa4>
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	68e5      	ldr	r5, [r4, #12]
 80078b2:	6832      	ldr	r2, [r6, #0]
 80078b4:	f003 0306 	and.w	r3, r3, #6
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	bf08      	it	eq
 80078bc:	1aad      	subeq	r5, r5, r2
 80078be:	68a3      	ldr	r3, [r4, #8]
 80078c0:	6922      	ldr	r2, [r4, #16]
 80078c2:	bf0c      	ite	eq
 80078c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078c8:	2500      	movne	r5, #0
 80078ca:	4293      	cmp	r3, r2
 80078cc:	bfc4      	itt	gt
 80078ce:	1a9b      	subgt	r3, r3, r2
 80078d0:	18ed      	addgt	r5, r5, r3
 80078d2:	2600      	movs	r6, #0
 80078d4:	341a      	adds	r4, #26
 80078d6:	42b5      	cmp	r5, r6
 80078d8:	d11a      	bne.n	8007910 <_printf_common+0xc8>
 80078da:	2000      	movs	r0, #0
 80078dc:	e008      	b.n	80078f0 <_printf_common+0xa8>
 80078de:	2301      	movs	r3, #1
 80078e0:	4652      	mov	r2, sl
 80078e2:	4649      	mov	r1, r9
 80078e4:	4638      	mov	r0, r7
 80078e6:	47c0      	blx	r8
 80078e8:	3001      	adds	r0, #1
 80078ea:	d103      	bne.n	80078f4 <_printf_common+0xac>
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
 80078f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f4:	3501      	adds	r5, #1
 80078f6:	e7c6      	b.n	8007886 <_printf_common+0x3e>
 80078f8:	18e1      	adds	r1, r4, r3
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	2030      	movs	r0, #48	; 0x30
 80078fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007902:	4422      	add	r2, r4
 8007904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800790c:	3302      	adds	r3, #2
 800790e:	e7c7      	b.n	80078a0 <_printf_common+0x58>
 8007910:	2301      	movs	r3, #1
 8007912:	4622      	mov	r2, r4
 8007914:	4649      	mov	r1, r9
 8007916:	4638      	mov	r0, r7
 8007918:	47c0      	blx	r8
 800791a:	3001      	adds	r0, #1
 800791c:	d0e6      	beq.n	80078ec <_printf_common+0xa4>
 800791e:	3601      	adds	r6, #1
 8007920:	e7d9      	b.n	80078d6 <_printf_common+0x8e>
	...

08007924 <_printf_i>:
 8007924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007928:	460c      	mov	r4, r1
 800792a:	4691      	mov	r9, r2
 800792c:	7e27      	ldrb	r7, [r4, #24]
 800792e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007930:	2f78      	cmp	r7, #120	; 0x78
 8007932:	4680      	mov	r8, r0
 8007934:	469a      	mov	sl, r3
 8007936:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800793a:	d807      	bhi.n	800794c <_printf_i+0x28>
 800793c:	2f62      	cmp	r7, #98	; 0x62
 800793e:	d80a      	bhi.n	8007956 <_printf_i+0x32>
 8007940:	2f00      	cmp	r7, #0
 8007942:	f000 80d8 	beq.w	8007af6 <_printf_i+0x1d2>
 8007946:	2f58      	cmp	r7, #88	; 0x58
 8007948:	f000 80a3 	beq.w	8007a92 <_printf_i+0x16e>
 800794c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007954:	e03a      	b.n	80079cc <_printf_i+0xa8>
 8007956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800795a:	2b15      	cmp	r3, #21
 800795c:	d8f6      	bhi.n	800794c <_printf_i+0x28>
 800795e:	a001      	add	r0, pc, #4	; (adr r0, 8007964 <_printf_i+0x40>)
 8007960:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007964:	080079bd 	.word	0x080079bd
 8007968:	080079d1 	.word	0x080079d1
 800796c:	0800794d 	.word	0x0800794d
 8007970:	0800794d 	.word	0x0800794d
 8007974:	0800794d 	.word	0x0800794d
 8007978:	0800794d 	.word	0x0800794d
 800797c:	080079d1 	.word	0x080079d1
 8007980:	0800794d 	.word	0x0800794d
 8007984:	0800794d 	.word	0x0800794d
 8007988:	0800794d 	.word	0x0800794d
 800798c:	0800794d 	.word	0x0800794d
 8007990:	08007add 	.word	0x08007add
 8007994:	08007a01 	.word	0x08007a01
 8007998:	08007abf 	.word	0x08007abf
 800799c:	0800794d 	.word	0x0800794d
 80079a0:	0800794d 	.word	0x0800794d
 80079a4:	08007aff 	.word	0x08007aff
 80079a8:	0800794d 	.word	0x0800794d
 80079ac:	08007a01 	.word	0x08007a01
 80079b0:	0800794d 	.word	0x0800794d
 80079b4:	0800794d 	.word	0x0800794d
 80079b8:	08007ac7 	.word	0x08007ac7
 80079bc:	680b      	ldr	r3, [r1, #0]
 80079be:	1d1a      	adds	r2, r3, #4
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	600a      	str	r2, [r1, #0]
 80079c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079cc:	2301      	movs	r3, #1
 80079ce:	e0a3      	b.n	8007b18 <_printf_i+0x1f4>
 80079d0:	6825      	ldr	r5, [r4, #0]
 80079d2:	6808      	ldr	r0, [r1, #0]
 80079d4:	062e      	lsls	r6, r5, #24
 80079d6:	f100 0304 	add.w	r3, r0, #4
 80079da:	d50a      	bpl.n	80079f2 <_printf_i+0xce>
 80079dc:	6805      	ldr	r5, [r0, #0]
 80079de:	600b      	str	r3, [r1, #0]
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	da03      	bge.n	80079ec <_printf_i+0xc8>
 80079e4:	232d      	movs	r3, #45	; 0x2d
 80079e6:	426d      	negs	r5, r5
 80079e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ec:	485e      	ldr	r0, [pc, #376]	; (8007b68 <_printf_i+0x244>)
 80079ee:	230a      	movs	r3, #10
 80079f0:	e019      	b.n	8007a26 <_printf_i+0x102>
 80079f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80079f6:	6805      	ldr	r5, [r0, #0]
 80079f8:	600b      	str	r3, [r1, #0]
 80079fa:	bf18      	it	ne
 80079fc:	b22d      	sxthne	r5, r5
 80079fe:	e7ef      	b.n	80079e0 <_printf_i+0xbc>
 8007a00:	680b      	ldr	r3, [r1, #0]
 8007a02:	6825      	ldr	r5, [r4, #0]
 8007a04:	1d18      	adds	r0, r3, #4
 8007a06:	6008      	str	r0, [r1, #0]
 8007a08:	0628      	lsls	r0, r5, #24
 8007a0a:	d501      	bpl.n	8007a10 <_printf_i+0xec>
 8007a0c:	681d      	ldr	r5, [r3, #0]
 8007a0e:	e002      	b.n	8007a16 <_printf_i+0xf2>
 8007a10:	0669      	lsls	r1, r5, #25
 8007a12:	d5fb      	bpl.n	8007a0c <_printf_i+0xe8>
 8007a14:	881d      	ldrh	r5, [r3, #0]
 8007a16:	4854      	ldr	r0, [pc, #336]	; (8007b68 <_printf_i+0x244>)
 8007a18:	2f6f      	cmp	r7, #111	; 0x6f
 8007a1a:	bf0c      	ite	eq
 8007a1c:	2308      	moveq	r3, #8
 8007a1e:	230a      	movne	r3, #10
 8007a20:	2100      	movs	r1, #0
 8007a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a26:	6866      	ldr	r6, [r4, #4]
 8007a28:	60a6      	str	r6, [r4, #8]
 8007a2a:	2e00      	cmp	r6, #0
 8007a2c:	bfa2      	ittt	ge
 8007a2e:	6821      	ldrge	r1, [r4, #0]
 8007a30:	f021 0104 	bicge.w	r1, r1, #4
 8007a34:	6021      	strge	r1, [r4, #0]
 8007a36:	b90d      	cbnz	r5, 8007a3c <_printf_i+0x118>
 8007a38:	2e00      	cmp	r6, #0
 8007a3a:	d04d      	beq.n	8007ad8 <_printf_i+0x1b4>
 8007a3c:	4616      	mov	r6, r2
 8007a3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a42:	fb03 5711 	mls	r7, r3, r1, r5
 8007a46:	5dc7      	ldrb	r7, [r0, r7]
 8007a48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a4c:	462f      	mov	r7, r5
 8007a4e:	42bb      	cmp	r3, r7
 8007a50:	460d      	mov	r5, r1
 8007a52:	d9f4      	bls.n	8007a3e <_printf_i+0x11a>
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d10b      	bne.n	8007a70 <_printf_i+0x14c>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	07df      	lsls	r7, r3, #31
 8007a5c:	d508      	bpl.n	8007a70 <_printf_i+0x14c>
 8007a5e:	6923      	ldr	r3, [r4, #16]
 8007a60:	6861      	ldr	r1, [r4, #4]
 8007a62:	4299      	cmp	r1, r3
 8007a64:	bfde      	ittt	le
 8007a66:	2330      	movle	r3, #48	; 0x30
 8007a68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a70:	1b92      	subs	r2, r2, r6
 8007a72:	6122      	str	r2, [r4, #16]
 8007a74:	f8cd a000 	str.w	sl, [sp]
 8007a78:	464b      	mov	r3, r9
 8007a7a:	aa03      	add	r2, sp, #12
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	4640      	mov	r0, r8
 8007a80:	f7ff fee2 	bl	8007848 <_printf_common>
 8007a84:	3001      	adds	r0, #1
 8007a86:	d14c      	bne.n	8007b22 <_printf_i+0x1fe>
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8c:	b004      	add	sp, #16
 8007a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a92:	4835      	ldr	r0, [pc, #212]	; (8007b68 <_printf_i+0x244>)
 8007a94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	680e      	ldr	r6, [r1, #0]
 8007a9c:	061f      	lsls	r7, r3, #24
 8007a9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007aa2:	600e      	str	r6, [r1, #0]
 8007aa4:	d514      	bpl.n	8007ad0 <_printf_i+0x1ac>
 8007aa6:	07d9      	lsls	r1, r3, #31
 8007aa8:	bf44      	itt	mi
 8007aaa:	f043 0320 	orrmi.w	r3, r3, #32
 8007aae:	6023      	strmi	r3, [r4, #0]
 8007ab0:	b91d      	cbnz	r5, 8007aba <_printf_i+0x196>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f023 0320 	bic.w	r3, r3, #32
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	2310      	movs	r3, #16
 8007abc:	e7b0      	b.n	8007a20 <_printf_i+0xfc>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	f043 0320 	orr.w	r3, r3, #32
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	2378      	movs	r3, #120	; 0x78
 8007ac8:	4828      	ldr	r0, [pc, #160]	; (8007b6c <_printf_i+0x248>)
 8007aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ace:	e7e3      	b.n	8007a98 <_printf_i+0x174>
 8007ad0:	065e      	lsls	r6, r3, #25
 8007ad2:	bf48      	it	mi
 8007ad4:	b2ad      	uxthmi	r5, r5
 8007ad6:	e7e6      	b.n	8007aa6 <_printf_i+0x182>
 8007ad8:	4616      	mov	r6, r2
 8007ada:	e7bb      	b.n	8007a54 <_printf_i+0x130>
 8007adc:	680b      	ldr	r3, [r1, #0]
 8007ade:	6826      	ldr	r6, [r4, #0]
 8007ae0:	6960      	ldr	r0, [r4, #20]
 8007ae2:	1d1d      	adds	r5, r3, #4
 8007ae4:	600d      	str	r5, [r1, #0]
 8007ae6:	0635      	lsls	r5, r6, #24
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	d501      	bpl.n	8007af0 <_printf_i+0x1cc>
 8007aec:	6018      	str	r0, [r3, #0]
 8007aee:	e002      	b.n	8007af6 <_printf_i+0x1d2>
 8007af0:	0671      	lsls	r1, r6, #25
 8007af2:	d5fb      	bpl.n	8007aec <_printf_i+0x1c8>
 8007af4:	8018      	strh	r0, [r3, #0]
 8007af6:	2300      	movs	r3, #0
 8007af8:	6123      	str	r3, [r4, #16]
 8007afa:	4616      	mov	r6, r2
 8007afc:	e7ba      	b.n	8007a74 <_printf_i+0x150>
 8007afe:	680b      	ldr	r3, [r1, #0]
 8007b00:	1d1a      	adds	r2, r3, #4
 8007b02:	600a      	str	r2, [r1, #0]
 8007b04:	681e      	ldr	r6, [r3, #0]
 8007b06:	6862      	ldr	r2, [r4, #4]
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7f8 fb68 	bl	80001e0 <memchr>
 8007b10:	b108      	cbz	r0, 8007b16 <_printf_i+0x1f2>
 8007b12:	1b80      	subs	r0, r0, r6
 8007b14:	6060      	str	r0, [r4, #4]
 8007b16:	6863      	ldr	r3, [r4, #4]
 8007b18:	6123      	str	r3, [r4, #16]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b20:	e7a8      	b.n	8007a74 <_printf_i+0x150>
 8007b22:	6923      	ldr	r3, [r4, #16]
 8007b24:	4632      	mov	r2, r6
 8007b26:	4649      	mov	r1, r9
 8007b28:	4640      	mov	r0, r8
 8007b2a:	47d0      	blx	sl
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d0ab      	beq.n	8007a88 <_printf_i+0x164>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	079b      	lsls	r3, r3, #30
 8007b34:	d413      	bmi.n	8007b5e <_printf_i+0x23a>
 8007b36:	68e0      	ldr	r0, [r4, #12]
 8007b38:	9b03      	ldr	r3, [sp, #12]
 8007b3a:	4298      	cmp	r0, r3
 8007b3c:	bfb8      	it	lt
 8007b3e:	4618      	movlt	r0, r3
 8007b40:	e7a4      	b.n	8007a8c <_printf_i+0x168>
 8007b42:	2301      	movs	r3, #1
 8007b44:	4632      	mov	r2, r6
 8007b46:	4649      	mov	r1, r9
 8007b48:	4640      	mov	r0, r8
 8007b4a:	47d0      	blx	sl
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	d09b      	beq.n	8007a88 <_printf_i+0x164>
 8007b50:	3501      	adds	r5, #1
 8007b52:	68e3      	ldr	r3, [r4, #12]
 8007b54:	9903      	ldr	r1, [sp, #12]
 8007b56:	1a5b      	subs	r3, r3, r1
 8007b58:	42ab      	cmp	r3, r5
 8007b5a:	dcf2      	bgt.n	8007b42 <_printf_i+0x21e>
 8007b5c:	e7eb      	b.n	8007b36 <_printf_i+0x212>
 8007b5e:	2500      	movs	r5, #0
 8007b60:	f104 0619 	add.w	r6, r4, #25
 8007b64:	e7f5      	b.n	8007b52 <_printf_i+0x22e>
 8007b66:	bf00      	nop
 8007b68:	08008b15 	.word	0x08008b15
 8007b6c:	08008b26 	.word	0x08008b26

08007b70 <nan>:
 8007b70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b78 <nan+0x8>
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	00000000 	.word	0x00000000
 8007b7c:	7ff80000 	.word	0x7ff80000

08007b80 <_sbrk_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d06      	ldr	r5, [pc, #24]	; (8007b9c <_sbrk_r+0x1c>)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	f7f9 fec0 	bl	8001910 <_sbrk>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_sbrk_r+0x1a>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_sbrk_r+0x1a>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	20004378 	.word	0x20004378

08007ba0 <strncmp>:
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	b16a      	cbz	r2, 8007bc0 <strncmp+0x20>
 8007ba4:	3901      	subs	r1, #1
 8007ba6:	1884      	adds	r4, r0, r2
 8007ba8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007bac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d103      	bne.n	8007bbc <strncmp+0x1c>
 8007bb4:	42a0      	cmp	r0, r4
 8007bb6:	d001      	beq.n	8007bbc <strncmp+0x1c>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f5      	bne.n	8007ba8 <strncmp+0x8>
 8007bbc:	1a98      	subs	r0, r3, r2
 8007bbe:	bd10      	pop	{r4, pc}
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	e7fc      	b.n	8007bbe <strncmp+0x1e>

08007bc4 <__swbuf_r>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	460e      	mov	r6, r1
 8007bc8:	4614      	mov	r4, r2
 8007bca:	4605      	mov	r5, r0
 8007bcc:	b118      	cbz	r0, 8007bd6 <__swbuf_r+0x12>
 8007bce:	6983      	ldr	r3, [r0, #24]
 8007bd0:	b90b      	cbnz	r3, 8007bd6 <__swbuf_r+0x12>
 8007bd2:	f000 f9e7 	bl	8007fa4 <__sinit>
 8007bd6:	4b21      	ldr	r3, [pc, #132]	; (8007c5c <__swbuf_r+0x98>)
 8007bd8:	429c      	cmp	r4, r3
 8007bda:	d12b      	bne.n	8007c34 <__swbuf_r+0x70>
 8007bdc:	686c      	ldr	r4, [r5, #4]
 8007bde:	69a3      	ldr	r3, [r4, #24]
 8007be0:	60a3      	str	r3, [r4, #8]
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	071a      	lsls	r2, r3, #28
 8007be6:	d52f      	bpl.n	8007c48 <__swbuf_r+0x84>
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	b36b      	cbz	r3, 8007c48 <__swbuf_r+0x84>
 8007bec:	6923      	ldr	r3, [r4, #16]
 8007bee:	6820      	ldr	r0, [r4, #0]
 8007bf0:	1ac0      	subs	r0, r0, r3
 8007bf2:	6963      	ldr	r3, [r4, #20]
 8007bf4:	b2f6      	uxtb	r6, r6
 8007bf6:	4283      	cmp	r3, r0
 8007bf8:	4637      	mov	r7, r6
 8007bfa:	dc04      	bgt.n	8007c06 <__swbuf_r+0x42>
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 f93c 	bl	8007e7c <_fflush_r>
 8007c04:	bb30      	cbnz	r0, 8007c54 <__swbuf_r+0x90>
 8007c06:	68a3      	ldr	r3, [r4, #8]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	60a3      	str	r3, [r4, #8]
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	1c5a      	adds	r2, r3, #1
 8007c10:	6022      	str	r2, [r4, #0]
 8007c12:	701e      	strb	r6, [r3, #0]
 8007c14:	6963      	ldr	r3, [r4, #20]
 8007c16:	3001      	adds	r0, #1
 8007c18:	4283      	cmp	r3, r0
 8007c1a:	d004      	beq.n	8007c26 <__swbuf_r+0x62>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	07db      	lsls	r3, r3, #31
 8007c20:	d506      	bpl.n	8007c30 <__swbuf_r+0x6c>
 8007c22:	2e0a      	cmp	r6, #10
 8007c24:	d104      	bne.n	8007c30 <__swbuf_r+0x6c>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 f927 	bl	8007e7c <_fflush_r>
 8007c2e:	b988      	cbnz	r0, 8007c54 <__swbuf_r+0x90>
 8007c30:	4638      	mov	r0, r7
 8007c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c34:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <__swbuf_r+0x9c>)
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d101      	bne.n	8007c3e <__swbuf_r+0x7a>
 8007c3a:	68ac      	ldr	r4, [r5, #8]
 8007c3c:	e7cf      	b.n	8007bde <__swbuf_r+0x1a>
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <__swbuf_r+0xa0>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	bf08      	it	eq
 8007c44:	68ec      	ldreq	r4, [r5, #12]
 8007c46:	e7ca      	b.n	8007bde <__swbuf_r+0x1a>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f000 f81a 	bl	8007c84 <__swsetup_r>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d0cb      	beq.n	8007bec <__swbuf_r+0x28>
 8007c54:	f04f 37ff 	mov.w	r7, #4294967295
 8007c58:	e7ea      	b.n	8007c30 <__swbuf_r+0x6c>
 8007c5a:	bf00      	nop
 8007c5c:	08008b58 	.word	0x08008b58
 8007c60:	08008b78 	.word	0x08008b78
 8007c64:	08008b38 	.word	0x08008b38

08007c68 <__ascii_wctomb>:
 8007c68:	b149      	cbz	r1, 8007c7e <__ascii_wctomb+0x16>
 8007c6a:	2aff      	cmp	r2, #255	; 0xff
 8007c6c:	bf85      	ittet	hi
 8007c6e:	238a      	movhi	r3, #138	; 0x8a
 8007c70:	6003      	strhi	r3, [r0, #0]
 8007c72:	700a      	strbls	r2, [r1, #0]
 8007c74:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c78:	bf98      	it	ls
 8007c7a:	2001      	movls	r0, #1
 8007c7c:	4770      	bx	lr
 8007c7e:	4608      	mov	r0, r1
 8007c80:	4770      	bx	lr
	...

08007c84 <__swsetup_r>:
 8007c84:	4b32      	ldr	r3, [pc, #200]	; (8007d50 <__swsetup_r+0xcc>)
 8007c86:	b570      	push	{r4, r5, r6, lr}
 8007c88:	681d      	ldr	r5, [r3, #0]
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	b125      	cbz	r5, 8007c9a <__swsetup_r+0x16>
 8007c90:	69ab      	ldr	r3, [r5, #24]
 8007c92:	b913      	cbnz	r3, 8007c9a <__swsetup_r+0x16>
 8007c94:	4628      	mov	r0, r5
 8007c96:	f000 f985 	bl	8007fa4 <__sinit>
 8007c9a:	4b2e      	ldr	r3, [pc, #184]	; (8007d54 <__swsetup_r+0xd0>)
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	d10f      	bne.n	8007cc0 <__swsetup_r+0x3c>
 8007ca0:	686c      	ldr	r4, [r5, #4]
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ca8:	0719      	lsls	r1, r3, #28
 8007caa:	d42c      	bmi.n	8007d06 <__swsetup_r+0x82>
 8007cac:	06dd      	lsls	r5, r3, #27
 8007cae:	d411      	bmi.n	8007cd4 <__swsetup_r+0x50>
 8007cb0:	2309      	movs	r3, #9
 8007cb2:	6033      	str	r3, [r6, #0]
 8007cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cb8:	81a3      	strh	r3, [r4, #12]
 8007cba:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbe:	e03e      	b.n	8007d3e <__swsetup_r+0xba>
 8007cc0:	4b25      	ldr	r3, [pc, #148]	; (8007d58 <__swsetup_r+0xd4>)
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	d101      	bne.n	8007cca <__swsetup_r+0x46>
 8007cc6:	68ac      	ldr	r4, [r5, #8]
 8007cc8:	e7eb      	b.n	8007ca2 <__swsetup_r+0x1e>
 8007cca:	4b24      	ldr	r3, [pc, #144]	; (8007d5c <__swsetup_r+0xd8>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	bf08      	it	eq
 8007cd0:	68ec      	ldreq	r4, [r5, #12]
 8007cd2:	e7e6      	b.n	8007ca2 <__swsetup_r+0x1e>
 8007cd4:	0758      	lsls	r0, r3, #29
 8007cd6:	d512      	bpl.n	8007cfe <__swsetup_r+0x7a>
 8007cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cda:	b141      	cbz	r1, 8007cee <__swsetup_r+0x6a>
 8007cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce0:	4299      	cmp	r1, r3
 8007ce2:	d002      	beq.n	8007cea <__swsetup_r+0x66>
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f7ff fbab 	bl	8007440 <_free_r>
 8007cea:	2300      	movs	r3, #0
 8007cec:	6363      	str	r3, [r4, #52]	; 0x34
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6063      	str	r3, [r4, #4]
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f043 0308 	orr.w	r3, r3, #8
 8007d04:	81a3      	strh	r3, [r4, #12]
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	b94b      	cbnz	r3, 8007d1e <__swsetup_r+0x9a>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d14:	d003      	beq.n	8007d1e <__swsetup_r+0x9a>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 fa07 	bl	800812c <__smakebuf_r>
 8007d1e:	89a0      	ldrh	r0, [r4, #12]
 8007d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d24:	f010 0301 	ands.w	r3, r0, #1
 8007d28:	d00a      	beq.n	8007d40 <__swsetup_r+0xbc>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60a3      	str	r3, [r4, #8]
 8007d2e:	6963      	ldr	r3, [r4, #20]
 8007d30:	425b      	negs	r3, r3
 8007d32:	61a3      	str	r3, [r4, #24]
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	b943      	cbnz	r3, 8007d4a <__swsetup_r+0xc6>
 8007d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d3c:	d1ba      	bne.n	8007cb4 <__swsetup_r+0x30>
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
 8007d40:	0781      	lsls	r1, r0, #30
 8007d42:	bf58      	it	pl
 8007d44:	6963      	ldrpl	r3, [r4, #20]
 8007d46:	60a3      	str	r3, [r4, #8]
 8007d48:	e7f4      	b.n	8007d34 <__swsetup_r+0xb0>
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	e7f7      	b.n	8007d3e <__swsetup_r+0xba>
 8007d4e:	bf00      	nop
 8007d50:	2000000c 	.word	0x2000000c
 8007d54:	08008b58 	.word	0x08008b58
 8007d58:	08008b78 	.word	0x08008b78
 8007d5c:	08008b38 	.word	0x08008b38

08007d60 <abort>:
 8007d60:	b508      	push	{r3, lr}
 8007d62:	2006      	movs	r0, #6
 8007d64:	f000 fa56 	bl	8008214 <raise>
 8007d68:	2001      	movs	r0, #1
 8007d6a:	f7f9 fd59 	bl	8001820 <_exit>
	...

08007d70 <__sflush_r>:
 8007d70:	898a      	ldrh	r2, [r1, #12]
 8007d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d76:	4605      	mov	r5, r0
 8007d78:	0710      	lsls	r0, r2, #28
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	d458      	bmi.n	8007e30 <__sflush_r+0xc0>
 8007d7e:	684b      	ldr	r3, [r1, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dc05      	bgt.n	8007d90 <__sflush_r+0x20>
 8007d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	dc02      	bgt.n	8007d90 <__sflush_r+0x20>
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	d0f9      	beq.n	8007d8a <__sflush_r+0x1a>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d9c:	682f      	ldr	r7, [r5, #0]
 8007d9e:	602b      	str	r3, [r5, #0]
 8007da0:	d032      	beq.n	8007e08 <__sflush_r+0x98>
 8007da2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	075a      	lsls	r2, r3, #29
 8007da8:	d505      	bpl.n	8007db6 <__sflush_r+0x46>
 8007daa:	6863      	ldr	r3, [r4, #4]
 8007dac:	1ac0      	subs	r0, r0, r3
 8007dae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007db0:	b10b      	cbz	r3, 8007db6 <__sflush_r+0x46>
 8007db2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007db4:	1ac0      	subs	r0, r0, r3
 8007db6:	2300      	movs	r3, #0
 8007db8:	4602      	mov	r2, r0
 8007dba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dbc:	6a21      	ldr	r1, [r4, #32]
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b0      	blx	r6
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	d106      	bne.n	8007dd6 <__sflush_r+0x66>
 8007dc8:	6829      	ldr	r1, [r5, #0]
 8007dca:	291d      	cmp	r1, #29
 8007dcc:	d82c      	bhi.n	8007e28 <__sflush_r+0xb8>
 8007dce:	4a2a      	ldr	r2, [pc, #168]	; (8007e78 <__sflush_r+0x108>)
 8007dd0:	40ca      	lsrs	r2, r1
 8007dd2:	07d6      	lsls	r6, r2, #31
 8007dd4:	d528      	bpl.n	8007e28 <__sflush_r+0xb8>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	6062      	str	r2, [r4, #4]
 8007dda:	04d9      	lsls	r1, r3, #19
 8007ddc:	6922      	ldr	r2, [r4, #16]
 8007dde:	6022      	str	r2, [r4, #0]
 8007de0:	d504      	bpl.n	8007dec <__sflush_r+0x7c>
 8007de2:	1c42      	adds	r2, r0, #1
 8007de4:	d101      	bne.n	8007dea <__sflush_r+0x7a>
 8007de6:	682b      	ldr	r3, [r5, #0]
 8007de8:	b903      	cbnz	r3, 8007dec <__sflush_r+0x7c>
 8007dea:	6560      	str	r0, [r4, #84]	; 0x54
 8007dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dee:	602f      	str	r7, [r5, #0]
 8007df0:	2900      	cmp	r1, #0
 8007df2:	d0ca      	beq.n	8007d8a <__sflush_r+0x1a>
 8007df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df8:	4299      	cmp	r1, r3
 8007dfa:	d002      	beq.n	8007e02 <__sflush_r+0x92>
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f7ff fb1f 	bl	8007440 <_free_r>
 8007e02:	2000      	movs	r0, #0
 8007e04:	6360      	str	r0, [r4, #52]	; 0x34
 8007e06:	e7c1      	b.n	8007d8c <__sflush_r+0x1c>
 8007e08:	6a21      	ldr	r1, [r4, #32]
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b0      	blx	r6
 8007e10:	1c41      	adds	r1, r0, #1
 8007e12:	d1c7      	bne.n	8007da4 <__sflush_r+0x34>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0c4      	beq.n	8007da4 <__sflush_r+0x34>
 8007e1a:	2b1d      	cmp	r3, #29
 8007e1c:	d001      	beq.n	8007e22 <__sflush_r+0xb2>
 8007e1e:	2b16      	cmp	r3, #22
 8007e20:	d101      	bne.n	8007e26 <__sflush_r+0xb6>
 8007e22:	602f      	str	r7, [r5, #0]
 8007e24:	e7b1      	b.n	8007d8a <__sflush_r+0x1a>
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	e7ad      	b.n	8007d8c <__sflush_r+0x1c>
 8007e30:	690f      	ldr	r7, [r1, #16]
 8007e32:	2f00      	cmp	r7, #0
 8007e34:	d0a9      	beq.n	8007d8a <__sflush_r+0x1a>
 8007e36:	0793      	lsls	r3, r2, #30
 8007e38:	680e      	ldr	r6, [r1, #0]
 8007e3a:	bf08      	it	eq
 8007e3c:	694b      	ldreq	r3, [r1, #20]
 8007e3e:	600f      	str	r7, [r1, #0]
 8007e40:	bf18      	it	ne
 8007e42:	2300      	movne	r3, #0
 8007e44:	eba6 0807 	sub.w	r8, r6, r7
 8007e48:	608b      	str	r3, [r1, #8]
 8007e4a:	f1b8 0f00 	cmp.w	r8, #0
 8007e4e:	dd9c      	ble.n	8007d8a <__sflush_r+0x1a>
 8007e50:	6a21      	ldr	r1, [r4, #32]
 8007e52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e54:	4643      	mov	r3, r8
 8007e56:	463a      	mov	r2, r7
 8007e58:	4628      	mov	r0, r5
 8007e5a:	47b0      	blx	r6
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	dc06      	bgt.n	8007e6e <__sflush_r+0xfe>
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e66:	81a3      	strh	r3, [r4, #12]
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	e78e      	b.n	8007d8c <__sflush_r+0x1c>
 8007e6e:	4407      	add	r7, r0
 8007e70:	eba8 0800 	sub.w	r8, r8, r0
 8007e74:	e7e9      	b.n	8007e4a <__sflush_r+0xda>
 8007e76:	bf00      	nop
 8007e78:	20400001 	.word	0x20400001

08007e7c <_fflush_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	690b      	ldr	r3, [r1, #16]
 8007e80:	4605      	mov	r5, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	b913      	cbnz	r3, 8007e8c <_fflush_r+0x10>
 8007e86:	2500      	movs	r5, #0
 8007e88:	4628      	mov	r0, r5
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	b118      	cbz	r0, 8007e96 <_fflush_r+0x1a>
 8007e8e:	6983      	ldr	r3, [r0, #24]
 8007e90:	b90b      	cbnz	r3, 8007e96 <_fflush_r+0x1a>
 8007e92:	f000 f887 	bl	8007fa4 <__sinit>
 8007e96:	4b14      	ldr	r3, [pc, #80]	; (8007ee8 <_fflush_r+0x6c>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	d11b      	bne.n	8007ed4 <_fflush_r+0x58>
 8007e9c:	686c      	ldr	r4, [r5, #4]
 8007e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0ef      	beq.n	8007e86 <_fflush_r+0xa>
 8007ea6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ea8:	07d0      	lsls	r0, r2, #31
 8007eaa:	d404      	bmi.n	8007eb6 <_fflush_r+0x3a>
 8007eac:	0599      	lsls	r1, r3, #22
 8007eae:	d402      	bmi.n	8007eb6 <_fflush_r+0x3a>
 8007eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eb2:	f000 f915 	bl	80080e0 <__retarget_lock_acquire_recursive>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	4621      	mov	r1, r4
 8007eba:	f7ff ff59 	bl	8007d70 <__sflush_r>
 8007ebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ec0:	07da      	lsls	r2, r3, #31
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	d4e0      	bmi.n	8007e88 <_fflush_r+0xc>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	059b      	lsls	r3, r3, #22
 8007eca:	d4dd      	bmi.n	8007e88 <_fflush_r+0xc>
 8007ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ece:	f000 f908 	bl	80080e2 <__retarget_lock_release_recursive>
 8007ed2:	e7d9      	b.n	8007e88 <_fflush_r+0xc>
 8007ed4:	4b05      	ldr	r3, [pc, #20]	; (8007eec <_fflush_r+0x70>)
 8007ed6:	429c      	cmp	r4, r3
 8007ed8:	d101      	bne.n	8007ede <_fflush_r+0x62>
 8007eda:	68ac      	ldr	r4, [r5, #8]
 8007edc:	e7df      	b.n	8007e9e <_fflush_r+0x22>
 8007ede:	4b04      	ldr	r3, [pc, #16]	; (8007ef0 <_fflush_r+0x74>)
 8007ee0:	429c      	cmp	r4, r3
 8007ee2:	bf08      	it	eq
 8007ee4:	68ec      	ldreq	r4, [r5, #12]
 8007ee6:	e7da      	b.n	8007e9e <_fflush_r+0x22>
 8007ee8:	08008b58 	.word	0x08008b58
 8007eec:	08008b78 	.word	0x08008b78
 8007ef0:	08008b38 	.word	0x08008b38

08007ef4 <std>:
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	4604      	mov	r4, r0
 8007efa:	e9c0 3300 	strd	r3, r3, [r0]
 8007efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f02:	6083      	str	r3, [r0, #8]
 8007f04:	8181      	strh	r1, [r0, #12]
 8007f06:	6643      	str	r3, [r0, #100]	; 0x64
 8007f08:	81c2      	strh	r2, [r0, #14]
 8007f0a:	6183      	str	r3, [r0, #24]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	2208      	movs	r2, #8
 8007f10:	305c      	adds	r0, #92	; 0x5c
 8007f12:	f7fd facb 	bl	80054ac <memset>
 8007f16:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <std+0x38>)
 8007f18:	6263      	str	r3, [r4, #36]	; 0x24
 8007f1a:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <std+0x3c>)
 8007f1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f1e:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <std+0x40>)
 8007f20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <std+0x44>)
 8007f24:	6224      	str	r4, [r4, #32]
 8007f26:	6323      	str	r3, [r4, #48]	; 0x30
 8007f28:	bd10      	pop	{r4, pc}
 8007f2a:	bf00      	nop
 8007f2c:	0800824d 	.word	0x0800824d
 8007f30:	0800826f 	.word	0x0800826f
 8007f34:	080082a7 	.word	0x080082a7
 8007f38:	080082cb 	.word	0x080082cb

08007f3c <_cleanup_r>:
 8007f3c:	4901      	ldr	r1, [pc, #4]	; (8007f44 <_cleanup_r+0x8>)
 8007f3e:	f000 b8af 	b.w	80080a0 <_fwalk_reent>
 8007f42:	bf00      	nop
 8007f44:	08007e7d 	.word	0x08007e7d

08007f48 <__sfmoreglue>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	1e4a      	subs	r2, r1, #1
 8007f4c:	2568      	movs	r5, #104	; 0x68
 8007f4e:	4355      	muls	r5, r2
 8007f50:	460e      	mov	r6, r1
 8007f52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f56:	f7ff fac3 	bl	80074e0 <_malloc_r>
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	b140      	cbz	r0, 8007f70 <__sfmoreglue+0x28>
 8007f5e:	2100      	movs	r1, #0
 8007f60:	e9c0 1600 	strd	r1, r6, [r0]
 8007f64:	300c      	adds	r0, #12
 8007f66:	60a0      	str	r0, [r4, #8]
 8007f68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f6c:	f7fd fa9e 	bl	80054ac <memset>
 8007f70:	4620      	mov	r0, r4
 8007f72:	bd70      	pop	{r4, r5, r6, pc}

08007f74 <__sfp_lock_acquire>:
 8007f74:	4801      	ldr	r0, [pc, #4]	; (8007f7c <__sfp_lock_acquire+0x8>)
 8007f76:	f000 b8b3 	b.w	80080e0 <__retarget_lock_acquire_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	20004374 	.word	0x20004374

08007f80 <__sfp_lock_release>:
 8007f80:	4801      	ldr	r0, [pc, #4]	; (8007f88 <__sfp_lock_release+0x8>)
 8007f82:	f000 b8ae 	b.w	80080e2 <__retarget_lock_release_recursive>
 8007f86:	bf00      	nop
 8007f88:	20004374 	.word	0x20004374

08007f8c <__sinit_lock_acquire>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__sinit_lock_acquire+0x8>)
 8007f8e:	f000 b8a7 	b.w	80080e0 <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	2000436f 	.word	0x2000436f

08007f98 <__sinit_lock_release>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__sinit_lock_release+0x8>)
 8007f9a:	f000 b8a2 	b.w	80080e2 <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	2000436f 	.word	0x2000436f

08007fa4 <__sinit>:
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	f7ff fff0 	bl	8007f8c <__sinit_lock_acquire>
 8007fac:	69a3      	ldr	r3, [r4, #24]
 8007fae:	b11b      	cbz	r3, 8007fb8 <__sinit+0x14>
 8007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb4:	f7ff bff0 	b.w	8007f98 <__sinit_lock_release>
 8007fb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fbc:	6523      	str	r3, [r4, #80]	; 0x50
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <__sinit+0x68>)
 8007fc0:	4a13      	ldr	r2, [pc, #76]	; (8008010 <__sinit+0x6c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fc6:	42a3      	cmp	r3, r4
 8007fc8:	bf04      	itt	eq
 8007fca:	2301      	moveq	r3, #1
 8007fcc:	61a3      	streq	r3, [r4, #24]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 f820 	bl	8008014 <__sfp>
 8007fd4:	6060      	str	r0, [r4, #4]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 f81c 	bl	8008014 <__sfp>
 8007fdc:	60a0      	str	r0, [r4, #8]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 f818 	bl	8008014 <__sfp>
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	60e0      	str	r0, [r4, #12]
 8007fe8:	2104      	movs	r1, #4
 8007fea:	6860      	ldr	r0, [r4, #4]
 8007fec:	f7ff ff82 	bl	8007ef4 <std>
 8007ff0:	68a0      	ldr	r0, [r4, #8]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	2109      	movs	r1, #9
 8007ff6:	f7ff ff7d 	bl	8007ef4 <std>
 8007ffa:	68e0      	ldr	r0, [r4, #12]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	2112      	movs	r1, #18
 8008000:	f7ff ff78 	bl	8007ef4 <std>
 8008004:	2301      	movs	r3, #1
 8008006:	61a3      	str	r3, [r4, #24]
 8008008:	e7d2      	b.n	8007fb0 <__sinit+0xc>
 800800a:	bf00      	nop
 800800c:	08008700 	.word	0x08008700
 8008010:	08007f3d 	.word	0x08007f3d

08008014 <__sfp>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	4607      	mov	r7, r0
 8008018:	f7ff ffac 	bl	8007f74 <__sfp_lock_acquire>
 800801c:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <__sfp+0x84>)
 800801e:	681e      	ldr	r6, [r3, #0]
 8008020:	69b3      	ldr	r3, [r6, #24]
 8008022:	b913      	cbnz	r3, 800802a <__sfp+0x16>
 8008024:	4630      	mov	r0, r6
 8008026:	f7ff ffbd 	bl	8007fa4 <__sinit>
 800802a:	3648      	adds	r6, #72	; 0x48
 800802c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008030:	3b01      	subs	r3, #1
 8008032:	d503      	bpl.n	800803c <__sfp+0x28>
 8008034:	6833      	ldr	r3, [r6, #0]
 8008036:	b30b      	cbz	r3, 800807c <__sfp+0x68>
 8008038:	6836      	ldr	r6, [r6, #0]
 800803a:	e7f7      	b.n	800802c <__sfp+0x18>
 800803c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008040:	b9d5      	cbnz	r5, 8008078 <__sfp+0x64>
 8008042:	4b16      	ldr	r3, [pc, #88]	; (800809c <__sfp+0x88>)
 8008044:	60e3      	str	r3, [r4, #12]
 8008046:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800804a:	6665      	str	r5, [r4, #100]	; 0x64
 800804c:	f000 f847 	bl	80080de <__retarget_lock_init_recursive>
 8008050:	f7ff ff96 	bl	8007f80 <__sfp_lock_release>
 8008054:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008058:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800805c:	6025      	str	r5, [r4, #0]
 800805e:	61a5      	str	r5, [r4, #24]
 8008060:	2208      	movs	r2, #8
 8008062:	4629      	mov	r1, r5
 8008064:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008068:	f7fd fa20 	bl	80054ac <memset>
 800806c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008070:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008074:	4620      	mov	r0, r4
 8008076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008078:	3468      	adds	r4, #104	; 0x68
 800807a:	e7d9      	b.n	8008030 <__sfp+0x1c>
 800807c:	2104      	movs	r1, #4
 800807e:	4638      	mov	r0, r7
 8008080:	f7ff ff62 	bl	8007f48 <__sfmoreglue>
 8008084:	4604      	mov	r4, r0
 8008086:	6030      	str	r0, [r6, #0]
 8008088:	2800      	cmp	r0, #0
 800808a:	d1d5      	bne.n	8008038 <__sfp+0x24>
 800808c:	f7ff ff78 	bl	8007f80 <__sfp_lock_release>
 8008090:	230c      	movs	r3, #12
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	e7ee      	b.n	8008074 <__sfp+0x60>
 8008096:	bf00      	nop
 8008098:	08008700 	.word	0x08008700
 800809c:	ffff0001 	.word	0xffff0001

080080a0 <_fwalk_reent>:
 80080a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a4:	4606      	mov	r6, r0
 80080a6:	4688      	mov	r8, r1
 80080a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080ac:	2700      	movs	r7, #0
 80080ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080b2:	f1b9 0901 	subs.w	r9, r9, #1
 80080b6:	d505      	bpl.n	80080c4 <_fwalk_reent+0x24>
 80080b8:	6824      	ldr	r4, [r4, #0]
 80080ba:	2c00      	cmp	r4, #0
 80080bc:	d1f7      	bne.n	80080ae <_fwalk_reent+0xe>
 80080be:	4638      	mov	r0, r7
 80080c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080c4:	89ab      	ldrh	r3, [r5, #12]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d907      	bls.n	80080da <_fwalk_reent+0x3a>
 80080ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080ce:	3301      	adds	r3, #1
 80080d0:	d003      	beq.n	80080da <_fwalk_reent+0x3a>
 80080d2:	4629      	mov	r1, r5
 80080d4:	4630      	mov	r0, r6
 80080d6:	47c0      	blx	r8
 80080d8:	4307      	orrs	r7, r0
 80080da:	3568      	adds	r5, #104	; 0x68
 80080dc:	e7e9      	b.n	80080b2 <_fwalk_reent+0x12>

080080de <__retarget_lock_init_recursive>:
 80080de:	4770      	bx	lr

080080e0 <__retarget_lock_acquire_recursive>:
 80080e0:	4770      	bx	lr

080080e2 <__retarget_lock_release_recursive>:
 80080e2:	4770      	bx	lr

080080e4 <__swhatbuf_r>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	460e      	mov	r6, r1
 80080e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ec:	2900      	cmp	r1, #0
 80080ee:	b096      	sub	sp, #88	; 0x58
 80080f0:	4614      	mov	r4, r2
 80080f2:	461d      	mov	r5, r3
 80080f4:	da07      	bge.n	8008106 <__swhatbuf_r+0x22>
 80080f6:	2300      	movs	r3, #0
 80080f8:	602b      	str	r3, [r5, #0]
 80080fa:	89b3      	ldrh	r3, [r6, #12]
 80080fc:	061a      	lsls	r2, r3, #24
 80080fe:	d410      	bmi.n	8008122 <__swhatbuf_r+0x3e>
 8008100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008104:	e00e      	b.n	8008124 <__swhatbuf_r+0x40>
 8008106:	466a      	mov	r2, sp
 8008108:	f000 f906 	bl	8008318 <_fstat_r>
 800810c:	2800      	cmp	r0, #0
 800810e:	dbf2      	blt.n	80080f6 <__swhatbuf_r+0x12>
 8008110:	9a01      	ldr	r2, [sp, #4]
 8008112:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008116:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800811a:	425a      	negs	r2, r3
 800811c:	415a      	adcs	r2, r3
 800811e:	602a      	str	r2, [r5, #0]
 8008120:	e7ee      	b.n	8008100 <__swhatbuf_r+0x1c>
 8008122:	2340      	movs	r3, #64	; 0x40
 8008124:	2000      	movs	r0, #0
 8008126:	6023      	str	r3, [r4, #0]
 8008128:	b016      	add	sp, #88	; 0x58
 800812a:	bd70      	pop	{r4, r5, r6, pc}

0800812c <__smakebuf_r>:
 800812c:	898b      	ldrh	r3, [r1, #12]
 800812e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008130:	079d      	lsls	r5, r3, #30
 8008132:	4606      	mov	r6, r0
 8008134:	460c      	mov	r4, r1
 8008136:	d507      	bpl.n	8008148 <__smakebuf_r+0x1c>
 8008138:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	6123      	str	r3, [r4, #16]
 8008140:	2301      	movs	r3, #1
 8008142:	6163      	str	r3, [r4, #20]
 8008144:	b002      	add	sp, #8
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	ab01      	add	r3, sp, #4
 800814a:	466a      	mov	r2, sp
 800814c:	f7ff ffca 	bl	80080e4 <__swhatbuf_r>
 8008150:	9900      	ldr	r1, [sp, #0]
 8008152:	4605      	mov	r5, r0
 8008154:	4630      	mov	r0, r6
 8008156:	f7ff f9c3 	bl	80074e0 <_malloc_r>
 800815a:	b948      	cbnz	r0, 8008170 <__smakebuf_r+0x44>
 800815c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008160:	059a      	lsls	r2, r3, #22
 8008162:	d4ef      	bmi.n	8008144 <__smakebuf_r+0x18>
 8008164:	f023 0303 	bic.w	r3, r3, #3
 8008168:	f043 0302 	orr.w	r3, r3, #2
 800816c:	81a3      	strh	r3, [r4, #12]
 800816e:	e7e3      	b.n	8008138 <__smakebuf_r+0xc>
 8008170:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <__smakebuf_r+0x7c>)
 8008172:	62b3      	str	r3, [r6, #40]	; 0x28
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	6020      	str	r0, [r4, #0]
 8008178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817c:	81a3      	strh	r3, [r4, #12]
 800817e:	9b00      	ldr	r3, [sp, #0]
 8008180:	6163      	str	r3, [r4, #20]
 8008182:	9b01      	ldr	r3, [sp, #4]
 8008184:	6120      	str	r0, [r4, #16]
 8008186:	b15b      	cbz	r3, 80081a0 <__smakebuf_r+0x74>
 8008188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800818c:	4630      	mov	r0, r6
 800818e:	f000 f8d5 	bl	800833c <_isatty_r>
 8008192:	b128      	cbz	r0, 80081a0 <__smakebuf_r+0x74>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f023 0303 	bic.w	r3, r3, #3
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	89a0      	ldrh	r0, [r4, #12]
 80081a2:	4305      	orrs	r5, r0
 80081a4:	81a5      	strh	r5, [r4, #12]
 80081a6:	e7cd      	b.n	8008144 <__smakebuf_r+0x18>
 80081a8:	08007f3d 	.word	0x08007f3d

080081ac <__malloc_lock>:
 80081ac:	4801      	ldr	r0, [pc, #4]	; (80081b4 <__malloc_lock+0x8>)
 80081ae:	f7ff bf97 	b.w	80080e0 <__retarget_lock_acquire_recursive>
 80081b2:	bf00      	nop
 80081b4:	20004370 	.word	0x20004370

080081b8 <__malloc_unlock>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__malloc_unlock+0x8>)
 80081ba:	f7ff bf92 	b.w	80080e2 <__retarget_lock_release_recursive>
 80081be:	bf00      	nop
 80081c0:	20004370 	.word	0x20004370

080081c4 <_raise_r>:
 80081c4:	291f      	cmp	r1, #31
 80081c6:	b538      	push	{r3, r4, r5, lr}
 80081c8:	4604      	mov	r4, r0
 80081ca:	460d      	mov	r5, r1
 80081cc:	d904      	bls.n	80081d8 <_raise_r+0x14>
 80081ce:	2316      	movs	r3, #22
 80081d0:	6003      	str	r3, [r0, #0]
 80081d2:	f04f 30ff 	mov.w	r0, #4294967295
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081da:	b112      	cbz	r2, 80081e2 <_raise_r+0x1e>
 80081dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081e0:	b94b      	cbnz	r3, 80081f6 <_raise_r+0x32>
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 f830 	bl	8008248 <_getpid_r>
 80081e8:	462a      	mov	r2, r5
 80081ea:	4601      	mov	r1, r0
 80081ec:	4620      	mov	r0, r4
 80081ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081f2:	f000 b817 	b.w	8008224 <_kill_r>
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d00a      	beq.n	8008210 <_raise_r+0x4c>
 80081fa:	1c59      	adds	r1, r3, #1
 80081fc:	d103      	bne.n	8008206 <_raise_r+0x42>
 80081fe:	2316      	movs	r3, #22
 8008200:	6003      	str	r3, [r0, #0]
 8008202:	2001      	movs	r0, #1
 8008204:	e7e7      	b.n	80081d6 <_raise_r+0x12>
 8008206:	2400      	movs	r4, #0
 8008208:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800820c:	4628      	mov	r0, r5
 800820e:	4798      	blx	r3
 8008210:	2000      	movs	r0, #0
 8008212:	e7e0      	b.n	80081d6 <_raise_r+0x12>

08008214 <raise>:
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <raise+0xc>)
 8008216:	4601      	mov	r1, r0
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	f7ff bfd3 	b.w	80081c4 <_raise_r>
 800821e:	bf00      	nop
 8008220:	2000000c 	.word	0x2000000c

08008224 <_kill_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4d07      	ldr	r5, [pc, #28]	; (8008244 <_kill_r+0x20>)
 8008228:	2300      	movs	r3, #0
 800822a:	4604      	mov	r4, r0
 800822c:	4608      	mov	r0, r1
 800822e:	4611      	mov	r1, r2
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	f7f9 fae5 	bl	8001800 <_kill>
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	d102      	bne.n	8008240 <_kill_r+0x1c>
 800823a:	682b      	ldr	r3, [r5, #0]
 800823c:	b103      	cbz	r3, 8008240 <_kill_r+0x1c>
 800823e:	6023      	str	r3, [r4, #0]
 8008240:	bd38      	pop	{r3, r4, r5, pc}
 8008242:	bf00      	nop
 8008244:	20004378 	.word	0x20004378

08008248 <_getpid_r>:
 8008248:	f7f9 bad2 	b.w	80017f0 <_getpid>

0800824c <__sread>:
 800824c:	b510      	push	{r4, lr}
 800824e:	460c      	mov	r4, r1
 8008250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008254:	f000 f894 	bl	8008380 <_read_r>
 8008258:	2800      	cmp	r0, #0
 800825a:	bfab      	itete	ge
 800825c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800825e:	89a3      	ldrhlt	r3, [r4, #12]
 8008260:	181b      	addge	r3, r3, r0
 8008262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008266:	bfac      	ite	ge
 8008268:	6563      	strge	r3, [r4, #84]	; 0x54
 800826a:	81a3      	strhlt	r3, [r4, #12]
 800826c:	bd10      	pop	{r4, pc}

0800826e <__swrite>:
 800826e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008272:	461f      	mov	r7, r3
 8008274:	898b      	ldrh	r3, [r1, #12]
 8008276:	05db      	lsls	r3, r3, #23
 8008278:	4605      	mov	r5, r0
 800827a:	460c      	mov	r4, r1
 800827c:	4616      	mov	r6, r2
 800827e:	d505      	bpl.n	800828c <__swrite+0x1e>
 8008280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008284:	2302      	movs	r3, #2
 8008286:	2200      	movs	r2, #0
 8008288:	f000 f868 	bl	800835c <_lseek_r>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	4632      	mov	r2, r6
 800829a:	463b      	mov	r3, r7
 800829c:	4628      	mov	r0, r5
 800829e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082a2:	f000 b817 	b.w	80082d4 <_write_r>

080082a6 <__sseek>:
 80082a6:	b510      	push	{r4, lr}
 80082a8:	460c      	mov	r4, r1
 80082aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ae:	f000 f855 	bl	800835c <_lseek_r>
 80082b2:	1c43      	adds	r3, r0, #1
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	bf15      	itete	ne
 80082b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80082ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082c2:	81a3      	strheq	r3, [r4, #12]
 80082c4:	bf18      	it	ne
 80082c6:	81a3      	strhne	r3, [r4, #12]
 80082c8:	bd10      	pop	{r4, pc}

080082ca <__sclose>:
 80082ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ce:	f000 b813 	b.w	80082f8 <_close_r>
	...

080082d4 <_write_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d07      	ldr	r5, [pc, #28]	; (80082f4 <_write_r+0x20>)
 80082d8:	4604      	mov	r4, r0
 80082da:	4608      	mov	r0, r1
 80082dc:	4611      	mov	r1, r2
 80082de:	2200      	movs	r2, #0
 80082e0:	602a      	str	r2, [r5, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	f7f9 fac3 	bl	800186e <_write>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_write_r+0x1e>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_write_r+0x1e>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	20004378 	.word	0x20004378

080082f8 <_close_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d06      	ldr	r5, [pc, #24]	; (8008314 <_close_r+0x1c>)
 80082fc:	2300      	movs	r3, #0
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	f7f9 facf 	bl	80018a6 <_close>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_close_r+0x1a>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_close_r+0x1a>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	20004378 	.word	0x20004378

08008318 <_fstat_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4d07      	ldr	r5, [pc, #28]	; (8008338 <_fstat_r+0x20>)
 800831c:	2300      	movs	r3, #0
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	f7f9 faca 	bl	80018be <_fstat>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	d102      	bne.n	8008334 <_fstat_r+0x1c>
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	b103      	cbz	r3, 8008334 <_fstat_r+0x1c>
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	bd38      	pop	{r3, r4, r5, pc}
 8008336:	bf00      	nop
 8008338:	20004378 	.word	0x20004378

0800833c <_isatty_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4d06      	ldr	r5, [pc, #24]	; (8008358 <_isatty_r+0x1c>)
 8008340:	2300      	movs	r3, #0
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	602b      	str	r3, [r5, #0]
 8008348:	f7f9 fac9 	bl	80018de <_isatty>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_isatty_r+0x1a>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	b103      	cbz	r3, 8008356 <_isatty_r+0x1a>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	20004378 	.word	0x20004378

0800835c <_lseek_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d07      	ldr	r5, [pc, #28]	; (800837c <_lseek_r+0x20>)
 8008360:	4604      	mov	r4, r0
 8008362:	4608      	mov	r0, r1
 8008364:	4611      	mov	r1, r2
 8008366:	2200      	movs	r2, #0
 8008368:	602a      	str	r2, [r5, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	f7f9 fac2 	bl	80018f4 <_lseek>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_lseek_r+0x1e>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_lseek_r+0x1e>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20004378 	.word	0x20004378

08008380 <_read_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d07      	ldr	r5, [pc, #28]	; (80083a0 <_read_r+0x20>)
 8008384:	4604      	mov	r4, r0
 8008386:	4608      	mov	r0, r1
 8008388:	4611      	mov	r1, r2
 800838a:	2200      	movs	r2, #0
 800838c:	602a      	str	r2, [r5, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	f7f9 fa50 	bl	8001834 <_read>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_read_r+0x1e>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b103      	cbz	r3, 800839e <_read_r+0x1e>
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	20004378 	.word	0x20004378

080083a4 <sqrt>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	ed2d 8b02 	vpush	{d8}
 80083aa:	ec55 4b10 	vmov	r4, r5, d0
 80083ae:	f000 f82d 	bl	800840c <__ieee754_sqrt>
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <sqrt+0x64>)
 80083b4:	eeb0 8a40 	vmov.f32	s16, s0
 80083b8:	eef0 8a60 	vmov.f32	s17, s1
 80083bc:	f993 3000 	ldrsb.w	r3, [r3]
 80083c0:	3301      	adds	r3, #1
 80083c2:	d019      	beq.n	80083f8 <sqrt+0x54>
 80083c4:	4622      	mov	r2, r4
 80083c6:	462b      	mov	r3, r5
 80083c8:	4620      	mov	r0, r4
 80083ca:	4629      	mov	r1, r5
 80083cc:	f7f8 fbae 	bl	8000b2c <__aeabi_dcmpun>
 80083d0:	b990      	cbnz	r0, 80083f8 <sqrt+0x54>
 80083d2:	2200      	movs	r2, #0
 80083d4:	2300      	movs	r3, #0
 80083d6:	4620      	mov	r0, r4
 80083d8:	4629      	mov	r1, r5
 80083da:	f7f8 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80083de:	b158      	cbz	r0, 80083f8 <sqrt+0x54>
 80083e0:	f7fd f82c 	bl	800543c <__errno>
 80083e4:	2321      	movs	r3, #33	; 0x21
 80083e6:	6003      	str	r3, [r0, #0]
 80083e8:	2200      	movs	r2, #0
 80083ea:	2300      	movs	r3, #0
 80083ec:	4610      	mov	r0, r2
 80083ee:	4619      	mov	r1, r3
 80083f0:	f7f8 fa2c 	bl	800084c <__aeabi_ddiv>
 80083f4:	ec41 0b18 	vmov	d8, r0, r1
 80083f8:	eeb0 0a48 	vmov.f32	s0, s16
 80083fc:	eef0 0a68 	vmov.f32	s1, s17
 8008400:	ecbd 8b02 	vpop	{d8}
 8008404:	bd38      	pop	{r3, r4, r5, pc}
 8008406:	bf00      	nop
 8008408:	200001e0 	.word	0x200001e0

0800840c <__ieee754_sqrt>:
 800840c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008410:	ec55 4b10 	vmov	r4, r5, d0
 8008414:	4e56      	ldr	r6, [pc, #344]	; (8008570 <__ieee754_sqrt+0x164>)
 8008416:	43ae      	bics	r6, r5
 8008418:	ee10 0a10 	vmov	r0, s0
 800841c:	ee10 3a10 	vmov	r3, s0
 8008420:	4629      	mov	r1, r5
 8008422:	462a      	mov	r2, r5
 8008424:	d110      	bne.n	8008448 <__ieee754_sqrt+0x3c>
 8008426:	ee10 2a10 	vmov	r2, s0
 800842a:	462b      	mov	r3, r5
 800842c:	f7f8 f8e4 	bl	80005f8 <__aeabi_dmul>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4620      	mov	r0, r4
 8008436:	4629      	mov	r1, r5
 8008438:	f7f7 ff28 	bl	800028c <__adddf3>
 800843c:	4604      	mov	r4, r0
 800843e:	460d      	mov	r5, r1
 8008440:	ec45 4b10 	vmov	d0, r4, r5
 8008444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008448:	2d00      	cmp	r5, #0
 800844a:	dc10      	bgt.n	800846e <__ieee754_sqrt+0x62>
 800844c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008450:	4330      	orrs	r0, r6
 8008452:	d0f5      	beq.n	8008440 <__ieee754_sqrt+0x34>
 8008454:	b15d      	cbz	r5, 800846e <__ieee754_sqrt+0x62>
 8008456:	ee10 2a10 	vmov	r2, s0
 800845a:	462b      	mov	r3, r5
 800845c:	ee10 0a10 	vmov	r0, s0
 8008460:	f7f7 ff12 	bl	8000288 <__aeabi_dsub>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	f7f8 f9f0 	bl	800084c <__aeabi_ddiv>
 800846c:	e7e6      	b.n	800843c <__ieee754_sqrt+0x30>
 800846e:	1509      	asrs	r1, r1, #20
 8008470:	d076      	beq.n	8008560 <__ieee754_sqrt+0x154>
 8008472:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008476:	07ce      	lsls	r6, r1, #31
 8008478:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800847c:	bf5e      	ittt	pl
 800847e:	0fda      	lsrpl	r2, r3, #31
 8008480:	005b      	lslpl	r3, r3, #1
 8008482:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008486:	0fda      	lsrs	r2, r3, #31
 8008488:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800848c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008490:	2000      	movs	r0, #0
 8008492:	106d      	asrs	r5, r5, #1
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	f04f 0e16 	mov.w	lr, #22
 800849a:	4684      	mov	ip, r0
 800849c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084a0:	eb0c 0401 	add.w	r4, ip, r1
 80084a4:	4294      	cmp	r4, r2
 80084a6:	bfde      	ittt	le
 80084a8:	1b12      	suble	r2, r2, r4
 80084aa:	eb04 0c01 	addle.w	ip, r4, r1
 80084ae:	1840      	addle	r0, r0, r1
 80084b0:	0052      	lsls	r2, r2, #1
 80084b2:	f1be 0e01 	subs.w	lr, lr, #1
 80084b6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80084ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80084be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084c2:	d1ed      	bne.n	80084a0 <__ieee754_sqrt+0x94>
 80084c4:	4671      	mov	r1, lr
 80084c6:	2720      	movs	r7, #32
 80084c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80084cc:	4562      	cmp	r2, ip
 80084ce:	eb04 060e 	add.w	r6, r4, lr
 80084d2:	dc02      	bgt.n	80084da <__ieee754_sqrt+0xce>
 80084d4:	d113      	bne.n	80084fe <__ieee754_sqrt+0xf2>
 80084d6:	429e      	cmp	r6, r3
 80084d8:	d811      	bhi.n	80084fe <__ieee754_sqrt+0xf2>
 80084da:	2e00      	cmp	r6, #0
 80084dc:	eb06 0e04 	add.w	lr, r6, r4
 80084e0:	da43      	bge.n	800856a <__ieee754_sqrt+0x15e>
 80084e2:	f1be 0f00 	cmp.w	lr, #0
 80084e6:	db40      	blt.n	800856a <__ieee754_sqrt+0x15e>
 80084e8:	f10c 0801 	add.w	r8, ip, #1
 80084ec:	eba2 020c 	sub.w	r2, r2, ip
 80084f0:	429e      	cmp	r6, r3
 80084f2:	bf88      	it	hi
 80084f4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80084f8:	1b9b      	subs	r3, r3, r6
 80084fa:	4421      	add	r1, r4
 80084fc:	46c4      	mov	ip, r8
 80084fe:	0052      	lsls	r2, r2, #1
 8008500:	3f01      	subs	r7, #1
 8008502:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008506:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800850a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800850e:	d1dd      	bne.n	80084cc <__ieee754_sqrt+0xc0>
 8008510:	4313      	orrs	r3, r2
 8008512:	d006      	beq.n	8008522 <__ieee754_sqrt+0x116>
 8008514:	1c4c      	adds	r4, r1, #1
 8008516:	bf13      	iteet	ne
 8008518:	3101      	addne	r1, #1
 800851a:	3001      	addeq	r0, #1
 800851c:	4639      	moveq	r1, r7
 800851e:	f021 0101 	bicne.w	r1, r1, #1
 8008522:	1043      	asrs	r3, r0, #1
 8008524:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008528:	0849      	lsrs	r1, r1, #1
 800852a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800852e:	07c2      	lsls	r2, r0, #31
 8008530:	bf48      	it	mi
 8008532:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008536:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800853a:	460c      	mov	r4, r1
 800853c:	463d      	mov	r5, r7
 800853e:	e77f      	b.n	8008440 <__ieee754_sqrt+0x34>
 8008540:	0ada      	lsrs	r2, r3, #11
 8008542:	3815      	subs	r0, #21
 8008544:	055b      	lsls	r3, r3, #21
 8008546:	2a00      	cmp	r2, #0
 8008548:	d0fa      	beq.n	8008540 <__ieee754_sqrt+0x134>
 800854a:	02d7      	lsls	r7, r2, #11
 800854c:	d50a      	bpl.n	8008564 <__ieee754_sqrt+0x158>
 800854e:	f1c1 0420 	rsb	r4, r1, #32
 8008552:	fa23 f404 	lsr.w	r4, r3, r4
 8008556:	1e4d      	subs	r5, r1, #1
 8008558:	408b      	lsls	r3, r1
 800855a:	4322      	orrs	r2, r4
 800855c:	1b41      	subs	r1, r0, r5
 800855e:	e788      	b.n	8008472 <__ieee754_sqrt+0x66>
 8008560:	4608      	mov	r0, r1
 8008562:	e7f0      	b.n	8008546 <__ieee754_sqrt+0x13a>
 8008564:	0052      	lsls	r2, r2, #1
 8008566:	3101      	adds	r1, #1
 8008568:	e7ef      	b.n	800854a <__ieee754_sqrt+0x13e>
 800856a:	46e0      	mov	r8, ip
 800856c:	e7be      	b.n	80084ec <__ieee754_sqrt+0xe0>
 800856e:	bf00      	nop
 8008570:	7ff00000 	.word	0x7ff00000

08008574 <_init>:
 8008574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008576:	bf00      	nop
 8008578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857a:	bc08      	pop	{r3}
 800857c:	469e      	mov	lr, r3
 800857e:	4770      	bx	lr

08008580 <_fini>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	bf00      	nop
 8008584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008586:	bc08      	pop	{r3}
 8008588:	469e      	mov	lr, r3
 800858a:	4770      	bx	lr
