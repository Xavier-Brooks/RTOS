
project 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000698c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08006b20  08006b20  00016b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007120  08007120  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007128  08007128  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007128  08007128  00017128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200001e0  08007310  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08007310  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d55d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eea  00000000  00000000  0002d76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002fff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027353  00000000  00000000  000308d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aca3  00000000  00000000  00057c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea8be  00000000  00000000  000628c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038cc  00000000  00000000  0014d1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b04 	.word	0x08006b04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006b04 	.word	0x08006b04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b9a4 	b.w	8000ecc <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f83c 	bl	8000c08 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2lz>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	f7ff ff99 	bl	8000adc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x1c>
 8000bac:	4620      	mov	r0, r4
 8000bae:	4629      	mov	r1, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fd0f 	bl	80005f8 <__aeabi_dmul>
 8000bda:	f7ff ffa7 	bl	8000b2c <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc90 	bl	8000504 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <__aeabi_d2ulz+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fd06 	bl	80005f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb48 	bl	8000288 <__aeabi_dsub>
 8000bf8:	f7ff ff98 	bl	8000b2c <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <startup>:
/* USER CODE BEGIN 0 */
/*
 * Simple function that prints a guide to Putty upon startup
 * RET: nothing
 * */
void startup(){
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
	char *msg = "Welcome: Type freq min max\r\nType - type of wave S(sine) T(triangle) R(Rectangle)\r\n";
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <startup+0x44>)
 8000ed8:	607b      	str	r3, [r7, #4]
	char *msg2 = "freq - frequency of the wave (10Hz - 100kHz)\r\nmin - minimum voltage allowed(0V limit)\r\nmax - maximum voltage allowed(3.3V limit)\r\nMax Must Be Greater Than Min\r\n";
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <startup+0x48>)
 8000edc:	603b      	str	r3, [r7, #0]
	USART_Write(huart2.Instance, (uint8_t *)msg, strlen(msg));
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <startup+0x4c>)
 8000ee0:	681c      	ldr	r4, [r3, #0]
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff f974 	bl	80001d0 <strlen>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f000 fba1 	bl	8001636 <USART_Write>
	USART_Write(huart2.Instance, (uint8_t *)msg2, strlen(msg2));
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <startup+0x4c>)
 8000ef6:	681c      	ldr	r4, [r3, #0]
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f7ff f969 	bl	80001d0 <strlen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	4620      	mov	r0, r4
 8000f06:	f000 fb96 	bl	8001636 <USART_Write>
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd90      	pop	{r4, r7, pc}
 8000f12:	bf00      	nop
 8000f14:	08006b20 	.word	0x08006b20
 8000f18:	08006b74 	.word	0x08006b74
 8000f1c:	20000238 	.word	0x20000238

08000f20 <get_cmd>:

/*
 * Gets a command from the user, non blocking
 * */
int get_cmd(){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
	//static string that will retain it's value until user presses enter
	USART_Write(huart2.Instance, "Wave Settings: ", strlen("Wave Settings: "));
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <get_cmd+0x78>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	491b      	ldr	r1, [pc, #108]	; (8000f9c <get_cmd+0x7c>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fb81 	bl	8001636 <USART_Write>
	//enters while loop as user types
	while(1){
		char ch = USART_Read(huart2.Instance); //gets characters from user
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <get_cmd+0x78>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f000 fb67 	bl	800160c <USART_Read>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
		if(ch == '\r' || ch == '\n'){
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b0d      	cmp	r3, #13
 8000f46:	d002      	beq.n	8000f4e <get_cmd+0x2e>
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d111      	bne.n	8000f72 <get_cmd+0x52>
				USART_Write(huart2.Instance, (uint8_t *)"\r\n", strlen("\r\n"));
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <get_cmd+0x78>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2202      	movs	r2, #2
 8000f54:	4912      	ldr	r1, [pc, #72]	; (8000fa0 <get_cmd+0x80>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fb6d 	bl	8001636 <USART_Write>
				parse();
 8000f5c:	f000 f824 	bl	8000fa8 <parse>
				memset(settings, '\0', 20);
 8000f60:	2214      	movs	r2, #20
 8000f62:	2100      	movs	r1, #0
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <get_cmd+0x84>)
 8000f66:	f002 fe41 	bl	8003bec <memset>
				return check_input();
 8000f6a:	f000 f881 	bl	8001070 <check_input>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e00d      	b.n	8000f8e <get_cmd+0x6e>
		}
		USART_Write(huart2.Instance, &ch, 1); //prints character
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <get_cmd+0x78>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	1df9      	adds	r1, r7, #7
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fb5b 	bl	8001636 <USART_Write>
		strncat(settings, &ch, 1); //adds the last pressed key to the instruction sring
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	2201      	movs	r2, #1
 8000f84:	4619      	mov	r1, r3
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <get_cmd+0x84>)
 8000f88:	f002 fe45 	bl	8003c16 <strncat>
	while(1){
 8000f8c:	e7d2      	b.n	8000f34 <get_cmd+0x14>
	}
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000238 	.word	0x20000238
 8000f9c:	08006c18 	.word	0x08006c18
 8000fa0:	08006c28 	.word	0x08006c28
 8000fa4:	20000210 	.word	0x20000210

08000fa8 <parse>:

void parse(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	char* tok = strtok(settings, " ");
 8000fae:	490f      	ldr	r1, [pc, #60]	; (8000fec <parse+0x44>)
 8000fb0:	480f      	ldr	r0, [pc, #60]	; (8000ff0 <parse+0x48>)
 8000fb2:	f003 fc77 	bl	80048a4 <strtok>
 8000fb6:	6038      	str	r0, [r7, #0]
	type = (char)(*tok);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <parse+0x4c>)
 8000fbe:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= 2; i++){
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	e00b      	b.n	8000fde <parse+0x36>
		tok = strtok(NULL, " "); //pull the next parameter
 8000fc6:	4909      	ldr	r1, [pc, #36]	; (8000fec <parse+0x44>)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f003 fc6b 	bl	80048a4 <strtok>
 8000fce:	6038      	str	r0, [r7, #0]
		assign(tok, i);
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	6838      	ldr	r0, [r7, #0]
 8000fd4:	f000 f810 	bl	8000ff8 <assign>
	for(int i = 0; i <= 2; i++){
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	ddf0      	ble.n	8000fc6 <parse+0x1e>
	}
	return;
 8000fe4:	bf00      	nop
}
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	08006c2c 	.word	0x08006c2c
 8000ff0:	20000210 	.word	0x20000210
 8000ff4:	2000020c 	.word	0x2000020c

08000ff8 <assign>:

void assign(char* str, int c){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	switch (c){
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d01b      	beq.n	8001040 <assign+0x48>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2b02      	cmp	r3, #2
 800100c:	dc24      	bgt.n	8001058 <assign+0x60>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <assign+0x24>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d007      	beq.n	800102a <assign+0x32>
			break;
		case 2:
			max = (double)atof(str);
			break;
		default:
			return;
 800101a:	e01d      	b.n	8001058 <assign+0x60>
			frequency = atoi(str);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f002 fdb7 	bl	8003b90 <atoi>
 8001022:	4603      	mov	r3, r0
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <assign+0x68>)
 8001026:	6013      	str	r3, [r2, #0]
			break;
 8001028:	e015      	b.n	8001056 <assign+0x5e>
			min = (double)atof(str);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f002 fdad 	bl	8003b8a <atof>
 8001030:	eeb0 7a40 	vmov.f32	s14, s0
 8001034:	eef0 7a60 	vmov.f32	s15, s1
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <assign+0x6c>)
 800103a:	ed83 7b00 	vstr	d7, [r3]
			break;
 800103e:	e00a      	b.n	8001056 <assign+0x5e>
			max = (double)atof(str);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f002 fda2 	bl	8003b8a <atof>
 8001046:	eeb0 7a40 	vmov.f32	s14, s0
 800104a:	eef0 7a60 	vmov.f32	s15, s1
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <assign+0x70>)
 8001050:	ed83 7b00 	vstr	d7, [r3]
			break;
 8001054:	bf00      	nop
	}
	return;
 8001056:	e000      	b.n	800105a <assign+0x62>
			return;
 8001058:	bf00      	nop
}
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000208 	.word	0x20000208
 8001064:	20000230 	.word	0x20000230
 8001068:	20000228 	.word	0x20000228
 800106c:	00000000 	.word	0x00000000

08001070 <check_input>:

/*
 * Verifies the user requested an acceptable signal
 * */
int check_input(){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	int flag = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
	if(!strchr("rstRST", type)){
 800107a:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <check_input+0xc0>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	482c      	ldr	r0, [pc, #176]	; (8001134 <check_input+0xc4>)
 8001082:	f002 fdbb 	bl	8003bfc <strchr>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <check_input+0x20>
		flag = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
	}
	if( (frequency < 10) || (frequency > 100000)){
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <check_input+0xc8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b09      	cmp	r3, #9
 8001096:	dd04      	ble.n	80010a2 <check_input+0x32>
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <check_input+0xc8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <check_input+0xcc>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	dd01      	ble.n	80010a6 <check_input+0x36>
		flag = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
	}
	if((min < 0.0) || (min >= max) || (min >= 3.3)){
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <check_input+0xd0>)
 80010a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	f7ff fd12 	bl	8000adc <__aeabi_dcmplt>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d115      	bne.n	80010ea <check_input+0x7a>
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <check_input+0xd0>)
 80010c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <check_input+0xd4>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fd1b 	bl	8000b04 <__aeabi_dcmpge>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10a      	bne.n	80010ea <check_input+0x7a>
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <check_input+0xd0>)
 80010d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010da:	a313      	add	r3, pc, #76	; (adr r3, 8001128 <check_input+0xb8>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fd10 	bl	8000b04 <__aeabi_dcmpge>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <check_input+0x7e>
		flag = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
	}
	if((max > 3.3) || (max <= min)){
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <check_input+0xd4>)
 80010f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001128 <check_input+0xb8>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d10a      	bne.n	800111a <check_input+0xaa>
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <check_input+0xd4>)
 8001106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <check_input+0xd0>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fcee 	bl	8000af0 <__aeabi_dcmple>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <check_input+0xae>
		flag = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
	}
	return flag;
 800111e:	687b      	ldr	r3, [r7, #4]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	66666666 	.word	0x66666666
 800112c:	400a6666 	.word	0x400a6666
 8001130:	2000020c 	.word	0x2000020c
 8001134:	08006c30 	.word	0x08006c30
 8001138:	20000208 	.word	0x20000208
 800113c:	000186a0 	.word	0x000186a0
 8001140:	20000230 	.word	0x20000230
 8001144:	20000228 	.word	0x20000228

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f000 facd 	bl	80016ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f81a 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 f89a 	bl	800128c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001158:	f000 f868 	bl	800122c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  startup();
 800115c:	f7ff feb8 	bl	8000ed0 <startup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 while(!get_cmd()){
 8001160:	e000      	b.n	8001164 <main+0x1c>
		 continue;
 8001162:	bf00      	nop
	 while(!get_cmd()){
 8001164:	f7ff fedc 	bl	8000f20 <get_cmd>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f9      	beq.n	8001162 <main+0x1a>
	 }
	 USART_Write(huart2.Instance, "Hi!\r\n", strlen("Hi!\r\n"));
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <main+0x38>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2205      	movs	r2, #5
 8001174:	4903      	ldr	r1, [pc, #12]	; (8001184 <main+0x3c>)
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fa5d 	bl	8001636 <USART_Write>
	 while(!get_cmd()){
 800117c:	e7f2      	b.n	8001164 <main+0x1c>
 800117e:	bf00      	nop
 8001180:	20000238 	.word	0x20000238
 8001184:	08006c38 	.word	0x08006c38

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b096      	sub	sp, #88	; 0x58
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2244      	movs	r2, #68	; 0x44
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fd28 	bl	8003bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011ae:	f000 fdaf 	bl	8001d10 <HAL_PWREx_ControlVoltageScaling>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011b8:	f000 f880 	bl	80012bc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011bc:	2310      	movs	r3, #16
 80011be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011c8:	2360      	movs	r3, #96	; 0x60
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011cc:	2302      	movs	r3, #2
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011d0:	2301      	movs	r3, #1
 80011d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 80011d8:	2320      	movs	r3, #32
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011dc:	2307      	movs	r3, #7
 80011de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fde5 	bl	8001dbc <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011f8:	f000 f860 	bl	80012bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2303      	movs	r3, #3
 8001202:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	2103      	movs	r1, #3
 8001214:	4618      	mov	r0, r3
 8001216:	f001 f9b7 	bl	8002588 <HAL_RCC_ClockConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001220:	f000 f84c 	bl	80012bc <Error_Handler>
  }
}
 8001224:	bf00      	nop
 8001226:	3758      	adds	r7, #88	; 0x58
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <MX_USART2_UART_Init+0x5c>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART2_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART2_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART2_UART_Init+0x58>)
 8001270:	f002 f84c 	bl	800330c <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800127a:	f000 f81f 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000238 	.word	0x20000238
 8001288:	40004400 	.word	0x40004400

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_GPIO_Init+0x2c>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <MX_GPIO_Init+0x2c>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_GPIO_Init+0x2c>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <Error_Handler+0x8>
	...

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_MspInit+0x44>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_MspInit+0x44>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6613      	str	r3, [r2, #96]	; 0x60
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_MspInit+0x44>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_MspInit+0x44>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_MspInit+0x44>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6593      	str	r3, [r2, #88]	; 0x58
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_MspInit+0x44>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0ac      	sub	sp, #176	; 0xb0
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2288      	movs	r2, #136	; 0x88
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fc5b 	bl	8003bec <memset>
  if(huart->Instance==USART2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <HAL_UART_MspInit+0xb0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d13b      	bne.n	80013b8 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001340:	2302      	movs	r3, #2
 8001342:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001344:	2300      	movs	r3, #0
 8001346:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fb21 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001358:	f7ff ffb0 	bl	80012bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_UART_MspInit+0xb4>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <HAL_UART_MspInit+0xb4>)
 8001362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001366:	6593      	str	r3, [r2, #88]	; 0x58
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_UART_MspInit+0xb4>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_UART_MspInit+0xb4>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <HAL_UART_MspInit+0xb4>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_UART_MspInit+0xb4>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800138c:	230c      	movs	r3, #12
 800138e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a4:	2307      	movs	r3, #7
 80013a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ae:	4619      	mov	r1, r3
 80013b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b4:	f000 faf4 	bl	80019a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013b8:	bf00      	nop
 80013ba:	37b0      	adds	r7, #176	; 0xb0
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40021000 	.word	0x40021000

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <NMI_Handler+0x4>

080013ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f9be 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	return 1;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <_kill>:

int _kill(int pid, int sig)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001436:	f002 fbaf 	bl	8003b98 <__errno>
 800143a:	4603      	mov	r3, r0
 800143c:	2216      	movs	r2, #22
 800143e:	601a      	str	r2, [r3, #0]
	return -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <_exit>:

void _exit (int status)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ffe7 	bl	800142c <_kill>
	while (1) {}		/* Make sure we hang here */
 800145e:	e7fe      	b.n	800145e <_exit+0x12>

08001460 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	e00a      	b.n	8001488 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001472:	f3af 8000 	nop.w
 8001476:	4601      	mov	r1, r0
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60ba      	str	r2, [r7, #8]
 800147e:	b2ca      	uxtb	r2, r1
 8001480:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	dbf0      	blt.n	8001472 <_read+0x12>
	}

return len;
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e009      	b.n	80014c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	60ba      	str	r2, [r7, #8]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf1      	blt.n	80014ac <_write+0x12>
	}
	return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_close>:

int _close(int file)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
	return -1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fa:	605a      	str	r2, [r3, #4]
	return 0;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_isatty>:

int _isatty(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	return 1;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
	return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <_sbrk+0x5c>)
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <_sbrk+0x60>)
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <_sbrk+0x64>)
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <_sbrk+0x68>)
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	429a      	cmp	r2, r3
 800156a:	d207      	bcs.n	800157c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800156c:	f002 fb14 	bl	8003b98 <__errno>
 8001570:	4603      	mov	r3, r0
 8001572:	220c      	movs	r2, #12
 8001574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	e009      	b.n	8001590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <_sbrk+0x64>)
 800158c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20018000 	.word	0x20018000
 800159c:	00000400 	.word	0x00000400
 80015a0:	200001fc 	.word	0x200001fc
 80015a4:	200002d0 	.word	0x200002d0

080015a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <SystemInit+0x5c>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <SystemInit+0x5c>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <SystemInit+0x60>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <SystemInit+0x60>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <SystemInit+0x60>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <SystemInit+0x60>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <SystemInit+0x60>)
 80015d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <SystemInit+0x60>)
 80015e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <SystemInit+0x60>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <SystemInit+0x60>)
 80015ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SystemInit+0x60>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00
 8001608:	40021000 	.word	0x40021000

0800160c <USART_Read>:
#include "main.h"

uint8_t USART_Read (USART_TypeDef * USARTx) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
// SR_RXNE (Read data register not empty) bit is set by hardware
while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8001614:	bf00      	nop
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 0320 	and.w	r3, r3, #32
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f9      	beq.n	8001616 <USART_Read+0xa>
// USART resets the RXNE flag automatically after reading DR
return ((uint8_t)(USARTx->RDR & 0xFF));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001626:	b29b      	uxth	r3, r3
 8001628:	b2db      	uxtb	r3, r3
// Reading USART_DR automatically clears the RXNE flag
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8001636:	b480      	push	{r7}
 8001638:	b087      	sub	sp, #28
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data egister), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e010      	b.n	800166a <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8001648:	bf00      	nop
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f9      	beq.n	800164a <USART_Write+0x14>
;    	// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF; // writing USART_TDR automatically clears the TXE flag
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3301      	adds	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d8ea      	bhi.n	8001648 <USART_Write+0x12>
		}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001672:	bf00      	nop
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f9      	beq.n	8001674 <USART_Write+0x3e>
		;  // wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	61da      	str	r2, [r3, #28]
}
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800169c:	f7ff ff84 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016a2:	e003      	b.n	80016ac <LoopCopyDataInit>

080016a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016aa:	3104      	adds	r1, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016ac:	480a      	ldr	r0, [pc, #40]	; (80016d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80016b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016b4:	d3f6      	bcc.n	80016a4 <CopyDataInit>
	ldr	r2, =_sbss
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016b8:	e002      	b.n	80016c0 <LoopFillZerobss>

080016ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016bc:	f842 3b04 	str.w	r3, [r2], #4

080016c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <LoopForever+0x16>)
	cmp	r2, r3
 80016c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016c4:	d3f9      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c6:	f002 fa6d 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ca:	f7ff fd3d 	bl	8001148 <main>

080016ce <LoopForever>:

LoopForever:
    b LoopForever
 80016ce:	e7fe      	b.n	80016ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016d0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80016d4:	08007130 	.word	0x08007130
	ldr	r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016dc:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80016e0:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80016e4:	200002d0 	.word	0x200002d0

080016e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC1_2_IRQHandler>

080016ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f000 f91f 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016fa:	200f      	movs	r0, #15
 80016fc:	f000 f80e 	bl	800171c <HAL_InitTick>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	71fb      	strb	r3, [r7, #7]
 800170a:	e001      	b.n	8001710 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800170c:	f7ff fddc 	bl	80012c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001710:	79fb      	ldrb	r3, [r7, #7]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_InitTick+0x6c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d023      	beq.n	8001778 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_InitTick+0x70>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_InitTick+0x6c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f91d 	bl	8001986 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10f      	bne.n	8001772 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d809      	bhi.n	800176c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 f8f5 	bl	800194e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_InitTick+0x74>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e007      	b.n	800177c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e004      	b.n	800177c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	e001      	b.n	800177c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000008 	.word	0x20000008
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	200002bc 	.word	0x200002bc

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200002bc 	.word	0x200002bc

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	; (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001904:	d301      	bcc.n	800190a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <SysTick_Config+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001912:	210f      	movs	r1, #15
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f7ff ff8e 	bl	8001838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <SysTick_Config+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <SysTick_Config+0x40>)
 8001924:	2207      	movs	r2, #7
 8001926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff47 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001960:	f7ff ff5c 	bl	800181c <__NVIC_GetPriorityGrouping>
 8001964:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f7ff ff8e 	bl	800188c <NVIC_EncodePriority>
 8001970:	4602      	mov	r2, r0
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff5d 	bl	8001838 <__NVIC_SetPriority>
}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ffb0 	bl	80018f4 <SysTick_Config>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ae:	e17f      	b.n	8001cb0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8171 	beq.w	8001caa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d00b      	beq.n	80019e8 <HAL_GPIO_Init+0x48>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d007      	beq.n	80019e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019dc:	2b11      	cmp	r3, #17
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b12      	cmp	r3, #18
 80019e6:	d130      	bne.n	8001a4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a1e:	2201      	movs	r2, #1
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 0201 	and.w	r2, r3, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d118      	bne.n	8001a88 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	f003 0201 	and.w	r2, r3, #1
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x128>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b12      	cmp	r3, #18
 8001ac6:	d123      	bne.n	8001b10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	6939      	ldr	r1, [r7, #16]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80ac 	beq.w	8001caa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b56:	4a5e      	ldr	r2, [pc, #376]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b5e:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b6a:	4a5a      	ldr	r2, [pc, #360]	; (8001cd4 <HAL_GPIO_Init+0x334>)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b94:	d025      	beq.n	8001be2 <HAL_GPIO_Init+0x242>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4f      	ldr	r2, [pc, #316]	; (8001cd8 <HAL_GPIO_Init+0x338>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01f      	beq.n	8001bde <HAL_GPIO_Init+0x23e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4e      	ldr	r2, [pc, #312]	; (8001cdc <HAL_GPIO_Init+0x33c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0x23a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4d      	ldr	r2, [pc, #308]	; (8001ce0 <HAL_GPIO_Init+0x340>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0x236>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4c      	ldr	r2, [pc, #304]	; (8001ce4 <HAL_GPIO_Init+0x344>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_GPIO_Init+0x232>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4b      	ldr	r2, [pc, #300]	; (8001ce8 <HAL_GPIO_Init+0x348>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <HAL_GPIO_Init+0x22e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4a      	ldr	r2, [pc, #296]	; (8001cec <HAL_GPIO_Init+0x34c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_GPIO_Init+0x22a>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e00c      	b.n	8001be4 <HAL_GPIO_Init+0x244>
 8001bca:	2307      	movs	r3, #7
 8001bcc:	e00a      	b.n	8001be4 <HAL_GPIO_Init+0x244>
 8001bce:	2305      	movs	r3, #5
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x244>
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x244>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x244>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x244>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x244>
 8001be2:	2300      	movs	r3, #0
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bf4:	4937      	ldr	r1, [pc, #220]	; (8001cd4 <HAL_GPIO_Init+0x334>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c02:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c26:	4a32      	ldr	r2, [pc, #200]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c2c:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ca4:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f47f ae78 	bne.w	80019b0 <HAL_GPIO_Init+0x10>
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	371c      	adds	r7, #28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	48000400 	.word	0x48000400
 8001cdc:	48000800 	.word	0x48000800
 8001ce0:	48000c00 	.word	0x48000c00
 8001ce4:	48001000 	.word	0x48001000
 8001ce8:	48001400 	.word	0x48001400
 8001cec:	48001800 	.word	0x48001800
 8001cf0:	40010400 	.word	0x40010400

08001cf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_PWREx_GetVoltageRange+0x18>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40007000 	.word	0x40007000

08001d10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1e:	d130      	bne.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d20:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d2c:	d038      	beq.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d36:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2232      	movs	r2, #50	; 0x32
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	0c9b      	lsrs	r3, r3, #18
 8001d50:	3301      	adds	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d54:	e002      	b.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d68:	d102      	bne.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f2      	bne.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7c:	d110      	bne.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e00f      	b.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8e:	d007      	beq.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40007000 	.word	0x40007000
 8001db4:	20000000 	.word	0x20000000
 8001db8:	431bde83 	.word	0x431bde83

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e3d4      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4ba1      	ldr	r3, [pc, #644]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd8:	4b9e      	ldr	r3, [pc, #632]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80e4 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_RCC_OscConfig+0x4a>
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	f040 808b 	bne.w	8001f14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	f040 8087 	bne.w	8001f14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e06:	4b93      	ldr	r3, [pc, #588]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x62>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e3ac      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1a      	ldr	r2, [r3, #32]
 8001e22:	4b8c      	ldr	r3, [pc, #560]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_RCC_OscConfig+0x7c>
 8001e2e:	4b89      	ldr	r3, [pc, #548]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e36:	e005      	b.n	8001e44 <HAL_RCC_OscConfig+0x88>
 8001e38:	4b86      	ldr	r3, [pc, #536]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d223      	bcs.n	8001e90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fd41 	bl	80028d4 <RCC_SetFlashLatencyFromMSIRange>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e38d      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7c      	ldr	r2, [pc, #496]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4977      	ldr	r1, [pc, #476]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7a:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	4972      	ldr	r1, [pc, #456]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
 8001e8e:	e025      	b.n	8001edc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e90:	4b70      	ldr	r3, [pc, #448]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6f      	ldr	r2, [pc, #444]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	496a      	ldr	r1, [pc, #424]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eae:	4b69      	ldr	r3, [pc, #420]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	4965      	ldr	r1, [pc, #404]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fd01 	bl	80028d4 <RCC_SetFlashLatencyFromMSIRange>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e34d      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001edc:	f000 fc36 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	495a      	ldr	r1, [pc, #360]	; (8002058 <HAL_RCC_OscConfig+0x29c>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_RCC_OscConfig+0x2a0>)
 8001efa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001efc:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_RCC_OscConfig+0x2a4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fc0b 	bl	800171c <HAL_InitTick>
 8001f06:	4603      	mov	r3, r0
 8001f08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d052      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	e331      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d032      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fc48 	bl	80017bc <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f30:	f7ff fc44 	bl	80017bc <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e31a      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f42:	4b44      	ldr	r3, [pc, #272]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a40      	ldr	r2, [pc, #256]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	493b      	ldr	r1, [pc, #236]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f6c:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	4936      	ldr	r1, [pc, #216]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
 8001f80:	e01a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a33      	ldr	r2, [pc, #204]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fc15 	bl	80017bc <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f96:	f7ff fc11 	bl	80017bc <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e2e7      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x1da>
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d074      	beq.n	80020ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x21a>
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b0c      	cmp	r3, #12
 8001fce:	d10e      	bne.n	8001fee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d10b      	bne.n	8001fee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d064      	beq.n	80020ac <HAL_RCC_OscConfig+0x2f0>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d160      	bne.n	80020ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e2c4      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x24a>
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a15      	ldr	r2, [pc, #84]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e01d      	b.n	8002042 <HAL_RCC_OscConfig+0x286>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800200e:	d10c      	bne.n	800202a <HAL_RCC_OscConfig+0x26e>
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e00b      	b.n	8002042 <HAL_RCC_OscConfig+0x286>
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a06      	ldr	r2, [pc, #24]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 800203c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01c      	beq.n	8002084 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff fbb7 	bl	80017bc <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002050:	e011      	b.n	8002076 <HAL_RCC_OscConfig+0x2ba>
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	08006c40 	.word	0x08006c40
 800205c:	20000000 	.word	0x20000000
 8002060:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff fbaa 	bl	80017bc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e280      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002076:	4baf      	ldr	r3, [pc, #700]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x2a8>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff fb9a 	bl	80017bc <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff fb96 	bl	80017bc <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e26c      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800209e:	4ba5      	ldr	r3, [pc, #660]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x2d0>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d060      	beq.n	800217c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d005      	beq.n	80020cc <HAL_RCC_OscConfig+0x310>
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d119      	bne.n	80020fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d116      	bne.n	80020fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020cc:	4b99      	ldr	r3, [pc, #612]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_OscConfig+0x328>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e249      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b93      	ldr	r3, [pc, #588]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	4990      	ldr	r1, [pc, #576]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f8:	e040      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d023      	beq.n	800214a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002102:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a8b      	ldr	r2, [pc, #556]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7ff fb55 	bl	80017bc <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002116:	f7ff fb51 	bl	80017bc <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e227      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002128:	4b82      	ldr	r3, [pc, #520]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b7f      	ldr	r3, [pc, #508]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	061b      	lsls	r3, r3, #24
 8002142:	497c      	ldr	r1, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
 8002148:	e018      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b7a      	ldr	r3, [pc, #488]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a79      	ldr	r2, [pc, #484]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7ff fb31 	bl	80017bc <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215e:	f7ff fb2d 	bl	80017bc <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e203      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d03c      	beq.n	8002202 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01c      	beq.n	80021ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002190:	4b68      	ldr	r3, [pc, #416]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002196:	4a67      	ldr	r2, [pc, #412]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7ff fb0c 	bl	80017bc <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7ff fb08 	bl	80017bc <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1de      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ba:	4b5e      	ldr	r3, [pc, #376]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80021bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ef      	beq.n	80021a8 <HAL_RCC_OscConfig+0x3ec>
 80021c8:	e01b      	b.n	8002202 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ca:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80021cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d0:	4a58      	ldr	r2, [pc, #352]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7ff faef 	bl	80017bc <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e2:	f7ff faeb 	bl	80017bc <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1c1      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f4:	4b4f      	ldr	r3, [pc, #316]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ef      	bne.n	80021e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80a6 	beq.w	800235c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002214:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10d      	bne.n	800223c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	4a43      	ldr	r2, [pc, #268]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222a:	6593      	str	r3, [r2, #88]	; 0x58
 800222c:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002238:	2301      	movs	r3, #1
 800223a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223c:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <HAL_RCC_OscConfig+0x57c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d118      	bne.n	800227a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_RCC_OscConfig+0x57c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <HAL_RCC_OscConfig+0x57c>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002254:	f7ff fab2 	bl	80017bc <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7ff faae 	bl	80017bc <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e184      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_RCC_OscConfig+0x57c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x4d8>
 8002282:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002292:	e024      	b.n	80022de <HAL_RCC_OscConfig+0x522>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d110      	bne.n	80022be <HAL_RCC_OscConfig+0x502>
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	4a24      	ldr	r2, [pc, #144]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	4a20      	ldr	r2, [pc, #128]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022bc:	e00f      	b.n	80022de <HAL_RCC_OscConfig+0x522>
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7ff fa69 	bl	80017bc <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7ff fa65 	bl	80017bc <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e139      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ed      	beq.n	80022ee <HAL_RCC_OscConfig+0x532>
 8002312:	e01a      	b.n	800234a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7ff fa52 	bl	80017bc <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800231a:	e00f      	b.n	800233c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7ff fa4e 	bl	80017bc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d906      	bls.n	800233c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e122      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800233c:	4b90      	ldr	r3, [pc, #576]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1e8      	bne.n	800231c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800234a:	7ffb      	ldrb	r3, [r7, #31]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002350:	4b8b      	ldr	r3, [pc, #556]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	4a8a      	ldr	r2, [pc, #552]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8108 	beq.w	8002576 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	2b02      	cmp	r3, #2
 800236c:	f040 80d0 	bne.w	8002510 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002370:	4b83      	ldr	r3, [pc, #524]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0203 	and.w	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	429a      	cmp	r2, r3
 8002382:	d130      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	3b01      	subs	r3, #1
 8002390:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d127      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d11f      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023b0:	2a07      	cmp	r2, #7
 80023b2:	bf14      	ite	ne
 80023b4:	2201      	movne	r2, #1
 80023b6:	2200      	moveq	r2, #0
 80023b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d113      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	3b01      	subs	r3, #1
 80023cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d109      	bne.n	80023e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	3b01      	subs	r3, #1
 80023e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d06e      	beq.n	80024c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b0c      	cmp	r3, #12
 80023ea:	d069      	beq.n	80024c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023ec:	4b64      	ldr	r3, [pc, #400]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023f8:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0b7      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002408:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a5c      	ldr	r2, [pc, #368]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 800240e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002412:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002414:	f7ff f9d2 	bl	80017bc <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241c:	f7ff f9ce 	bl	80017bc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0a4      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242e:	4b54      	ldr	r3, [pc, #336]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800243a:	4b51      	ldr	r3, [pc, #324]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	4b51      	ldr	r3, [pc, #324]	; (8002584 <HAL_RCC_OscConfig+0x7c8>)
 8002440:	4013      	ands	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800244a:	3a01      	subs	r2, #1
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	4311      	orrs	r1, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002454:	0212      	lsls	r2, r2, #8
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800245c:	0852      	lsrs	r2, r2, #1
 800245e:	3a01      	subs	r2, #1
 8002460:	0552      	lsls	r2, r2, #21
 8002462:	4311      	orrs	r1, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002468:	0852      	lsrs	r2, r2, #1
 800246a:	3a01      	subs	r2, #1
 800246c:	0652      	lsls	r2, r2, #25
 800246e:	4311      	orrs	r1, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002474:	0912      	lsrs	r2, r2, #4
 8002476:	0452      	lsls	r2, r2, #17
 8002478:	430a      	orrs	r2, r1
 800247a:	4941      	ldr	r1, [pc, #260]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 800247c:	4313      	orrs	r3, r2
 800247e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002480:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a3e      	ldr	r2, [pc, #248]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800248c:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a3b      	ldr	r2, [pc, #236]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002496:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002498:	f7ff f990 	bl	80017bc <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff f98c 	bl	80017bc <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e062      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b2:	4b33      	ldr	r3, [pc, #204]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024be:	e05a      	b.n	8002576 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e059      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d152      	bne.n	8002576 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a27      	ldr	r2, [pc, #156]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024e8:	f7ff f968 	bl	80017bc <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7ff f964 	bl	80017bc <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e03a      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002502:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x734>
 800250e:	e032      	b.n	8002576 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d02d      	beq.n	8002572 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 800251c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002520:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002534:	f023 0303 	bic.w	r3, r3, #3
 8002538:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002540:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002548:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7ff f937 	bl	80017bc <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7ff f933 	bl	80017bc <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e009      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_OscConfig+0x7c4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x796>
 8002570:	e001      	b.n	8002576 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	f99d808c 	.word	0xf99d808c

08002588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0c8      	b.n	800272e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b66      	ldr	r3, [pc, #408]	; (8002738 <HAL_RCC_ClockConfig+0x1b0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d910      	bls.n	80025cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_ClockConfig+0x1b0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 0207 	bic.w	r2, r3, #7
 80025b2:	4961      	ldr	r1, [pc, #388]	; (8002738 <HAL_RCC_ClockConfig+0x1b0>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b5f      	ldr	r3, [pc, #380]	; (8002738 <HAL_RCC_ClockConfig+0x1b0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0b0      	b.n	800272e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d04c      	beq.n	8002672 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e0:	4b56      	ldr	r3, [pc, #344]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d121      	bne.n	8002630 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e09e      	b.n	800272e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d115      	bne.n	8002630 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e092      	b.n	800272e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e086      	b.n	800272e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002620:	4b46      	ldr	r3, [pc, #280]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e07e      	b.n	800272e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 0203 	bic.w	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	493f      	ldr	r1, [pc, #252]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002642:	f7ff f8bb 	bl	80017bc <HAL_GetTick>
 8002646:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002648:	e00a      	b.n	8002660 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264a:	f7ff f8b7 	bl	80017bc <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e066      	b.n	800272e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 020c 	and.w	r2, r3, #12
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	429a      	cmp	r2, r3
 8002670:	d1eb      	bne.n	800264a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267e:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	492c      	ldr	r1, [pc, #176]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002690:	4b29      	ldr	r3, [pc, #164]	; (8002738 <HAL_RCC_ClockConfig+0x1b0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d210      	bcs.n	80026c0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b26      	ldr	r3, [pc, #152]	; (8002738 <HAL_RCC_ClockConfig+0x1b0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0207 	bic.w	r2, r3, #7
 80026a6:	4924      	ldr	r1, [pc, #144]	; (8002738 <HAL_RCC_ClockConfig+0x1b0>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_RCC_ClockConfig+0x1b0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e036      	b.n	800272e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4918      	ldr	r1, [pc, #96]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4910      	ldr	r1, [pc, #64]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026fe:	f000 f825 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8002702:	4602      	mov	r2, r0
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_RCC_ClockConfig+0x1b4>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	490c      	ldr	r1, [pc, #48]	; (8002740 <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	5ccb      	ldrb	r3, [r1, r3]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fffa 	bl	800171c <HAL_InitTick>
 8002728:	4603      	mov	r3, r0
 800272a:	72fb      	strb	r3, [r7, #11]

  return status;
 800272c:	7afb      	ldrb	r3, [r7, #11]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40022000 	.word	0x40022000
 800273c:	40021000 	.word	0x40021000
 8002740:	08006c40 	.word	0x08006c40
 8002744:	20000000 	.word	0x20000000
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275a:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x34>
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d121      	bne.n	80027be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d11e      	bne.n	80027be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002780:	4b34      	ldr	r3, [pc, #208]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d107      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800278c:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 800278e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	e005      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027a8:	4a2b      	ldr	r2, [pc, #172]	; (8002858 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d102      	bne.n	80027ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_RCC_GetSysClockFreq+0x110>)
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	e004      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027d0:	4b23      	ldr	r3, [pc, #140]	; (8002860 <HAL_RCC_GetSysClockFreq+0x114>)
 80027d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d134      	bne.n	8002844 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d003      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0xac>
 80027f0:	e005      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_RCC_GetSysClockFreq+0x110>)
 80027f4:	617b      	str	r3, [r7, #20]
      break;
 80027f6:	e005      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_GetSysClockFreq+0x114>)
 80027fa:	617b      	str	r3, [r7, #20]
      break;
 80027fc:	e002      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	617b      	str	r3, [r7, #20]
      break;
 8002802:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	3301      	adds	r3, #1
 8002810:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	fb02 f203 	mul.w	r2, r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_GetSysClockFreq+0x108>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	0e5b      	lsrs	r3, r3, #25
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	3301      	adds	r3, #1
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002844:	69bb      	ldr	r3, [r7, #24]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	08006c58 	.word	0x08006c58
 800285c:	00f42400 	.word	0x00f42400
 8002860:	007a1200 	.word	0x007a1200

08002864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_RCC_GetHCLKFreq+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000000 	.word	0x20000000

0800287c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002880:	f7ff fff0 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4904      	ldr	r1, [pc, #16]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	08006c50 	.word	0x08006c50

080028a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028ac:	f7ff ffda 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0adb      	lsrs	r3, r3, #11
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4904      	ldr	r1, [pc, #16]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08006c50 	.word	0x08006c50

080028d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028e0:	4b2a      	ldr	r3, [pc, #168]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028ec:	f7ff fa02 	bl	8001cf4 <HAL_PWREx_GetVoltageRange>
 80028f0:	6178      	str	r0, [r7, #20]
 80028f2:	e014      	b.n	800291e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002900:	4b22      	ldr	r3, [pc, #136]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800290c:	f7ff f9f2 	bl	8001cf4 <HAL_PWREx_GetVoltageRange>
 8002910:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	4a1d      	ldr	r2, [pc, #116]	; (800298c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002924:	d10b      	bne.n	800293e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b80      	cmp	r3, #128	; 0x80
 800292a:	d919      	bls.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2ba0      	cmp	r3, #160	; 0xa0
 8002930:	d902      	bls.n	8002938 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002932:	2302      	movs	r3, #2
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	e013      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002938:	2301      	movs	r3, #1
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e010      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b80      	cmp	r3, #128	; 0x80
 8002942:	d902      	bls.n	800294a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002944:	2303      	movs	r3, #3
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	e00a      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d102      	bne.n	8002956 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002950:	2302      	movs	r3, #2
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	e004      	b.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b70      	cmp	r3, #112	; 0x70
 800295a:	d101      	bne.n	8002960 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800295c:	2301      	movs	r3, #1
 800295e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 0207 	bic.w	r2, r3, #7
 8002968:	4909      	ldr	r1, [pc, #36]	; (8002990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002970:	4b07      	ldr	r3, [pc, #28]	; (8002990 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	40022000 	.word	0x40022000

08002994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800299c:	2300      	movs	r3, #0
 800299e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029a0:	2300      	movs	r3, #0
 80029a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d041      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029b8:	d02a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029be:	d824      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029c4:	d008      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ca:	d81e      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d4:	d010      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029d6:	e018      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029d8:	4b86      	ldr	r3, [pc, #536]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a85      	ldr	r2, [pc, #532]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e4:	e015      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fabb 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029f6:	e00c      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3320      	adds	r3, #32
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fba6 	bl	8003150 <RCCEx_PLLSAI2_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a08:	e003      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a0e:	e000      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002a10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a18:	4b76      	ldr	r3, [pc, #472]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a26:	4973      	ldr	r1, [pc, #460]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a2e:	e001      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d041      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a48:	d02a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a4e:	d824      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a54:	d008      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a5a:	d81e      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a64:	d010      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a66:	e018      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a68:	4b62      	ldr	r3, [pc, #392]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a61      	ldr	r2, [pc, #388]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a74:	e015      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fa73 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 8002a82:	4603      	mov	r3, r0
 8002a84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a86:	e00c      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3320      	adds	r3, #32
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fb5e 	bl	8003150 <RCCEx_PLLSAI2_Config>
 8002a94:	4603      	mov	r3, r0
 8002a96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a98:	e003      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10b      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aa8:	4b52      	ldr	r3, [pc, #328]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab6:	494f      	ldr	r1, [pc, #316]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002abe:	e001      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80a0 	beq.w	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	4a40      	ldr	r2, [pc, #256]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6593      	str	r3, [r2, #88]	; 0x58
 8002af8:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b04:	2301      	movs	r3, #1
 8002b06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b08:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a3a      	ldr	r2, [pc, #232]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b14:	f7fe fe52 	bl	80017bc <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b1a:	e009      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1c:	f7fe fe4e 	bl	80017bc <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d902      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b30:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ef      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d15c      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01f      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d019      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b6c:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7c:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	4a1c      	ldr	r2, [pc, #112]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b8c:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d016      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fe0d 	bl	80017bc <HAL_GetTick>
 8002ba2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba4:	e00b      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe fe09 	bl	80017bc <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d902      	bls.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	74fb      	strb	r3, [r7, #19]
            break;
 8002bbc:	e006      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ec      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be2:	4904      	ldr	r1, [pc, #16]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bea:	e009      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	74bb      	strb	r3, [r7, #18]
 8002bf0:	e006      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c00:	7c7b      	ldrb	r3, [r7, #17]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c06:	4b9e      	ldr	r3, [pc, #632]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	4a9d      	ldr	r2, [pc, #628]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1e:	4b98      	ldr	r3, [pc, #608]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f023 0203 	bic.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	4994      	ldr	r1, [pc, #592]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c40:	4b8f      	ldr	r3, [pc, #572]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f023 020c 	bic.w	r2, r3, #12
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	498c      	ldr	r1, [pc, #560]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c62:	4b87      	ldr	r3, [pc, #540]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	4983      	ldr	r1, [pc, #524]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c84:	4b7e      	ldr	r3, [pc, #504]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	497b      	ldr	r1, [pc, #492]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ca6:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	4972      	ldr	r1, [pc, #456]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cc8:	4b6d      	ldr	r3, [pc, #436]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	496a      	ldr	r1, [pc, #424]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	4961      	ldr	r1, [pc, #388]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d0c:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1a:	4959      	ldr	r1, [pc, #356]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d2e:	4b54      	ldr	r3, [pc, #336]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3c:	4950      	ldr	r1, [pc, #320]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d50:	4b4b      	ldr	r3, [pc, #300]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	4948      	ldr	r1, [pc, #288]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d72:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	493f      	ldr	r1, [pc, #252]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d028      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d94:	4b3a      	ldr	r3, [pc, #232]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da2:	4937      	ldr	r1, [pc, #220]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dbe:	60d3      	str	r3, [r2, #12]
 8002dc0:	e011      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dca:	d10c      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3304      	adds	r3, #4
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 f8c8 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d028      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	491f      	ldr	r1, [pc, #124]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e10:	d106      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e1c:	60d3      	str	r3, [r2, #12]
 8002e1e:	e011      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f899 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 8002e36:	4603      	mov	r3, r0
 8002e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e40:	7cfb      	ldrb	r3, [r7, #19]
 8002e42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02b      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e6e:	d109      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a02      	ldr	r2, [pc, #8]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e7a:	60d3      	str	r3, [r2, #12]
 8002e7c:	e014      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3304      	adds	r3, #4
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 f867 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d02f      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec2:	4928      	ldr	r1, [pc, #160]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	2102      	movs	r1, #2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f844 	bl	8002f68 <RCCEx_PLLSAI1_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d014      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	74bb      	strb	r3, [r7, #18]
 8002eee:	e011      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3320      	adds	r3, #32
 8002efe:	2102      	movs	r1, #2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f925 	bl	8003150 <RCCEx_PLLSAI2_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f20:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f2e:	490d      	ldr	r1, [pc, #52]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f52:	4904      	ldr	r1, [pc, #16]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000

08002f68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f76:	4b75      	ldr	r3, [pc, #468]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d018      	beq.n	8002fb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f82:	4b72      	ldr	r3, [pc, #456]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0203 	and.w	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d10d      	bne.n	8002fae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
       ||
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d009      	beq.n	8002fae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f9a:	4b6c      	ldr	r3, [pc, #432]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
       ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d047      	beq.n	800303e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	e044      	b.n	800303e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d018      	beq.n	8002fee <RCCEx_PLLSAI1_Config+0x86>
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d825      	bhi.n	800300c <RCCEx_PLLSAI1_Config+0xa4>
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d002      	beq.n	8002fca <RCCEx_PLLSAI1_Config+0x62>
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d009      	beq.n	8002fdc <RCCEx_PLLSAI1_Config+0x74>
 8002fc8:	e020      	b.n	800300c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fca:	4b60      	ldr	r3, [pc, #384]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11d      	bne.n	8003012 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fda:	e01a      	b.n	8003012 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fdc:	4b5b      	ldr	r3, [pc, #364]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d116      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fec:	e013      	b.n	8003016 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fee:	4b57      	ldr	r3, [pc, #348]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ffa:	4b54      	ldr	r3, [pc, #336]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800300a:	e006      	b.n	800301a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      break;
 8003010:	e004      	b.n	800301c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003012:	bf00      	nop
 8003014:	e002      	b.n	800301c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800301a:	bf00      	nop
    }

    if(status == HAL_OK)
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10d      	bne.n	800303e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003022:	4b4a      	ldr	r3, [pc, #296]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	3b01      	subs	r3, #1
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	430b      	orrs	r3, r1
 8003038:	4944      	ldr	r1, [pc, #272]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d17d      	bne.n	8003140 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003044:	4b41      	ldr	r3, [pc, #260]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a40      	ldr	r2, [pc, #256]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 800304a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800304e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003050:	f7fe fbb4 	bl	80017bc <HAL_GetTick>
 8003054:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003056:	e009      	b.n	800306c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003058:	f7fe fbb0 	bl	80017bc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d902      	bls.n	800306c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	73fb      	strb	r3, [r7, #15]
        break;
 800306a:	e005      	b.n	8003078 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800306c:	4b37      	ldr	r3, [pc, #220]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ef      	bne.n	8003058 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d160      	bne.n	8003140 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d111      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003084:	4b31      	ldr	r3, [pc, #196]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800308c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6892      	ldr	r2, [r2, #8]
 8003094:	0211      	lsls	r1, r2, #8
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68d2      	ldr	r2, [r2, #12]
 800309a:	0912      	lsrs	r2, r2, #4
 800309c:	0452      	lsls	r2, r2, #17
 800309e:	430a      	orrs	r2, r1
 80030a0:	492a      	ldr	r1, [pc, #168]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	610b      	str	r3, [r1, #16]
 80030a6:	e027      	b.n	80030f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d112      	bne.n	80030d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ae:	4b27      	ldr	r3, [pc, #156]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6892      	ldr	r2, [r2, #8]
 80030be:	0211      	lsls	r1, r2, #8
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6912      	ldr	r2, [r2, #16]
 80030c4:	0852      	lsrs	r2, r2, #1
 80030c6:	3a01      	subs	r2, #1
 80030c8:	0552      	lsls	r2, r2, #21
 80030ca:	430a      	orrs	r2, r1
 80030cc:	491f      	ldr	r1, [pc, #124]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	610b      	str	r3, [r1, #16]
 80030d2:	e011      	b.n	80030f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d4:	4b1d      	ldr	r3, [pc, #116]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6892      	ldr	r2, [r2, #8]
 80030e4:	0211      	lsls	r1, r2, #8
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6952      	ldr	r2, [r2, #20]
 80030ea:	0852      	lsrs	r2, r2, #1
 80030ec:	3a01      	subs	r2, #1
 80030ee:	0652      	lsls	r2, r2, #25
 80030f0:	430a      	orrs	r2, r1
 80030f2:	4916      	ldr	r1, [pc, #88]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a13      	ldr	r2, [pc, #76]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003102:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fe fb5a 	bl	80017bc <HAL_GetTick>
 8003108:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800310a:	e009      	b.n	8003120 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800310c:	f7fe fb56 	bl	80017bc <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d902      	bls.n	8003120 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	73fb      	strb	r3, [r7, #15]
          break;
 800311e:	e005      	b.n	800312c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ef      	beq.n	800310c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	4904      	ldr	r1, [pc, #16]	; (800314c <RCCEx_PLLSAI1_Config+0x1e4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000

08003150 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800315e:	4b6a      	ldr	r3, [pc, #424]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d018      	beq.n	800319c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800316a:	4b67      	ldr	r3, [pc, #412]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0203 	and.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d10d      	bne.n	8003196 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
       ||
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003182:	4b61      	ldr	r3, [pc, #388]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
       ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d047      	beq.n	8003226 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e044      	b.n	8003226 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d018      	beq.n	80031d6 <RCCEx_PLLSAI2_Config+0x86>
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d825      	bhi.n	80031f4 <RCCEx_PLLSAI2_Config+0xa4>
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d002      	beq.n	80031b2 <RCCEx_PLLSAI2_Config+0x62>
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d009      	beq.n	80031c4 <RCCEx_PLLSAI2_Config+0x74>
 80031b0:	e020      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031b2:	4b55      	ldr	r3, [pc, #340]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11d      	bne.n	80031fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c2:	e01a      	b.n	80031fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031c4:	4b50      	ldr	r3, [pc, #320]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d116      	bne.n	80031fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d4:	e013      	b.n	80031fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031d6:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031e2:	4b49      	ldr	r3, [pc, #292]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031f2:	e006      	b.n	8003202 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      break;
 80031f8:	e004      	b.n	8003204 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031fa:	bf00      	nop
 80031fc:	e002      	b.n	8003204 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031fe:	bf00      	nop
 8003200:	e000      	b.n	8003204 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003202:	bf00      	nop
    }

    if(status == HAL_OK)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800320a:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	430b      	orrs	r3, r1
 8003220:	4939      	ldr	r1, [pc, #228]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003222:	4313      	orrs	r3, r2
 8003224:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d167      	bne.n	80032fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800322c:	4b36      	ldr	r3, [pc, #216]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a35      	ldr	r2, [pc, #212]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003238:	f7fe fac0 	bl	80017bc <HAL_GetTick>
 800323c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800323e:	e009      	b.n	8003254 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003240:	f7fe fabc 	bl	80017bc <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d902      	bls.n	8003254 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	73fb      	strb	r3, [r7, #15]
        break;
 8003252:	e005      	b.n	8003260 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003254:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ef      	bne.n	8003240 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d14a      	bne.n	80032fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d111      	bne.n	8003290 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800326c:	4b26      	ldr	r3, [pc, #152]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6892      	ldr	r2, [r2, #8]
 800327c:	0211      	lsls	r1, r2, #8
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68d2      	ldr	r2, [r2, #12]
 8003282:	0912      	lsrs	r2, r2, #4
 8003284:	0452      	lsls	r2, r2, #17
 8003286:	430a      	orrs	r2, r1
 8003288:	491f      	ldr	r1, [pc, #124]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328a:	4313      	orrs	r3, r2
 800328c:	614b      	str	r3, [r1, #20]
 800328e:	e011      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003298:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6892      	ldr	r2, [r2, #8]
 80032a0:	0211      	lsls	r1, r2, #8
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6912      	ldr	r2, [r2, #16]
 80032a6:	0852      	lsrs	r2, r2, #1
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0652      	lsls	r2, r2, #25
 80032ac:	430a      	orrs	r2, r1
 80032ae:	4916      	ldr	r1, [pc, #88]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032b4:	4b14      	ldr	r3, [pc, #80]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a13      	ldr	r2, [pc, #76]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fe fa7c 	bl	80017bc <HAL_GetTick>
 80032c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032c6:	e009      	b.n	80032dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032c8:	f7fe fa78 	bl	80017bc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d902      	bls.n	80032dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	73fb      	strb	r3, [r7, #15]
          break;
 80032da:	e005      	b.n	80032e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ef      	beq.n	80032c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4904      	ldr	r1, [pc, #16]	; (8003308 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000

0800330c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e040      	b.n	80033a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd ffee 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f82c 	bl	80033a8 <UART_SetConfig>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e022      	b.n	80033a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 faaa 	bl	80038bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fb31 	bl	8003a00 <UART_CheckIdleState>
 800339e:	4603      	mov	r3, r0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a8:	b5b0      	push	{r4, r5, r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4bad      	ldr	r3, [pc, #692]	; (8003688 <UART_SetConfig+0x2e0>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	69f9      	ldr	r1, [r7, #28]
 80033dc:	430b      	orrs	r3, r1
 80033de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4aa2      	ldr	r2, [pc, #648]	; (800368c <UART_SetConfig+0x2e4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	4313      	orrs	r3, r2
 800340e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	430a      	orrs	r2, r1
 8003422:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a99      	ldr	r2, [pc, #612]	; (8003690 <UART_SetConfig+0x2e8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d121      	bne.n	8003472 <UART_SetConfig+0xca>
 800342e:	4b99      	ldr	r3, [pc, #612]	; (8003694 <UART_SetConfig+0x2ec>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b03      	cmp	r3, #3
 800343a:	d817      	bhi.n	800346c <UART_SetConfig+0xc4>
 800343c:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <UART_SetConfig+0x9c>)
 800343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003442:	bf00      	nop
 8003444:	08003455 	.word	0x08003455
 8003448:	08003461 	.word	0x08003461
 800344c:	0800345b 	.word	0x0800345b
 8003450:	08003467 	.word	0x08003467
 8003454:	2301      	movs	r3, #1
 8003456:	76fb      	strb	r3, [r7, #27]
 8003458:	e0e7      	b.n	800362a <UART_SetConfig+0x282>
 800345a:	2302      	movs	r3, #2
 800345c:	76fb      	strb	r3, [r7, #27]
 800345e:	e0e4      	b.n	800362a <UART_SetConfig+0x282>
 8003460:	2304      	movs	r3, #4
 8003462:	76fb      	strb	r3, [r7, #27]
 8003464:	e0e1      	b.n	800362a <UART_SetConfig+0x282>
 8003466:	2308      	movs	r3, #8
 8003468:	76fb      	strb	r3, [r7, #27]
 800346a:	e0de      	b.n	800362a <UART_SetConfig+0x282>
 800346c:	2310      	movs	r3, #16
 800346e:	76fb      	strb	r3, [r7, #27]
 8003470:	e0db      	b.n	800362a <UART_SetConfig+0x282>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a88      	ldr	r2, [pc, #544]	; (8003698 <UART_SetConfig+0x2f0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d132      	bne.n	80034e2 <UART_SetConfig+0x13a>
 800347c:	4b85      	ldr	r3, [pc, #532]	; (8003694 <UART_SetConfig+0x2ec>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d828      	bhi.n	80034dc <UART_SetConfig+0x134>
 800348a:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <UART_SetConfig+0xe8>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034c5 	.word	0x080034c5
 8003494:	080034dd 	.word	0x080034dd
 8003498:	080034dd 	.word	0x080034dd
 800349c:	080034dd 	.word	0x080034dd
 80034a0:	080034d1 	.word	0x080034d1
 80034a4:	080034dd 	.word	0x080034dd
 80034a8:	080034dd 	.word	0x080034dd
 80034ac:	080034dd 	.word	0x080034dd
 80034b0:	080034cb 	.word	0x080034cb
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034dd 	.word	0x080034dd
 80034bc:	080034dd 	.word	0x080034dd
 80034c0:	080034d7 	.word	0x080034d7
 80034c4:	2300      	movs	r3, #0
 80034c6:	76fb      	strb	r3, [r7, #27]
 80034c8:	e0af      	b.n	800362a <UART_SetConfig+0x282>
 80034ca:	2302      	movs	r3, #2
 80034cc:	76fb      	strb	r3, [r7, #27]
 80034ce:	e0ac      	b.n	800362a <UART_SetConfig+0x282>
 80034d0:	2304      	movs	r3, #4
 80034d2:	76fb      	strb	r3, [r7, #27]
 80034d4:	e0a9      	b.n	800362a <UART_SetConfig+0x282>
 80034d6:	2308      	movs	r3, #8
 80034d8:	76fb      	strb	r3, [r7, #27]
 80034da:	e0a6      	b.n	800362a <UART_SetConfig+0x282>
 80034dc:	2310      	movs	r3, #16
 80034de:	76fb      	strb	r3, [r7, #27]
 80034e0:	e0a3      	b.n	800362a <UART_SetConfig+0x282>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a6d      	ldr	r2, [pc, #436]	; (800369c <UART_SetConfig+0x2f4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d120      	bne.n	800352e <UART_SetConfig+0x186>
 80034ec:	4b69      	ldr	r3, [pc, #420]	; (8003694 <UART_SetConfig+0x2ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034f6:	2b30      	cmp	r3, #48	; 0x30
 80034f8:	d013      	beq.n	8003522 <UART_SetConfig+0x17a>
 80034fa:	2b30      	cmp	r3, #48	; 0x30
 80034fc:	d814      	bhi.n	8003528 <UART_SetConfig+0x180>
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d009      	beq.n	8003516 <UART_SetConfig+0x16e>
 8003502:	2b20      	cmp	r3, #32
 8003504:	d810      	bhi.n	8003528 <UART_SetConfig+0x180>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <UART_SetConfig+0x168>
 800350a:	2b10      	cmp	r3, #16
 800350c:	d006      	beq.n	800351c <UART_SetConfig+0x174>
 800350e:	e00b      	b.n	8003528 <UART_SetConfig+0x180>
 8003510:	2300      	movs	r3, #0
 8003512:	76fb      	strb	r3, [r7, #27]
 8003514:	e089      	b.n	800362a <UART_SetConfig+0x282>
 8003516:	2302      	movs	r3, #2
 8003518:	76fb      	strb	r3, [r7, #27]
 800351a:	e086      	b.n	800362a <UART_SetConfig+0x282>
 800351c:	2304      	movs	r3, #4
 800351e:	76fb      	strb	r3, [r7, #27]
 8003520:	e083      	b.n	800362a <UART_SetConfig+0x282>
 8003522:	2308      	movs	r3, #8
 8003524:	76fb      	strb	r3, [r7, #27]
 8003526:	e080      	b.n	800362a <UART_SetConfig+0x282>
 8003528:	2310      	movs	r3, #16
 800352a:	76fb      	strb	r3, [r7, #27]
 800352c:	e07d      	b.n	800362a <UART_SetConfig+0x282>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5b      	ldr	r2, [pc, #364]	; (80036a0 <UART_SetConfig+0x2f8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d120      	bne.n	800357a <UART_SetConfig+0x1d2>
 8003538:	4b56      	ldr	r3, [pc, #344]	; (8003694 <UART_SetConfig+0x2ec>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003542:	2bc0      	cmp	r3, #192	; 0xc0
 8003544:	d013      	beq.n	800356e <UART_SetConfig+0x1c6>
 8003546:	2bc0      	cmp	r3, #192	; 0xc0
 8003548:	d814      	bhi.n	8003574 <UART_SetConfig+0x1cc>
 800354a:	2b80      	cmp	r3, #128	; 0x80
 800354c:	d009      	beq.n	8003562 <UART_SetConfig+0x1ba>
 800354e:	2b80      	cmp	r3, #128	; 0x80
 8003550:	d810      	bhi.n	8003574 <UART_SetConfig+0x1cc>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <UART_SetConfig+0x1b4>
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	d006      	beq.n	8003568 <UART_SetConfig+0x1c0>
 800355a:	e00b      	b.n	8003574 <UART_SetConfig+0x1cc>
 800355c:	2300      	movs	r3, #0
 800355e:	76fb      	strb	r3, [r7, #27]
 8003560:	e063      	b.n	800362a <UART_SetConfig+0x282>
 8003562:	2302      	movs	r3, #2
 8003564:	76fb      	strb	r3, [r7, #27]
 8003566:	e060      	b.n	800362a <UART_SetConfig+0x282>
 8003568:	2304      	movs	r3, #4
 800356a:	76fb      	strb	r3, [r7, #27]
 800356c:	e05d      	b.n	800362a <UART_SetConfig+0x282>
 800356e:	2308      	movs	r3, #8
 8003570:	76fb      	strb	r3, [r7, #27]
 8003572:	e05a      	b.n	800362a <UART_SetConfig+0x282>
 8003574:	2310      	movs	r3, #16
 8003576:	76fb      	strb	r3, [r7, #27]
 8003578:	e057      	b.n	800362a <UART_SetConfig+0x282>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a49      	ldr	r2, [pc, #292]	; (80036a4 <UART_SetConfig+0x2fc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d125      	bne.n	80035d0 <UART_SetConfig+0x228>
 8003584:	4b43      	ldr	r3, [pc, #268]	; (8003694 <UART_SetConfig+0x2ec>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003592:	d017      	beq.n	80035c4 <UART_SetConfig+0x21c>
 8003594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003598:	d817      	bhi.n	80035ca <UART_SetConfig+0x222>
 800359a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359e:	d00b      	beq.n	80035b8 <UART_SetConfig+0x210>
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a4:	d811      	bhi.n	80035ca <UART_SetConfig+0x222>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <UART_SetConfig+0x20a>
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	d006      	beq.n	80035be <UART_SetConfig+0x216>
 80035b0:	e00b      	b.n	80035ca <UART_SetConfig+0x222>
 80035b2:	2300      	movs	r3, #0
 80035b4:	76fb      	strb	r3, [r7, #27]
 80035b6:	e038      	b.n	800362a <UART_SetConfig+0x282>
 80035b8:	2302      	movs	r3, #2
 80035ba:	76fb      	strb	r3, [r7, #27]
 80035bc:	e035      	b.n	800362a <UART_SetConfig+0x282>
 80035be:	2304      	movs	r3, #4
 80035c0:	76fb      	strb	r3, [r7, #27]
 80035c2:	e032      	b.n	800362a <UART_SetConfig+0x282>
 80035c4:	2308      	movs	r3, #8
 80035c6:	76fb      	strb	r3, [r7, #27]
 80035c8:	e02f      	b.n	800362a <UART_SetConfig+0x282>
 80035ca:	2310      	movs	r3, #16
 80035cc:	76fb      	strb	r3, [r7, #27]
 80035ce:	e02c      	b.n	800362a <UART_SetConfig+0x282>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a2d      	ldr	r2, [pc, #180]	; (800368c <UART_SetConfig+0x2e4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d125      	bne.n	8003626 <UART_SetConfig+0x27e>
 80035da:	4b2e      	ldr	r3, [pc, #184]	; (8003694 <UART_SetConfig+0x2ec>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e8:	d017      	beq.n	800361a <UART_SetConfig+0x272>
 80035ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ee:	d817      	bhi.n	8003620 <UART_SetConfig+0x278>
 80035f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f4:	d00b      	beq.n	800360e <UART_SetConfig+0x266>
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fa:	d811      	bhi.n	8003620 <UART_SetConfig+0x278>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <UART_SetConfig+0x260>
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003604:	d006      	beq.n	8003614 <UART_SetConfig+0x26c>
 8003606:	e00b      	b.n	8003620 <UART_SetConfig+0x278>
 8003608:	2300      	movs	r3, #0
 800360a:	76fb      	strb	r3, [r7, #27]
 800360c:	e00d      	b.n	800362a <UART_SetConfig+0x282>
 800360e:	2302      	movs	r3, #2
 8003610:	76fb      	strb	r3, [r7, #27]
 8003612:	e00a      	b.n	800362a <UART_SetConfig+0x282>
 8003614:	2304      	movs	r3, #4
 8003616:	76fb      	strb	r3, [r7, #27]
 8003618:	e007      	b.n	800362a <UART_SetConfig+0x282>
 800361a:	2308      	movs	r3, #8
 800361c:	76fb      	strb	r3, [r7, #27]
 800361e:	e004      	b.n	800362a <UART_SetConfig+0x282>
 8003620:	2310      	movs	r3, #16
 8003622:	76fb      	strb	r3, [r7, #27]
 8003624:	e001      	b.n	800362a <UART_SetConfig+0x282>
 8003626:	2310      	movs	r3, #16
 8003628:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a17      	ldr	r2, [pc, #92]	; (800368c <UART_SetConfig+0x2e4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	f040 8087 	bne.w	8003744 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003636:	7efb      	ldrb	r3, [r7, #27]
 8003638:	2b08      	cmp	r3, #8
 800363a:	d837      	bhi.n	80036ac <UART_SetConfig+0x304>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x29c>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003669 	.word	0x08003669
 8003648:	080036ad 	.word	0x080036ad
 800364c:	08003671 	.word	0x08003671
 8003650:	080036ad 	.word	0x080036ad
 8003654:	08003677 	.word	0x08003677
 8003658:	080036ad 	.word	0x080036ad
 800365c:	080036ad 	.word	0x080036ad
 8003660:	080036ad 	.word	0x080036ad
 8003664:	0800367f 	.word	0x0800367f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003668:	f7ff f908 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 800366c:	6178      	str	r0, [r7, #20]
        break;
 800366e:	e022      	b.n	80036b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003670:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <UART_SetConfig+0x300>)
 8003672:	617b      	str	r3, [r7, #20]
        break;
 8003674:	e01f      	b.n	80036b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003676:	f7ff f869 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800367a:	6178      	str	r0, [r7, #20]
        break;
 800367c:	e01b      	b.n	80036b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003682:	617b      	str	r3, [r7, #20]
        break;
 8003684:	e017      	b.n	80036b6 <UART_SetConfig+0x30e>
 8003686:	bf00      	nop
 8003688:	efff69f3 	.word	0xefff69f3
 800368c:	40008000 	.word	0x40008000
 8003690:	40013800 	.word	0x40013800
 8003694:	40021000 	.word	0x40021000
 8003698:	40004400 	.word	0x40004400
 800369c:	40004800 	.word	0x40004800
 80036a0:	40004c00 	.word	0x40004c00
 80036a4:	40005000 	.word	0x40005000
 80036a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	76bb      	strb	r3, [r7, #26]
        break;
 80036b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80f1 	beq.w	80038a0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d305      	bcc.n	80036da <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d902      	bls.n	80036e0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	76bb      	strb	r3, [r7, #26]
 80036de:	e0df      	b.n	80038a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f04f 0100 	mov.w	r1, #0
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	020b      	lsls	r3, r1, #8
 80036f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036f6:	0202      	lsls	r2, r0, #8
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	6849      	ldr	r1, [r1, #4]
 80036fc:	0849      	lsrs	r1, r1, #1
 80036fe:	4608      	mov	r0, r1
 8003700:	f04f 0100 	mov.w	r1, #0
 8003704:	1814      	adds	r4, r2, r0
 8003706:	eb43 0501 	adc.w	r5, r3, r1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	461a      	mov	r2, r3
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	4620      	mov	r0, r4
 8003716:	4629      	mov	r1, r5
 8003718:	f7fd fa28 	bl	8000b6c <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4613      	mov	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800372a:	d308      	bcc.n	800373e <UART_SetConfig+0x396>
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003732:	d204      	bcs.n	800373e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	60da      	str	r2, [r3, #12]
 800373c:	e0b0      	b.n	80038a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	76bb      	strb	r3, [r7, #26]
 8003742:	e0ad      	b.n	80038a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800374c:	d15c      	bne.n	8003808 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800374e:	7efb      	ldrb	r3, [r7, #27]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d828      	bhi.n	80037a6 <UART_SetConfig+0x3fe>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <UART_SetConfig+0x3b4>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	08003781 	.word	0x08003781
 8003760:	08003789 	.word	0x08003789
 8003764:	08003791 	.word	0x08003791
 8003768:	080037a7 	.word	0x080037a7
 800376c:	08003797 	.word	0x08003797
 8003770:	080037a7 	.word	0x080037a7
 8003774:	080037a7 	.word	0x080037a7
 8003778:	080037a7 	.word	0x080037a7
 800377c:	0800379f 	.word	0x0800379f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003780:	f7ff f87c 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003784:	6178      	str	r0, [r7, #20]
        break;
 8003786:	e013      	b.n	80037b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003788:	f7ff f88e 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 800378c:	6178      	str	r0, [r7, #20]
        break;
 800378e:	e00f      	b.n	80037b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003790:	4b49      	ldr	r3, [pc, #292]	; (80038b8 <UART_SetConfig+0x510>)
 8003792:	617b      	str	r3, [r7, #20]
        break;
 8003794:	e00c      	b.n	80037b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003796:	f7fe ffd9 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800379a:	6178      	str	r0, [r7, #20]
        break;
 800379c:	e008      	b.n	80037b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a2:	617b      	str	r3, [r7, #20]
        break;
 80037a4:	e004      	b.n	80037b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	76bb      	strb	r3, [r7, #26]
        break;
 80037ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d074      	beq.n	80038a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	005a      	lsls	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b0f      	cmp	r3, #15
 80037d2:	d916      	bls.n	8003802 <UART_SetConfig+0x45a>
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037da:	d212      	bcs.n	8003802 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f023 030f 	bic.w	r3, r3, #15
 80037e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	89fb      	ldrh	r3, [r7, #14]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	89fa      	ldrh	r2, [r7, #14]
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	e04e      	b.n	80038a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	76bb      	strb	r3, [r7, #26]
 8003806:	e04b      	b.n	80038a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003808:	7efb      	ldrb	r3, [r7, #27]
 800380a:	2b08      	cmp	r3, #8
 800380c:	d827      	bhi.n	800385e <UART_SetConfig+0x4b6>
 800380e:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0x46c>)
 8003810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003814:	08003839 	.word	0x08003839
 8003818:	08003841 	.word	0x08003841
 800381c:	08003849 	.word	0x08003849
 8003820:	0800385f 	.word	0x0800385f
 8003824:	0800384f 	.word	0x0800384f
 8003828:	0800385f 	.word	0x0800385f
 800382c:	0800385f 	.word	0x0800385f
 8003830:	0800385f 	.word	0x0800385f
 8003834:	08003857 	.word	0x08003857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003838:	f7ff f820 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 800383c:	6178      	str	r0, [r7, #20]
        break;
 800383e:	e013      	b.n	8003868 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003840:	f7ff f832 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003844:	6178      	str	r0, [r7, #20]
        break;
 8003846:	e00f      	b.n	8003868 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <UART_SetConfig+0x510>)
 800384a:	617b      	str	r3, [r7, #20]
        break;
 800384c:	e00c      	b.n	8003868 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384e:	f7fe ff7d 	bl	800274c <HAL_RCC_GetSysClockFreq>
 8003852:	6178      	str	r0, [r7, #20]
        break;
 8003854:	e008      	b.n	8003868 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800385a:	617b      	str	r3, [r7, #20]
        break;
 800385c:	e004      	b.n	8003868 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	76bb      	strb	r3, [r7, #26]
        break;
 8003866:	bf00      	nop
    }

    if (pclk != 0U)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d018      	beq.n	80038a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	085a      	lsrs	r2, r3, #1
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	441a      	add	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	b29b      	uxth	r3, r3
 8003882:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b0f      	cmp	r3, #15
 8003888:	d908      	bls.n	800389c <UART_SetConfig+0x4f4>
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003890:	d204      	bcs.n	800389c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	e001      	b.n	80038a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bdb0      	pop	{r4, r5, r7, pc}
 80038b6:	bf00      	nop
 80038b8:	00f42400 	.word	0x00f42400

080038bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01a      	beq.n	80039d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ba:	d10a      	bne.n	80039d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a10:	f7fd fed4 	bl	80017bc <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d10e      	bne.n	8003a42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f82d 	bl	8003a92 <UART_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e023      	b.n	8003a8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d10e      	bne.n	8003a6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f817 	bl	8003a92 <UART_WaitOnFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e00d      	b.n	8003a8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa2:	e05e      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d05a      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aac:	f7fd fe86 	bl	80017bc <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d302      	bcc.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11b      	bne.n	8003afa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ad0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e043      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d02c      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b16:	d124      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b20:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b30:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e00f      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d091      	beq.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <atof>:
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f000 be7e 	b.w	800488c <strtod>

08003b90 <atoi>:
 8003b90:	220a      	movs	r2, #10
 8003b92:	2100      	movs	r1, #0
 8003b94:	f000 bf66 	b.w	8004a64 <strtol>

08003b98 <__errno>:
 8003b98:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <__errno+0x8>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	2000000c 	.word	0x2000000c

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4d0d      	ldr	r5, [pc, #52]	; (8003bdc <__libc_init_array+0x38>)
 8003ba8:	4c0d      	ldr	r4, [pc, #52]	; (8003be0 <__libc_init_array+0x3c>)
 8003baa:	1b64      	subs	r4, r4, r5
 8003bac:	10a4      	asrs	r4, r4, #2
 8003bae:	2600      	movs	r6, #0
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	4d0b      	ldr	r5, [pc, #44]	; (8003be4 <__libc_init_array+0x40>)
 8003bb6:	4c0c      	ldr	r4, [pc, #48]	; (8003be8 <__libc_init_array+0x44>)
 8003bb8:	f002 ffa4 	bl	8006b04 <_init>
 8003bbc:	1b64      	subs	r4, r4, r5
 8003bbe:	10a4      	asrs	r4, r4, #2
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	08007128 	.word	0x08007128
 8003be0:	08007128 	.word	0x08007128
 8003be4:	08007128 	.word	0x08007128
 8003be8:	0800712c 	.word	0x0800712c

08003bec <memset>:
 8003bec:	4402      	add	r2, r0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d100      	bne.n	8003bf6 <memset+0xa>
 8003bf4:	4770      	bx	lr
 8003bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bfa:	e7f9      	b.n	8003bf0 <memset+0x4>

08003bfc <strchr>:
 8003bfc:	b2c9      	uxtb	r1, r1
 8003bfe:	4603      	mov	r3, r0
 8003c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c04:	b11a      	cbz	r2, 8003c0e <strchr+0x12>
 8003c06:	428a      	cmp	r2, r1
 8003c08:	d1f9      	bne.n	8003bfe <strchr+0x2>
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	4770      	bx	lr
 8003c0e:	2900      	cmp	r1, #0
 8003c10:	bf18      	it	ne
 8003c12:	2300      	movne	r3, #0
 8003c14:	e7f9      	b.n	8003c0a <strchr+0xe>

08003c16 <strncat>:
 8003c16:	b530      	push	{r4, r5, lr}
 8003c18:	4604      	mov	r4, r0
 8003c1a:	7825      	ldrb	r5, [r4, #0]
 8003c1c:	4623      	mov	r3, r4
 8003c1e:	3401      	adds	r4, #1
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	d1fa      	bne.n	8003c1a <strncat+0x4>
 8003c24:	3a01      	subs	r2, #1
 8003c26:	d304      	bcc.n	8003c32 <strncat+0x1c>
 8003c28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c2c:	f803 4b01 	strb.w	r4, [r3], #1
 8003c30:	b904      	cbnz	r4, 8003c34 <strncat+0x1e>
 8003c32:	bd30      	pop	{r4, r5, pc}
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d1f5      	bne.n	8003c24 <strncat+0xe>
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	e7f3      	b.n	8003c24 <strncat+0xe>

08003c3c <sulp>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	4604      	mov	r4, r0
 8003c40:	460d      	mov	r5, r1
 8003c42:	ec45 4b10 	vmov	d0, r4, r5
 8003c46:	4616      	mov	r6, r2
 8003c48:	f001 fe4a 	bl	80058e0 <__ulp>
 8003c4c:	ec51 0b10 	vmov	r0, r1, d0
 8003c50:	b17e      	cbz	r6, 8003c72 <sulp+0x36>
 8003c52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003c56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	dd09      	ble.n	8003c72 <sulp+0x36>
 8003c5e:	051b      	lsls	r3, r3, #20
 8003c60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003c64:	2400      	movs	r4, #0
 8003c66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	f7fc fcc3 	bl	80005f8 <__aeabi_dmul>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	0000      	movs	r0, r0
	...

08003c78 <_strtod_l>:
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	b0a3      	sub	sp, #140	; 0x8c
 8003c7e:	461f      	mov	r7, r3
 8003c80:	2300      	movs	r3, #0
 8003c82:	931e      	str	r3, [sp, #120]	; 0x78
 8003c84:	4ba4      	ldr	r3, [pc, #656]	; (8003f18 <_strtod_l+0x2a0>)
 8003c86:	9219      	str	r2, [sp, #100]	; 0x64
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	9307      	str	r3, [sp, #28]
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	4688      	mov	r8, r1
 8003c92:	f7fc fa9d 	bl	80001d0 <strlen>
 8003c96:	f04f 0a00 	mov.w	sl, #0
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	f04f 0b00 	mov.w	fp, #0
 8003ca0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8003ca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ca6:	781a      	ldrb	r2, [r3, #0]
 8003ca8:	2a2b      	cmp	r2, #43	; 0x2b
 8003caa:	d04c      	beq.n	8003d46 <_strtod_l+0xce>
 8003cac:	d839      	bhi.n	8003d22 <_strtod_l+0xaa>
 8003cae:	2a0d      	cmp	r2, #13
 8003cb0:	d832      	bhi.n	8003d18 <_strtod_l+0xa0>
 8003cb2:	2a08      	cmp	r2, #8
 8003cb4:	d832      	bhi.n	8003d1c <_strtod_l+0xa4>
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	d03c      	beq.n	8003d34 <_strtod_l+0xbc>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	930e      	str	r3, [sp, #56]	; 0x38
 8003cbe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8003cc0:	7833      	ldrb	r3, [r6, #0]
 8003cc2:	2b30      	cmp	r3, #48	; 0x30
 8003cc4:	f040 80b4 	bne.w	8003e30 <_strtod_l+0x1b8>
 8003cc8:	7873      	ldrb	r3, [r6, #1]
 8003cca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003cce:	2b58      	cmp	r3, #88	; 0x58
 8003cd0:	d16c      	bne.n	8003dac <_strtod_l+0x134>
 8003cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	ab1e      	add	r3, sp, #120	; 0x78
 8003cd8:	9702      	str	r7, [sp, #8]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	4a8f      	ldr	r2, [pc, #572]	; (8003f1c <_strtod_l+0x2a4>)
 8003cde:	ab1f      	add	r3, sp, #124	; 0x7c
 8003ce0:	a91d      	add	r1, sp, #116	; 0x74
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	f000 ff60 	bl	8004ba8 <__gethex>
 8003ce8:	f010 0707 	ands.w	r7, r0, #7
 8003cec:	4605      	mov	r5, r0
 8003cee:	d005      	beq.n	8003cfc <_strtod_l+0x84>
 8003cf0:	2f06      	cmp	r7, #6
 8003cf2:	d12a      	bne.n	8003d4a <_strtod_l+0xd2>
 8003cf4:	3601      	adds	r6, #1
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	961d      	str	r6, [sp, #116]	; 0x74
 8003cfa:	930e      	str	r3, [sp, #56]	; 0x38
 8003cfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f040 8596 	bne.w	8004830 <_strtod_l+0xbb8>
 8003d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d06:	b1db      	cbz	r3, 8003d40 <_strtod_l+0xc8>
 8003d08:	4652      	mov	r2, sl
 8003d0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003d0e:	ec43 2b10 	vmov	d0, r2, r3
 8003d12:	b023      	add	sp, #140	; 0x8c
 8003d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d18:	2a20      	cmp	r2, #32
 8003d1a:	d1ce      	bne.n	8003cba <_strtod_l+0x42>
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	931d      	str	r3, [sp, #116]	; 0x74
 8003d20:	e7c0      	b.n	8003ca4 <_strtod_l+0x2c>
 8003d22:	2a2d      	cmp	r2, #45	; 0x2d
 8003d24:	d1c9      	bne.n	8003cba <_strtod_l+0x42>
 8003d26:	2201      	movs	r2, #1
 8003d28:	920e      	str	r2, [sp, #56]	; 0x38
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	921d      	str	r2, [sp, #116]	; 0x74
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1c4      	bne.n	8003cbe <_strtod_l+0x46>
 8003d34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 8576 	bne.w	800482c <_strtod_l+0xbb4>
 8003d40:	4652      	mov	r2, sl
 8003d42:	465b      	mov	r3, fp
 8003d44:	e7e3      	b.n	8003d0e <_strtod_l+0x96>
 8003d46:	2200      	movs	r2, #0
 8003d48:	e7ee      	b.n	8003d28 <_strtod_l+0xb0>
 8003d4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003d4c:	b13a      	cbz	r2, 8003d5e <_strtod_l+0xe6>
 8003d4e:	2135      	movs	r1, #53	; 0x35
 8003d50:	a820      	add	r0, sp, #128	; 0x80
 8003d52:	f001 fed0 	bl	8005af6 <__copybits>
 8003d56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f001 fa95 	bl	8005288 <_Bfree>
 8003d5e:	3f01      	subs	r7, #1
 8003d60:	2f05      	cmp	r7, #5
 8003d62:	d807      	bhi.n	8003d74 <_strtod_l+0xfc>
 8003d64:	e8df f007 	tbb	[pc, r7]
 8003d68:	1d180b0e 	.word	0x1d180b0e
 8003d6c:	030e      	.short	0x030e
 8003d6e:	f04f 0b00 	mov.w	fp, #0
 8003d72:	46da      	mov	sl, fp
 8003d74:	0728      	lsls	r0, r5, #28
 8003d76:	d5c1      	bpl.n	8003cfc <_strtod_l+0x84>
 8003d78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003d7c:	e7be      	b.n	8003cfc <_strtod_l+0x84>
 8003d7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8003d82:	e7f7      	b.n	8003d74 <_strtod_l+0xfc>
 8003d84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8003d88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003d8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003d8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003d92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003d96:	e7ed      	b.n	8003d74 <_strtod_l+0xfc>
 8003d98:	f8df b184 	ldr.w	fp, [pc, #388]	; 8003f20 <_strtod_l+0x2a8>
 8003d9c:	f04f 0a00 	mov.w	sl, #0
 8003da0:	e7e8      	b.n	8003d74 <_strtod_l+0xfc>
 8003da2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003da6:	f04f 3aff 	mov.w	sl, #4294967295
 8003daa:	e7e3      	b.n	8003d74 <_strtod_l+0xfc>
 8003dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	921d      	str	r2, [sp, #116]	; 0x74
 8003db2:	785b      	ldrb	r3, [r3, #1]
 8003db4:	2b30      	cmp	r3, #48	; 0x30
 8003db6:	d0f9      	beq.n	8003dac <_strtod_l+0x134>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d09f      	beq.n	8003cfc <_strtod_l+0x84>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f04f 0900 	mov.w	r9, #0
 8003dc2:	9304      	str	r3, [sp, #16]
 8003dc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8003dc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003dcc:	464f      	mov	r7, r9
 8003dce:	220a      	movs	r2, #10
 8003dd0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003dd2:	7806      	ldrb	r6, [r0, #0]
 8003dd4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003dd8:	b2d9      	uxtb	r1, r3
 8003dda:	2909      	cmp	r1, #9
 8003ddc:	d92a      	bls.n	8003e34 <_strtod_l+0x1bc>
 8003dde:	9907      	ldr	r1, [sp, #28]
 8003de0:	462a      	mov	r2, r5
 8003de2:	f002 fa8d 	bl	8006300 <strncmp>
 8003de6:	b398      	cbz	r0, 8003e50 <_strtod_l+0x1d8>
 8003de8:	2000      	movs	r0, #0
 8003dea:	4633      	mov	r3, r6
 8003dec:	463d      	mov	r5, r7
 8003dee:	9007      	str	r0, [sp, #28]
 8003df0:	4602      	mov	r2, r0
 8003df2:	2b65      	cmp	r3, #101	; 0x65
 8003df4:	d001      	beq.n	8003dfa <_strtod_l+0x182>
 8003df6:	2b45      	cmp	r3, #69	; 0x45
 8003df8:	d118      	bne.n	8003e2c <_strtod_l+0x1b4>
 8003dfa:	b91d      	cbnz	r5, 8003e04 <_strtod_l+0x18c>
 8003dfc:	9b04      	ldr	r3, [sp, #16]
 8003dfe:	4303      	orrs	r3, r0
 8003e00:	d098      	beq.n	8003d34 <_strtod_l+0xbc>
 8003e02:	2500      	movs	r5, #0
 8003e04:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8003e08:	f108 0301 	add.w	r3, r8, #1
 8003e0c:	931d      	str	r3, [sp, #116]	; 0x74
 8003e0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003e12:	2b2b      	cmp	r3, #43	; 0x2b
 8003e14:	d075      	beq.n	8003f02 <_strtod_l+0x28a>
 8003e16:	2b2d      	cmp	r3, #45	; 0x2d
 8003e18:	d07b      	beq.n	8003f12 <_strtod_l+0x29a>
 8003e1a:	f04f 0c00 	mov.w	ip, #0
 8003e1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003e22:	2909      	cmp	r1, #9
 8003e24:	f240 8082 	bls.w	8003f2c <_strtod_l+0x2b4>
 8003e28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8003e2c:	2600      	movs	r6, #0
 8003e2e:	e09d      	b.n	8003f6c <_strtod_l+0x2f4>
 8003e30:	2300      	movs	r3, #0
 8003e32:	e7c4      	b.n	8003dbe <_strtod_l+0x146>
 8003e34:	2f08      	cmp	r7, #8
 8003e36:	bfd8      	it	le
 8003e38:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8003e3a:	f100 0001 	add.w	r0, r0, #1
 8003e3e:	bfda      	itte	le
 8003e40:	fb02 3301 	mlale	r3, r2, r1, r3
 8003e44:	9309      	strle	r3, [sp, #36]	; 0x24
 8003e46:	fb02 3909 	mlagt	r9, r2, r9, r3
 8003e4a:	3701      	adds	r7, #1
 8003e4c:	901d      	str	r0, [sp, #116]	; 0x74
 8003e4e:	e7bf      	b.n	8003dd0 <_strtod_l+0x158>
 8003e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003e52:	195a      	adds	r2, r3, r5
 8003e54:	921d      	str	r2, [sp, #116]	; 0x74
 8003e56:	5d5b      	ldrb	r3, [r3, r5]
 8003e58:	2f00      	cmp	r7, #0
 8003e5a:	d037      	beq.n	8003ecc <_strtod_l+0x254>
 8003e5c:	9007      	str	r0, [sp, #28]
 8003e5e:	463d      	mov	r5, r7
 8003e60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003e64:	2a09      	cmp	r2, #9
 8003e66:	d912      	bls.n	8003e8e <_strtod_l+0x216>
 8003e68:	2201      	movs	r2, #1
 8003e6a:	e7c2      	b.n	8003df2 <_strtod_l+0x17a>
 8003e6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	921d      	str	r2, [sp, #116]	; 0x74
 8003e72:	785b      	ldrb	r3, [r3, #1]
 8003e74:	3001      	adds	r0, #1
 8003e76:	2b30      	cmp	r3, #48	; 0x30
 8003e78:	d0f8      	beq.n	8003e6c <_strtod_l+0x1f4>
 8003e7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003e7e:	2a08      	cmp	r2, #8
 8003e80:	f200 84db 	bhi.w	800483a <_strtod_l+0xbc2>
 8003e84:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003e86:	9007      	str	r0, [sp, #28]
 8003e88:	2000      	movs	r0, #0
 8003e8a:	920a      	str	r2, [sp, #40]	; 0x28
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	3b30      	subs	r3, #48	; 0x30
 8003e90:	f100 0201 	add.w	r2, r0, #1
 8003e94:	d014      	beq.n	8003ec0 <_strtod_l+0x248>
 8003e96:	9907      	ldr	r1, [sp, #28]
 8003e98:	4411      	add	r1, r2
 8003e9a:	9107      	str	r1, [sp, #28]
 8003e9c:	462a      	mov	r2, r5
 8003e9e:	eb00 0e05 	add.w	lr, r0, r5
 8003ea2:	210a      	movs	r1, #10
 8003ea4:	4572      	cmp	r2, lr
 8003ea6:	d113      	bne.n	8003ed0 <_strtod_l+0x258>
 8003ea8:	182a      	adds	r2, r5, r0
 8003eaa:	2a08      	cmp	r2, #8
 8003eac:	f105 0501 	add.w	r5, r5, #1
 8003eb0:	4405      	add	r5, r0
 8003eb2:	dc1c      	bgt.n	8003eee <_strtod_l+0x276>
 8003eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003eb6:	220a      	movs	r2, #10
 8003eb8:	fb02 3301 	mla	r3, r2, r1, r3
 8003ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ec2:	1c59      	adds	r1, r3, #1
 8003ec4:	911d      	str	r1, [sp, #116]	; 0x74
 8003ec6:	785b      	ldrb	r3, [r3, #1]
 8003ec8:	4610      	mov	r0, r2
 8003eca:	e7c9      	b.n	8003e60 <_strtod_l+0x1e8>
 8003ecc:	4638      	mov	r0, r7
 8003ece:	e7d2      	b.n	8003e76 <_strtod_l+0x1fe>
 8003ed0:	2a08      	cmp	r2, #8
 8003ed2:	dc04      	bgt.n	8003ede <_strtod_l+0x266>
 8003ed4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003ed6:	434e      	muls	r6, r1
 8003ed8:	9609      	str	r6, [sp, #36]	; 0x24
 8003eda:	3201      	adds	r2, #1
 8003edc:	e7e2      	b.n	8003ea4 <_strtod_l+0x22c>
 8003ede:	f102 0c01 	add.w	ip, r2, #1
 8003ee2:	f1bc 0f10 	cmp.w	ip, #16
 8003ee6:	bfd8      	it	le
 8003ee8:	fb01 f909 	mulle.w	r9, r1, r9
 8003eec:	e7f5      	b.n	8003eda <_strtod_l+0x262>
 8003eee:	2d10      	cmp	r5, #16
 8003ef0:	bfdc      	itt	le
 8003ef2:	220a      	movle	r2, #10
 8003ef4:	fb02 3909 	mlale	r9, r2, r9, r3
 8003ef8:	e7e1      	b.n	8003ebe <_strtod_l+0x246>
 8003efa:	2300      	movs	r3, #0
 8003efc:	9307      	str	r3, [sp, #28]
 8003efe:	2201      	movs	r2, #1
 8003f00:	e77c      	b.n	8003dfc <_strtod_l+0x184>
 8003f02:	f04f 0c00 	mov.w	ip, #0
 8003f06:	f108 0302 	add.w	r3, r8, #2
 8003f0a:	931d      	str	r3, [sp, #116]	; 0x74
 8003f0c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8003f10:	e785      	b.n	8003e1e <_strtod_l+0x1a6>
 8003f12:	f04f 0c01 	mov.w	ip, #1
 8003f16:	e7f6      	b.n	8003f06 <_strtod_l+0x28e>
 8003f18:	08006f18 	.word	0x08006f18
 8003f1c:	08006c98 	.word	0x08006c98
 8003f20:	7ff00000 	.word	0x7ff00000
 8003f24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f26:	1c59      	adds	r1, r3, #1
 8003f28:	911d      	str	r1, [sp, #116]	; 0x74
 8003f2a:	785b      	ldrb	r3, [r3, #1]
 8003f2c:	2b30      	cmp	r3, #48	; 0x30
 8003f2e:	d0f9      	beq.n	8003f24 <_strtod_l+0x2ac>
 8003f30:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003f34:	2908      	cmp	r1, #8
 8003f36:	f63f af79 	bhi.w	8003e2c <_strtod_l+0x1b4>
 8003f3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003f3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f40:	9308      	str	r3, [sp, #32]
 8003f42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f44:	1c59      	adds	r1, r3, #1
 8003f46:	911d      	str	r1, [sp, #116]	; 0x74
 8003f48:	785b      	ldrb	r3, [r3, #1]
 8003f4a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003f4e:	2e09      	cmp	r6, #9
 8003f50:	d937      	bls.n	8003fc2 <_strtod_l+0x34a>
 8003f52:	9e08      	ldr	r6, [sp, #32]
 8003f54:	1b89      	subs	r1, r1, r6
 8003f56:	2908      	cmp	r1, #8
 8003f58:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003f5c:	dc02      	bgt.n	8003f64 <_strtod_l+0x2ec>
 8003f5e:	4576      	cmp	r6, lr
 8003f60:	bfa8      	it	ge
 8003f62:	4676      	movge	r6, lr
 8003f64:	f1bc 0f00 	cmp.w	ip, #0
 8003f68:	d000      	beq.n	8003f6c <_strtod_l+0x2f4>
 8003f6a:	4276      	negs	r6, r6
 8003f6c:	2d00      	cmp	r5, #0
 8003f6e:	d14f      	bne.n	8004010 <_strtod_l+0x398>
 8003f70:	9904      	ldr	r1, [sp, #16]
 8003f72:	4301      	orrs	r1, r0
 8003f74:	f47f aec2 	bne.w	8003cfc <_strtod_l+0x84>
 8003f78:	2a00      	cmp	r2, #0
 8003f7a:	f47f aedb 	bne.w	8003d34 <_strtod_l+0xbc>
 8003f7e:	2b69      	cmp	r3, #105	; 0x69
 8003f80:	d027      	beq.n	8003fd2 <_strtod_l+0x35a>
 8003f82:	dc24      	bgt.n	8003fce <_strtod_l+0x356>
 8003f84:	2b49      	cmp	r3, #73	; 0x49
 8003f86:	d024      	beq.n	8003fd2 <_strtod_l+0x35a>
 8003f88:	2b4e      	cmp	r3, #78	; 0x4e
 8003f8a:	f47f aed3 	bne.w	8003d34 <_strtod_l+0xbc>
 8003f8e:	499e      	ldr	r1, [pc, #632]	; (8004208 <_strtod_l+0x590>)
 8003f90:	a81d      	add	r0, sp, #116	; 0x74
 8003f92:	f001 f861 	bl	8005058 <__match>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	f43f aecc 	beq.w	8003d34 <_strtod_l+0xbc>
 8003f9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b28      	cmp	r3, #40	; 0x28
 8003fa2:	d12d      	bne.n	8004000 <_strtod_l+0x388>
 8003fa4:	4999      	ldr	r1, [pc, #612]	; (800420c <_strtod_l+0x594>)
 8003fa6:	aa20      	add	r2, sp, #128	; 0x80
 8003fa8:	a81d      	add	r0, sp, #116	; 0x74
 8003faa:	f001 f869 	bl	8005080 <__hexnan>
 8003fae:	2805      	cmp	r0, #5
 8003fb0:	d126      	bne.n	8004000 <_strtod_l+0x388>
 8003fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fb4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8003fb8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003fbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003fc0:	e69c      	b.n	8003cfc <_strtod_l+0x84>
 8003fc2:	210a      	movs	r1, #10
 8003fc4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003fc8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003fcc:	e7b9      	b.n	8003f42 <_strtod_l+0x2ca>
 8003fce:	2b6e      	cmp	r3, #110	; 0x6e
 8003fd0:	e7db      	b.n	8003f8a <_strtod_l+0x312>
 8003fd2:	498f      	ldr	r1, [pc, #572]	; (8004210 <_strtod_l+0x598>)
 8003fd4:	a81d      	add	r0, sp, #116	; 0x74
 8003fd6:	f001 f83f 	bl	8005058 <__match>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	f43f aeaa 	beq.w	8003d34 <_strtod_l+0xbc>
 8003fe0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003fe2:	498c      	ldr	r1, [pc, #560]	; (8004214 <_strtod_l+0x59c>)
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	a81d      	add	r0, sp, #116	; 0x74
 8003fe8:	931d      	str	r3, [sp, #116]	; 0x74
 8003fea:	f001 f835 	bl	8005058 <__match>
 8003fee:	b910      	cbnz	r0, 8003ff6 <_strtod_l+0x37e>
 8003ff0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	931d      	str	r3, [sp, #116]	; 0x74
 8003ff6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8004224 <_strtod_l+0x5ac>
 8003ffa:	f04f 0a00 	mov.w	sl, #0
 8003ffe:	e67d      	b.n	8003cfc <_strtod_l+0x84>
 8004000:	4885      	ldr	r0, [pc, #532]	; (8004218 <_strtod_l+0x5a0>)
 8004002:	f002 f965 	bl	80062d0 <nan>
 8004006:	ed8d 0b04 	vstr	d0, [sp, #16]
 800400a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800400e:	e675      	b.n	8003cfc <_strtod_l+0x84>
 8004010:	9b07      	ldr	r3, [sp, #28]
 8004012:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004014:	1af3      	subs	r3, r6, r3
 8004016:	2f00      	cmp	r7, #0
 8004018:	bf08      	it	eq
 800401a:	462f      	moveq	r7, r5
 800401c:	2d10      	cmp	r5, #16
 800401e:	9308      	str	r3, [sp, #32]
 8004020:	46a8      	mov	r8, r5
 8004022:	bfa8      	it	ge
 8004024:	f04f 0810 	movge.w	r8, #16
 8004028:	f7fc fa6c 	bl	8000504 <__aeabi_ui2d>
 800402c:	2d09      	cmp	r5, #9
 800402e:	4682      	mov	sl, r0
 8004030:	468b      	mov	fp, r1
 8004032:	dd13      	ble.n	800405c <_strtod_l+0x3e4>
 8004034:	4b79      	ldr	r3, [pc, #484]	; (800421c <_strtod_l+0x5a4>)
 8004036:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800403a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800403e:	f7fc fadb 	bl	80005f8 <__aeabi_dmul>
 8004042:	4682      	mov	sl, r0
 8004044:	4648      	mov	r0, r9
 8004046:	468b      	mov	fp, r1
 8004048:	f7fc fa5c 	bl	8000504 <__aeabi_ui2d>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4650      	mov	r0, sl
 8004052:	4659      	mov	r1, fp
 8004054:	f7fc f91a 	bl	800028c <__adddf3>
 8004058:	4682      	mov	sl, r0
 800405a:	468b      	mov	fp, r1
 800405c:	2d0f      	cmp	r5, #15
 800405e:	dc38      	bgt.n	80040d2 <_strtod_l+0x45a>
 8004060:	9b08      	ldr	r3, [sp, #32]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f43f ae4a 	beq.w	8003cfc <_strtod_l+0x84>
 8004068:	dd24      	ble.n	80040b4 <_strtod_l+0x43c>
 800406a:	2b16      	cmp	r3, #22
 800406c:	dc0b      	bgt.n	8004086 <_strtod_l+0x40e>
 800406e:	4d6b      	ldr	r5, [pc, #428]	; (800421c <_strtod_l+0x5a4>)
 8004070:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004074:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004078:	4652      	mov	r2, sl
 800407a:	465b      	mov	r3, fp
 800407c:	f7fc fabc 	bl	80005f8 <__aeabi_dmul>
 8004080:	4682      	mov	sl, r0
 8004082:	468b      	mov	fp, r1
 8004084:	e63a      	b.n	8003cfc <_strtod_l+0x84>
 8004086:	9a08      	ldr	r2, [sp, #32]
 8004088:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800408c:	4293      	cmp	r3, r2
 800408e:	db20      	blt.n	80040d2 <_strtod_l+0x45a>
 8004090:	4c62      	ldr	r4, [pc, #392]	; (800421c <_strtod_l+0x5a4>)
 8004092:	f1c5 050f 	rsb	r5, r5, #15
 8004096:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800409a:	4652      	mov	r2, sl
 800409c:	465b      	mov	r3, fp
 800409e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040a2:	f7fc faa9 	bl	80005f8 <__aeabi_dmul>
 80040a6:	9b08      	ldr	r3, [sp, #32]
 80040a8:	1b5d      	subs	r5, r3, r5
 80040aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80040ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80040b2:	e7e3      	b.n	800407c <_strtod_l+0x404>
 80040b4:	9b08      	ldr	r3, [sp, #32]
 80040b6:	3316      	adds	r3, #22
 80040b8:	db0b      	blt.n	80040d2 <_strtod_l+0x45a>
 80040ba:	9b07      	ldr	r3, [sp, #28]
 80040bc:	4a57      	ldr	r2, [pc, #348]	; (800421c <_strtod_l+0x5a4>)
 80040be:	1b9e      	subs	r6, r3, r6
 80040c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80040c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80040c8:	4650      	mov	r0, sl
 80040ca:	4659      	mov	r1, fp
 80040cc:	f7fc fbbe 	bl	800084c <__aeabi_ddiv>
 80040d0:	e7d6      	b.n	8004080 <_strtod_l+0x408>
 80040d2:	9b08      	ldr	r3, [sp, #32]
 80040d4:	eba5 0808 	sub.w	r8, r5, r8
 80040d8:	4498      	add	r8, r3
 80040da:	f1b8 0f00 	cmp.w	r8, #0
 80040de:	dd71      	ble.n	80041c4 <_strtod_l+0x54c>
 80040e0:	f018 030f 	ands.w	r3, r8, #15
 80040e4:	d00a      	beq.n	80040fc <_strtod_l+0x484>
 80040e6:	494d      	ldr	r1, [pc, #308]	; (800421c <_strtod_l+0x5a4>)
 80040e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80040ec:	4652      	mov	r2, sl
 80040ee:	465b      	mov	r3, fp
 80040f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040f4:	f7fc fa80 	bl	80005f8 <__aeabi_dmul>
 80040f8:	4682      	mov	sl, r0
 80040fa:	468b      	mov	fp, r1
 80040fc:	f038 080f 	bics.w	r8, r8, #15
 8004100:	d04d      	beq.n	800419e <_strtod_l+0x526>
 8004102:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004106:	dd22      	ble.n	800414e <_strtod_l+0x4d6>
 8004108:	2500      	movs	r5, #0
 800410a:	462e      	mov	r6, r5
 800410c:	9509      	str	r5, [sp, #36]	; 0x24
 800410e:	9507      	str	r5, [sp, #28]
 8004110:	2322      	movs	r3, #34	; 0x22
 8004112:	f8df b110 	ldr.w	fp, [pc, #272]	; 8004224 <_strtod_l+0x5ac>
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	f04f 0a00 	mov.w	sl, #0
 800411c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800411e:	2b00      	cmp	r3, #0
 8004120:	f43f adec 	beq.w	8003cfc <_strtod_l+0x84>
 8004124:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004126:	4620      	mov	r0, r4
 8004128:	f001 f8ae 	bl	8005288 <_Bfree>
 800412c:	9907      	ldr	r1, [sp, #28]
 800412e:	4620      	mov	r0, r4
 8004130:	f001 f8aa 	bl	8005288 <_Bfree>
 8004134:	4631      	mov	r1, r6
 8004136:	4620      	mov	r0, r4
 8004138:	f001 f8a6 	bl	8005288 <_Bfree>
 800413c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800413e:	4620      	mov	r0, r4
 8004140:	f001 f8a2 	bl	8005288 <_Bfree>
 8004144:	4629      	mov	r1, r5
 8004146:	4620      	mov	r0, r4
 8004148:	f001 f89e 	bl	8005288 <_Bfree>
 800414c:	e5d6      	b.n	8003cfc <_strtod_l+0x84>
 800414e:	2300      	movs	r3, #0
 8004150:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004154:	4650      	mov	r0, sl
 8004156:	4659      	mov	r1, fp
 8004158:	4699      	mov	r9, r3
 800415a:	f1b8 0f01 	cmp.w	r8, #1
 800415e:	dc21      	bgt.n	80041a4 <_strtod_l+0x52c>
 8004160:	b10b      	cbz	r3, 8004166 <_strtod_l+0x4ee>
 8004162:	4682      	mov	sl, r0
 8004164:	468b      	mov	fp, r1
 8004166:	4b2e      	ldr	r3, [pc, #184]	; (8004220 <_strtod_l+0x5a8>)
 8004168:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800416c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004170:	4652      	mov	r2, sl
 8004172:	465b      	mov	r3, fp
 8004174:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004178:	f7fc fa3e 	bl	80005f8 <__aeabi_dmul>
 800417c:	4b29      	ldr	r3, [pc, #164]	; (8004224 <_strtod_l+0x5ac>)
 800417e:	460a      	mov	r2, r1
 8004180:	400b      	ands	r3, r1
 8004182:	4929      	ldr	r1, [pc, #164]	; (8004228 <_strtod_l+0x5b0>)
 8004184:	428b      	cmp	r3, r1
 8004186:	4682      	mov	sl, r0
 8004188:	d8be      	bhi.n	8004108 <_strtod_l+0x490>
 800418a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800418e:	428b      	cmp	r3, r1
 8004190:	bf86      	itte	hi
 8004192:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800422c <_strtod_l+0x5b4>
 8004196:	f04f 3aff 	movhi.w	sl, #4294967295
 800419a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800419e:	2300      	movs	r3, #0
 80041a0:	9304      	str	r3, [sp, #16]
 80041a2:	e081      	b.n	80042a8 <_strtod_l+0x630>
 80041a4:	f018 0f01 	tst.w	r8, #1
 80041a8:	d007      	beq.n	80041ba <_strtod_l+0x542>
 80041aa:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <_strtod_l+0x5a8>)
 80041ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f7fc fa20 	bl	80005f8 <__aeabi_dmul>
 80041b8:	2301      	movs	r3, #1
 80041ba:	f109 0901 	add.w	r9, r9, #1
 80041be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80041c2:	e7ca      	b.n	800415a <_strtod_l+0x4e2>
 80041c4:	d0eb      	beq.n	800419e <_strtod_l+0x526>
 80041c6:	f1c8 0800 	rsb	r8, r8, #0
 80041ca:	f018 020f 	ands.w	r2, r8, #15
 80041ce:	d00a      	beq.n	80041e6 <_strtod_l+0x56e>
 80041d0:	4b12      	ldr	r3, [pc, #72]	; (800421c <_strtod_l+0x5a4>)
 80041d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041d6:	4650      	mov	r0, sl
 80041d8:	4659      	mov	r1, fp
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f7fc fb35 	bl	800084c <__aeabi_ddiv>
 80041e2:	4682      	mov	sl, r0
 80041e4:	468b      	mov	fp, r1
 80041e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80041ea:	d0d8      	beq.n	800419e <_strtod_l+0x526>
 80041ec:	f1b8 0f1f 	cmp.w	r8, #31
 80041f0:	dd1e      	ble.n	8004230 <_strtod_l+0x5b8>
 80041f2:	2500      	movs	r5, #0
 80041f4:	462e      	mov	r6, r5
 80041f6:	9509      	str	r5, [sp, #36]	; 0x24
 80041f8:	9507      	str	r5, [sp, #28]
 80041fa:	2322      	movs	r3, #34	; 0x22
 80041fc:	f04f 0a00 	mov.w	sl, #0
 8004200:	f04f 0b00 	mov.w	fp, #0
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	e789      	b.n	800411c <_strtod_l+0x4a4>
 8004208:	08006c95 	.word	0x08006c95
 800420c:	08006cac 	.word	0x08006cac
 8004210:	08006c8c 	.word	0x08006c8c
 8004214:	08006c8f 	.word	0x08006c8f
 8004218:	08006d9b 	.word	0x08006d9b
 800421c:	08006fb8 	.word	0x08006fb8
 8004220:	08006f90 	.word	0x08006f90
 8004224:	7ff00000 	.word	0x7ff00000
 8004228:	7ca00000 	.word	0x7ca00000
 800422c:	7fefffff 	.word	0x7fefffff
 8004230:	f018 0310 	ands.w	r3, r8, #16
 8004234:	bf18      	it	ne
 8004236:	236a      	movne	r3, #106	; 0x6a
 8004238:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80045f0 <_strtod_l+0x978>
 800423c:	9304      	str	r3, [sp, #16]
 800423e:	4650      	mov	r0, sl
 8004240:	4659      	mov	r1, fp
 8004242:	2300      	movs	r3, #0
 8004244:	f018 0f01 	tst.w	r8, #1
 8004248:	d004      	beq.n	8004254 <_strtod_l+0x5dc>
 800424a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800424e:	f7fc f9d3 	bl	80005f8 <__aeabi_dmul>
 8004252:	2301      	movs	r3, #1
 8004254:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004258:	f109 0908 	add.w	r9, r9, #8
 800425c:	d1f2      	bne.n	8004244 <_strtod_l+0x5cc>
 800425e:	b10b      	cbz	r3, 8004264 <_strtod_l+0x5ec>
 8004260:	4682      	mov	sl, r0
 8004262:	468b      	mov	fp, r1
 8004264:	9b04      	ldr	r3, [sp, #16]
 8004266:	b1bb      	cbz	r3, 8004298 <_strtod_l+0x620>
 8004268:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800426c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004270:	2b00      	cmp	r3, #0
 8004272:	4659      	mov	r1, fp
 8004274:	dd10      	ble.n	8004298 <_strtod_l+0x620>
 8004276:	2b1f      	cmp	r3, #31
 8004278:	f340 8128 	ble.w	80044cc <_strtod_l+0x854>
 800427c:	2b34      	cmp	r3, #52	; 0x34
 800427e:	bfde      	ittt	le
 8004280:	3b20      	suble	r3, #32
 8004282:	f04f 32ff 	movle.w	r2, #4294967295
 8004286:	fa02 f303 	lslle.w	r3, r2, r3
 800428a:	f04f 0a00 	mov.w	sl, #0
 800428e:	bfcc      	ite	gt
 8004290:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004294:	ea03 0b01 	andle.w	fp, r3, r1
 8004298:	2200      	movs	r2, #0
 800429a:	2300      	movs	r3, #0
 800429c:	4650      	mov	r0, sl
 800429e:	4659      	mov	r1, fp
 80042a0:	f7fc fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d1a4      	bne.n	80041f2 <_strtod_l+0x57a>
 80042a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042ae:	462b      	mov	r3, r5
 80042b0:	463a      	mov	r2, r7
 80042b2:	4620      	mov	r0, r4
 80042b4:	f001 f854 	bl	8005360 <__s2b>
 80042b8:	9009      	str	r0, [sp, #36]	; 0x24
 80042ba:	2800      	cmp	r0, #0
 80042bc:	f43f af24 	beq.w	8004108 <_strtod_l+0x490>
 80042c0:	9b07      	ldr	r3, [sp, #28]
 80042c2:	1b9e      	subs	r6, r3, r6
 80042c4:	9b08      	ldr	r3, [sp, #32]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bfb4      	ite	lt
 80042ca:	4633      	movlt	r3, r6
 80042cc:	2300      	movge	r3, #0
 80042ce:	9310      	str	r3, [sp, #64]	; 0x40
 80042d0:	9b08      	ldr	r3, [sp, #32]
 80042d2:	2500      	movs	r5, #0
 80042d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80042d8:	9318      	str	r3, [sp, #96]	; 0x60
 80042da:	462e      	mov	r6, r5
 80042dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042de:	4620      	mov	r0, r4
 80042e0:	6859      	ldr	r1, [r3, #4]
 80042e2:	f000 ff91 	bl	8005208 <_Balloc>
 80042e6:	9007      	str	r0, [sp, #28]
 80042e8:	2800      	cmp	r0, #0
 80042ea:	f43f af11 	beq.w	8004110 <_strtod_l+0x498>
 80042ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	3202      	adds	r2, #2
 80042f4:	f103 010c 	add.w	r1, r3, #12
 80042f8:	0092      	lsls	r2, r2, #2
 80042fa:	300c      	adds	r0, #12
 80042fc:	f000 ff76 	bl	80051ec <memcpy>
 8004300:	ec4b ab10 	vmov	d0, sl, fp
 8004304:	aa20      	add	r2, sp, #128	; 0x80
 8004306:	a91f      	add	r1, sp, #124	; 0x7c
 8004308:	4620      	mov	r0, r4
 800430a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800430e:	f001 fb63 	bl	80059d8 <__d2b>
 8004312:	901e      	str	r0, [sp, #120]	; 0x78
 8004314:	2800      	cmp	r0, #0
 8004316:	f43f aefb 	beq.w	8004110 <_strtod_l+0x498>
 800431a:	2101      	movs	r1, #1
 800431c:	4620      	mov	r0, r4
 800431e:	f001 f8b9 	bl	8005494 <__i2b>
 8004322:	4606      	mov	r6, r0
 8004324:	2800      	cmp	r0, #0
 8004326:	f43f aef3 	beq.w	8004110 <_strtod_l+0x498>
 800432a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800432c:	9904      	ldr	r1, [sp, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	bfab      	itete	ge
 8004332:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8004334:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8004336:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004338:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800433c:	bfac      	ite	ge
 800433e:	eb03 0902 	addge.w	r9, r3, r2
 8004342:	1ad7      	sublt	r7, r2, r3
 8004344:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004346:	eba3 0801 	sub.w	r8, r3, r1
 800434a:	4490      	add	r8, r2
 800434c:	4ba3      	ldr	r3, [pc, #652]	; (80045dc <_strtod_l+0x964>)
 800434e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004352:	4598      	cmp	r8, r3
 8004354:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004358:	f280 80cc 	bge.w	80044f4 <_strtod_l+0x87c>
 800435c:	eba3 0308 	sub.w	r3, r3, r8
 8004360:	2b1f      	cmp	r3, #31
 8004362:	eba2 0203 	sub.w	r2, r2, r3
 8004366:	f04f 0101 	mov.w	r1, #1
 800436a:	f300 80b6 	bgt.w	80044da <_strtod_l+0x862>
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	9311      	str	r3, [sp, #68]	; 0x44
 8004374:	2300      	movs	r3, #0
 8004376:	930c      	str	r3, [sp, #48]	; 0x30
 8004378:	eb09 0802 	add.w	r8, r9, r2
 800437c:	9b04      	ldr	r3, [sp, #16]
 800437e:	45c1      	cmp	r9, r8
 8004380:	4417      	add	r7, r2
 8004382:	441f      	add	r7, r3
 8004384:	464b      	mov	r3, r9
 8004386:	bfa8      	it	ge
 8004388:	4643      	movge	r3, r8
 800438a:	42bb      	cmp	r3, r7
 800438c:	bfa8      	it	ge
 800438e:	463b      	movge	r3, r7
 8004390:	2b00      	cmp	r3, #0
 8004392:	bfc2      	ittt	gt
 8004394:	eba8 0803 	subgt.w	r8, r8, r3
 8004398:	1aff      	subgt	r7, r7, r3
 800439a:	eba9 0903 	subgt.w	r9, r9, r3
 800439e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	dd17      	ble.n	80043d4 <_strtod_l+0x75c>
 80043a4:	4631      	mov	r1, r6
 80043a6:	461a      	mov	r2, r3
 80043a8:	4620      	mov	r0, r4
 80043aa:	f001 f92f 	bl	800560c <__pow5mult>
 80043ae:	4606      	mov	r6, r0
 80043b0:	2800      	cmp	r0, #0
 80043b2:	f43f aead 	beq.w	8004110 <_strtod_l+0x498>
 80043b6:	4601      	mov	r1, r0
 80043b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80043ba:	4620      	mov	r0, r4
 80043bc:	f001 f880 	bl	80054c0 <__multiply>
 80043c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80043c2:	2800      	cmp	r0, #0
 80043c4:	f43f aea4 	beq.w	8004110 <_strtod_l+0x498>
 80043c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80043ca:	4620      	mov	r0, r4
 80043cc:	f000 ff5c 	bl	8005288 <_Bfree>
 80043d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043d2:	931e      	str	r3, [sp, #120]	; 0x78
 80043d4:	f1b8 0f00 	cmp.w	r8, #0
 80043d8:	f300 8091 	bgt.w	80044fe <_strtod_l+0x886>
 80043dc:	9b08      	ldr	r3, [sp, #32]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	dd08      	ble.n	80043f4 <_strtod_l+0x77c>
 80043e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80043e4:	9907      	ldr	r1, [sp, #28]
 80043e6:	4620      	mov	r0, r4
 80043e8:	f001 f910 	bl	800560c <__pow5mult>
 80043ec:	9007      	str	r0, [sp, #28]
 80043ee:	2800      	cmp	r0, #0
 80043f0:	f43f ae8e 	beq.w	8004110 <_strtod_l+0x498>
 80043f4:	2f00      	cmp	r7, #0
 80043f6:	dd08      	ble.n	800440a <_strtod_l+0x792>
 80043f8:	9907      	ldr	r1, [sp, #28]
 80043fa:	463a      	mov	r2, r7
 80043fc:	4620      	mov	r0, r4
 80043fe:	f001 f95f 	bl	80056c0 <__lshift>
 8004402:	9007      	str	r0, [sp, #28]
 8004404:	2800      	cmp	r0, #0
 8004406:	f43f ae83 	beq.w	8004110 <_strtod_l+0x498>
 800440a:	f1b9 0f00 	cmp.w	r9, #0
 800440e:	dd08      	ble.n	8004422 <_strtod_l+0x7aa>
 8004410:	4631      	mov	r1, r6
 8004412:	464a      	mov	r2, r9
 8004414:	4620      	mov	r0, r4
 8004416:	f001 f953 	bl	80056c0 <__lshift>
 800441a:	4606      	mov	r6, r0
 800441c:	2800      	cmp	r0, #0
 800441e:	f43f ae77 	beq.w	8004110 <_strtod_l+0x498>
 8004422:	9a07      	ldr	r2, [sp, #28]
 8004424:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004426:	4620      	mov	r0, r4
 8004428:	f001 f9d2 	bl	80057d0 <__mdiff>
 800442c:	4605      	mov	r5, r0
 800442e:	2800      	cmp	r0, #0
 8004430:	f43f ae6e 	beq.w	8004110 <_strtod_l+0x498>
 8004434:	68c3      	ldr	r3, [r0, #12]
 8004436:	930f      	str	r3, [sp, #60]	; 0x3c
 8004438:	2300      	movs	r3, #0
 800443a:	60c3      	str	r3, [r0, #12]
 800443c:	4631      	mov	r1, r6
 800443e:	f001 f9ab 	bl	8005798 <__mcmp>
 8004442:	2800      	cmp	r0, #0
 8004444:	da65      	bge.n	8004512 <_strtod_l+0x89a>
 8004446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004448:	ea53 030a 	orrs.w	r3, r3, sl
 800444c:	f040 8087 	bne.w	800455e <_strtod_l+0x8e6>
 8004450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 8082 	bne.w	800455e <_strtod_l+0x8e6>
 800445a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800445e:	0d1b      	lsrs	r3, r3, #20
 8004460:	051b      	lsls	r3, r3, #20
 8004462:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004466:	d97a      	bls.n	800455e <_strtod_l+0x8e6>
 8004468:	696b      	ldr	r3, [r5, #20]
 800446a:	b913      	cbnz	r3, 8004472 <_strtod_l+0x7fa>
 800446c:	692b      	ldr	r3, [r5, #16]
 800446e:	2b01      	cmp	r3, #1
 8004470:	dd75      	ble.n	800455e <_strtod_l+0x8e6>
 8004472:	4629      	mov	r1, r5
 8004474:	2201      	movs	r2, #1
 8004476:	4620      	mov	r0, r4
 8004478:	f001 f922 	bl	80056c0 <__lshift>
 800447c:	4631      	mov	r1, r6
 800447e:	4605      	mov	r5, r0
 8004480:	f001 f98a 	bl	8005798 <__mcmp>
 8004484:	2800      	cmp	r0, #0
 8004486:	dd6a      	ble.n	800455e <_strtod_l+0x8e6>
 8004488:	9904      	ldr	r1, [sp, #16]
 800448a:	4a55      	ldr	r2, [pc, #340]	; (80045e0 <_strtod_l+0x968>)
 800448c:	465b      	mov	r3, fp
 800448e:	2900      	cmp	r1, #0
 8004490:	f000 8085 	beq.w	800459e <_strtod_l+0x926>
 8004494:	ea02 010b 	and.w	r1, r2, fp
 8004498:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800449c:	dc7f      	bgt.n	800459e <_strtod_l+0x926>
 800449e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80044a2:	f77f aeaa 	ble.w	80041fa <_strtod_l+0x582>
 80044a6:	4a4f      	ldr	r2, [pc, #316]	; (80045e4 <_strtod_l+0x96c>)
 80044a8:	2300      	movs	r3, #0
 80044aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80044ae:	4650      	mov	r0, sl
 80044b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80044b4:	4659      	mov	r1, fp
 80044b6:	f7fc f89f 	bl	80005f8 <__aeabi_dmul>
 80044ba:	460b      	mov	r3, r1
 80044bc:	4303      	orrs	r3, r0
 80044be:	bf08      	it	eq
 80044c0:	2322      	moveq	r3, #34	; 0x22
 80044c2:	4682      	mov	sl, r0
 80044c4:	468b      	mov	fp, r1
 80044c6:	bf08      	it	eq
 80044c8:	6023      	streq	r3, [r4, #0]
 80044ca:	e62b      	b.n	8004124 <_strtod_l+0x4ac>
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	ea03 0a0a 	and.w	sl, r3, sl
 80044d8:	e6de      	b.n	8004298 <_strtod_l+0x620>
 80044da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80044de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80044e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80044e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80044ea:	fa01 f308 	lsl.w	r3, r1, r8
 80044ee:	930c      	str	r3, [sp, #48]	; 0x30
 80044f0:	9111      	str	r1, [sp, #68]	; 0x44
 80044f2:	e741      	b.n	8004378 <_strtod_l+0x700>
 80044f4:	2300      	movs	r3, #0
 80044f6:	930c      	str	r3, [sp, #48]	; 0x30
 80044f8:	2301      	movs	r3, #1
 80044fa:	9311      	str	r3, [sp, #68]	; 0x44
 80044fc:	e73c      	b.n	8004378 <_strtod_l+0x700>
 80044fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004500:	4642      	mov	r2, r8
 8004502:	4620      	mov	r0, r4
 8004504:	f001 f8dc 	bl	80056c0 <__lshift>
 8004508:	901e      	str	r0, [sp, #120]	; 0x78
 800450a:	2800      	cmp	r0, #0
 800450c:	f47f af66 	bne.w	80043dc <_strtod_l+0x764>
 8004510:	e5fe      	b.n	8004110 <_strtod_l+0x498>
 8004512:	465f      	mov	r7, fp
 8004514:	d16e      	bne.n	80045f4 <_strtod_l+0x97c>
 8004516:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800451c:	b342      	cbz	r2, 8004570 <_strtod_l+0x8f8>
 800451e:	4a32      	ldr	r2, [pc, #200]	; (80045e8 <_strtod_l+0x970>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d128      	bne.n	8004576 <_strtod_l+0x8fe>
 8004524:	9b04      	ldr	r3, [sp, #16]
 8004526:	4650      	mov	r0, sl
 8004528:	b1eb      	cbz	r3, 8004566 <_strtod_l+0x8ee>
 800452a:	4a2d      	ldr	r2, [pc, #180]	; (80045e0 <_strtod_l+0x968>)
 800452c:	403a      	ands	r2, r7
 800452e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004532:	f04f 31ff 	mov.w	r1, #4294967295
 8004536:	d819      	bhi.n	800456c <_strtod_l+0x8f4>
 8004538:	0d12      	lsrs	r2, r2, #20
 800453a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	4298      	cmp	r0, r3
 8004544:	d117      	bne.n	8004576 <_strtod_l+0x8fe>
 8004546:	4b29      	ldr	r3, [pc, #164]	; (80045ec <_strtod_l+0x974>)
 8004548:	429f      	cmp	r7, r3
 800454a:	d102      	bne.n	8004552 <_strtod_l+0x8da>
 800454c:	3001      	adds	r0, #1
 800454e:	f43f addf 	beq.w	8004110 <_strtod_l+0x498>
 8004552:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <_strtod_l+0x968>)
 8004554:	403b      	ands	r3, r7
 8004556:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800455a:	f04f 0a00 	mov.w	sl, #0
 800455e:	9b04      	ldr	r3, [sp, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1a0      	bne.n	80044a6 <_strtod_l+0x82e>
 8004564:	e5de      	b.n	8004124 <_strtod_l+0x4ac>
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
 800456a:	e7ea      	b.n	8004542 <_strtod_l+0x8ca>
 800456c:	460b      	mov	r3, r1
 800456e:	e7e8      	b.n	8004542 <_strtod_l+0x8ca>
 8004570:	ea53 030a 	orrs.w	r3, r3, sl
 8004574:	d088      	beq.n	8004488 <_strtod_l+0x810>
 8004576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004578:	b1db      	cbz	r3, 80045b2 <_strtod_l+0x93a>
 800457a:	423b      	tst	r3, r7
 800457c:	d0ef      	beq.n	800455e <_strtod_l+0x8e6>
 800457e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004580:	9a04      	ldr	r2, [sp, #16]
 8004582:	4650      	mov	r0, sl
 8004584:	4659      	mov	r1, fp
 8004586:	b1c3      	cbz	r3, 80045ba <_strtod_l+0x942>
 8004588:	f7ff fb58 	bl	8003c3c <sulp>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004594:	f7fb fe7a 	bl	800028c <__adddf3>
 8004598:	4682      	mov	sl, r0
 800459a:	468b      	mov	fp, r1
 800459c:	e7df      	b.n	800455e <_strtod_l+0x8e6>
 800459e:	4013      	ands	r3, r2
 80045a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80045a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80045a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80045ac:	f04f 3aff 	mov.w	sl, #4294967295
 80045b0:	e7d5      	b.n	800455e <_strtod_l+0x8e6>
 80045b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045b4:	ea13 0f0a 	tst.w	r3, sl
 80045b8:	e7e0      	b.n	800457c <_strtod_l+0x904>
 80045ba:	f7ff fb3f 	bl	8003c3c <sulp>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045c6:	f7fb fe5f 	bl	8000288 <__aeabi_dsub>
 80045ca:	2200      	movs	r2, #0
 80045cc:	2300      	movs	r3, #0
 80045ce:	4682      	mov	sl, r0
 80045d0:	468b      	mov	fp, r1
 80045d2:	f7fc fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d0c1      	beq.n	800455e <_strtod_l+0x8e6>
 80045da:	e60e      	b.n	80041fa <_strtod_l+0x582>
 80045dc:	fffffc02 	.word	0xfffffc02
 80045e0:	7ff00000 	.word	0x7ff00000
 80045e4:	39500000 	.word	0x39500000
 80045e8:	000fffff 	.word	0x000fffff
 80045ec:	7fefffff 	.word	0x7fefffff
 80045f0:	08006cc0 	.word	0x08006cc0
 80045f4:	4631      	mov	r1, r6
 80045f6:	4628      	mov	r0, r5
 80045f8:	f001 fa4a 	bl	8005a90 <__ratio>
 80045fc:	ec59 8b10 	vmov	r8, r9, d0
 8004600:	ee10 0a10 	vmov	r0, s0
 8004604:	2200      	movs	r2, #0
 8004606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800460a:	4649      	mov	r1, r9
 800460c:	f7fc fa70 	bl	8000af0 <__aeabi_dcmple>
 8004610:	2800      	cmp	r0, #0
 8004612:	d07c      	beq.n	800470e <_strtod_l+0xa96>
 8004614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d04c      	beq.n	80046b4 <_strtod_l+0xa3c>
 800461a:	4b95      	ldr	r3, [pc, #596]	; (8004870 <_strtod_l+0xbf8>)
 800461c:	2200      	movs	r2, #0
 800461e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004622:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004870 <_strtod_l+0xbf8>
 8004626:	f04f 0800 	mov.w	r8, #0
 800462a:	4b92      	ldr	r3, [pc, #584]	; (8004874 <_strtod_l+0xbfc>)
 800462c:	403b      	ands	r3, r7
 800462e:	9311      	str	r3, [sp, #68]	; 0x44
 8004630:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004632:	4b91      	ldr	r3, [pc, #580]	; (8004878 <_strtod_l+0xc00>)
 8004634:	429a      	cmp	r2, r3
 8004636:	f040 80b2 	bne.w	800479e <_strtod_l+0xb26>
 800463a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800463e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004642:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004646:	ec4b ab10 	vmov	d0, sl, fp
 800464a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800464e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004652:	f001 f945 	bl	80058e0 <__ulp>
 8004656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800465a:	ec53 2b10 	vmov	r2, r3, d0
 800465e:	f7fb ffcb 	bl	80005f8 <__aeabi_dmul>
 8004662:	4652      	mov	r2, sl
 8004664:	465b      	mov	r3, fp
 8004666:	f7fb fe11 	bl	800028c <__adddf3>
 800466a:	460b      	mov	r3, r1
 800466c:	4981      	ldr	r1, [pc, #516]	; (8004874 <_strtod_l+0xbfc>)
 800466e:	4a83      	ldr	r2, [pc, #524]	; (800487c <_strtod_l+0xc04>)
 8004670:	4019      	ands	r1, r3
 8004672:	4291      	cmp	r1, r2
 8004674:	4682      	mov	sl, r0
 8004676:	d95e      	bls.n	8004736 <_strtod_l+0xabe>
 8004678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800467a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800467e:	4293      	cmp	r3, r2
 8004680:	d103      	bne.n	800468a <_strtod_l+0xa12>
 8004682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004684:	3301      	adds	r3, #1
 8004686:	f43f ad43 	beq.w	8004110 <_strtod_l+0x498>
 800468a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8004888 <_strtod_l+0xc10>
 800468e:	f04f 3aff 	mov.w	sl, #4294967295
 8004692:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004694:	4620      	mov	r0, r4
 8004696:	f000 fdf7 	bl	8005288 <_Bfree>
 800469a:	9907      	ldr	r1, [sp, #28]
 800469c:	4620      	mov	r0, r4
 800469e:	f000 fdf3 	bl	8005288 <_Bfree>
 80046a2:	4631      	mov	r1, r6
 80046a4:	4620      	mov	r0, r4
 80046a6:	f000 fdef 	bl	8005288 <_Bfree>
 80046aa:	4629      	mov	r1, r5
 80046ac:	4620      	mov	r0, r4
 80046ae:	f000 fdeb 	bl	8005288 <_Bfree>
 80046b2:	e613      	b.n	80042dc <_strtod_l+0x664>
 80046b4:	f1ba 0f00 	cmp.w	sl, #0
 80046b8:	d11b      	bne.n	80046f2 <_strtod_l+0xa7a>
 80046ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80046be:	b9f3      	cbnz	r3, 80046fe <_strtod_l+0xa86>
 80046c0:	4b6b      	ldr	r3, [pc, #428]	; (8004870 <_strtod_l+0xbf8>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	4640      	mov	r0, r8
 80046c6:	4649      	mov	r1, r9
 80046c8:	f7fc fa08 	bl	8000adc <__aeabi_dcmplt>
 80046cc:	b9d0      	cbnz	r0, 8004704 <_strtod_l+0xa8c>
 80046ce:	4640      	mov	r0, r8
 80046d0:	4649      	mov	r1, r9
 80046d2:	4b6b      	ldr	r3, [pc, #428]	; (8004880 <_strtod_l+0xc08>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	f7fb ff8f 	bl	80005f8 <__aeabi_dmul>
 80046da:	4680      	mov	r8, r0
 80046dc:	4689      	mov	r9, r1
 80046de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80046e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80046e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80046e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80046ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80046f0:	e79b      	b.n	800462a <_strtod_l+0x9b2>
 80046f2:	f1ba 0f01 	cmp.w	sl, #1
 80046f6:	d102      	bne.n	80046fe <_strtod_l+0xa86>
 80046f8:	2f00      	cmp	r7, #0
 80046fa:	f43f ad7e 	beq.w	80041fa <_strtod_l+0x582>
 80046fe:	4b61      	ldr	r3, [pc, #388]	; (8004884 <_strtod_l+0xc0c>)
 8004700:	2200      	movs	r2, #0
 8004702:	e78c      	b.n	800461e <_strtod_l+0x9a6>
 8004704:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004880 <_strtod_l+0xc08>
 8004708:	f04f 0800 	mov.w	r8, #0
 800470c:	e7e7      	b.n	80046de <_strtod_l+0xa66>
 800470e:	4b5c      	ldr	r3, [pc, #368]	; (8004880 <_strtod_l+0xc08>)
 8004710:	4640      	mov	r0, r8
 8004712:	4649      	mov	r1, r9
 8004714:	2200      	movs	r2, #0
 8004716:	f7fb ff6f 	bl	80005f8 <__aeabi_dmul>
 800471a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800471c:	4680      	mov	r8, r0
 800471e:	4689      	mov	r9, r1
 8004720:	b933      	cbnz	r3, 8004730 <_strtod_l+0xab8>
 8004722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004726:	9012      	str	r0, [sp, #72]	; 0x48
 8004728:	9313      	str	r3, [sp, #76]	; 0x4c
 800472a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800472e:	e7dd      	b.n	80046ec <_strtod_l+0xa74>
 8004730:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8004734:	e7f9      	b.n	800472a <_strtod_l+0xab2>
 8004736:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800473a:	9b04      	ldr	r3, [sp, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1a8      	bne.n	8004692 <_strtod_l+0xa1a>
 8004740:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004744:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004746:	0d1b      	lsrs	r3, r3, #20
 8004748:	051b      	lsls	r3, r3, #20
 800474a:	429a      	cmp	r2, r3
 800474c:	d1a1      	bne.n	8004692 <_strtod_l+0xa1a>
 800474e:	4640      	mov	r0, r8
 8004750:	4649      	mov	r1, r9
 8004752:	f7fc fa23 	bl	8000b9c <__aeabi_d2lz>
 8004756:	f7fb ff21 	bl	800059c <__aeabi_l2d>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4640      	mov	r0, r8
 8004760:	4649      	mov	r1, r9
 8004762:	f7fb fd91 	bl	8000288 <__aeabi_dsub>
 8004766:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004768:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800476c:	ea43 030a 	orr.w	r3, r3, sl
 8004770:	4313      	orrs	r3, r2
 8004772:	4680      	mov	r8, r0
 8004774:	4689      	mov	r9, r1
 8004776:	d053      	beq.n	8004820 <_strtod_l+0xba8>
 8004778:	a335      	add	r3, pc, #212	; (adr r3, 8004850 <_strtod_l+0xbd8>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f7fc f9ad 	bl	8000adc <__aeabi_dcmplt>
 8004782:	2800      	cmp	r0, #0
 8004784:	f47f acce 	bne.w	8004124 <_strtod_l+0x4ac>
 8004788:	a333      	add	r3, pc, #204	; (adr r3, 8004858 <_strtod_l+0xbe0>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	4640      	mov	r0, r8
 8004790:	4649      	mov	r1, r9
 8004792:	f7fc f9c1 	bl	8000b18 <__aeabi_dcmpgt>
 8004796:	2800      	cmp	r0, #0
 8004798:	f43f af7b 	beq.w	8004692 <_strtod_l+0xa1a>
 800479c:	e4c2      	b.n	8004124 <_strtod_l+0x4ac>
 800479e:	9b04      	ldr	r3, [sp, #16]
 80047a0:	b333      	cbz	r3, 80047f0 <_strtod_l+0xb78>
 80047a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80047a8:	d822      	bhi.n	80047f0 <_strtod_l+0xb78>
 80047aa:	a32d      	add	r3, pc, #180	; (adr r3, 8004860 <_strtod_l+0xbe8>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	4640      	mov	r0, r8
 80047b2:	4649      	mov	r1, r9
 80047b4:	f7fc f99c 	bl	8000af0 <__aeabi_dcmple>
 80047b8:	b1a0      	cbz	r0, 80047e4 <_strtod_l+0xb6c>
 80047ba:	4649      	mov	r1, r9
 80047bc:	4640      	mov	r0, r8
 80047be:	f7fc f9b5 	bl	8000b2c <__aeabi_d2uiz>
 80047c2:	2801      	cmp	r0, #1
 80047c4:	bf38      	it	cc
 80047c6:	2001      	movcc	r0, #1
 80047c8:	f7fb fe9c 	bl	8000504 <__aeabi_ui2d>
 80047cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047ce:	4680      	mov	r8, r0
 80047d0:	4689      	mov	r9, r1
 80047d2:	bb13      	cbnz	r3, 800481a <_strtod_l+0xba2>
 80047d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047d8:	9014      	str	r0, [sp, #80]	; 0x50
 80047da:	9315      	str	r3, [sp, #84]	; 0x54
 80047dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80047e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80047e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80047e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	930d      	str	r3, [sp, #52]	; 0x34
 80047f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80047f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80047fc:	f001 f870 	bl	80058e0 <__ulp>
 8004800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004804:	ec53 2b10 	vmov	r2, r3, d0
 8004808:	f7fb fef6 	bl	80005f8 <__aeabi_dmul>
 800480c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004810:	f7fb fd3c 	bl	800028c <__adddf3>
 8004814:	4682      	mov	sl, r0
 8004816:	468b      	mov	fp, r1
 8004818:	e78f      	b.n	800473a <_strtod_l+0xac2>
 800481a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800481e:	e7dd      	b.n	80047dc <_strtod_l+0xb64>
 8004820:	a311      	add	r3, pc, #68	; (adr r3, 8004868 <_strtod_l+0xbf0>)
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f7fc f959 	bl	8000adc <__aeabi_dcmplt>
 800482a:	e7b4      	b.n	8004796 <_strtod_l+0xb1e>
 800482c:	2300      	movs	r3, #0
 800482e:	930e      	str	r3, [sp, #56]	; 0x38
 8004830:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004832:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	f7ff ba65 	b.w	8003d04 <_strtod_l+0x8c>
 800483a:	2b65      	cmp	r3, #101	; 0x65
 800483c:	f43f ab5d 	beq.w	8003efa <_strtod_l+0x282>
 8004840:	2b45      	cmp	r3, #69	; 0x45
 8004842:	f43f ab5a 	beq.w	8003efa <_strtod_l+0x282>
 8004846:	2201      	movs	r2, #1
 8004848:	f7ff bb92 	b.w	8003f70 <_strtod_l+0x2f8>
 800484c:	f3af 8000 	nop.w
 8004850:	94a03595 	.word	0x94a03595
 8004854:	3fdfffff 	.word	0x3fdfffff
 8004858:	35afe535 	.word	0x35afe535
 800485c:	3fe00000 	.word	0x3fe00000
 8004860:	ffc00000 	.word	0xffc00000
 8004864:	41dfffff 	.word	0x41dfffff
 8004868:	94a03595 	.word	0x94a03595
 800486c:	3fcfffff 	.word	0x3fcfffff
 8004870:	3ff00000 	.word	0x3ff00000
 8004874:	7ff00000 	.word	0x7ff00000
 8004878:	7fe00000 	.word	0x7fe00000
 800487c:	7c9fffff 	.word	0x7c9fffff
 8004880:	3fe00000 	.word	0x3fe00000
 8004884:	bff00000 	.word	0xbff00000
 8004888:	7fefffff 	.word	0x7fefffff

0800488c <strtod>:
 800488c:	460a      	mov	r2, r1
 800488e:	4601      	mov	r1, r0
 8004890:	4802      	ldr	r0, [pc, #8]	; (800489c <strtod+0x10>)
 8004892:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <strtod+0x14>)
 8004894:	6800      	ldr	r0, [r0, #0]
 8004896:	f7ff b9ef 	b.w	8003c78 <_strtod_l>
 800489a:	bf00      	nop
 800489c:	2000000c 	.word	0x2000000c
 80048a0:	20000074 	.word	0x20000074

080048a4 <strtok>:
 80048a4:	4b16      	ldr	r3, [pc, #88]	; (8004900 <strtok+0x5c>)
 80048a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80048a8:	681e      	ldr	r6, [r3, #0]
 80048aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80048ac:	4605      	mov	r5, r0
 80048ae:	b9fc      	cbnz	r4, 80048f0 <strtok+0x4c>
 80048b0:	2050      	movs	r0, #80	; 0x50
 80048b2:	9101      	str	r1, [sp, #4]
 80048b4:	f000 fc80 	bl	80051b8 <malloc>
 80048b8:	9901      	ldr	r1, [sp, #4]
 80048ba:	65b0      	str	r0, [r6, #88]	; 0x58
 80048bc:	4602      	mov	r2, r0
 80048be:	b920      	cbnz	r0, 80048ca <strtok+0x26>
 80048c0:	4b10      	ldr	r3, [pc, #64]	; (8004904 <strtok+0x60>)
 80048c2:	4811      	ldr	r0, [pc, #68]	; (8004908 <strtok+0x64>)
 80048c4:	2157      	movs	r1, #87	; 0x57
 80048c6:	f000 f8d7 	bl	8004a78 <__assert_func>
 80048ca:	e9c0 4400 	strd	r4, r4, [r0]
 80048ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80048d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80048d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80048da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80048de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80048e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80048e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80048ea:	6184      	str	r4, [r0, #24]
 80048ec:	7704      	strb	r4, [r0, #28]
 80048ee:	6244      	str	r4, [r0, #36]	; 0x24
 80048f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80048f2:	2301      	movs	r3, #1
 80048f4:	4628      	mov	r0, r5
 80048f6:	b002      	add	sp, #8
 80048f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80048fc:	f000 b806 	b.w	800490c <__strtok_r>
 8004900:	2000000c 	.word	0x2000000c
 8004904:	08006ce8 	.word	0x08006ce8
 8004908:	08006cff 	.word	0x08006cff

0800490c <__strtok_r>:
 800490c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800490e:	b908      	cbnz	r0, 8004914 <__strtok_r+0x8>
 8004910:	6810      	ldr	r0, [r2, #0]
 8004912:	b188      	cbz	r0, 8004938 <__strtok_r+0x2c>
 8004914:	4604      	mov	r4, r0
 8004916:	4620      	mov	r0, r4
 8004918:	f814 5b01 	ldrb.w	r5, [r4], #1
 800491c:	460f      	mov	r7, r1
 800491e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004922:	b91e      	cbnz	r6, 800492c <__strtok_r+0x20>
 8004924:	b965      	cbnz	r5, 8004940 <__strtok_r+0x34>
 8004926:	6015      	str	r5, [r2, #0]
 8004928:	4628      	mov	r0, r5
 800492a:	e005      	b.n	8004938 <__strtok_r+0x2c>
 800492c:	42b5      	cmp	r5, r6
 800492e:	d1f6      	bne.n	800491e <__strtok_r+0x12>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <__strtok_r+0xa>
 8004934:	6014      	str	r4, [r2, #0]
 8004936:	7003      	strb	r3, [r0, #0]
 8004938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800493a:	461c      	mov	r4, r3
 800493c:	e00c      	b.n	8004958 <__strtok_r+0x4c>
 800493e:	b915      	cbnz	r5, 8004946 <__strtok_r+0x3a>
 8004940:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004944:	460e      	mov	r6, r1
 8004946:	f816 5b01 	ldrb.w	r5, [r6], #1
 800494a:	42ab      	cmp	r3, r5
 800494c:	d1f7      	bne.n	800493e <__strtok_r+0x32>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f3      	beq.n	800493a <__strtok_r+0x2e>
 8004952:	2300      	movs	r3, #0
 8004954:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004958:	6014      	str	r4, [r2, #0]
 800495a:	e7ed      	b.n	8004938 <__strtok_r+0x2c>

0800495c <_strtol_l.isra.0>:
 800495c:	2b01      	cmp	r3, #1
 800495e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004962:	d001      	beq.n	8004968 <_strtol_l.isra.0+0xc>
 8004964:	2b24      	cmp	r3, #36	; 0x24
 8004966:	d906      	bls.n	8004976 <_strtol_l.isra.0+0x1a>
 8004968:	f7ff f916 	bl	8003b98 <__errno>
 800496c:	2316      	movs	r3, #22
 800496e:	6003      	str	r3, [r0, #0]
 8004970:	2000      	movs	r0, #0
 8004972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004976:	4f3a      	ldr	r7, [pc, #232]	; (8004a60 <_strtol_l.isra.0+0x104>)
 8004978:	468e      	mov	lr, r1
 800497a:	4676      	mov	r6, lr
 800497c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004980:	5de5      	ldrb	r5, [r4, r7]
 8004982:	f015 0508 	ands.w	r5, r5, #8
 8004986:	d1f8      	bne.n	800497a <_strtol_l.isra.0+0x1e>
 8004988:	2c2d      	cmp	r4, #45	; 0x2d
 800498a:	d134      	bne.n	80049f6 <_strtol_l.isra.0+0x9a>
 800498c:	f89e 4000 	ldrb.w	r4, [lr]
 8004990:	f04f 0801 	mov.w	r8, #1
 8004994:	f106 0e02 	add.w	lr, r6, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d05c      	beq.n	8004a56 <_strtol_l.isra.0+0xfa>
 800499c:	2b10      	cmp	r3, #16
 800499e:	d10c      	bne.n	80049ba <_strtol_l.isra.0+0x5e>
 80049a0:	2c30      	cmp	r4, #48	; 0x30
 80049a2:	d10a      	bne.n	80049ba <_strtol_l.isra.0+0x5e>
 80049a4:	f89e 4000 	ldrb.w	r4, [lr]
 80049a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80049ac:	2c58      	cmp	r4, #88	; 0x58
 80049ae:	d14d      	bne.n	8004a4c <_strtol_l.isra.0+0xf0>
 80049b0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80049b4:	2310      	movs	r3, #16
 80049b6:	f10e 0e02 	add.w	lr, lr, #2
 80049ba:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80049be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80049c2:	2600      	movs	r6, #0
 80049c4:	fbbc f9f3 	udiv	r9, ip, r3
 80049c8:	4635      	mov	r5, r6
 80049ca:	fb03 ca19 	mls	sl, r3, r9, ip
 80049ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80049d2:	2f09      	cmp	r7, #9
 80049d4:	d818      	bhi.n	8004a08 <_strtol_l.isra.0+0xac>
 80049d6:	463c      	mov	r4, r7
 80049d8:	42a3      	cmp	r3, r4
 80049da:	dd24      	ble.n	8004a26 <_strtol_l.isra.0+0xca>
 80049dc:	2e00      	cmp	r6, #0
 80049de:	db1f      	blt.n	8004a20 <_strtol_l.isra.0+0xc4>
 80049e0:	45a9      	cmp	r9, r5
 80049e2:	d31d      	bcc.n	8004a20 <_strtol_l.isra.0+0xc4>
 80049e4:	d101      	bne.n	80049ea <_strtol_l.isra.0+0x8e>
 80049e6:	45a2      	cmp	sl, r4
 80049e8:	db1a      	blt.n	8004a20 <_strtol_l.isra.0+0xc4>
 80049ea:	fb05 4503 	mla	r5, r5, r3, r4
 80049ee:	2601      	movs	r6, #1
 80049f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80049f4:	e7eb      	b.n	80049ce <_strtol_l.isra.0+0x72>
 80049f6:	2c2b      	cmp	r4, #43	; 0x2b
 80049f8:	bf08      	it	eq
 80049fa:	f89e 4000 	ldrbeq.w	r4, [lr]
 80049fe:	46a8      	mov	r8, r5
 8004a00:	bf08      	it	eq
 8004a02:	f106 0e02 	addeq.w	lr, r6, #2
 8004a06:	e7c7      	b.n	8004998 <_strtol_l.isra.0+0x3c>
 8004a08:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004a0c:	2f19      	cmp	r7, #25
 8004a0e:	d801      	bhi.n	8004a14 <_strtol_l.isra.0+0xb8>
 8004a10:	3c37      	subs	r4, #55	; 0x37
 8004a12:	e7e1      	b.n	80049d8 <_strtol_l.isra.0+0x7c>
 8004a14:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004a18:	2f19      	cmp	r7, #25
 8004a1a:	d804      	bhi.n	8004a26 <_strtol_l.isra.0+0xca>
 8004a1c:	3c57      	subs	r4, #87	; 0x57
 8004a1e:	e7db      	b.n	80049d8 <_strtol_l.isra.0+0x7c>
 8004a20:	f04f 36ff 	mov.w	r6, #4294967295
 8004a24:	e7e4      	b.n	80049f0 <_strtol_l.isra.0+0x94>
 8004a26:	2e00      	cmp	r6, #0
 8004a28:	da05      	bge.n	8004a36 <_strtol_l.isra.0+0xda>
 8004a2a:	2322      	movs	r3, #34	; 0x22
 8004a2c:	6003      	str	r3, [r0, #0]
 8004a2e:	4665      	mov	r5, ip
 8004a30:	b942      	cbnz	r2, 8004a44 <_strtol_l.isra.0+0xe8>
 8004a32:	4628      	mov	r0, r5
 8004a34:	e79d      	b.n	8004972 <_strtol_l.isra.0+0x16>
 8004a36:	f1b8 0f00 	cmp.w	r8, #0
 8004a3a:	d000      	beq.n	8004a3e <_strtol_l.isra.0+0xe2>
 8004a3c:	426d      	negs	r5, r5
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d0f7      	beq.n	8004a32 <_strtol_l.isra.0+0xd6>
 8004a42:	b10e      	cbz	r6, 8004a48 <_strtol_l.isra.0+0xec>
 8004a44:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	e7f2      	b.n	8004a32 <_strtol_l.isra.0+0xd6>
 8004a4c:	2430      	movs	r4, #48	; 0x30
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1b3      	bne.n	80049ba <_strtol_l.isra.0+0x5e>
 8004a52:	2308      	movs	r3, #8
 8004a54:	e7b1      	b.n	80049ba <_strtol_l.isra.0+0x5e>
 8004a56:	2c30      	cmp	r4, #48	; 0x30
 8004a58:	d0a4      	beq.n	80049a4 <_strtol_l.isra.0+0x48>
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	e7ad      	b.n	80049ba <_strtol_l.isra.0+0x5e>
 8004a5e:	bf00      	nop
 8004a60:	08006d9d 	.word	0x08006d9d

08004a64 <strtol>:
 8004a64:	4613      	mov	r3, r2
 8004a66:	460a      	mov	r2, r1
 8004a68:	4601      	mov	r1, r0
 8004a6a:	4802      	ldr	r0, [pc, #8]	; (8004a74 <strtol+0x10>)
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	f7ff bf75 	b.w	800495c <_strtol_l.isra.0>
 8004a72:	bf00      	nop
 8004a74:	2000000c 	.word	0x2000000c

08004a78 <__assert_func>:
 8004a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a7a:	4614      	mov	r4, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <__assert_func+0x2c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4605      	mov	r5, r0
 8004a84:	68d8      	ldr	r0, [r3, #12]
 8004a86:	b14c      	cbz	r4, 8004a9c <__assert_func+0x24>
 8004a88:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <__assert_func+0x30>)
 8004a8a:	9100      	str	r1, [sp, #0]
 8004a8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a90:	4906      	ldr	r1, [pc, #24]	; (8004aac <__assert_func+0x34>)
 8004a92:	462b      	mov	r3, r5
 8004a94:	f000 f80e 	bl	8004ab4 <fiprintf>
 8004a98:	f001 fd12 	bl	80064c0 <abort>
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <__assert_func+0x38>)
 8004a9e:	461c      	mov	r4, r3
 8004aa0:	e7f3      	b.n	8004a8a <__assert_func+0x12>
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c
 8004aa8:	08006d60 	.word	0x08006d60
 8004aac:	08006d6d 	.word	0x08006d6d
 8004ab0:	08006d9b 	.word	0x08006d9b

08004ab4 <fiprintf>:
 8004ab4:	b40e      	push	{r1, r2, r3}
 8004ab6:	b503      	push	{r0, r1, lr}
 8004ab8:	4601      	mov	r1, r0
 8004aba:	ab03      	add	r3, sp, #12
 8004abc:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <fiprintf+0x20>)
 8004abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ac2:	6800      	ldr	r0, [r0, #0]
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	f001 f93d 	bl	8005d44 <_vfiprintf_r>
 8004aca:	b002      	add	sp, #8
 8004acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ad0:	b003      	add	sp, #12
 8004ad2:	4770      	bx	lr
 8004ad4:	2000000c 	.word	0x2000000c

08004ad8 <rshift>:
 8004ad8:	6903      	ldr	r3, [r0, #16]
 8004ada:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004ade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ae2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004ae6:	f100 0414 	add.w	r4, r0, #20
 8004aea:	dd45      	ble.n	8004b78 <rshift+0xa0>
 8004aec:	f011 011f 	ands.w	r1, r1, #31
 8004af0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004af4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004af8:	d10c      	bne.n	8004b14 <rshift+0x3c>
 8004afa:	f100 0710 	add.w	r7, r0, #16
 8004afe:	4629      	mov	r1, r5
 8004b00:	42b1      	cmp	r1, r6
 8004b02:	d334      	bcc.n	8004b6e <rshift+0x96>
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	1eea      	subs	r2, r5, #3
 8004b0a:	4296      	cmp	r6, r2
 8004b0c:	bf38      	it	cc
 8004b0e:	2300      	movcc	r3, #0
 8004b10:	4423      	add	r3, r4
 8004b12:	e015      	b.n	8004b40 <rshift+0x68>
 8004b14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004b18:	f1c1 0820 	rsb	r8, r1, #32
 8004b1c:	40cf      	lsrs	r7, r1
 8004b1e:	f105 0e04 	add.w	lr, r5, #4
 8004b22:	46a1      	mov	r9, r4
 8004b24:	4576      	cmp	r6, lr
 8004b26:	46f4      	mov	ip, lr
 8004b28:	d815      	bhi.n	8004b56 <rshift+0x7e>
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	009a      	lsls	r2, r3, #2
 8004b2e:	3a04      	subs	r2, #4
 8004b30:	3501      	adds	r5, #1
 8004b32:	42ae      	cmp	r6, r5
 8004b34:	bf38      	it	cc
 8004b36:	2200      	movcc	r2, #0
 8004b38:	18a3      	adds	r3, r4, r2
 8004b3a:	50a7      	str	r7, [r4, r2]
 8004b3c:	b107      	cbz	r7, 8004b40 <rshift+0x68>
 8004b3e:	3304      	adds	r3, #4
 8004b40:	1b1a      	subs	r2, r3, r4
 8004b42:	42a3      	cmp	r3, r4
 8004b44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004b48:	bf08      	it	eq
 8004b4a:	2300      	moveq	r3, #0
 8004b4c:	6102      	str	r2, [r0, #16]
 8004b4e:	bf08      	it	eq
 8004b50:	6143      	streq	r3, [r0, #20]
 8004b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b56:	f8dc c000 	ldr.w	ip, [ip]
 8004b5a:	fa0c fc08 	lsl.w	ip, ip, r8
 8004b5e:	ea4c 0707 	orr.w	r7, ip, r7
 8004b62:	f849 7b04 	str.w	r7, [r9], #4
 8004b66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004b6a:	40cf      	lsrs	r7, r1
 8004b6c:	e7da      	b.n	8004b24 <rshift+0x4c>
 8004b6e:	f851 cb04 	ldr.w	ip, [r1], #4
 8004b72:	f847 cf04 	str.w	ip, [r7, #4]!
 8004b76:	e7c3      	b.n	8004b00 <rshift+0x28>
 8004b78:	4623      	mov	r3, r4
 8004b7a:	e7e1      	b.n	8004b40 <rshift+0x68>

08004b7c <__hexdig_fun>:
 8004b7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004b80:	2b09      	cmp	r3, #9
 8004b82:	d802      	bhi.n	8004b8a <__hexdig_fun+0xe>
 8004b84:	3820      	subs	r0, #32
 8004b86:	b2c0      	uxtb	r0, r0
 8004b88:	4770      	bx	lr
 8004b8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d801      	bhi.n	8004b96 <__hexdig_fun+0x1a>
 8004b92:	3847      	subs	r0, #71	; 0x47
 8004b94:	e7f7      	b.n	8004b86 <__hexdig_fun+0xa>
 8004b96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004b9a:	2b05      	cmp	r3, #5
 8004b9c:	d801      	bhi.n	8004ba2 <__hexdig_fun+0x26>
 8004b9e:	3827      	subs	r0, #39	; 0x27
 8004ba0:	e7f1      	b.n	8004b86 <__hexdig_fun+0xa>
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	4770      	bx	lr
	...

08004ba8 <__gethex>:
 8004ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bac:	ed2d 8b02 	vpush	{d8}
 8004bb0:	b089      	sub	sp, #36	; 0x24
 8004bb2:	ee08 0a10 	vmov	s16, r0
 8004bb6:	9304      	str	r3, [sp, #16]
 8004bb8:	4bbc      	ldr	r3, [pc, #752]	; (8004eac <__gethex+0x304>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	468b      	mov	fp, r1
 8004bc2:	4690      	mov	r8, r2
 8004bc4:	f7fb fb04 	bl	80001d0 <strlen>
 8004bc8:	9b01      	ldr	r3, [sp, #4]
 8004bca:	f8db 2000 	ldr.w	r2, [fp]
 8004bce:	4403      	add	r3, r0
 8004bd0:	4682      	mov	sl, r0
 8004bd2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004bd6:	9305      	str	r3, [sp, #20]
 8004bd8:	1c93      	adds	r3, r2, #2
 8004bda:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004bde:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004be2:	32fe      	adds	r2, #254	; 0xfe
 8004be4:	18d1      	adds	r1, r2, r3
 8004be6:	461f      	mov	r7, r3
 8004be8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004bec:	9100      	str	r1, [sp, #0]
 8004bee:	2830      	cmp	r0, #48	; 0x30
 8004bf0:	d0f8      	beq.n	8004be4 <__gethex+0x3c>
 8004bf2:	f7ff ffc3 	bl	8004b7c <__hexdig_fun>
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d13a      	bne.n	8004c72 <__gethex+0xca>
 8004bfc:	9901      	ldr	r1, [sp, #4]
 8004bfe:	4652      	mov	r2, sl
 8004c00:	4638      	mov	r0, r7
 8004c02:	f001 fb7d 	bl	8006300 <strncmp>
 8004c06:	4605      	mov	r5, r0
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	d168      	bne.n	8004cde <__gethex+0x136>
 8004c0c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004c10:	eb07 060a 	add.w	r6, r7, sl
 8004c14:	f7ff ffb2 	bl	8004b7c <__hexdig_fun>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d062      	beq.n	8004ce2 <__gethex+0x13a>
 8004c1c:	4633      	mov	r3, r6
 8004c1e:	7818      	ldrb	r0, [r3, #0]
 8004c20:	2830      	cmp	r0, #48	; 0x30
 8004c22:	461f      	mov	r7, r3
 8004c24:	f103 0301 	add.w	r3, r3, #1
 8004c28:	d0f9      	beq.n	8004c1e <__gethex+0x76>
 8004c2a:	f7ff ffa7 	bl	8004b7c <__hexdig_fun>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	fab0 f480 	clz	r4, r0
 8004c34:	0964      	lsrs	r4, r4, #5
 8004c36:	4635      	mov	r5, r6
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	463a      	mov	r2, r7
 8004c3c:	4616      	mov	r6, r2
 8004c3e:	3201      	adds	r2, #1
 8004c40:	7830      	ldrb	r0, [r6, #0]
 8004c42:	f7ff ff9b 	bl	8004b7c <__hexdig_fun>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	d1f8      	bne.n	8004c3c <__gethex+0x94>
 8004c4a:	9901      	ldr	r1, [sp, #4]
 8004c4c:	4652      	mov	r2, sl
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f001 fb56 	bl	8006300 <strncmp>
 8004c54:	b980      	cbnz	r0, 8004c78 <__gethex+0xd0>
 8004c56:	b94d      	cbnz	r5, 8004c6c <__gethex+0xc4>
 8004c58:	eb06 050a 	add.w	r5, r6, sl
 8004c5c:	462a      	mov	r2, r5
 8004c5e:	4616      	mov	r6, r2
 8004c60:	3201      	adds	r2, #1
 8004c62:	7830      	ldrb	r0, [r6, #0]
 8004c64:	f7ff ff8a 	bl	8004b7c <__hexdig_fun>
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d1f8      	bne.n	8004c5e <__gethex+0xb6>
 8004c6c:	1bad      	subs	r5, r5, r6
 8004c6e:	00ad      	lsls	r5, r5, #2
 8004c70:	e004      	b.n	8004c7c <__gethex+0xd4>
 8004c72:	2400      	movs	r4, #0
 8004c74:	4625      	mov	r5, r4
 8004c76:	e7e0      	b.n	8004c3a <__gethex+0x92>
 8004c78:	2d00      	cmp	r5, #0
 8004c7a:	d1f7      	bne.n	8004c6c <__gethex+0xc4>
 8004c7c:	7833      	ldrb	r3, [r6, #0]
 8004c7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c82:	2b50      	cmp	r3, #80	; 0x50
 8004c84:	d13b      	bne.n	8004cfe <__gethex+0x156>
 8004c86:	7873      	ldrb	r3, [r6, #1]
 8004c88:	2b2b      	cmp	r3, #43	; 0x2b
 8004c8a:	d02c      	beq.n	8004ce6 <__gethex+0x13e>
 8004c8c:	2b2d      	cmp	r3, #45	; 0x2d
 8004c8e:	d02e      	beq.n	8004cee <__gethex+0x146>
 8004c90:	1c71      	adds	r1, r6, #1
 8004c92:	f04f 0900 	mov.w	r9, #0
 8004c96:	7808      	ldrb	r0, [r1, #0]
 8004c98:	f7ff ff70 	bl	8004b7c <__hexdig_fun>
 8004c9c:	1e43      	subs	r3, r0, #1
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b18      	cmp	r3, #24
 8004ca2:	d82c      	bhi.n	8004cfe <__gethex+0x156>
 8004ca4:	f1a0 0210 	sub.w	r2, r0, #16
 8004ca8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004cac:	f7ff ff66 	bl	8004b7c <__hexdig_fun>
 8004cb0:	1e43      	subs	r3, r0, #1
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b18      	cmp	r3, #24
 8004cb6:	d91d      	bls.n	8004cf4 <__gethex+0x14c>
 8004cb8:	f1b9 0f00 	cmp.w	r9, #0
 8004cbc:	d000      	beq.n	8004cc0 <__gethex+0x118>
 8004cbe:	4252      	negs	r2, r2
 8004cc0:	4415      	add	r5, r2
 8004cc2:	f8cb 1000 	str.w	r1, [fp]
 8004cc6:	b1e4      	cbz	r4, 8004d02 <__gethex+0x15a>
 8004cc8:	9b00      	ldr	r3, [sp, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf14      	ite	ne
 8004cce:	2700      	movne	r7, #0
 8004cd0:	2706      	moveq	r7, #6
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	b009      	add	sp, #36	; 0x24
 8004cd6:	ecbd 8b02 	vpop	{d8}
 8004cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cde:	463e      	mov	r6, r7
 8004ce0:	4625      	mov	r5, r4
 8004ce2:	2401      	movs	r4, #1
 8004ce4:	e7ca      	b.n	8004c7c <__gethex+0xd4>
 8004ce6:	f04f 0900 	mov.w	r9, #0
 8004cea:	1cb1      	adds	r1, r6, #2
 8004cec:	e7d3      	b.n	8004c96 <__gethex+0xee>
 8004cee:	f04f 0901 	mov.w	r9, #1
 8004cf2:	e7fa      	b.n	8004cea <__gethex+0x142>
 8004cf4:	230a      	movs	r3, #10
 8004cf6:	fb03 0202 	mla	r2, r3, r2, r0
 8004cfa:	3a10      	subs	r2, #16
 8004cfc:	e7d4      	b.n	8004ca8 <__gethex+0x100>
 8004cfe:	4631      	mov	r1, r6
 8004d00:	e7df      	b.n	8004cc2 <__gethex+0x11a>
 8004d02:	1bf3      	subs	r3, r6, r7
 8004d04:	3b01      	subs	r3, #1
 8004d06:	4621      	mov	r1, r4
 8004d08:	2b07      	cmp	r3, #7
 8004d0a:	dc0b      	bgt.n	8004d24 <__gethex+0x17c>
 8004d0c:	ee18 0a10 	vmov	r0, s16
 8004d10:	f000 fa7a 	bl	8005208 <_Balloc>
 8004d14:	4604      	mov	r4, r0
 8004d16:	b940      	cbnz	r0, 8004d2a <__gethex+0x182>
 8004d18:	4b65      	ldr	r3, [pc, #404]	; (8004eb0 <__gethex+0x308>)
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	21de      	movs	r1, #222	; 0xde
 8004d1e:	4865      	ldr	r0, [pc, #404]	; (8004eb4 <__gethex+0x30c>)
 8004d20:	f7ff feaa 	bl	8004a78 <__assert_func>
 8004d24:	3101      	adds	r1, #1
 8004d26:	105b      	asrs	r3, r3, #1
 8004d28:	e7ee      	b.n	8004d08 <__gethex+0x160>
 8004d2a:	f100 0914 	add.w	r9, r0, #20
 8004d2e:	f04f 0b00 	mov.w	fp, #0
 8004d32:	f1ca 0301 	rsb	r3, sl, #1
 8004d36:	f8cd 9008 	str.w	r9, [sp, #8]
 8004d3a:	f8cd b000 	str.w	fp, [sp]
 8004d3e:	9306      	str	r3, [sp, #24]
 8004d40:	42b7      	cmp	r7, r6
 8004d42:	d340      	bcc.n	8004dc6 <__gethex+0x21e>
 8004d44:	9802      	ldr	r0, [sp, #8]
 8004d46:	9b00      	ldr	r3, [sp, #0]
 8004d48:	f840 3b04 	str.w	r3, [r0], #4
 8004d4c:	eba0 0009 	sub.w	r0, r0, r9
 8004d50:	1080      	asrs	r0, r0, #2
 8004d52:	0146      	lsls	r6, r0, #5
 8004d54:	6120      	str	r0, [r4, #16]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fb4c 	bl	80053f4 <__hi0bits>
 8004d5c:	1a30      	subs	r0, r6, r0
 8004d5e:	f8d8 6000 	ldr.w	r6, [r8]
 8004d62:	42b0      	cmp	r0, r6
 8004d64:	dd63      	ble.n	8004e2e <__gethex+0x286>
 8004d66:	1b87      	subs	r7, r0, r6
 8004d68:	4639      	mov	r1, r7
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f000 fee6 	bl	8005b3c <__any_on>
 8004d70:	4682      	mov	sl, r0
 8004d72:	b1a8      	cbz	r0, 8004da0 <__gethex+0x1f8>
 8004d74:	1e7b      	subs	r3, r7, #1
 8004d76:	1159      	asrs	r1, r3, #5
 8004d78:	f003 021f 	and.w	r2, r3, #31
 8004d7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004d80:	f04f 0a01 	mov.w	sl, #1
 8004d84:	fa0a f202 	lsl.w	r2, sl, r2
 8004d88:	420a      	tst	r2, r1
 8004d8a:	d009      	beq.n	8004da0 <__gethex+0x1f8>
 8004d8c:	4553      	cmp	r3, sl
 8004d8e:	dd05      	ble.n	8004d9c <__gethex+0x1f4>
 8004d90:	1eb9      	subs	r1, r7, #2
 8004d92:	4620      	mov	r0, r4
 8004d94:	f000 fed2 	bl	8005b3c <__any_on>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d145      	bne.n	8004e28 <__gethex+0x280>
 8004d9c:	f04f 0a02 	mov.w	sl, #2
 8004da0:	4639      	mov	r1, r7
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7ff fe98 	bl	8004ad8 <rshift>
 8004da8:	443d      	add	r5, r7
 8004daa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004dae:	42ab      	cmp	r3, r5
 8004db0:	da4c      	bge.n	8004e4c <__gethex+0x2a4>
 8004db2:	ee18 0a10 	vmov	r0, s16
 8004db6:	4621      	mov	r1, r4
 8004db8:	f000 fa66 	bl	8005288 <_Bfree>
 8004dbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	27a3      	movs	r7, #163	; 0xa3
 8004dc4:	e785      	b.n	8004cd2 <__gethex+0x12a>
 8004dc6:	1e73      	subs	r3, r6, #1
 8004dc8:	9a05      	ldr	r2, [sp, #20]
 8004dca:	9303      	str	r3, [sp, #12]
 8004dcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d019      	beq.n	8004e08 <__gethex+0x260>
 8004dd4:	f1bb 0f20 	cmp.w	fp, #32
 8004dd8:	d107      	bne.n	8004dea <__gethex+0x242>
 8004dda:	9b02      	ldr	r3, [sp, #8]
 8004ddc:	9a00      	ldr	r2, [sp, #0]
 8004dde:	f843 2b04 	str.w	r2, [r3], #4
 8004de2:	9302      	str	r3, [sp, #8]
 8004de4:	2300      	movs	r3, #0
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	469b      	mov	fp, r3
 8004dea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004dee:	f7ff fec5 	bl	8004b7c <__hexdig_fun>
 8004df2:	9b00      	ldr	r3, [sp, #0]
 8004df4:	f000 000f 	and.w	r0, r0, #15
 8004df8:	fa00 f00b 	lsl.w	r0, r0, fp
 8004dfc:	4303      	orrs	r3, r0
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	f10b 0b04 	add.w	fp, fp, #4
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	e00d      	b.n	8004e24 <__gethex+0x27c>
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	9a06      	ldr	r2, [sp, #24]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	42bb      	cmp	r3, r7
 8004e10:	d3e0      	bcc.n	8004dd4 <__gethex+0x22c>
 8004e12:	4618      	mov	r0, r3
 8004e14:	9901      	ldr	r1, [sp, #4]
 8004e16:	9307      	str	r3, [sp, #28]
 8004e18:	4652      	mov	r2, sl
 8004e1a:	f001 fa71 	bl	8006300 <strncmp>
 8004e1e:	9b07      	ldr	r3, [sp, #28]
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d1d7      	bne.n	8004dd4 <__gethex+0x22c>
 8004e24:	461e      	mov	r6, r3
 8004e26:	e78b      	b.n	8004d40 <__gethex+0x198>
 8004e28:	f04f 0a03 	mov.w	sl, #3
 8004e2c:	e7b8      	b.n	8004da0 <__gethex+0x1f8>
 8004e2e:	da0a      	bge.n	8004e46 <__gethex+0x29e>
 8004e30:	1a37      	subs	r7, r6, r0
 8004e32:	4621      	mov	r1, r4
 8004e34:	ee18 0a10 	vmov	r0, s16
 8004e38:	463a      	mov	r2, r7
 8004e3a:	f000 fc41 	bl	80056c0 <__lshift>
 8004e3e:	1bed      	subs	r5, r5, r7
 8004e40:	4604      	mov	r4, r0
 8004e42:	f100 0914 	add.w	r9, r0, #20
 8004e46:	f04f 0a00 	mov.w	sl, #0
 8004e4a:	e7ae      	b.n	8004daa <__gethex+0x202>
 8004e4c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004e50:	42a8      	cmp	r0, r5
 8004e52:	dd72      	ble.n	8004f3a <__gethex+0x392>
 8004e54:	1b45      	subs	r5, r0, r5
 8004e56:	42ae      	cmp	r6, r5
 8004e58:	dc36      	bgt.n	8004ec8 <__gethex+0x320>
 8004e5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d02a      	beq.n	8004eb8 <__gethex+0x310>
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d02c      	beq.n	8004ec0 <__gethex+0x318>
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d115      	bne.n	8004e96 <__gethex+0x2ee>
 8004e6a:	42ae      	cmp	r6, r5
 8004e6c:	d113      	bne.n	8004e96 <__gethex+0x2ee>
 8004e6e:	2e01      	cmp	r6, #1
 8004e70:	d10b      	bne.n	8004e8a <__gethex+0x2e2>
 8004e72:	9a04      	ldr	r2, [sp, #16]
 8004e74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	6123      	str	r3, [r4, #16]
 8004e7e:	f8c9 3000 	str.w	r3, [r9]
 8004e82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004e84:	2762      	movs	r7, #98	; 0x62
 8004e86:	601c      	str	r4, [r3, #0]
 8004e88:	e723      	b.n	8004cd2 <__gethex+0x12a>
 8004e8a:	1e71      	subs	r1, r6, #1
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 fe55 	bl	8005b3c <__any_on>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d1ed      	bne.n	8004e72 <__gethex+0x2ca>
 8004e96:	ee18 0a10 	vmov	r0, s16
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	f000 f9f4 	bl	8005288 <_Bfree>
 8004ea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	2750      	movs	r7, #80	; 0x50
 8004ea8:	e713      	b.n	8004cd2 <__gethex+0x12a>
 8004eaa:	bf00      	nop
 8004eac:	08006f18 	.word	0x08006f18
 8004eb0:	08006e9d 	.word	0x08006e9d
 8004eb4:	08006eae 	.word	0x08006eae
 8004eb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1eb      	bne.n	8004e96 <__gethex+0x2ee>
 8004ebe:	e7d8      	b.n	8004e72 <__gethex+0x2ca>
 8004ec0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1d5      	bne.n	8004e72 <__gethex+0x2ca>
 8004ec6:	e7e6      	b.n	8004e96 <__gethex+0x2ee>
 8004ec8:	1e6f      	subs	r7, r5, #1
 8004eca:	f1ba 0f00 	cmp.w	sl, #0
 8004ece:	d131      	bne.n	8004f34 <__gethex+0x38c>
 8004ed0:	b127      	cbz	r7, 8004edc <__gethex+0x334>
 8004ed2:	4639      	mov	r1, r7
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f000 fe31 	bl	8005b3c <__any_on>
 8004eda:	4682      	mov	sl, r0
 8004edc:	117b      	asrs	r3, r7, #5
 8004ede:	2101      	movs	r1, #1
 8004ee0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004ee4:	f007 071f 	and.w	r7, r7, #31
 8004ee8:	fa01 f707 	lsl.w	r7, r1, r7
 8004eec:	421f      	tst	r7, r3
 8004eee:	4629      	mov	r1, r5
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	bf18      	it	ne
 8004ef4:	f04a 0a02 	orrne.w	sl, sl, #2
 8004ef8:	1b76      	subs	r6, r6, r5
 8004efa:	f7ff fded 	bl	8004ad8 <rshift>
 8004efe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004f02:	2702      	movs	r7, #2
 8004f04:	f1ba 0f00 	cmp.w	sl, #0
 8004f08:	d048      	beq.n	8004f9c <__gethex+0x3f4>
 8004f0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d015      	beq.n	8004f3e <__gethex+0x396>
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d017      	beq.n	8004f46 <__gethex+0x39e>
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d109      	bne.n	8004f2e <__gethex+0x386>
 8004f1a:	f01a 0f02 	tst.w	sl, #2
 8004f1e:	d006      	beq.n	8004f2e <__gethex+0x386>
 8004f20:	f8d9 0000 	ldr.w	r0, [r9]
 8004f24:	ea4a 0a00 	orr.w	sl, sl, r0
 8004f28:	f01a 0f01 	tst.w	sl, #1
 8004f2c:	d10e      	bne.n	8004f4c <__gethex+0x3a4>
 8004f2e:	f047 0710 	orr.w	r7, r7, #16
 8004f32:	e033      	b.n	8004f9c <__gethex+0x3f4>
 8004f34:	f04f 0a01 	mov.w	sl, #1
 8004f38:	e7d0      	b.n	8004edc <__gethex+0x334>
 8004f3a:	2701      	movs	r7, #1
 8004f3c:	e7e2      	b.n	8004f04 <__gethex+0x35c>
 8004f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f40:	f1c3 0301 	rsb	r3, r3, #1
 8004f44:	9315      	str	r3, [sp, #84]	; 0x54
 8004f46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <__gethex+0x386>
 8004f4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8004f50:	f104 0314 	add.w	r3, r4, #20
 8004f54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8004f58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8004f5c:	f04f 0c00 	mov.w	ip, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f66:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004f6a:	d01c      	beq.n	8004fa6 <__gethex+0x3fe>
 8004f6c:	3201      	adds	r2, #1
 8004f6e:	6002      	str	r2, [r0, #0]
 8004f70:	2f02      	cmp	r7, #2
 8004f72:	f104 0314 	add.w	r3, r4, #20
 8004f76:	d13f      	bne.n	8004ff8 <__gethex+0x450>
 8004f78:	f8d8 2000 	ldr.w	r2, [r8]
 8004f7c:	3a01      	subs	r2, #1
 8004f7e:	42b2      	cmp	r2, r6
 8004f80:	d10a      	bne.n	8004f98 <__gethex+0x3f0>
 8004f82:	1171      	asrs	r1, r6, #5
 8004f84:	2201      	movs	r2, #1
 8004f86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004f8a:	f006 061f 	and.w	r6, r6, #31
 8004f8e:	fa02 f606 	lsl.w	r6, r2, r6
 8004f92:	421e      	tst	r6, r3
 8004f94:	bf18      	it	ne
 8004f96:	4617      	movne	r7, r2
 8004f98:	f047 0720 	orr.w	r7, r7, #32
 8004f9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f9e:	601c      	str	r4, [r3, #0]
 8004fa0:	9b04      	ldr	r3, [sp, #16]
 8004fa2:	601d      	str	r5, [r3, #0]
 8004fa4:	e695      	b.n	8004cd2 <__gethex+0x12a>
 8004fa6:	4299      	cmp	r1, r3
 8004fa8:	f843 cc04 	str.w	ip, [r3, #-4]
 8004fac:	d8d8      	bhi.n	8004f60 <__gethex+0x3b8>
 8004fae:	68a3      	ldr	r3, [r4, #8]
 8004fb0:	459b      	cmp	fp, r3
 8004fb2:	db19      	blt.n	8004fe8 <__gethex+0x440>
 8004fb4:	6861      	ldr	r1, [r4, #4]
 8004fb6:	ee18 0a10 	vmov	r0, s16
 8004fba:	3101      	adds	r1, #1
 8004fbc:	f000 f924 	bl	8005208 <_Balloc>
 8004fc0:	4681      	mov	r9, r0
 8004fc2:	b918      	cbnz	r0, 8004fcc <__gethex+0x424>
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <__gethex+0x488>)
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	2184      	movs	r1, #132	; 0x84
 8004fca:	e6a8      	b.n	8004d1e <__gethex+0x176>
 8004fcc:	6922      	ldr	r2, [r4, #16]
 8004fce:	3202      	adds	r2, #2
 8004fd0:	f104 010c 	add.w	r1, r4, #12
 8004fd4:	0092      	lsls	r2, r2, #2
 8004fd6:	300c      	adds	r0, #12
 8004fd8:	f000 f908 	bl	80051ec <memcpy>
 8004fdc:	4621      	mov	r1, r4
 8004fde:	ee18 0a10 	vmov	r0, s16
 8004fe2:	f000 f951 	bl	8005288 <_Bfree>
 8004fe6:	464c      	mov	r4, r9
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ff0:	6122      	str	r2, [r4, #16]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	615a      	str	r2, [r3, #20]
 8004ff6:	e7bb      	b.n	8004f70 <__gethex+0x3c8>
 8004ff8:	6922      	ldr	r2, [r4, #16]
 8004ffa:	455a      	cmp	r2, fp
 8004ffc:	dd0b      	ble.n	8005016 <__gethex+0x46e>
 8004ffe:	2101      	movs	r1, #1
 8005000:	4620      	mov	r0, r4
 8005002:	f7ff fd69 	bl	8004ad8 <rshift>
 8005006:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800500a:	3501      	adds	r5, #1
 800500c:	42ab      	cmp	r3, r5
 800500e:	f6ff aed0 	blt.w	8004db2 <__gethex+0x20a>
 8005012:	2701      	movs	r7, #1
 8005014:	e7c0      	b.n	8004f98 <__gethex+0x3f0>
 8005016:	f016 061f 	ands.w	r6, r6, #31
 800501a:	d0fa      	beq.n	8005012 <__gethex+0x46a>
 800501c:	449a      	add	sl, r3
 800501e:	f1c6 0620 	rsb	r6, r6, #32
 8005022:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005026:	f000 f9e5 	bl	80053f4 <__hi0bits>
 800502a:	42b0      	cmp	r0, r6
 800502c:	dbe7      	blt.n	8004ffe <__gethex+0x456>
 800502e:	e7f0      	b.n	8005012 <__gethex+0x46a>
 8005030:	08006e9d 	.word	0x08006e9d

08005034 <L_shift>:
 8005034:	f1c2 0208 	rsb	r2, r2, #8
 8005038:	0092      	lsls	r2, r2, #2
 800503a:	b570      	push	{r4, r5, r6, lr}
 800503c:	f1c2 0620 	rsb	r6, r2, #32
 8005040:	6843      	ldr	r3, [r0, #4]
 8005042:	6804      	ldr	r4, [r0, #0]
 8005044:	fa03 f506 	lsl.w	r5, r3, r6
 8005048:	432c      	orrs	r4, r5
 800504a:	40d3      	lsrs	r3, r2
 800504c:	6004      	str	r4, [r0, #0]
 800504e:	f840 3f04 	str.w	r3, [r0, #4]!
 8005052:	4288      	cmp	r0, r1
 8005054:	d3f4      	bcc.n	8005040 <L_shift+0xc>
 8005056:	bd70      	pop	{r4, r5, r6, pc}

08005058 <__match>:
 8005058:	b530      	push	{r4, r5, lr}
 800505a:	6803      	ldr	r3, [r0, #0]
 800505c:	3301      	adds	r3, #1
 800505e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005062:	b914      	cbnz	r4, 800506a <__match+0x12>
 8005064:	6003      	str	r3, [r0, #0]
 8005066:	2001      	movs	r0, #1
 8005068:	bd30      	pop	{r4, r5, pc}
 800506a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800506e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005072:	2d19      	cmp	r5, #25
 8005074:	bf98      	it	ls
 8005076:	3220      	addls	r2, #32
 8005078:	42a2      	cmp	r2, r4
 800507a:	d0f0      	beq.n	800505e <__match+0x6>
 800507c:	2000      	movs	r0, #0
 800507e:	e7f3      	b.n	8005068 <__match+0x10>

08005080 <__hexnan>:
 8005080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	680b      	ldr	r3, [r1, #0]
 8005086:	6801      	ldr	r1, [r0, #0]
 8005088:	115e      	asrs	r6, r3, #5
 800508a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800508e:	f013 031f 	ands.w	r3, r3, #31
 8005092:	b087      	sub	sp, #28
 8005094:	bf18      	it	ne
 8005096:	3604      	addne	r6, #4
 8005098:	2500      	movs	r5, #0
 800509a:	1f37      	subs	r7, r6, #4
 800509c:	4682      	mov	sl, r0
 800509e:	4690      	mov	r8, r2
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80050a6:	46b9      	mov	r9, r7
 80050a8:	463c      	mov	r4, r7
 80050aa:	9502      	str	r5, [sp, #8]
 80050ac:	46ab      	mov	fp, r5
 80050ae:	784a      	ldrb	r2, [r1, #1]
 80050b0:	1c4b      	adds	r3, r1, #1
 80050b2:	9303      	str	r3, [sp, #12]
 80050b4:	b342      	cbz	r2, 8005108 <__hexnan+0x88>
 80050b6:	4610      	mov	r0, r2
 80050b8:	9105      	str	r1, [sp, #20]
 80050ba:	9204      	str	r2, [sp, #16]
 80050bc:	f7ff fd5e 	bl	8004b7c <__hexdig_fun>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d14f      	bne.n	8005164 <__hexnan+0xe4>
 80050c4:	9a04      	ldr	r2, [sp, #16]
 80050c6:	9905      	ldr	r1, [sp, #20]
 80050c8:	2a20      	cmp	r2, #32
 80050ca:	d818      	bhi.n	80050fe <__hexnan+0x7e>
 80050cc:	9b02      	ldr	r3, [sp, #8]
 80050ce:	459b      	cmp	fp, r3
 80050d0:	dd13      	ble.n	80050fa <__hexnan+0x7a>
 80050d2:	454c      	cmp	r4, r9
 80050d4:	d206      	bcs.n	80050e4 <__hexnan+0x64>
 80050d6:	2d07      	cmp	r5, #7
 80050d8:	dc04      	bgt.n	80050e4 <__hexnan+0x64>
 80050da:	462a      	mov	r2, r5
 80050dc:	4649      	mov	r1, r9
 80050de:	4620      	mov	r0, r4
 80050e0:	f7ff ffa8 	bl	8005034 <L_shift>
 80050e4:	4544      	cmp	r4, r8
 80050e6:	d950      	bls.n	800518a <__hexnan+0x10a>
 80050e8:	2300      	movs	r3, #0
 80050ea:	f1a4 0904 	sub.w	r9, r4, #4
 80050ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80050f2:	f8cd b008 	str.w	fp, [sp, #8]
 80050f6:	464c      	mov	r4, r9
 80050f8:	461d      	mov	r5, r3
 80050fa:	9903      	ldr	r1, [sp, #12]
 80050fc:	e7d7      	b.n	80050ae <__hexnan+0x2e>
 80050fe:	2a29      	cmp	r2, #41	; 0x29
 8005100:	d156      	bne.n	80051b0 <__hexnan+0x130>
 8005102:	3102      	adds	r1, #2
 8005104:	f8ca 1000 	str.w	r1, [sl]
 8005108:	f1bb 0f00 	cmp.w	fp, #0
 800510c:	d050      	beq.n	80051b0 <__hexnan+0x130>
 800510e:	454c      	cmp	r4, r9
 8005110:	d206      	bcs.n	8005120 <__hexnan+0xa0>
 8005112:	2d07      	cmp	r5, #7
 8005114:	dc04      	bgt.n	8005120 <__hexnan+0xa0>
 8005116:	462a      	mov	r2, r5
 8005118:	4649      	mov	r1, r9
 800511a:	4620      	mov	r0, r4
 800511c:	f7ff ff8a 	bl	8005034 <L_shift>
 8005120:	4544      	cmp	r4, r8
 8005122:	d934      	bls.n	800518e <__hexnan+0x10e>
 8005124:	f1a8 0204 	sub.w	r2, r8, #4
 8005128:	4623      	mov	r3, r4
 800512a:	f853 1b04 	ldr.w	r1, [r3], #4
 800512e:	f842 1f04 	str.w	r1, [r2, #4]!
 8005132:	429f      	cmp	r7, r3
 8005134:	d2f9      	bcs.n	800512a <__hexnan+0xaa>
 8005136:	1b3b      	subs	r3, r7, r4
 8005138:	f023 0303 	bic.w	r3, r3, #3
 800513c:	3304      	adds	r3, #4
 800513e:	3401      	adds	r4, #1
 8005140:	3e03      	subs	r6, #3
 8005142:	42b4      	cmp	r4, r6
 8005144:	bf88      	it	hi
 8005146:	2304      	movhi	r3, #4
 8005148:	4443      	add	r3, r8
 800514a:	2200      	movs	r2, #0
 800514c:	f843 2b04 	str.w	r2, [r3], #4
 8005150:	429f      	cmp	r7, r3
 8005152:	d2fb      	bcs.n	800514c <__hexnan+0xcc>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	b91b      	cbnz	r3, 8005160 <__hexnan+0xe0>
 8005158:	4547      	cmp	r7, r8
 800515a:	d127      	bne.n	80051ac <__hexnan+0x12c>
 800515c:	2301      	movs	r3, #1
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	2005      	movs	r0, #5
 8005162:	e026      	b.n	80051b2 <__hexnan+0x132>
 8005164:	3501      	adds	r5, #1
 8005166:	2d08      	cmp	r5, #8
 8005168:	f10b 0b01 	add.w	fp, fp, #1
 800516c:	dd06      	ble.n	800517c <__hexnan+0xfc>
 800516e:	4544      	cmp	r4, r8
 8005170:	d9c3      	bls.n	80050fa <__hexnan+0x7a>
 8005172:	2300      	movs	r3, #0
 8005174:	f844 3c04 	str.w	r3, [r4, #-4]
 8005178:	2501      	movs	r5, #1
 800517a:	3c04      	subs	r4, #4
 800517c:	6822      	ldr	r2, [r4, #0]
 800517e:	f000 000f 	and.w	r0, r0, #15
 8005182:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005186:	6022      	str	r2, [r4, #0]
 8005188:	e7b7      	b.n	80050fa <__hexnan+0x7a>
 800518a:	2508      	movs	r5, #8
 800518c:	e7b5      	b.n	80050fa <__hexnan+0x7a>
 800518e:	9b01      	ldr	r3, [sp, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0df      	beq.n	8005154 <__hexnan+0xd4>
 8005194:	f04f 32ff 	mov.w	r2, #4294967295
 8005198:	f1c3 0320 	rsb	r3, r3, #32
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
 80051a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80051a4:	401a      	ands	r2, r3
 80051a6:	f846 2c04 	str.w	r2, [r6, #-4]
 80051aa:	e7d3      	b.n	8005154 <__hexnan+0xd4>
 80051ac:	3f04      	subs	r7, #4
 80051ae:	e7d1      	b.n	8005154 <__hexnan+0xd4>
 80051b0:	2004      	movs	r0, #4
 80051b2:	b007      	add	sp, #28
 80051b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051b8 <malloc>:
 80051b8:	4b02      	ldr	r3, [pc, #8]	; (80051c4 <malloc+0xc>)
 80051ba:	4601      	mov	r1, r0
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	f000 bd3d 	b.w	8005c3c <_malloc_r>
 80051c2:	bf00      	nop
 80051c4:	2000000c 	.word	0x2000000c

080051c8 <__ascii_mbtowc>:
 80051c8:	b082      	sub	sp, #8
 80051ca:	b901      	cbnz	r1, 80051ce <__ascii_mbtowc+0x6>
 80051cc:	a901      	add	r1, sp, #4
 80051ce:	b142      	cbz	r2, 80051e2 <__ascii_mbtowc+0x1a>
 80051d0:	b14b      	cbz	r3, 80051e6 <__ascii_mbtowc+0x1e>
 80051d2:	7813      	ldrb	r3, [r2, #0]
 80051d4:	600b      	str	r3, [r1, #0]
 80051d6:	7812      	ldrb	r2, [r2, #0]
 80051d8:	1e10      	subs	r0, r2, #0
 80051da:	bf18      	it	ne
 80051dc:	2001      	movne	r0, #1
 80051de:	b002      	add	sp, #8
 80051e0:	4770      	bx	lr
 80051e2:	4610      	mov	r0, r2
 80051e4:	e7fb      	b.n	80051de <__ascii_mbtowc+0x16>
 80051e6:	f06f 0001 	mvn.w	r0, #1
 80051ea:	e7f8      	b.n	80051de <__ascii_mbtowc+0x16>

080051ec <memcpy>:
 80051ec:	440a      	add	r2, r1
 80051ee:	4291      	cmp	r1, r2
 80051f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80051f4:	d100      	bne.n	80051f8 <memcpy+0xc>
 80051f6:	4770      	bx	lr
 80051f8:	b510      	push	{r4, lr}
 80051fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005202:	4291      	cmp	r1, r2
 8005204:	d1f9      	bne.n	80051fa <memcpy+0xe>
 8005206:	bd10      	pop	{r4, pc}

08005208 <_Balloc>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800520c:	4604      	mov	r4, r0
 800520e:	460d      	mov	r5, r1
 8005210:	b976      	cbnz	r6, 8005230 <_Balloc+0x28>
 8005212:	2010      	movs	r0, #16
 8005214:	f7ff ffd0 	bl	80051b8 <malloc>
 8005218:	4602      	mov	r2, r0
 800521a:	6260      	str	r0, [r4, #36]	; 0x24
 800521c:	b920      	cbnz	r0, 8005228 <_Balloc+0x20>
 800521e:	4b18      	ldr	r3, [pc, #96]	; (8005280 <_Balloc+0x78>)
 8005220:	4818      	ldr	r0, [pc, #96]	; (8005284 <_Balloc+0x7c>)
 8005222:	2166      	movs	r1, #102	; 0x66
 8005224:	f7ff fc28 	bl	8004a78 <__assert_func>
 8005228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800522c:	6006      	str	r6, [r0, #0]
 800522e:	60c6      	str	r6, [r0, #12]
 8005230:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005232:	68f3      	ldr	r3, [r6, #12]
 8005234:	b183      	cbz	r3, 8005258 <_Balloc+0x50>
 8005236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800523e:	b9b8      	cbnz	r0, 8005270 <_Balloc+0x68>
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f605 	lsl.w	r6, r1, r5
 8005246:	1d72      	adds	r2, r6, #5
 8005248:	0092      	lsls	r2, r2, #2
 800524a:	4620      	mov	r0, r4
 800524c:	f000 fc97 	bl	8005b7e <_calloc_r>
 8005250:	b160      	cbz	r0, 800526c <_Balloc+0x64>
 8005252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005256:	e00e      	b.n	8005276 <_Balloc+0x6e>
 8005258:	2221      	movs	r2, #33	; 0x21
 800525a:	2104      	movs	r1, #4
 800525c:	4620      	mov	r0, r4
 800525e:	f000 fc8e 	bl	8005b7e <_calloc_r>
 8005262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005264:	60f0      	str	r0, [r6, #12]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e4      	bne.n	8005236 <_Balloc+0x2e>
 800526c:	2000      	movs	r0, #0
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	6802      	ldr	r2, [r0, #0]
 8005272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005276:	2300      	movs	r3, #0
 8005278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800527c:	e7f7      	b.n	800526e <_Balloc+0x66>
 800527e:	bf00      	nop
 8005280:	08006ce8 	.word	0x08006ce8
 8005284:	08006f2c 	.word	0x08006f2c

08005288 <_Bfree>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800528c:	4605      	mov	r5, r0
 800528e:	460c      	mov	r4, r1
 8005290:	b976      	cbnz	r6, 80052b0 <_Bfree+0x28>
 8005292:	2010      	movs	r0, #16
 8005294:	f7ff ff90 	bl	80051b8 <malloc>
 8005298:	4602      	mov	r2, r0
 800529a:	6268      	str	r0, [r5, #36]	; 0x24
 800529c:	b920      	cbnz	r0, 80052a8 <_Bfree+0x20>
 800529e:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <_Bfree+0x3c>)
 80052a0:	4809      	ldr	r0, [pc, #36]	; (80052c8 <_Bfree+0x40>)
 80052a2:	218a      	movs	r1, #138	; 0x8a
 80052a4:	f7ff fbe8 	bl	8004a78 <__assert_func>
 80052a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052ac:	6006      	str	r6, [r0, #0]
 80052ae:	60c6      	str	r6, [r0, #12]
 80052b0:	b13c      	cbz	r4, 80052c2 <_Bfree+0x3a>
 80052b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052b4:	6862      	ldr	r2, [r4, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052bc:	6021      	str	r1, [r4, #0]
 80052be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	08006ce8 	.word	0x08006ce8
 80052c8:	08006f2c 	.word	0x08006f2c

080052cc <__multadd>:
 80052cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d0:	690e      	ldr	r6, [r1, #16]
 80052d2:	4607      	mov	r7, r0
 80052d4:	4698      	mov	r8, r3
 80052d6:	460c      	mov	r4, r1
 80052d8:	f101 0014 	add.w	r0, r1, #20
 80052dc:	2300      	movs	r3, #0
 80052de:	6805      	ldr	r5, [r0, #0]
 80052e0:	b2a9      	uxth	r1, r5
 80052e2:	fb02 8101 	mla	r1, r2, r1, r8
 80052e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80052ea:	0c2d      	lsrs	r5, r5, #16
 80052ec:	fb02 c505 	mla	r5, r2, r5, ip
 80052f0:	b289      	uxth	r1, r1
 80052f2:	3301      	adds	r3, #1
 80052f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80052f8:	429e      	cmp	r6, r3
 80052fa:	f840 1b04 	str.w	r1, [r0], #4
 80052fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005302:	dcec      	bgt.n	80052de <__multadd+0x12>
 8005304:	f1b8 0f00 	cmp.w	r8, #0
 8005308:	d022      	beq.n	8005350 <__multadd+0x84>
 800530a:	68a3      	ldr	r3, [r4, #8]
 800530c:	42b3      	cmp	r3, r6
 800530e:	dc19      	bgt.n	8005344 <__multadd+0x78>
 8005310:	6861      	ldr	r1, [r4, #4]
 8005312:	4638      	mov	r0, r7
 8005314:	3101      	adds	r1, #1
 8005316:	f7ff ff77 	bl	8005208 <_Balloc>
 800531a:	4605      	mov	r5, r0
 800531c:	b928      	cbnz	r0, 800532a <__multadd+0x5e>
 800531e:	4602      	mov	r2, r0
 8005320:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <__multadd+0x8c>)
 8005322:	480e      	ldr	r0, [pc, #56]	; (800535c <__multadd+0x90>)
 8005324:	21b5      	movs	r1, #181	; 0xb5
 8005326:	f7ff fba7 	bl	8004a78 <__assert_func>
 800532a:	6922      	ldr	r2, [r4, #16]
 800532c:	3202      	adds	r2, #2
 800532e:	f104 010c 	add.w	r1, r4, #12
 8005332:	0092      	lsls	r2, r2, #2
 8005334:	300c      	adds	r0, #12
 8005336:	f7ff ff59 	bl	80051ec <memcpy>
 800533a:	4621      	mov	r1, r4
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff ffa3 	bl	8005288 <_Bfree>
 8005342:	462c      	mov	r4, r5
 8005344:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005348:	3601      	adds	r6, #1
 800534a:	f8c3 8014 	str.w	r8, [r3, #20]
 800534e:	6126      	str	r6, [r4, #16]
 8005350:	4620      	mov	r0, r4
 8005352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005356:	bf00      	nop
 8005358:	08006e9d 	.word	0x08006e9d
 800535c:	08006f2c 	.word	0x08006f2c

08005360 <__s2b>:
 8005360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005364:	460c      	mov	r4, r1
 8005366:	4615      	mov	r5, r2
 8005368:	461f      	mov	r7, r3
 800536a:	2209      	movs	r2, #9
 800536c:	3308      	adds	r3, #8
 800536e:	4606      	mov	r6, r0
 8005370:	fb93 f3f2 	sdiv	r3, r3, r2
 8005374:	2100      	movs	r1, #0
 8005376:	2201      	movs	r2, #1
 8005378:	429a      	cmp	r2, r3
 800537a:	db09      	blt.n	8005390 <__s2b+0x30>
 800537c:	4630      	mov	r0, r6
 800537e:	f7ff ff43 	bl	8005208 <_Balloc>
 8005382:	b940      	cbnz	r0, 8005396 <__s2b+0x36>
 8005384:	4602      	mov	r2, r0
 8005386:	4b19      	ldr	r3, [pc, #100]	; (80053ec <__s2b+0x8c>)
 8005388:	4819      	ldr	r0, [pc, #100]	; (80053f0 <__s2b+0x90>)
 800538a:	21ce      	movs	r1, #206	; 0xce
 800538c:	f7ff fb74 	bl	8004a78 <__assert_func>
 8005390:	0052      	lsls	r2, r2, #1
 8005392:	3101      	adds	r1, #1
 8005394:	e7f0      	b.n	8005378 <__s2b+0x18>
 8005396:	9b08      	ldr	r3, [sp, #32]
 8005398:	6143      	str	r3, [r0, #20]
 800539a:	2d09      	cmp	r5, #9
 800539c:	f04f 0301 	mov.w	r3, #1
 80053a0:	6103      	str	r3, [r0, #16]
 80053a2:	dd16      	ble.n	80053d2 <__s2b+0x72>
 80053a4:	f104 0909 	add.w	r9, r4, #9
 80053a8:	46c8      	mov	r8, r9
 80053aa:	442c      	add	r4, r5
 80053ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80053b0:	4601      	mov	r1, r0
 80053b2:	3b30      	subs	r3, #48	; 0x30
 80053b4:	220a      	movs	r2, #10
 80053b6:	4630      	mov	r0, r6
 80053b8:	f7ff ff88 	bl	80052cc <__multadd>
 80053bc:	45a0      	cmp	r8, r4
 80053be:	d1f5      	bne.n	80053ac <__s2b+0x4c>
 80053c0:	f1a5 0408 	sub.w	r4, r5, #8
 80053c4:	444c      	add	r4, r9
 80053c6:	1b2d      	subs	r5, r5, r4
 80053c8:	1963      	adds	r3, r4, r5
 80053ca:	42bb      	cmp	r3, r7
 80053cc:	db04      	blt.n	80053d8 <__s2b+0x78>
 80053ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053d2:	340a      	adds	r4, #10
 80053d4:	2509      	movs	r5, #9
 80053d6:	e7f6      	b.n	80053c6 <__s2b+0x66>
 80053d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80053dc:	4601      	mov	r1, r0
 80053de:	3b30      	subs	r3, #48	; 0x30
 80053e0:	220a      	movs	r2, #10
 80053e2:	4630      	mov	r0, r6
 80053e4:	f7ff ff72 	bl	80052cc <__multadd>
 80053e8:	e7ee      	b.n	80053c8 <__s2b+0x68>
 80053ea:	bf00      	nop
 80053ec:	08006e9d 	.word	0x08006e9d
 80053f0:	08006f2c 	.word	0x08006f2c

080053f4 <__hi0bits>:
 80053f4:	0c03      	lsrs	r3, r0, #16
 80053f6:	041b      	lsls	r3, r3, #16
 80053f8:	b9d3      	cbnz	r3, 8005430 <__hi0bits+0x3c>
 80053fa:	0400      	lsls	r0, r0, #16
 80053fc:	2310      	movs	r3, #16
 80053fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005402:	bf04      	itt	eq
 8005404:	0200      	lsleq	r0, r0, #8
 8005406:	3308      	addeq	r3, #8
 8005408:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800540c:	bf04      	itt	eq
 800540e:	0100      	lsleq	r0, r0, #4
 8005410:	3304      	addeq	r3, #4
 8005412:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005416:	bf04      	itt	eq
 8005418:	0080      	lsleq	r0, r0, #2
 800541a:	3302      	addeq	r3, #2
 800541c:	2800      	cmp	r0, #0
 800541e:	db05      	blt.n	800542c <__hi0bits+0x38>
 8005420:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005424:	f103 0301 	add.w	r3, r3, #1
 8005428:	bf08      	it	eq
 800542a:	2320      	moveq	r3, #32
 800542c:	4618      	mov	r0, r3
 800542e:	4770      	bx	lr
 8005430:	2300      	movs	r3, #0
 8005432:	e7e4      	b.n	80053fe <__hi0bits+0xa>

08005434 <__lo0bits>:
 8005434:	6803      	ldr	r3, [r0, #0]
 8005436:	f013 0207 	ands.w	r2, r3, #7
 800543a:	4601      	mov	r1, r0
 800543c:	d00b      	beq.n	8005456 <__lo0bits+0x22>
 800543e:	07da      	lsls	r2, r3, #31
 8005440:	d424      	bmi.n	800548c <__lo0bits+0x58>
 8005442:	0798      	lsls	r0, r3, #30
 8005444:	bf49      	itett	mi
 8005446:	085b      	lsrmi	r3, r3, #1
 8005448:	089b      	lsrpl	r3, r3, #2
 800544a:	2001      	movmi	r0, #1
 800544c:	600b      	strmi	r3, [r1, #0]
 800544e:	bf5c      	itt	pl
 8005450:	600b      	strpl	r3, [r1, #0]
 8005452:	2002      	movpl	r0, #2
 8005454:	4770      	bx	lr
 8005456:	b298      	uxth	r0, r3
 8005458:	b9b0      	cbnz	r0, 8005488 <__lo0bits+0x54>
 800545a:	0c1b      	lsrs	r3, r3, #16
 800545c:	2010      	movs	r0, #16
 800545e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005462:	bf04      	itt	eq
 8005464:	0a1b      	lsreq	r3, r3, #8
 8005466:	3008      	addeq	r0, #8
 8005468:	071a      	lsls	r2, r3, #28
 800546a:	bf04      	itt	eq
 800546c:	091b      	lsreq	r3, r3, #4
 800546e:	3004      	addeq	r0, #4
 8005470:	079a      	lsls	r2, r3, #30
 8005472:	bf04      	itt	eq
 8005474:	089b      	lsreq	r3, r3, #2
 8005476:	3002      	addeq	r0, #2
 8005478:	07da      	lsls	r2, r3, #31
 800547a:	d403      	bmi.n	8005484 <__lo0bits+0x50>
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	f100 0001 	add.w	r0, r0, #1
 8005482:	d005      	beq.n	8005490 <__lo0bits+0x5c>
 8005484:	600b      	str	r3, [r1, #0]
 8005486:	4770      	bx	lr
 8005488:	4610      	mov	r0, r2
 800548a:	e7e8      	b.n	800545e <__lo0bits+0x2a>
 800548c:	2000      	movs	r0, #0
 800548e:	4770      	bx	lr
 8005490:	2020      	movs	r0, #32
 8005492:	4770      	bx	lr

08005494 <__i2b>:
 8005494:	b510      	push	{r4, lr}
 8005496:	460c      	mov	r4, r1
 8005498:	2101      	movs	r1, #1
 800549a:	f7ff feb5 	bl	8005208 <_Balloc>
 800549e:	4602      	mov	r2, r0
 80054a0:	b928      	cbnz	r0, 80054ae <__i2b+0x1a>
 80054a2:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <__i2b+0x24>)
 80054a4:	4805      	ldr	r0, [pc, #20]	; (80054bc <__i2b+0x28>)
 80054a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80054aa:	f7ff fae5 	bl	8004a78 <__assert_func>
 80054ae:	2301      	movs	r3, #1
 80054b0:	6144      	str	r4, [r0, #20]
 80054b2:	6103      	str	r3, [r0, #16]
 80054b4:	bd10      	pop	{r4, pc}
 80054b6:	bf00      	nop
 80054b8:	08006e9d 	.word	0x08006e9d
 80054bc:	08006f2c 	.word	0x08006f2c

080054c0 <__multiply>:
 80054c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c4:	4614      	mov	r4, r2
 80054c6:	690a      	ldr	r2, [r1, #16]
 80054c8:	6923      	ldr	r3, [r4, #16]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	bfb8      	it	lt
 80054ce:	460b      	movlt	r3, r1
 80054d0:	460d      	mov	r5, r1
 80054d2:	bfbc      	itt	lt
 80054d4:	4625      	movlt	r5, r4
 80054d6:	461c      	movlt	r4, r3
 80054d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80054dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80054e0:	68ab      	ldr	r3, [r5, #8]
 80054e2:	6869      	ldr	r1, [r5, #4]
 80054e4:	eb0a 0709 	add.w	r7, sl, r9
 80054e8:	42bb      	cmp	r3, r7
 80054ea:	b085      	sub	sp, #20
 80054ec:	bfb8      	it	lt
 80054ee:	3101      	addlt	r1, #1
 80054f0:	f7ff fe8a 	bl	8005208 <_Balloc>
 80054f4:	b930      	cbnz	r0, 8005504 <__multiply+0x44>
 80054f6:	4602      	mov	r2, r0
 80054f8:	4b42      	ldr	r3, [pc, #264]	; (8005604 <__multiply+0x144>)
 80054fa:	4843      	ldr	r0, [pc, #268]	; (8005608 <__multiply+0x148>)
 80054fc:	f240 115d 	movw	r1, #349	; 0x15d
 8005500:	f7ff faba 	bl	8004a78 <__assert_func>
 8005504:	f100 0614 	add.w	r6, r0, #20
 8005508:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800550c:	4633      	mov	r3, r6
 800550e:	2200      	movs	r2, #0
 8005510:	4543      	cmp	r3, r8
 8005512:	d31e      	bcc.n	8005552 <__multiply+0x92>
 8005514:	f105 0c14 	add.w	ip, r5, #20
 8005518:	f104 0314 	add.w	r3, r4, #20
 800551c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005520:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005524:	9202      	str	r2, [sp, #8]
 8005526:	ebac 0205 	sub.w	r2, ip, r5
 800552a:	3a15      	subs	r2, #21
 800552c:	f022 0203 	bic.w	r2, r2, #3
 8005530:	3204      	adds	r2, #4
 8005532:	f105 0115 	add.w	r1, r5, #21
 8005536:	458c      	cmp	ip, r1
 8005538:	bf38      	it	cc
 800553a:	2204      	movcc	r2, #4
 800553c:	9201      	str	r2, [sp, #4]
 800553e:	9a02      	ldr	r2, [sp, #8]
 8005540:	9303      	str	r3, [sp, #12]
 8005542:	429a      	cmp	r2, r3
 8005544:	d808      	bhi.n	8005558 <__multiply+0x98>
 8005546:	2f00      	cmp	r7, #0
 8005548:	dc55      	bgt.n	80055f6 <__multiply+0x136>
 800554a:	6107      	str	r7, [r0, #16]
 800554c:	b005      	add	sp, #20
 800554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005552:	f843 2b04 	str.w	r2, [r3], #4
 8005556:	e7db      	b.n	8005510 <__multiply+0x50>
 8005558:	f8b3 a000 	ldrh.w	sl, [r3]
 800555c:	f1ba 0f00 	cmp.w	sl, #0
 8005560:	d020      	beq.n	80055a4 <__multiply+0xe4>
 8005562:	f105 0e14 	add.w	lr, r5, #20
 8005566:	46b1      	mov	r9, r6
 8005568:	2200      	movs	r2, #0
 800556a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800556e:	f8d9 b000 	ldr.w	fp, [r9]
 8005572:	b2a1      	uxth	r1, r4
 8005574:	fa1f fb8b 	uxth.w	fp, fp
 8005578:	fb0a b101 	mla	r1, sl, r1, fp
 800557c:	4411      	add	r1, r2
 800557e:	f8d9 2000 	ldr.w	r2, [r9]
 8005582:	0c24      	lsrs	r4, r4, #16
 8005584:	0c12      	lsrs	r2, r2, #16
 8005586:	fb0a 2404 	mla	r4, sl, r4, r2
 800558a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800558e:	b289      	uxth	r1, r1
 8005590:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005594:	45f4      	cmp	ip, lr
 8005596:	f849 1b04 	str.w	r1, [r9], #4
 800559a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800559e:	d8e4      	bhi.n	800556a <__multiply+0xaa>
 80055a0:	9901      	ldr	r1, [sp, #4]
 80055a2:	5072      	str	r2, [r6, r1]
 80055a4:	9a03      	ldr	r2, [sp, #12]
 80055a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80055aa:	3304      	adds	r3, #4
 80055ac:	f1b9 0f00 	cmp.w	r9, #0
 80055b0:	d01f      	beq.n	80055f2 <__multiply+0x132>
 80055b2:	6834      	ldr	r4, [r6, #0]
 80055b4:	f105 0114 	add.w	r1, r5, #20
 80055b8:	46b6      	mov	lr, r6
 80055ba:	f04f 0a00 	mov.w	sl, #0
 80055be:	880a      	ldrh	r2, [r1, #0]
 80055c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80055c4:	fb09 b202 	mla	r2, r9, r2, fp
 80055c8:	4492      	add	sl, r2
 80055ca:	b2a4      	uxth	r4, r4
 80055cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80055d0:	f84e 4b04 	str.w	r4, [lr], #4
 80055d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80055d8:	f8be 2000 	ldrh.w	r2, [lr]
 80055dc:	0c24      	lsrs	r4, r4, #16
 80055de:	fb09 2404 	mla	r4, r9, r4, r2
 80055e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80055e6:	458c      	cmp	ip, r1
 80055e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80055ec:	d8e7      	bhi.n	80055be <__multiply+0xfe>
 80055ee:	9a01      	ldr	r2, [sp, #4]
 80055f0:	50b4      	str	r4, [r6, r2]
 80055f2:	3604      	adds	r6, #4
 80055f4:	e7a3      	b.n	800553e <__multiply+0x7e>
 80055f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1a5      	bne.n	800554a <__multiply+0x8a>
 80055fe:	3f01      	subs	r7, #1
 8005600:	e7a1      	b.n	8005546 <__multiply+0x86>
 8005602:	bf00      	nop
 8005604:	08006e9d 	.word	0x08006e9d
 8005608:	08006f2c 	.word	0x08006f2c

0800560c <__pow5mult>:
 800560c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005610:	4615      	mov	r5, r2
 8005612:	f012 0203 	ands.w	r2, r2, #3
 8005616:	4606      	mov	r6, r0
 8005618:	460f      	mov	r7, r1
 800561a:	d007      	beq.n	800562c <__pow5mult+0x20>
 800561c:	4c25      	ldr	r4, [pc, #148]	; (80056b4 <__pow5mult+0xa8>)
 800561e:	3a01      	subs	r2, #1
 8005620:	2300      	movs	r3, #0
 8005622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005626:	f7ff fe51 	bl	80052cc <__multadd>
 800562a:	4607      	mov	r7, r0
 800562c:	10ad      	asrs	r5, r5, #2
 800562e:	d03d      	beq.n	80056ac <__pow5mult+0xa0>
 8005630:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005632:	b97c      	cbnz	r4, 8005654 <__pow5mult+0x48>
 8005634:	2010      	movs	r0, #16
 8005636:	f7ff fdbf 	bl	80051b8 <malloc>
 800563a:	4602      	mov	r2, r0
 800563c:	6270      	str	r0, [r6, #36]	; 0x24
 800563e:	b928      	cbnz	r0, 800564c <__pow5mult+0x40>
 8005640:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <__pow5mult+0xac>)
 8005642:	481e      	ldr	r0, [pc, #120]	; (80056bc <__pow5mult+0xb0>)
 8005644:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005648:	f7ff fa16 	bl	8004a78 <__assert_func>
 800564c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005650:	6004      	str	r4, [r0, #0]
 8005652:	60c4      	str	r4, [r0, #12]
 8005654:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800565c:	b94c      	cbnz	r4, 8005672 <__pow5mult+0x66>
 800565e:	f240 2171 	movw	r1, #625	; 0x271
 8005662:	4630      	mov	r0, r6
 8005664:	f7ff ff16 	bl	8005494 <__i2b>
 8005668:	2300      	movs	r3, #0
 800566a:	f8c8 0008 	str.w	r0, [r8, #8]
 800566e:	4604      	mov	r4, r0
 8005670:	6003      	str	r3, [r0, #0]
 8005672:	f04f 0900 	mov.w	r9, #0
 8005676:	07eb      	lsls	r3, r5, #31
 8005678:	d50a      	bpl.n	8005690 <__pow5mult+0x84>
 800567a:	4639      	mov	r1, r7
 800567c:	4622      	mov	r2, r4
 800567e:	4630      	mov	r0, r6
 8005680:	f7ff ff1e 	bl	80054c0 <__multiply>
 8005684:	4639      	mov	r1, r7
 8005686:	4680      	mov	r8, r0
 8005688:	4630      	mov	r0, r6
 800568a:	f7ff fdfd 	bl	8005288 <_Bfree>
 800568e:	4647      	mov	r7, r8
 8005690:	106d      	asrs	r5, r5, #1
 8005692:	d00b      	beq.n	80056ac <__pow5mult+0xa0>
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	b938      	cbnz	r0, 80056a8 <__pow5mult+0x9c>
 8005698:	4622      	mov	r2, r4
 800569a:	4621      	mov	r1, r4
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff ff0f 	bl	80054c0 <__multiply>
 80056a2:	6020      	str	r0, [r4, #0]
 80056a4:	f8c0 9000 	str.w	r9, [r0]
 80056a8:	4604      	mov	r4, r0
 80056aa:	e7e4      	b.n	8005676 <__pow5mult+0x6a>
 80056ac:	4638      	mov	r0, r7
 80056ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056b2:	bf00      	nop
 80056b4:	08007080 	.word	0x08007080
 80056b8:	08006ce8 	.word	0x08006ce8
 80056bc:	08006f2c 	.word	0x08006f2c

080056c0 <__lshift>:
 80056c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	460c      	mov	r4, r1
 80056c6:	6849      	ldr	r1, [r1, #4]
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056ce:	68a3      	ldr	r3, [r4, #8]
 80056d0:	4607      	mov	r7, r0
 80056d2:	4691      	mov	r9, r2
 80056d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056d8:	f108 0601 	add.w	r6, r8, #1
 80056dc:	42b3      	cmp	r3, r6
 80056de:	db0b      	blt.n	80056f8 <__lshift+0x38>
 80056e0:	4638      	mov	r0, r7
 80056e2:	f7ff fd91 	bl	8005208 <_Balloc>
 80056e6:	4605      	mov	r5, r0
 80056e8:	b948      	cbnz	r0, 80056fe <__lshift+0x3e>
 80056ea:	4602      	mov	r2, r0
 80056ec:	4b28      	ldr	r3, [pc, #160]	; (8005790 <__lshift+0xd0>)
 80056ee:	4829      	ldr	r0, [pc, #164]	; (8005794 <__lshift+0xd4>)
 80056f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80056f4:	f7ff f9c0 	bl	8004a78 <__assert_func>
 80056f8:	3101      	adds	r1, #1
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	e7ee      	b.n	80056dc <__lshift+0x1c>
 80056fe:	2300      	movs	r3, #0
 8005700:	f100 0114 	add.w	r1, r0, #20
 8005704:	f100 0210 	add.w	r2, r0, #16
 8005708:	4618      	mov	r0, r3
 800570a:	4553      	cmp	r3, sl
 800570c:	db33      	blt.n	8005776 <__lshift+0xb6>
 800570e:	6920      	ldr	r0, [r4, #16]
 8005710:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005714:	f104 0314 	add.w	r3, r4, #20
 8005718:	f019 091f 	ands.w	r9, r9, #31
 800571c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005720:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005724:	d02b      	beq.n	800577e <__lshift+0xbe>
 8005726:	f1c9 0e20 	rsb	lr, r9, #32
 800572a:	468a      	mov	sl, r1
 800572c:	2200      	movs	r2, #0
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	fa00 f009 	lsl.w	r0, r0, r9
 8005734:	4302      	orrs	r2, r0
 8005736:	f84a 2b04 	str.w	r2, [sl], #4
 800573a:	f853 2b04 	ldr.w	r2, [r3], #4
 800573e:	459c      	cmp	ip, r3
 8005740:	fa22 f20e 	lsr.w	r2, r2, lr
 8005744:	d8f3      	bhi.n	800572e <__lshift+0x6e>
 8005746:	ebac 0304 	sub.w	r3, ip, r4
 800574a:	3b15      	subs	r3, #21
 800574c:	f023 0303 	bic.w	r3, r3, #3
 8005750:	3304      	adds	r3, #4
 8005752:	f104 0015 	add.w	r0, r4, #21
 8005756:	4584      	cmp	ip, r0
 8005758:	bf38      	it	cc
 800575a:	2304      	movcc	r3, #4
 800575c:	50ca      	str	r2, [r1, r3]
 800575e:	b10a      	cbz	r2, 8005764 <__lshift+0xa4>
 8005760:	f108 0602 	add.w	r6, r8, #2
 8005764:	3e01      	subs	r6, #1
 8005766:	4638      	mov	r0, r7
 8005768:	612e      	str	r6, [r5, #16]
 800576a:	4621      	mov	r1, r4
 800576c:	f7ff fd8c 	bl	8005288 <_Bfree>
 8005770:	4628      	mov	r0, r5
 8005772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005776:	f842 0f04 	str.w	r0, [r2, #4]!
 800577a:	3301      	adds	r3, #1
 800577c:	e7c5      	b.n	800570a <__lshift+0x4a>
 800577e:	3904      	subs	r1, #4
 8005780:	f853 2b04 	ldr.w	r2, [r3], #4
 8005784:	f841 2f04 	str.w	r2, [r1, #4]!
 8005788:	459c      	cmp	ip, r3
 800578a:	d8f9      	bhi.n	8005780 <__lshift+0xc0>
 800578c:	e7ea      	b.n	8005764 <__lshift+0xa4>
 800578e:	bf00      	nop
 8005790:	08006e9d 	.word	0x08006e9d
 8005794:	08006f2c 	.word	0x08006f2c

08005798 <__mcmp>:
 8005798:	b530      	push	{r4, r5, lr}
 800579a:	6902      	ldr	r2, [r0, #16]
 800579c:	690c      	ldr	r4, [r1, #16]
 800579e:	1b12      	subs	r2, r2, r4
 80057a0:	d10e      	bne.n	80057c0 <__mcmp+0x28>
 80057a2:	f100 0314 	add.w	r3, r0, #20
 80057a6:	3114      	adds	r1, #20
 80057a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80057ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80057b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80057b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80057b8:	42a5      	cmp	r5, r4
 80057ba:	d003      	beq.n	80057c4 <__mcmp+0x2c>
 80057bc:	d305      	bcc.n	80057ca <__mcmp+0x32>
 80057be:	2201      	movs	r2, #1
 80057c0:	4610      	mov	r0, r2
 80057c2:	bd30      	pop	{r4, r5, pc}
 80057c4:	4283      	cmp	r3, r0
 80057c6:	d3f3      	bcc.n	80057b0 <__mcmp+0x18>
 80057c8:	e7fa      	b.n	80057c0 <__mcmp+0x28>
 80057ca:	f04f 32ff 	mov.w	r2, #4294967295
 80057ce:	e7f7      	b.n	80057c0 <__mcmp+0x28>

080057d0 <__mdiff>:
 80057d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	460c      	mov	r4, r1
 80057d6:	4606      	mov	r6, r0
 80057d8:	4611      	mov	r1, r2
 80057da:	4620      	mov	r0, r4
 80057dc:	4617      	mov	r7, r2
 80057de:	f7ff ffdb 	bl	8005798 <__mcmp>
 80057e2:	1e05      	subs	r5, r0, #0
 80057e4:	d110      	bne.n	8005808 <__mdiff+0x38>
 80057e6:	4629      	mov	r1, r5
 80057e8:	4630      	mov	r0, r6
 80057ea:	f7ff fd0d 	bl	8005208 <_Balloc>
 80057ee:	b930      	cbnz	r0, 80057fe <__mdiff+0x2e>
 80057f0:	4b39      	ldr	r3, [pc, #228]	; (80058d8 <__mdiff+0x108>)
 80057f2:	4602      	mov	r2, r0
 80057f4:	f240 2132 	movw	r1, #562	; 0x232
 80057f8:	4838      	ldr	r0, [pc, #224]	; (80058dc <__mdiff+0x10c>)
 80057fa:	f7ff f93d 	bl	8004a78 <__assert_func>
 80057fe:	2301      	movs	r3, #1
 8005800:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005808:	bfa4      	itt	ge
 800580a:	463b      	movge	r3, r7
 800580c:	4627      	movge	r7, r4
 800580e:	4630      	mov	r0, r6
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	bfa6      	itte	ge
 8005814:	461c      	movge	r4, r3
 8005816:	2500      	movge	r5, #0
 8005818:	2501      	movlt	r5, #1
 800581a:	f7ff fcf5 	bl	8005208 <_Balloc>
 800581e:	b920      	cbnz	r0, 800582a <__mdiff+0x5a>
 8005820:	4b2d      	ldr	r3, [pc, #180]	; (80058d8 <__mdiff+0x108>)
 8005822:	4602      	mov	r2, r0
 8005824:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005828:	e7e6      	b.n	80057f8 <__mdiff+0x28>
 800582a:	693e      	ldr	r6, [r7, #16]
 800582c:	60c5      	str	r5, [r0, #12]
 800582e:	6925      	ldr	r5, [r4, #16]
 8005830:	f107 0114 	add.w	r1, r7, #20
 8005834:	f104 0914 	add.w	r9, r4, #20
 8005838:	f100 0e14 	add.w	lr, r0, #20
 800583c:	f107 0210 	add.w	r2, r7, #16
 8005840:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005844:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005848:	46f2      	mov	sl, lr
 800584a:	2700      	movs	r7, #0
 800584c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005850:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005854:	fa1f f883 	uxth.w	r8, r3
 8005858:	fa17 f78b 	uxtah	r7, r7, fp
 800585c:	0c1b      	lsrs	r3, r3, #16
 800585e:	eba7 0808 	sub.w	r8, r7, r8
 8005862:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005866:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800586a:	fa1f f888 	uxth.w	r8, r8
 800586e:	141f      	asrs	r7, r3, #16
 8005870:	454d      	cmp	r5, r9
 8005872:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005876:	f84a 3b04 	str.w	r3, [sl], #4
 800587a:	d8e7      	bhi.n	800584c <__mdiff+0x7c>
 800587c:	1b2b      	subs	r3, r5, r4
 800587e:	3b15      	subs	r3, #21
 8005880:	f023 0303 	bic.w	r3, r3, #3
 8005884:	3304      	adds	r3, #4
 8005886:	3415      	adds	r4, #21
 8005888:	42a5      	cmp	r5, r4
 800588a:	bf38      	it	cc
 800588c:	2304      	movcc	r3, #4
 800588e:	4419      	add	r1, r3
 8005890:	4473      	add	r3, lr
 8005892:	469e      	mov	lr, r3
 8005894:	460d      	mov	r5, r1
 8005896:	4565      	cmp	r5, ip
 8005898:	d30e      	bcc.n	80058b8 <__mdiff+0xe8>
 800589a:	f10c 0203 	add.w	r2, ip, #3
 800589e:	1a52      	subs	r2, r2, r1
 80058a0:	f022 0203 	bic.w	r2, r2, #3
 80058a4:	3903      	subs	r1, #3
 80058a6:	458c      	cmp	ip, r1
 80058a8:	bf38      	it	cc
 80058aa:	2200      	movcc	r2, #0
 80058ac:	441a      	add	r2, r3
 80058ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80058b2:	b17b      	cbz	r3, 80058d4 <__mdiff+0x104>
 80058b4:	6106      	str	r6, [r0, #16]
 80058b6:	e7a5      	b.n	8005804 <__mdiff+0x34>
 80058b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80058bc:	fa17 f488 	uxtah	r4, r7, r8
 80058c0:	1422      	asrs	r2, r4, #16
 80058c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80058c6:	b2a4      	uxth	r4, r4
 80058c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80058cc:	f84e 4b04 	str.w	r4, [lr], #4
 80058d0:	1417      	asrs	r7, r2, #16
 80058d2:	e7e0      	b.n	8005896 <__mdiff+0xc6>
 80058d4:	3e01      	subs	r6, #1
 80058d6:	e7ea      	b.n	80058ae <__mdiff+0xde>
 80058d8:	08006e9d 	.word	0x08006e9d
 80058dc:	08006f2c 	.word	0x08006f2c

080058e0 <__ulp>:
 80058e0:	b082      	sub	sp, #8
 80058e2:	ed8d 0b00 	vstr	d0, [sp]
 80058e6:	9b01      	ldr	r3, [sp, #4]
 80058e8:	4912      	ldr	r1, [pc, #72]	; (8005934 <__ulp+0x54>)
 80058ea:	4019      	ands	r1, r3
 80058ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80058f0:	2900      	cmp	r1, #0
 80058f2:	dd05      	ble.n	8005900 <__ulp+0x20>
 80058f4:	2200      	movs	r2, #0
 80058f6:	460b      	mov	r3, r1
 80058f8:	ec43 2b10 	vmov	d0, r2, r3
 80058fc:	b002      	add	sp, #8
 80058fe:	4770      	bx	lr
 8005900:	4249      	negs	r1, r1
 8005902:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005906:	ea4f 5021 	mov.w	r0, r1, asr #20
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	da04      	bge.n	800591e <__ulp+0x3e>
 8005914:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005918:	fa41 f300 	asr.w	r3, r1, r0
 800591c:	e7ec      	b.n	80058f8 <__ulp+0x18>
 800591e:	f1a0 0114 	sub.w	r1, r0, #20
 8005922:	291e      	cmp	r1, #30
 8005924:	bfda      	itte	le
 8005926:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800592a:	fa20 f101 	lsrle.w	r1, r0, r1
 800592e:	2101      	movgt	r1, #1
 8005930:	460a      	mov	r2, r1
 8005932:	e7e1      	b.n	80058f8 <__ulp+0x18>
 8005934:	7ff00000 	.word	0x7ff00000

08005938 <__b2d>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	6905      	ldr	r5, [r0, #16]
 800593c:	f100 0714 	add.w	r7, r0, #20
 8005940:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005944:	1f2e      	subs	r6, r5, #4
 8005946:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800594a:	4620      	mov	r0, r4
 800594c:	f7ff fd52 	bl	80053f4 <__hi0bits>
 8005950:	f1c0 0320 	rsb	r3, r0, #32
 8005954:	280a      	cmp	r0, #10
 8005956:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80059d4 <__b2d+0x9c>
 800595a:	600b      	str	r3, [r1, #0]
 800595c:	dc14      	bgt.n	8005988 <__b2d+0x50>
 800595e:	f1c0 0e0b 	rsb	lr, r0, #11
 8005962:	fa24 f10e 	lsr.w	r1, r4, lr
 8005966:	42b7      	cmp	r7, r6
 8005968:	ea41 030c 	orr.w	r3, r1, ip
 800596c:	bf34      	ite	cc
 800596e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005972:	2100      	movcs	r1, #0
 8005974:	3015      	adds	r0, #21
 8005976:	fa04 f000 	lsl.w	r0, r4, r0
 800597a:	fa21 f10e 	lsr.w	r1, r1, lr
 800597e:	ea40 0201 	orr.w	r2, r0, r1
 8005982:	ec43 2b10 	vmov	d0, r2, r3
 8005986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005988:	42b7      	cmp	r7, r6
 800598a:	bf3a      	itte	cc
 800598c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005990:	f1a5 0608 	subcc.w	r6, r5, #8
 8005994:	2100      	movcs	r1, #0
 8005996:	380b      	subs	r0, #11
 8005998:	d017      	beq.n	80059ca <__b2d+0x92>
 800599a:	f1c0 0c20 	rsb	ip, r0, #32
 800599e:	fa04 f500 	lsl.w	r5, r4, r0
 80059a2:	42be      	cmp	r6, r7
 80059a4:	fa21 f40c 	lsr.w	r4, r1, ip
 80059a8:	ea45 0504 	orr.w	r5, r5, r4
 80059ac:	bf8c      	ite	hi
 80059ae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80059b2:	2400      	movls	r4, #0
 80059b4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80059b8:	fa01 f000 	lsl.w	r0, r1, r0
 80059bc:	fa24 f40c 	lsr.w	r4, r4, ip
 80059c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80059c4:	ea40 0204 	orr.w	r2, r0, r4
 80059c8:	e7db      	b.n	8005982 <__b2d+0x4a>
 80059ca:	ea44 030c 	orr.w	r3, r4, ip
 80059ce:	460a      	mov	r2, r1
 80059d0:	e7d7      	b.n	8005982 <__b2d+0x4a>
 80059d2:	bf00      	nop
 80059d4:	3ff00000 	.word	0x3ff00000

080059d8 <__d2b>:
 80059d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059dc:	4689      	mov	r9, r1
 80059de:	2101      	movs	r1, #1
 80059e0:	ec57 6b10 	vmov	r6, r7, d0
 80059e4:	4690      	mov	r8, r2
 80059e6:	f7ff fc0f 	bl	8005208 <_Balloc>
 80059ea:	4604      	mov	r4, r0
 80059ec:	b930      	cbnz	r0, 80059fc <__d2b+0x24>
 80059ee:	4602      	mov	r2, r0
 80059f0:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <__d2b+0xb0>)
 80059f2:	4826      	ldr	r0, [pc, #152]	; (8005a8c <__d2b+0xb4>)
 80059f4:	f240 310a 	movw	r1, #778	; 0x30a
 80059f8:	f7ff f83e 	bl	8004a78 <__assert_func>
 80059fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005a00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a04:	bb35      	cbnz	r5, 8005a54 <__d2b+0x7c>
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	d028      	beq.n	8005a5e <__d2b+0x86>
 8005a0c:	4668      	mov	r0, sp
 8005a0e:	9600      	str	r6, [sp, #0]
 8005a10:	f7ff fd10 	bl	8005434 <__lo0bits>
 8005a14:	9900      	ldr	r1, [sp, #0]
 8005a16:	b300      	cbz	r0, 8005a5a <__d2b+0x82>
 8005a18:	9a01      	ldr	r2, [sp, #4]
 8005a1a:	f1c0 0320 	rsb	r3, r0, #32
 8005a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a22:	430b      	orrs	r3, r1
 8005a24:	40c2      	lsrs	r2, r0
 8005a26:	6163      	str	r3, [r4, #20]
 8005a28:	9201      	str	r2, [sp, #4]
 8005a2a:	9b01      	ldr	r3, [sp, #4]
 8005a2c:	61a3      	str	r3, [r4, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf14      	ite	ne
 8005a32:	2202      	movne	r2, #2
 8005a34:	2201      	moveq	r2, #1
 8005a36:	6122      	str	r2, [r4, #16]
 8005a38:	b1d5      	cbz	r5, 8005a70 <__d2b+0x98>
 8005a3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005a3e:	4405      	add	r5, r0
 8005a40:	f8c9 5000 	str.w	r5, [r9]
 8005a44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a48:	f8c8 0000 	str.w	r0, [r8]
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	b003      	add	sp, #12
 8005a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a58:	e7d5      	b.n	8005a06 <__d2b+0x2e>
 8005a5a:	6161      	str	r1, [r4, #20]
 8005a5c:	e7e5      	b.n	8005a2a <__d2b+0x52>
 8005a5e:	a801      	add	r0, sp, #4
 8005a60:	f7ff fce8 	bl	8005434 <__lo0bits>
 8005a64:	9b01      	ldr	r3, [sp, #4]
 8005a66:	6163      	str	r3, [r4, #20]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	6122      	str	r2, [r4, #16]
 8005a6c:	3020      	adds	r0, #32
 8005a6e:	e7e3      	b.n	8005a38 <__d2b+0x60>
 8005a70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a78:	f8c9 0000 	str.w	r0, [r9]
 8005a7c:	6918      	ldr	r0, [r3, #16]
 8005a7e:	f7ff fcb9 	bl	80053f4 <__hi0bits>
 8005a82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005a86:	e7df      	b.n	8005a48 <__d2b+0x70>
 8005a88:	08006e9d 	.word	0x08006e9d
 8005a8c:	08006f2c 	.word	0x08006f2c

08005a90 <__ratio>:
 8005a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	4688      	mov	r8, r1
 8005a96:	4669      	mov	r1, sp
 8005a98:	4681      	mov	r9, r0
 8005a9a:	f7ff ff4d 	bl	8005938 <__b2d>
 8005a9e:	a901      	add	r1, sp, #4
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	ec55 4b10 	vmov	r4, r5, d0
 8005aa6:	f7ff ff47 	bl	8005938 <__b2d>
 8005aaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005aae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005ab2:	eba3 0c02 	sub.w	ip, r3, r2
 8005ab6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005ac0:	ec51 0b10 	vmov	r0, r1, d0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfd6      	itet	le
 8005ac8:	460a      	movle	r2, r1
 8005aca:	462a      	movgt	r2, r5
 8005acc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005ad0:	468b      	mov	fp, r1
 8005ad2:	462f      	mov	r7, r5
 8005ad4:	bfd4      	ite	le
 8005ad6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005ada:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005ade:	4620      	mov	r0, r4
 8005ae0:	ee10 2a10 	vmov	r2, s0
 8005ae4:	465b      	mov	r3, fp
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa feb0 	bl	800084c <__aeabi_ddiv>
 8005aec:	ec41 0b10 	vmov	d0, r0, r1
 8005af0:	b003      	add	sp, #12
 8005af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005af6 <__copybits>:
 8005af6:	3901      	subs	r1, #1
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	1149      	asrs	r1, r1, #5
 8005afc:	6914      	ldr	r4, [r2, #16]
 8005afe:	3101      	adds	r1, #1
 8005b00:	f102 0314 	add.w	r3, r2, #20
 8005b04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005b08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005b0c:	1f05      	subs	r5, r0, #4
 8005b0e:	42a3      	cmp	r3, r4
 8005b10:	d30c      	bcc.n	8005b2c <__copybits+0x36>
 8005b12:	1aa3      	subs	r3, r4, r2
 8005b14:	3b11      	subs	r3, #17
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	3211      	adds	r2, #17
 8005b1c:	42a2      	cmp	r2, r4
 8005b1e:	bf88      	it	hi
 8005b20:	2300      	movhi	r3, #0
 8005b22:	4418      	add	r0, r3
 8005b24:	2300      	movs	r3, #0
 8005b26:	4288      	cmp	r0, r1
 8005b28:	d305      	bcc.n	8005b36 <__copybits+0x40>
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	f853 6b04 	ldr.w	r6, [r3], #4
 8005b30:	f845 6f04 	str.w	r6, [r5, #4]!
 8005b34:	e7eb      	b.n	8005b0e <__copybits+0x18>
 8005b36:	f840 3b04 	str.w	r3, [r0], #4
 8005b3a:	e7f4      	b.n	8005b26 <__copybits+0x30>

08005b3c <__any_on>:
 8005b3c:	f100 0214 	add.w	r2, r0, #20
 8005b40:	6900      	ldr	r0, [r0, #16]
 8005b42:	114b      	asrs	r3, r1, #5
 8005b44:	4298      	cmp	r0, r3
 8005b46:	b510      	push	{r4, lr}
 8005b48:	db11      	blt.n	8005b6e <__any_on+0x32>
 8005b4a:	dd0a      	ble.n	8005b62 <__any_on+0x26>
 8005b4c:	f011 011f 	ands.w	r1, r1, #31
 8005b50:	d007      	beq.n	8005b62 <__any_on+0x26>
 8005b52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005b56:	fa24 f001 	lsr.w	r0, r4, r1
 8005b5a:	fa00 f101 	lsl.w	r1, r0, r1
 8005b5e:	428c      	cmp	r4, r1
 8005b60:	d10b      	bne.n	8005b7a <__any_on+0x3e>
 8005b62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d803      	bhi.n	8005b72 <__any_on+0x36>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	bd10      	pop	{r4, pc}
 8005b6e:	4603      	mov	r3, r0
 8005b70:	e7f7      	b.n	8005b62 <__any_on+0x26>
 8005b72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b76:	2900      	cmp	r1, #0
 8005b78:	d0f5      	beq.n	8005b66 <__any_on+0x2a>
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	e7f6      	b.n	8005b6c <__any_on+0x30>

08005b7e <_calloc_r>:
 8005b7e:	b513      	push	{r0, r1, r4, lr}
 8005b80:	434a      	muls	r2, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	9201      	str	r2, [sp, #4]
 8005b86:	f000 f859 	bl	8005c3c <_malloc_r>
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	b118      	cbz	r0, 8005b96 <_calloc_r+0x18>
 8005b8e:	9a01      	ldr	r2, [sp, #4]
 8005b90:	2100      	movs	r1, #0
 8005b92:	f7fe f82b 	bl	8003bec <memset>
 8005b96:	4620      	mov	r0, r4
 8005b98:	b002      	add	sp, #8
 8005b9a:	bd10      	pop	{r4, pc}

08005b9c <_free_r>:
 8005b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b9e:	2900      	cmp	r1, #0
 8005ba0:	d048      	beq.n	8005c34 <_free_r+0x98>
 8005ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba6:	9001      	str	r0, [sp, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f1a1 0404 	sub.w	r4, r1, #4
 8005bae:	bfb8      	it	lt
 8005bb0:	18e4      	addlt	r4, r4, r3
 8005bb2:	f000 feab 	bl	800690c <__malloc_lock>
 8005bb6:	4a20      	ldr	r2, [pc, #128]	; (8005c38 <_free_r+0x9c>)
 8005bb8:	9801      	ldr	r0, [sp, #4]
 8005bba:	6813      	ldr	r3, [r2, #0]
 8005bbc:	4615      	mov	r5, r2
 8005bbe:	b933      	cbnz	r3, 8005bce <_free_r+0x32>
 8005bc0:	6063      	str	r3, [r4, #4]
 8005bc2:	6014      	str	r4, [r2, #0]
 8005bc4:	b003      	add	sp, #12
 8005bc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bca:	f000 bea5 	b.w	8006918 <__malloc_unlock>
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	d90b      	bls.n	8005bea <_free_r+0x4e>
 8005bd2:	6821      	ldr	r1, [r4, #0]
 8005bd4:	1862      	adds	r2, r4, r1
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	bf04      	itt	eq
 8005bda:	681a      	ldreq	r2, [r3, #0]
 8005bdc:	685b      	ldreq	r3, [r3, #4]
 8005bde:	6063      	str	r3, [r4, #4]
 8005be0:	bf04      	itt	eq
 8005be2:	1852      	addeq	r2, r2, r1
 8005be4:	6022      	streq	r2, [r4, #0]
 8005be6:	602c      	str	r4, [r5, #0]
 8005be8:	e7ec      	b.n	8005bc4 <_free_r+0x28>
 8005bea:	461a      	mov	r2, r3
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	b10b      	cbz	r3, 8005bf4 <_free_r+0x58>
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d9fa      	bls.n	8005bea <_free_r+0x4e>
 8005bf4:	6811      	ldr	r1, [r2, #0]
 8005bf6:	1855      	adds	r5, r2, r1
 8005bf8:	42a5      	cmp	r5, r4
 8005bfa:	d10b      	bne.n	8005c14 <_free_r+0x78>
 8005bfc:	6824      	ldr	r4, [r4, #0]
 8005bfe:	4421      	add	r1, r4
 8005c00:	1854      	adds	r4, r2, r1
 8005c02:	42a3      	cmp	r3, r4
 8005c04:	6011      	str	r1, [r2, #0]
 8005c06:	d1dd      	bne.n	8005bc4 <_free_r+0x28>
 8005c08:	681c      	ldr	r4, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	6053      	str	r3, [r2, #4]
 8005c0e:	4421      	add	r1, r4
 8005c10:	6011      	str	r1, [r2, #0]
 8005c12:	e7d7      	b.n	8005bc4 <_free_r+0x28>
 8005c14:	d902      	bls.n	8005c1c <_free_r+0x80>
 8005c16:	230c      	movs	r3, #12
 8005c18:	6003      	str	r3, [r0, #0]
 8005c1a:	e7d3      	b.n	8005bc4 <_free_r+0x28>
 8005c1c:	6825      	ldr	r5, [r4, #0]
 8005c1e:	1961      	adds	r1, r4, r5
 8005c20:	428b      	cmp	r3, r1
 8005c22:	bf04      	itt	eq
 8005c24:	6819      	ldreq	r1, [r3, #0]
 8005c26:	685b      	ldreq	r3, [r3, #4]
 8005c28:	6063      	str	r3, [r4, #4]
 8005c2a:	bf04      	itt	eq
 8005c2c:	1949      	addeq	r1, r1, r5
 8005c2e:	6021      	streq	r1, [r4, #0]
 8005c30:	6054      	str	r4, [r2, #4]
 8005c32:	e7c7      	b.n	8005bc4 <_free_r+0x28>
 8005c34:	b003      	add	sp, #12
 8005c36:	bd30      	pop	{r4, r5, pc}
 8005c38:	20000200 	.word	0x20000200

08005c3c <_malloc_r>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	1ccd      	adds	r5, r1, #3
 8005c40:	f025 0503 	bic.w	r5, r5, #3
 8005c44:	3508      	adds	r5, #8
 8005c46:	2d0c      	cmp	r5, #12
 8005c48:	bf38      	it	cc
 8005c4a:	250c      	movcc	r5, #12
 8005c4c:	2d00      	cmp	r5, #0
 8005c4e:	4606      	mov	r6, r0
 8005c50:	db01      	blt.n	8005c56 <_malloc_r+0x1a>
 8005c52:	42a9      	cmp	r1, r5
 8005c54:	d903      	bls.n	8005c5e <_malloc_r+0x22>
 8005c56:	230c      	movs	r3, #12
 8005c58:	6033      	str	r3, [r6, #0]
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c5e:	f000 fe55 	bl	800690c <__malloc_lock>
 8005c62:	4921      	ldr	r1, [pc, #132]	; (8005ce8 <_malloc_r+0xac>)
 8005c64:	680a      	ldr	r2, [r1, #0]
 8005c66:	4614      	mov	r4, r2
 8005c68:	b99c      	cbnz	r4, 8005c92 <_malloc_r+0x56>
 8005c6a:	4f20      	ldr	r7, [pc, #128]	; (8005cec <_malloc_r+0xb0>)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	b923      	cbnz	r3, 8005c7a <_malloc_r+0x3e>
 8005c70:	4621      	mov	r1, r4
 8005c72:	4630      	mov	r0, r6
 8005c74:	f000 fb34 	bl	80062e0 <_sbrk_r>
 8005c78:	6038      	str	r0, [r7, #0]
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f000 fb2f 	bl	80062e0 <_sbrk_r>
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	d123      	bne.n	8005cce <_malloc_r+0x92>
 8005c86:	230c      	movs	r3, #12
 8005c88:	6033      	str	r3, [r6, #0]
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f000 fe44 	bl	8006918 <__malloc_unlock>
 8005c90:	e7e3      	b.n	8005c5a <_malloc_r+0x1e>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	1b5b      	subs	r3, r3, r5
 8005c96:	d417      	bmi.n	8005cc8 <_malloc_r+0x8c>
 8005c98:	2b0b      	cmp	r3, #11
 8005c9a:	d903      	bls.n	8005ca4 <_malloc_r+0x68>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	441c      	add	r4, r3
 8005ca0:	6025      	str	r5, [r4, #0]
 8005ca2:	e004      	b.n	8005cae <_malloc_r+0x72>
 8005ca4:	6863      	ldr	r3, [r4, #4]
 8005ca6:	42a2      	cmp	r2, r4
 8005ca8:	bf0c      	ite	eq
 8005caa:	600b      	streq	r3, [r1, #0]
 8005cac:	6053      	strne	r3, [r2, #4]
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f000 fe32 	bl	8006918 <__malloc_unlock>
 8005cb4:	f104 000b 	add.w	r0, r4, #11
 8005cb8:	1d23      	adds	r3, r4, #4
 8005cba:	f020 0007 	bic.w	r0, r0, #7
 8005cbe:	1ac2      	subs	r2, r0, r3
 8005cc0:	d0cc      	beq.n	8005c5c <_malloc_r+0x20>
 8005cc2:	1a1b      	subs	r3, r3, r0
 8005cc4:	50a3      	str	r3, [r4, r2]
 8005cc6:	e7c9      	b.n	8005c5c <_malloc_r+0x20>
 8005cc8:	4622      	mov	r2, r4
 8005cca:	6864      	ldr	r4, [r4, #4]
 8005ccc:	e7cc      	b.n	8005c68 <_malloc_r+0x2c>
 8005cce:	1cc4      	adds	r4, r0, #3
 8005cd0:	f024 0403 	bic.w	r4, r4, #3
 8005cd4:	42a0      	cmp	r0, r4
 8005cd6:	d0e3      	beq.n	8005ca0 <_malloc_r+0x64>
 8005cd8:	1a21      	subs	r1, r4, r0
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f000 fb00 	bl	80062e0 <_sbrk_r>
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d1dd      	bne.n	8005ca0 <_malloc_r+0x64>
 8005ce4:	e7cf      	b.n	8005c86 <_malloc_r+0x4a>
 8005ce6:	bf00      	nop
 8005ce8:	20000200 	.word	0x20000200
 8005cec:	20000204 	.word	0x20000204

08005cf0 <__sfputc_r>:
 8005cf0:	6893      	ldr	r3, [r2, #8]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	b410      	push	{r4}
 8005cf8:	6093      	str	r3, [r2, #8]
 8005cfa:	da08      	bge.n	8005d0e <__sfputc_r+0x1e>
 8005cfc:	6994      	ldr	r4, [r2, #24]
 8005cfe:	42a3      	cmp	r3, r4
 8005d00:	db01      	blt.n	8005d06 <__sfputc_r+0x16>
 8005d02:	290a      	cmp	r1, #10
 8005d04:	d103      	bne.n	8005d0e <__sfputc_r+0x1e>
 8005d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d0a:	f000 bb0b 	b.w	8006324 <__swbuf_r>
 8005d0e:	6813      	ldr	r3, [r2, #0]
 8005d10:	1c58      	adds	r0, r3, #1
 8005d12:	6010      	str	r0, [r2, #0]
 8005d14:	7019      	strb	r1, [r3, #0]
 8005d16:	4608      	mov	r0, r1
 8005d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <__sfputs_r>:
 8005d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d20:	4606      	mov	r6, r0
 8005d22:	460f      	mov	r7, r1
 8005d24:	4614      	mov	r4, r2
 8005d26:	18d5      	adds	r5, r2, r3
 8005d28:	42ac      	cmp	r4, r5
 8005d2a:	d101      	bne.n	8005d30 <__sfputs_r+0x12>
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	e007      	b.n	8005d40 <__sfputs_r+0x22>
 8005d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d34:	463a      	mov	r2, r7
 8005d36:	4630      	mov	r0, r6
 8005d38:	f7ff ffda 	bl	8005cf0 <__sfputc_r>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d1f3      	bne.n	8005d28 <__sfputs_r+0xa>
 8005d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d44 <_vfiprintf_r>:
 8005d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d48:	460d      	mov	r5, r1
 8005d4a:	b09d      	sub	sp, #116	; 0x74
 8005d4c:	4614      	mov	r4, r2
 8005d4e:	4698      	mov	r8, r3
 8005d50:	4606      	mov	r6, r0
 8005d52:	b118      	cbz	r0, 8005d5c <_vfiprintf_r+0x18>
 8005d54:	6983      	ldr	r3, [r0, #24]
 8005d56:	b90b      	cbnz	r3, 8005d5c <_vfiprintf_r+0x18>
 8005d58:	f000 fcd4 	bl	8006704 <__sinit>
 8005d5c:	4b89      	ldr	r3, [pc, #548]	; (8005f84 <_vfiprintf_r+0x240>)
 8005d5e:	429d      	cmp	r5, r3
 8005d60:	d11b      	bne.n	8005d9a <_vfiprintf_r+0x56>
 8005d62:	6875      	ldr	r5, [r6, #4]
 8005d64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d66:	07d9      	lsls	r1, r3, #31
 8005d68:	d405      	bmi.n	8005d76 <_vfiprintf_r+0x32>
 8005d6a:	89ab      	ldrh	r3, [r5, #12]
 8005d6c:	059a      	lsls	r2, r3, #22
 8005d6e:	d402      	bmi.n	8005d76 <_vfiprintf_r+0x32>
 8005d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d72:	f000 fd65 	bl	8006840 <__retarget_lock_acquire_recursive>
 8005d76:	89ab      	ldrh	r3, [r5, #12]
 8005d78:	071b      	lsls	r3, r3, #28
 8005d7a:	d501      	bpl.n	8005d80 <_vfiprintf_r+0x3c>
 8005d7c:	692b      	ldr	r3, [r5, #16]
 8005d7e:	b9eb      	cbnz	r3, 8005dbc <_vfiprintf_r+0x78>
 8005d80:	4629      	mov	r1, r5
 8005d82:	4630      	mov	r0, r6
 8005d84:	f000 fb2e 	bl	80063e4 <__swsetup_r>
 8005d88:	b1c0      	cbz	r0, 8005dbc <_vfiprintf_r+0x78>
 8005d8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d8c:	07dc      	lsls	r4, r3, #31
 8005d8e:	d50e      	bpl.n	8005dae <_vfiprintf_r+0x6a>
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295
 8005d94:	b01d      	add	sp, #116	; 0x74
 8005d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9a:	4b7b      	ldr	r3, [pc, #492]	; (8005f88 <_vfiprintf_r+0x244>)
 8005d9c:	429d      	cmp	r5, r3
 8005d9e:	d101      	bne.n	8005da4 <_vfiprintf_r+0x60>
 8005da0:	68b5      	ldr	r5, [r6, #8]
 8005da2:	e7df      	b.n	8005d64 <_vfiprintf_r+0x20>
 8005da4:	4b79      	ldr	r3, [pc, #484]	; (8005f8c <_vfiprintf_r+0x248>)
 8005da6:	429d      	cmp	r5, r3
 8005da8:	bf08      	it	eq
 8005daa:	68f5      	ldreq	r5, [r6, #12]
 8005dac:	e7da      	b.n	8005d64 <_vfiprintf_r+0x20>
 8005dae:	89ab      	ldrh	r3, [r5, #12]
 8005db0:	0598      	lsls	r0, r3, #22
 8005db2:	d4ed      	bmi.n	8005d90 <_vfiprintf_r+0x4c>
 8005db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005db6:	f000 fd44 	bl	8006842 <__retarget_lock_release_recursive>
 8005dba:	e7e9      	b.n	8005d90 <_vfiprintf_r+0x4c>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dca:	2330      	movs	r3, #48	; 0x30
 8005dcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005f90 <_vfiprintf_r+0x24c>
 8005dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dd4:	f04f 0901 	mov.w	r9, #1
 8005dd8:	4623      	mov	r3, r4
 8005dda:	469a      	mov	sl, r3
 8005ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005de0:	b10a      	cbz	r2, 8005de6 <_vfiprintf_r+0xa2>
 8005de2:	2a25      	cmp	r2, #37	; 0x25
 8005de4:	d1f9      	bne.n	8005dda <_vfiprintf_r+0x96>
 8005de6:	ebba 0b04 	subs.w	fp, sl, r4
 8005dea:	d00b      	beq.n	8005e04 <_vfiprintf_r+0xc0>
 8005dec:	465b      	mov	r3, fp
 8005dee:	4622      	mov	r2, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	4630      	mov	r0, r6
 8005df4:	f7ff ff93 	bl	8005d1e <__sfputs_r>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f000 80aa 	beq.w	8005f52 <_vfiprintf_r+0x20e>
 8005dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e00:	445a      	add	r2, fp
 8005e02:	9209      	str	r2, [sp, #36]	; 0x24
 8005e04:	f89a 3000 	ldrb.w	r3, [sl]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 80a2 	beq.w	8005f52 <_vfiprintf_r+0x20e>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f04f 32ff 	mov.w	r2, #4294967295
 8005e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e18:	f10a 0a01 	add.w	sl, sl, #1
 8005e1c:	9304      	str	r3, [sp, #16]
 8005e1e:	9307      	str	r3, [sp, #28]
 8005e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e24:	931a      	str	r3, [sp, #104]	; 0x68
 8005e26:	4654      	mov	r4, sl
 8005e28:	2205      	movs	r2, #5
 8005e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e2e:	4858      	ldr	r0, [pc, #352]	; (8005f90 <_vfiprintf_r+0x24c>)
 8005e30:	f7fa f9d6 	bl	80001e0 <memchr>
 8005e34:	9a04      	ldr	r2, [sp, #16]
 8005e36:	b9d8      	cbnz	r0, 8005e70 <_vfiprintf_r+0x12c>
 8005e38:	06d1      	lsls	r1, r2, #27
 8005e3a:	bf44      	itt	mi
 8005e3c:	2320      	movmi	r3, #32
 8005e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e42:	0713      	lsls	r3, r2, #28
 8005e44:	bf44      	itt	mi
 8005e46:	232b      	movmi	r3, #43	; 0x2b
 8005e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e50:	2b2a      	cmp	r3, #42	; 0x2a
 8005e52:	d015      	beq.n	8005e80 <_vfiprintf_r+0x13c>
 8005e54:	9a07      	ldr	r2, [sp, #28]
 8005e56:	4654      	mov	r4, sl
 8005e58:	2000      	movs	r0, #0
 8005e5a:	f04f 0c0a 	mov.w	ip, #10
 8005e5e:	4621      	mov	r1, r4
 8005e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e64:	3b30      	subs	r3, #48	; 0x30
 8005e66:	2b09      	cmp	r3, #9
 8005e68:	d94e      	bls.n	8005f08 <_vfiprintf_r+0x1c4>
 8005e6a:	b1b0      	cbz	r0, 8005e9a <_vfiprintf_r+0x156>
 8005e6c:	9207      	str	r2, [sp, #28]
 8005e6e:	e014      	b.n	8005e9a <_vfiprintf_r+0x156>
 8005e70:	eba0 0308 	sub.w	r3, r0, r8
 8005e74:	fa09 f303 	lsl.w	r3, r9, r3
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	46a2      	mov	sl, r4
 8005e7e:	e7d2      	b.n	8005e26 <_vfiprintf_r+0xe2>
 8005e80:	9b03      	ldr	r3, [sp, #12]
 8005e82:	1d19      	adds	r1, r3, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	9103      	str	r1, [sp, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bfbb      	ittet	lt
 8005e8c:	425b      	neglt	r3, r3
 8005e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e92:	9307      	strge	r3, [sp, #28]
 8005e94:	9307      	strlt	r3, [sp, #28]
 8005e96:	bfb8      	it	lt
 8005e98:	9204      	strlt	r2, [sp, #16]
 8005e9a:	7823      	ldrb	r3, [r4, #0]
 8005e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e9e:	d10c      	bne.n	8005eba <_vfiprintf_r+0x176>
 8005ea0:	7863      	ldrb	r3, [r4, #1]
 8005ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea4:	d135      	bne.n	8005f12 <_vfiprintf_r+0x1ce>
 8005ea6:	9b03      	ldr	r3, [sp, #12]
 8005ea8:	1d1a      	adds	r2, r3, #4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	9203      	str	r2, [sp, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	bfb8      	it	lt
 8005eb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eb6:	3402      	adds	r4, #2
 8005eb8:	9305      	str	r3, [sp, #20]
 8005eba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fa0 <_vfiprintf_r+0x25c>
 8005ebe:	7821      	ldrb	r1, [r4, #0]
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	4650      	mov	r0, sl
 8005ec4:	f7fa f98c 	bl	80001e0 <memchr>
 8005ec8:	b140      	cbz	r0, 8005edc <_vfiprintf_r+0x198>
 8005eca:	2340      	movs	r3, #64	; 0x40
 8005ecc:	eba0 000a 	sub.w	r0, r0, sl
 8005ed0:	fa03 f000 	lsl.w	r0, r3, r0
 8005ed4:	9b04      	ldr	r3, [sp, #16]
 8005ed6:	4303      	orrs	r3, r0
 8005ed8:	3401      	adds	r4, #1
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee0:	482c      	ldr	r0, [pc, #176]	; (8005f94 <_vfiprintf_r+0x250>)
 8005ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ee6:	2206      	movs	r2, #6
 8005ee8:	f7fa f97a 	bl	80001e0 <memchr>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d03f      	beq.n	8005f70 <_vfiprintf_r+0x22c>
 8005ef0:	4b29      	ldr	r3, [pc, #164]	; (8005f98 <_vfiprintf_r+0x254>)
 8005ef2:	bb1b      	cbnz	r3, 8005f3c <_vfiprintf_r+0x1f8>
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	3307      	adds	r3, #7
 8005ef8:	f023 0307 	bic.w	r3, r3, #7
 8005efc:	3308      	adds	r3, #8
 8005efe:	9303      	str	r3, [sp, #12]
 8005f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f02:	443b      	add	r3, r7
 8005f04:	9309      	str	r3, [sp, #36]	; 0x24
 8005f06:	e767      	b.n	8005dd8 <_vfiprintf_r+0x94>
 8005f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	2001      	movs	r0, #1
 8005f10:	e7a5      	b.n	8005e5e <_vfiprintf_r+0x11a>
 8005f12:	2300      	movs	r3, #0
 8005f14:	3401      	adds	r4, #1
 8005f16:	9305      	str	r3, [sp, #20]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	f04f 0c0a 	mov.w	ip, #10
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f24:	3a30      	subs	r2, #48	; 0x30
 8005f26:	2a09      	cmp	r2, #9
 8005f28:	d903      	bls.n	8005f32 <_vfiprintf_r+0x1ee>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0c5      	beq.n	8005eba <_vfiprintf_r+0x176>
 8005f2e:	9105      	str	r1, [sp, #20]
 8005f30:	e7c3      	b.n	8005eba <_vfiprintf_r+0x176>
 8005f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f36:	4604      	mov	r4, r0
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e7f0      	b.n	8005f1e <_vfiprintf_r+0x1da>
 8005f3c:	ab03      	add	r3, sp, #12
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	462a      	mov	r2, r5
 8005f42:	4b16      	ldr	r3, [pc, #88]	; (8005f9c <_vfiprintf_r+0x258>)
 8005f44:	a904      	add	r1, sp, #16
 8005f46:	4630      	mov	r0, r6
 8005f48:	f3af 8000 	nop.w
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	1c78      	adds	r0, r7, #1
 8005f50:	d1d6      	bne.n	8005f00 <_vfiprintf_r+0x1bc>
 8005f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f54:	07d9      	lsls	r1, r3, #31
 8005f56:	d405      	bmi.n	8005f64 <_vfiprintf_r+0x220>
 8005f58:	89ab      	ldrh	r3, [r5, #12]
 8005f5a:	059a      	lsls	r2, r3, #22
 8005f5c:	d402      	bmi.n	8005f64 <_vfiprintf_r+0x220>
 8005f5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f60:	f000 fc6f 	bl	8006842 <__retarget_lock_release_recursive>
 8005f64:	89ab      	ldrh	r3, [r5, #12]
 8005f66:	065b      	lsls	r3, r3, #25
 8005f68:	f53f af12 	bmi.w	8005d90 <_vfiprintf_r+0x4c>
 8005f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f6e:	e711      	b.n	8005d94 <_vfiprintf_r+0x50>
 8005f70:	ab03      	add	r3, sp, #12
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	462a      	mov	r2, r5
 8005f76:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <_vfiprintf_r+0x258>)
 8005f78:	a904      	add	r1, sp, #16
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f000 f880 	bl	8006080 <_printf_i>
 8005f80:	e7e4      	b.n	8005f4c <_vfiprintf_r+0x208>
 8005f82:	bf00      	nop
 8005f84:	080070e0 	.word	0x080070e0
 8005f88:	08007100 	.word	0x08007100
 8005f8c:	080070c0 	.word	0x080070c0
 8005f90:	0800708c 	.word	0x0800708c
 8005f94:	08007096 	.word	0x08007096
 8005f98:	00000000 	.word	0x00000000
 8005f9c:	08005d1f 	.word	0x08005d1f
 8005fa0:	08007092 	.word	0x08007092

08005fa4 <_printf_common>:
 8005fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	4616      	mov	r6, r2
 8005faa:	4699      	mov	r9, r3
 8005fac:	688a      	ldr	r2, [r1, #8]
 8005fae:	690b      	ldr	r3, [r1, #16]
 8005fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	bfb8      	it	lt
 8005fb8:	4613      	movlt	r3, r2
 8005fba:	6033      	str	r3, [r6, #0]
 8005fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fc0:	4607      	mov	r7, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	b10a      	cbz	r2, 8005fca <_printf_common+0x26>
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	6033      	str	r3, [r6, #0]
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	0699      	lsls	r1, r3, #26
 8005fce:	bf42      	ittt	mi
 8005fd0:	6833      	ldrmi	r3, [r6, #0]
 8005fd2:	3302      	addmi	r3, #2
 8005fd4:	6033      	strmi	r3, [r6, #0]
 8005fd6:	6825      	ldr	r5, [r4, #0]
 8005fd8:	f015 0506 	ands.w	r5, r5, #6
 8005fdc:	d106      	bne.n	8005fec <_printf_common+0x48>
 8005fde:	f104 0a19 	add.w	sl, r4, #25
 8005fe2:	68e3      	ldr	r3, [r4, #12]
 8005fe4:	6832      	ldr	r2, [r6, #0]
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	42ab      	cmp	r3, r5
 8005fea:	dc26      	bgt.n	800603a <_printf_common+0x96>
 8005fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ff0:	1e13      	subs	r3, r2, #0
 8005ff2:	6822      	ldr	r2, [r4, #0]
 8005ff4:	bf18      	it	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	0692      	lsls	r2, r2, #26
 8005ffa:	d42b      	bmi.n	8006054 <_printf_common+0xb0>
 8005ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006000:	4649      	mov	r1, r9
 8006002:	4638      	mov	r0, r7
 8006004:	47c0      	blx	r8
 8006006:	3001      	adds	r0, #1
 8006008:	d01e      	beq.n	8006048 <_printf_common+0xa4>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	68e5      	ldr	r5, [r4, #12]
 800600e:	6832      	ldr	r2, [r6, #0]
 8006010:	f003 0306 	and.w	r3, r3, #6
 8006014:	2b04      	cmp	r3, #4
 8006016:	bf08      	it	eq
 8006018:	1aad      	subeq	r5, r5, r2
 800601a:	68a3      	ldr	r3, [r4, #8]
 800601c:	6922      	ldr	r2, [r4, #16]
 800601e:	bf0c      	ite	eq
 8006020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006024:	2500      	movne	r5, #0
 8006026:	4293      	cmp	r3, r2
 8006028:	bfc4      	itt	gt
 800602a:	1a9b      	subgt	r3, r3, r2
 800602c:	18ed      	addgt	r5, r5, r3
 800602e:	2600      	movs	r6, #0
 8006030:	341a      	adds	r4, #26
 8006032:	42b5      	cmp	r5, r6
 8006034:	d11a      	bne.n	800606c <_printf_common+0xc8>
 8006036:	2000      	movs	r0, #0
 8006038:	e008      	b.n	800604c <_printf_common+0xa8>
 800603a:	2301      	movs	r3, #1
 800603c:	4652      	mov	r2, sl
 800603e:	4649      	mov	r1, r9
 8006040:	4638      	mov	r0, r7
 8006042:	47c0      	blx	r8
 8006044:	3001      	adds	r0, #1
 8006046:	d103      	bne.n	8006050 <_printf_common+0xac>
 8006048:	f04f 30ff 	mov.w	r0, #4294967295
 800604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006050:	3501      	adds	r5, #1
 8006052:	e7c6      	b.n	8005fe2 <_printf_common+0x3e>
 8006054:	18e1      	adds	r1, r4, r3
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	2030      	movs	r0, #48	; 0x30
 800605a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800605e:	4422      	add	r2, r4
 8006060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006068:	3302      	adds	r3, #2
 800606a:	e7c7      	b.n	8005ffc <_printf_common+0x58>
 800606c:	2301      	movs	r3, #1
 800606e:	4622      	mov	r2, r4
 8006070:	4649      	mov	r1, r9
 8006072:	4638      	mov	r0, r7
 8006074:	47c0      	blx	r8
 8006076:	3001      	adds	r0, #1
 8006078:	d0e6      	beq.n	8006048 <_printf_common+0xa4>
 800607a:	3601      	adds	r6, #1
 800607c:	e7d9      	b.n	8006032 <_printf_common+0x8e>
	...

08006080 <_printf_i>:
 8006080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	460c      	mov	r4, r1
 8006086:	4691      	mov	r9, r2
 8006088:	7e27      	ldrb	r7, [r4, #24]
 800608a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800608c:	2f78      	cmp	r7, #120	; 0x78
 800608e:	4680      	mov	r8, r0
 8006090:	469a      	mov	sl, r3
 8006092:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006096:	d807      	bhi.n	80060a8 <_printf_i+0x28>
 8006098:	2f62      	cmp	r7, #98	; 0x62
 800609a:	d80a      	bhi.n	80060b2 <_printf_i+0x32>
 800609c:	2f00      	cmp	r7, #0
 800609e:	f000 80d8 	beq.w	8006252 <_printf_i+0x1d2>
 80060a2:	2f58      	cmp	r7, #88	; 0x58
 80060a4:	f000 80a3 	beq.w	80061ee <_printf_i+0x16e>
 80060a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060b0:	e03a      	b.n	8006128 <_printf_i+0xa8>
 80060b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060b6:	2b15      	cmp	r3, #21
 80060b8:	d8f6      	bhi.n	80060a8 <_printf_i+0x28>
 80060ba:	a001      	add	r0, pc, #4	; (adr r0, 80060c0 <_printf_i+0x40>)
 80060bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80060c0:	08006119 	.word	0x08006119
 80060c4:	0800612d 	.word	0x0800612d
 80060c8:	080060a9 	.word	0x080060a9
 80060cc:	080060a9 	.word	0x080060a9
 80060d0:	080060a9 	.word	0x080060a9
 80060d4:	080060a9 	.word	0x080060a9
 80060d8:	0800612d 	.word	0x0800612d
 80060dc:	080060a9 	.word	0x080060a9
 80060e0:	080060a9 	.word	0x080060a9
 80060e4:	080060a9 	.word	0x080060a9
 80060e8:	080060a9 	.word	0x080060a9
 80060ec:	08006239 	.word	0x08006239
 80060f0:	0800615d 	.word	0x0800615d
 80060f4:	0800621b 	.word	0x0800621b
 80060f8:	080060a9 	.word	0x080060a9
 80060fc:	080060a9 	.word	0x080060a9
 8006100:	0800625b 	.word	0x0800625b
 8006104:	080060a9 	.word	0x080060a9
 8006108:	0800615d 	.word	0x0800615d
 800610c:	080060a9 	.word	0x080060a9
 8006110:	080060a9 	.word	0x080060a9
 8006114:	08006223 	.word	0x08006223
 8006118:	680b      	ldr	r3, [r1, #0]
 800611a:	1d1a      	adds	r2, r3, #4
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	600a      	str	r2, [r1, #0]
 8006120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006128:	2301      	movs	r3, #1
 800612a:	e0a3      	b.n	8006274 <_printf_i+0x1f4>
 800612c:	6825      	ldr	r5, [r4, #0]
 800612e:	6808      	ldr	r0, [r1, #0]
 8006130:	062e      	lsls	r6, r5, #24
 8006132:	f100 0304 	add.w	r3, r0, #4
 8006136:	d50a      	bpl.n	800614e <_printf_i+0xce>
 8006138:	6805      	ldr	r5, [r0, #0]
 800613a:	600b      	str	r3, [r1, #0]
 800613c:	2d00      	cmp	r5, #0
 800613e:	da03      	bge.n	8006148 <_printf_i+0xc8>
 8006140:	232d      	movs	r3, #45	; 0x2d
 8006142:	426d      	negs	r5, r5
 8006144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006148:	485e      	ldr	r0, [pc, #376]	; (80062c4 <_printf_i+0x244>)
 800614a:	230a      	movs	r3, #10
 800614c:	e019      	b.n	8006182 <_printf_i+0x102>
 800614e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006152:	6805      	ldr	r5, [r0, #0]
 8006154:	600b      	str	r3, [r1, #0]
 8006156:	bf18      	it	ne
 8006158:	b22d      	sxthne	r5, r5
 800615a:	e7ef      	b.n	800613c <_printf_i+0xbc>
 800615c:	680b      	ldr	r3, [r1, #0]
 800615e:	6825      	ldr	r5, [r4, #0]
 8006160:	1d18      	adds	r0, r3, #4
 8006162:	6008      	str	r0, [r1, #0]
 8006164:	0628      	lsls	r0, r5, #24
 8006166:	d501      	bpl.n	800616c <_printf_i+0xec>
 8006168:	681d      	ldr	r5, [r3, #0]
 800616a:	e002      	b.n	8006172 <_printf_i+0xf2>
 800616c:	0669      	lsls	r1, r5, #25
 800616e:	d5fb      	bpl.n	8006168 <_printf_i+0xe8>
 8006170:	881d      	ldrh	r5, [r3, #0]
 8006172:	4854      	ldr	r0, [pc, #336]	; (80062c4 <_printf_i+0x244>)
 8006174:	2f6f      	cmp	r7, #111	; 0x6f
 8006176:	bf0c      	ite	eq
 8006178:	2308      	moveq	r3, #8
 800617a:	230a      	movne	r3, #10
 800617c:	2100      	movs	r1, #0
 800617e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006182:	6866      	ldr	r6, [r4, #4]
 8006184:	60a6      	str	r6, [r4, #8]
 8006186:	2e00      	cmp	r6, #0
 8006188:	bfa2      	ittt	ge
 800618a:	6821      	ldrge	r1, [r4, #0]
 800618c:	f021 0104 	bicge.w	r1, r1, #4
 8006190:	6021      	strge	r1, [r4, #0]
 8006192:	b90d      	cbnz	r5, 8006198 <_printf_i+0x118>
 8006194:	2e00      	cmp	r6, #0
 8006196:	d04d      	beq.n	8006234 <_printf_i+0x1b4>
 8006198:	4616      	mov	r6, r2
 800619a:	fbb5 f1f3 	udiv	r1, r5, r3
 800619e:	fb03 5711 	mls	r7, r3, r1, r5
 80061a2:	5dc7      	ldrb	r7, [r0, r7]
 80061a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061a8:	462f      	mov	r7, r5
 80061aa:	42bb      	cmp	r3, r7
 80061ac:	460d      	mov	r5, r1
 80061ae:	d9f4      	bls.n	800619a <_printf_i+0x11a>
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d10b      	bne.n	80061cc <_printf_i+0x14c>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	07df      	lsls	r7, r3, #31
 80061b8:	d508      	bpl.n	80061cc <_printf_i+0x14c>
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	6861      	ldr	r1, [r4, #4]
 80061be:	4299      	cmp	r1, r3
 80061c0:	bfde      	ittt	le
 80061c2:	2330      	movle	r3, #48	; 0x30
 80061c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061cc:	1b92      	subs	r2, r2, r6
 80061ce:	6122      	str	r2, [r4, #16]
 80061d0:	f8cd a000 	str.w	sl, [sp]
 80061d4:	464b      	mov	r3, r9
 80061d6:	aa03      	add	r2, sp, #12
 80061d8:	4621      	mov	r1, r4
 80061da:	4640      	mov	r0, r8
 80061dc:	f7ff fee2 	bl	8005fa4 <_printf_common>
 80061e0:	3001      	adds	r0, #1
 80061e2:	d14c      	bne.n	800627e <_printf_i+0x1fe>
 80061e4:	f04f 30ff 	mov.w	r0, #4294967295
 80061e8:	b004      	add	sp, #16
 80061ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ee:	4835      	ldr	r0, [pc, #212]	; (80062c4 <_printf_i+0x244>)
 80061f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	680e      	ldr	r6, [r1, #0]
 80061f8:	061f      	lsls	r7, r3, #24
 80061fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80061fe:	600e      	str	r6, [r1, #0]
 8006200:	d514      	bpl.n	800622c <_printf_i+0x1ac>
 8006202:	07d9      	lsls	r1, r3, #31
 8006204:	bf44      	itt	mi
 8006206:	f043 0320 	orrmi.w	r3, r3, #32
 800620a:	6023      	strmi	r3, [r4, #0]
 800620c:	b91d      	cbnz	r5, 8006216 <_printf_i+0x196>
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	f023 0320 	bic.w	r3, r3, #32
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	2310      	movs	r3, #16
 8006218:	e7b0      	b.n	800617c <_printf_i+0xfc>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	f043 0320 	orr.w	r3, r3, #32
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	2378      	movs	r3, #120	; 0x78
 8006224:	4828      	ldr	r0, [pc, #160]	; (80062c8 <_printf_i+0x248>)
 8006226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800622a:	e7e3      	b.n	80061f4 <_printf_i+0x174>
 800622c:	065e      	lsls	r6, r3, #25
 800622e:	bf48      	it	mi
 8006230:	b2ad      	uxthmi	r5, r5
 8006232:	e7e6      	b.n	8006202 <_printf_i+0x182>
 8006234:	4616      	mov	r6, r2
 8006236:	e7bb      	b.n	80061b0 <_printf_i+0x130>
 8006238:	680b      	ldr	r3, [r1, #0]
 800623a:	6826      	ldr	r6, [r4, #0]
 800623c:	6960      	ldr	r0, [r4, #20]
 800623e:	1d1d      	adds	r5, r3, #4
 8006240:	600d      	str	r5, [r1, #0]
 8006242:	0635      	lsls	r5, r6, #24
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	d501      	bpl.n	800624c <_printf_i+0x1cc>
 8006248:	6018      	str	r0, [r3, #0]
 800624a:	e002      	b.n	8006252 <_printf_i+0x1d2>
 800624c:	0671      	lsls	r1, r6, #25
 800624e:	d5fb      	bpl.n	8006248 <_printf_i+0x1c8>
 8006250:	8018      	strh	r0, [r3, #0]
 8006252:	2300      	movs	r3, #0
 8006254:	6123      	str	r3, [r4, #16]
 8006256:	4616      	mov	r6, r2
 8006258:	e7ba      	b.n	80061d0 <_printf_i+0x150>
 800625a:	680b      	ldr	r3, [r1, #0]
 800625c:	1d1a      	adds	r2, r3, #4
 800625e:	600a      	str	r2, [r1, #0]
 8006260:	681e      	ldr	r6, [r3, #0]
 8006262:	6862      	ldr	r2, [r4, #4]
 8006264:	2100      	movs	r1, #0
 8006266:	4630      	mov	r0, r6
 8006268:	f7f9 ffba 	bl	80001e0 <memchr>
 800626c:	b108      	cbz	r0, 8006272 <_printf_i+0x1f2>
 800626e:	1b80      	subs	r0, r0, r6
 8006270:	6060      	str	r0, [r4, #4]
 8006272:	6863      	ldr	r3, [r4, #4]
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	2300      	movs	r3, #0
 8006278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800627c:	e7a8      	b.n	80061d0 <_printf_i+0x150>
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	4632      	mov	r2, r6
 8006282:	4649      	mov	r1, r9
 8006284:	4640      	mov	r0, r8
 8006286:	47d0      	blx	sl
 8006288:	3001      	adds	r0, #1
 800628a:	d0ab      	beq.n	80061e4 <_printf_i+0x164>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	079b      	lsls	r3, r3, #30
 8006290:	d413      	bmi.n	80062ba <_printf_i+0x23a>
 8006292:	68e0      	ldr	r0, [r4, #12]
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	4298      	cmp	r0, r3
 8006298:	bfb8      	it	lt
 800629a:	4618      	movlt	r0, r3
 800629c:	e7a4      	b.n	80061e8 <_printf_i+0x168>
 800629e:	2301      	movs	r3, #1
 80062a0:	4632      	mov	r2, r6
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	47d0      	blx	sl
 80062a8:	3001      	adds	r0, #1
 80062aa:	d09b      	beq.n	80061e4 <_printf_i+0x164>
 80062ac:	3501      	adds	r5, #1
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	9903      	ldr	r1, [sp, #12]
 80062b2:	1a5b      	subs	r3, r3, r1
 80062b4:	42ab      	cmp	r3, r5
 80062b6:	dcf2      	bgt.n	800629e <_printf_i+0x21e>
 80062b8:	e7eb      	b.n	8006292 <_printf_i+0x212>
 80062ba:	2500      	movs	r5, #0
 80062bc:	f104 0619 	add.w	r6, r4, #25
 80062c0:	e7f5      	b.n	80062ae <_printf_i+0x22e>
 80062c2:	bf00      	nop
 80062c4:	0800709d 	.word	0x0800709d
 80062c8:	080070ae 	.word	0x080070ae
 80062cc:	00000000 	.word	0x00000000

080062d0 <nan>:
 80062d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80062d8 <nan+0x8>
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	00000000 	.word	0x00000000
 80062dc:	7ff80000 	.word	0x7ff80000

080062e0 <_sbrk_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d06      	ldr	r5, [pc, #24]	; (80062fc <_sbrk_r+0x1c>)
 80062e4:	2300      	movs	r3, #0
 80062e6:	4604      	mov	r4, r0
 80062e8:	4608      	mov	r0, r1
 80062ea:	602b      	str	r3, [r5, #0]
 80062ec:	f7fb f926 	bl	800153c <_sbrk>
 80062f0:	1c43      	adds	r3, r0, #1
 80062f2:	d102      	bne.n	80062fa <_sbrk_r+0x1a>
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	b103      	cbz	r3, 80062fa <_sbrk_r+0x1a>
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	200002cc 	.word	0x200002cc

08006300 <strncmp>:
 8006300:	b510      	push	{r4, lr}
 8006302:	b16a      	cbz	r2, 8006320 <strncmp+0x20>
 8006304:	3901      	subs	r1, #1
 8006306:	1884      	adds	r4, r0, r2
 8006308:	f810 3b01 	ldrb.w	r3, [r0], #1
 800630c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006310:	4293      	cmp	r3, r2
 8006312:	d103      	bne.n	800631c <strncmp+0x1c>
 8006314:	42a0      	cmp	r0, r4
 8006316:	d001      	beq.n	800631c <strncmp+0x1c>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1f5      	bne.n	8006308 <strncmp+0x8>
 800631c:	1a98      	subs	r0, r3, r2
 800631e:	bd10      	pop	{r4, pc}
 8006320:	4610      	mov	r0, r2
 8006322:	e7fc      	b.n	800631e <strncmp+0x1e>

08006324 <__swbuf_r>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	460e      	mov	r6, r1
 8006328:	4614      	mov	r4, r2
 800632a:	4605      	mov	r5, r0
 800632c:	b118      	cbz	r0, 8006336 <__swbuf_r+0x12>
 800632e:	6983      	ldr	r3, [r0, #24]
 8006330:	b90b      	cbnz	r3, 8006336 <__swbuf_r+0x12>
 8006332:	f000 f9e7 	bl	8006704 <__sinit>
 8006336:	4b21      	ldr	r3, [pc, #132]	; (80063bc <__swbuf_r+0x98>)
 8006338:	429c      	cmp	r4, r3
 800633a:	d12b      	bne.n	8006394 <__swbuf_r+0x70>
 800633c:	686c      	ldr	r4, [r5, #4]
 800633e:	69a3      	ldr	r3, [r4, #24]
 8006340:	60a3      	str	r3, [r4, #8]
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	071a      	lsls	r2, r3, #28
 8006346:	d52f      	bpl.n	80063a8 <__swbuf_r+0x84>
 8006348:	6923      	ldr	r3, [r4, #16]
 800634a:	b36b      	cbz	r3, 80063a8 <__swbuf_r+0x84>
 800634c:	6923      	ldr	r3, [r4, #16]
 800634e:	6820      	ldr	r0, [r4, #0]
 8006350:	1ac0      	subs	r0, r0, r3
 8006352:	6963      	ldr	r3, [r4, #20]
 8006354:	b2f6      	uxtb	r6, r6
 8006356:	4283      	cmp	r3, r0
 8006358:	4637      	mov	r7, r6
 800635a:	dc04      	bgt.n	8006366 <__swbuf_r+0x42>
 800635c:	4621      	mov	r1, r4
 800635e:	4628      	mov	r0, r5
 8006360:	f000 f93c 	bl	80065dc <_fflush_r>
 8006364:	bb30      	cbnz	r0, 80063b4 <__swbuf_r+0x90>
 8006366:	68a3      	ldr	r3, [r4, #8]
 8006368:	3b01      	subs	r3, #1
 800636a:	60a3      	str	r3, [r4, #8]
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	6022      	str	r2, [r4, #0]
 8006372:	701e      	strb	r6, [r3, #0]
 8006374:	6963      	ldr	r3, [r4, #20]
 8006376:	3001      	adds	r0, #1
 8006378:	4283      	cmp	r3, r0
 800637a:	d004      	beq.n	8006386 <__swbuf_r+0x62>
 800637c:	89a3      	ldrh	r3, [r4, #12]
 800637e:	07db      	lsls	r3, r3, #31
 8006380:	d506      	bpl.n	8006390 <__swbuf_r+0x6c>
 8006382:	2e0a      	cmp	r6, #10
 8006384:	d104      	bne.n	8006390 <__swbuf_r+0x6c>
 8006386:	4621      	mov	r1, r4
 8006388:	4628      	mov	r0, r5
 800638a:	f000 f927 	bl	80065dc <_fflush_r>
 800638e:	b988      	cbnz	r0, 80063b4 <__swbuf_r+0x90>
 8006390:	4638      	mov	r0, r7
 8006392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <__swbuf_r+0x9c>)
 8006396:	429c      	cmp	r4, r3
 8006398:	d101      	bne.n	800639e <__swbuf_r+0x7a>
 800639a:	68ac      	ldr	r4, [r5, #8]
 800639c:	e7cf      	b.n	800633e <__swbuf_r+0x1a>
 800639e:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <__swbuf_r+0xa0>)
 80063a0:	429c      	cmp	r4, r3
 80063a2:	bf08      	it	eq
 80063a4:	68ec      	ldreq	r4, [r5, #12]
 80063a6:	e7ca      	b.n	800633e <__swbuf_r+0x1a>
 80063a8:	4621      	mov	r1, r4
 80063aa:	4628      	mov	r0, r5
 80063ac:	f000 f81a 	bl	80063e4 <__swsetup_r>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d0cb      	beq.n	800634c <__swbuf_r+0x28>
 80063b4:	f04f 37ff 	mov.w	r7, #4294967295
 80063b8:	e7ea      	b.n	8006390 <__swbuf_r+0x6c>
 80063ba:	bf00      	nop
 80063bc:	080070e0 	.word	0x080070e0
 80063c0:	08007100 	.word	0x08007100
 80063c4:	080070c0 	.word	0x080070c0

080063c8 <__ascii_wctomb>:
 80063c8:	b149      	cbz	r1, 80063de <__ascii_wctomb+0x16>
 80063ca:	2aff      	cmp	r2, #255	; 0xff
 80063cc:	bf85      	ittet	hi
 80063ce:	238a      	movhi	r3, #138	; 0x8a
 80063d0:	6003      	strhi	r3, [r0, #0]
 80063d2:	700a      	strbls	r2, [r1, #0]
 80063d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80063d8:	bf98      	it	ls
 80063da:	2001      	movls	r0, #1
 80063dc:	4770      	bx	lr
 80063de:	4608      	mov	r0, r1
 80063e0:	4770      	bx	lr
	...

080063e4 <__swsetup_r>:
 80063e4:	4b32      	ldr	r3, [pc, #200]	; (80064b0 <__swsetup_r+0xcc>)
 80063e6:	b570      	push	{r4, r5, r6, lr}
 80063e8:	681d      	ldr	r5, [r3, #0]
 80063ea:	4606      	mov	r6, r0
 80063ec:	460c      	mov	r4, r1
 80063ee:	b125      	cbz	r5, 80063fa <__swsetup_r+0x16>
 80063f0:	69ab      	ldr	r3, [r5, #24]
 80063f2:	b913      	cbnz	r3, 80063fa <__swsetup_r+0x16>
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 f985 	bl	8006704 <__sinit>
 80063fa:	4b2e      	ldr	r3, [pc, #184]	; (80064b4 <__swsetup_r+0xd0>)
 80063fc:	429c      	cmp	r4, r3
 80063fe:	d10f      	bne.n	8006420 <__swsetup_r+0x3c>
 8006400:	686c      	ldr	r4, [r5, #4]
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006408:	0719      	lsls	r1, r3, #28
 800640a:	d42c      	bmi.n	8006466 <__swsetup_r+0x82>
 800640c:	06dd      	lsls	r5, r3, #27
 800640e:	d411      	bmi.n	8006434 <__swsetup_r+0x50>
 8006410:	2309      	movs	r3, #9
 8006412:	6033      	str	r3, [r6, #0]
 8006414:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006418:	81a3      	strh	r3, [r4, #12]
 800641a:	f04f 30ff 	mov.w	r0, #4294967295
 800641e:	e03e      	b.n	800649e <__swsetup_r+0xba>
 8006420:	4b25      	ldr	r3, [pc, #148]	; (80064b8 <__swsetup_r+0xd4>)
 8006422:	429c      	cmp	r4, r3
 8006424:	d101      	bne.n	800642a <__swsetup_r+0x46>
 8006426:	68ac      	ldr	r4, [r5, #8]
 8006428:	e7eb      	b.n	8006402 <__swsetup_r+0x1e>
 800642a:	4b24      	ldr	r3, [pc, #144]	; (80064bc <__swsetup_r+0xd8>)
 800642c:	429c      	cmp	r4, r3
 800642e:	bf08      	it	eq
 8006430:	68ec      	ldreq	r4, [r5, #12]
 8006432:	e7e6      	b.n	8006402 <__swsetup_r+0x1e>
 8006434:	0758      	lsls	r0, r3, #29
 8006436:	d512      	bpl.n	800645e <__swsetup_r+0x7a>
 8006438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800643a:	b141      	cbz	r1, 800644e <__swsetup_r+0x6a>
 800643c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006440:	4299      	cmp	r1, r3
 8006442:	d002      	beq.n	800644a <__swsetup_r+0x66>
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff fba9 	bl	8005b9c <_free_r>
 800644a:	2300      	movs	r3, #0
 800644c:	6363      	str	r3, [r4, #52]	; 0x34
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006454:	81a3      	strh	r3, [r4, #12]
 8006456:	2300      	movs	r3, #0
 8006458:	6063      	str	r3, [r4, #4]
 800645a:	6923      	ldr	r3, [r4, #16]
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	f043 0308 	orr.w	r3, r3, #8
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	6923      	ldr	r3, [r4, #16]
 8006468:	b94b      	cbnz	r3, 800647e <__swsetup_r+0x9a>
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006474:	d003      	beq.n	800647e <__swsetup_r+0x9a>
 8006476:	4621      	mov	r1, r4
 8006478:	4630      	mov	r0, r6
 800647a:	f000 fa07 	bl	800688c <__smakebuf_r>
 800647e:	89a0      	ldrh	r0, [r4, #12]
 8006480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006484:	f010 0301 	ands.w	r3, r0, #1
 8006488:	d00a      	beq.n	80064a0 <__swsetup_r+0xbc>
 800648a:	2300      	movs	r3, #0
 800648c:	60a3      	str	r3, [r4, #8]
 800648e:	6963      	ldr	r3, [r4, #20]
 8006490:	425b      	negs	r3, r3
 8006492:	61a3      	str	r3, [r4, #24]
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	b943      	cbnz	r3, 80064aa <__swsetup_r+0xc6>
 8006498:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800649c:	d1ba      	bne.n	8006414 <__swsetup_r+0x30>
 800649e:	bd70      	pop	{r4, r5, r6, pc}
 80064a0:	0781      	lsls	r1, r0, #30
 80064a2:	bf58      	it	pl
 80064a4:	6963      	ldrpl	r3, [r4, #20]
 80064a6:	60a3      	str	r3, [r4, #8]
 80064a8:	e7f4      	b.n	8006494 <__swsetup_r+0xb0>
 80064aa:	2000      	movs	r0, #0
 80064ac:	e7f7      	b.n	800649e <__swsetup_r+0xba>
 80064ae:	bf00      	nop
 80064b0:	2000000c 	.word	0x2000000c
 80064b4:	080070e0 	.word	0x080070e0
 80064b8:	08007100 	.word	0x08007100
 80064bc:	080070c0 	.word	0x080070c0

080064c0 <abort>:
 80064c0:	b508      	push	{r3, lr}
 80064c2:	2006      	movs	r0, #6
 80064c4:	f000 fa56 	bl	8006974 <raise>
 80064c8:	2001      	movs	r0, #1
 80064ca:	f7fa ffbf 	bl	800144c <_exit>
	...

080064d0 <__sflush_r>:
 80064d0:	898a      	ldrh	r2, [r1, #12]
 80064d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	4605      	mov	r5, r0
 80064d8:	0710      	lsls	r0, r2, #28
 80064da:	460c      	mov	r4, r1
 80064dc:	d458      	bmi.n	8006590 <__sflush_r+0xc0>
 80064de:	684b      	ldr	r3, [r1, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	dc05      	bgt.n	80064f0 <__sflush_r+0x20>
 80064e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	dc02      	bgt.n	80064f0 <__sflush_r+0x20>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	d0f9      	beq.n	80064ea <__sflush_r+0x1a>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064fc:	682f      	ldr	r7, [r5, #0]
 80064fe:	602b      	str	r3, [r5, #0]
 8006500:	d032      	beq.n	8006568 <__sflush_r+0x98>
 8006502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	075a      	lsls	r2, r3, #29
 8006508:	d505      	bpl.n	8006516 <__sflush_r+0x46>
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	1ac0      	subs	r0, r0, r3
 800650e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006510:	b10b      	cbz	r3, 8006516 <__sflush_r+0x46>
 8006512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006514:	1ac0      	subs	r0, r0, r3
 8006516:	2300      	movs	r3, #0
 8006518:	4602      	mov	r2, r0
 800651a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	4628      	mov	r0, r5
 8006520:	47b0      	blx	r6
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	d106      	bne.n	8006536 <__sflush_r+0x66>
 8006528:	6829      	ldr	r1, [r5, #0]
 800652a:	291d      	cmp	r1, #29
 800652c:	d82c      	bhi.n	8006588 <__sflush_r+0xb8>
 800652e:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <__sflush_r+0x108>)
 8006530:	40ca      	lsrs	r2, r1
 8006532:	07d6      	lsls	r6, r2, #31
 8006534:	d528      	bpl.n	8006588 <__sflush_r+0xb8>
 8006536:	2200      	movs	r2, #0
 8006538:	6062      	str	r2, [r4, #4]
 800653a:	04d9      	lsls	r1, r3, #19
 800653c:	6922      	ldr	r2, [r4, #16]
 800653e:	6022      	str	r2, [r4, #0]
 8006540:	d504      	bpl.n	800654c <__sflush_r+0x7c>
 8006542:	1c42      	adds	r2, r0, #1
 8006544:	d101      	bne.n	800654a <__sflush_r+0x7a>
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	b903      	cbnz	r3, 800654c <__sflush_r+0x7c>
 800654a:	6560      	str	r0, [r4, #84]	; 0x54
 800654c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800654e:	602f      	str	r7, [r5, #0]
 8006550:	2900      	cmp	r1, #0
 8006552:	d0ca      	beq.n	80064ea <__sflush_r+0x1a>
 8006554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006558:	4299      	cmp	r1, r3
 800655a:	d002      	beq.n	8006562 <__sflush_r+0x92>
 800655c:	4628      	mov	r0, r5
 800655e:	f7ff fb1d 	bl	8005b9c <_free_r>
 8006562:	2000      	movs	r0, #0
 8006564:	6360      	str	r0, [r4, #52]	; 0x34
 8006566:	e7c1      	b.n	80064ec <__sflush_r+0x1c>
 8006568:	6a21      	ldr	r1, [r4, #32]
 800656a:	2301      	movs	r3, #1
 800656c:	4628      	mov	r0, r5
 800656e:	47b0      	blx	r6
 8006570:	1c41      	adds	r1, r0, #1
 8006572:	d1c7      	bne.n	8006504 <__sflush_r+0x34>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0c4      	beq.n	8006504 <__sflush_r+0x34>
 800657a:	2b1d      	cmp	r3, #29
 800657c:	d001      	beq.n	8006582 <__sflush_r+0xb2>
 800657e:	2b16      	cmp	r3, #22
 8006580:	d101      	bne.n	8006586 <__sflush_r+0xb6>
 8006582:	602f      	str	r7, [r5, #0]
 8006584:	e7b1      	b.n	80064ea <__sflush_r+0x1a>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	e7ad      	b.n	80064ec <__sflush_r+0x1c>
 8006590:	690f      	ldr	r7, [r1, #16]
 8006592:	2f00      	cmp	r7, #0
 8006594:	d0a9      	beq.n	80064ea <__sflush_r+0x1a>
 8006596:	0793      	lsls	r3, r2, #30
 8006598:	680e      	ldr	r6, [r1, #0]
 800659a:	bf08      	it	eq
 800659c:	694b      	ldreq	r3, [r1, #20]
 800659e:	600f      	str	r7, [r1, #0]
 80065a0:	bf18      	it	ne
 80065a2:	2300      	movne	r3, #0
 80065a4:	eba6 0807 	sub.w	r8, r6, r7
 80065a8:	608b      	str	r3, [r1, #8]
 80065aa:	f1b8 0f00 	cmp.w	r8, #0
 80065ae:	dd9c      	ble.n	80064ea <__sflush_r+0x1a>
 80065b0:	6a21      	ldr	r1, [r4, #32]
 80065b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065b4:	4643      	mov	r3, r8
 80065b6:	463a      	mov	r2, r7
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b0      	blx	r6
 80065bc:	2800      	cmp	r0, #0
 80065be:	dc06      	bgt.n	80065ce <__sflush_r+0xfe>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c6:	81a3      	strh	r3, [r4, #12]
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	e78e      	b.n	80064ec <__sflush_r+0x1c>
 80065ce:	4407      	add	r7, r0
 80065d0:	eba8 0800 	sub.w	r8, r8, r0
 80065d4:	e7e9      	b.n	80065aa <__sflush_r+0xda>
 80065d6:	bf00      	nop
 80065d8:	20400001 	.word	0x20400001

080065dc <_fflush_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	690b      	ldr	r3, [r1, #16]
 80065e0:	4605      	mov	r5, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	b913      	cbnz	r3, 80065ec <_fflush_r+0x10>
 80065e6:	2500      	movs	r5, #0
 80065e8:	4628      	mov	r0, r5
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	b118      	cbz	r0, 80065f6 <_fflush_r+0x1a>
 80065ee:	6983      	ldr	r3, [r0, #24]
 80065f0:	b90b      	cbnz	r3, 80065f6 <_fflush_r+0x1a>
 80065f2:	f000 f887 	bl	8006704 <__sinit>
 80065f6:	4b14      	ldr	r3, [pc, #80]	; (8006648 <_fflush_r+0x6c>)
 80065f8:	429c      	cmp	r4, r3
 80065fa:	d11b      	bne.n	8006634 <_fflush_r+0x58>
 80065fc:	686c      	ldr	r4, [r5, #4]
 80065fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0ef      	beq.n	80065e6 <_fflush_r+0xa>
 8006606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006608:	07d0      	lsls	r0, r2, #31
 800660a:	d404      	bmi.n	8006616 <_fflush_r+0x3a>
 800660c:	0599      	lsls	r1, r3, #22
 800660e:	d402      	bmi.n	8006616 <_fflush_r+0x3a>
 8006610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006612:	f000 f915 	bl	8006840 <__retarget_lock_acquire_recursive>
 8006616:	4628      	mov	r0, r5
 8006618:	4621      	mov	r1, r4
 800661a:	f7ff ff59 	bl	80064d0 <__sflush_r>
 800661e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006620:	07da      	lsls	r2, r3, #31
 8006622:	4605      	mov	r5, r0
 8006624:	d4e0      	bmi.n	80065e8 <_fflush_r+0xc>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	059b      	lsls	r3, r3, #22
 800662a:	d4dd      	bmi.n	80065e8 <_fflush_r+0xc>
 800662c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662e:	f000 f908 	bl	8006842 <__retarget_lock_release_recursive>
 8006632:	e7d9      	b.n	80065e8 <_fflush_r+0xc>
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <_fflush_r+0x70>)
 8006636:	429c      	cmp	r4, r3
 8006638:	d101      	bne.n	800663e <_fflush_r+0x62>
 800663a:	68ac      	ldr	r4, [r5, #8]
 800663c:	e7df      	b.n	80065fe <_fflush_r+0x22>
 800663e:	4b04      	ldr	r3, [pc, #16]	; (8006650 <_fflush_r+0x74>)
 8006640:	429c      	cmp	r4, r3
 8006642:	bf08      	it	eq
 8006644:	68ec      	ldreq	r4, [r5, #12]
 8006646:	e7da      	b.n	80065fe <_fflush_r+0x22>
 8006648:	080070e0 	.word	0x080070e0
 800664c:	08007100 	.word	0x08007100
 8006650:	080070c0 	.word	0x080070c0

08006654 <std>:
 8006654:	2300      	movs	r3, #0
 8006656:	b510      	push	{r4, lr}
 8006658:	4604      	mov	r4, r0
 800665a:	e9c0 3300 	strd	r3, r3, [r0]
 800665e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006662:	6083      	str	r3, [r0, #8]
 8006664:	8181      	strh	r1, [r0, #12]
 8006666:	6643      	str	r3, [r0, #100]	; 0x64
 8006668:	81c2      	strh	r2, [r0, #14]
 800666a:	6183      	str	r3, [r0, #24]
 800666c:	4619      	mov	r1, r3
 800666e:	2208      	movs	r2, #8
 8006670:	305c      	adds	r0, #92	; 0x5c
 8006672:	f7fd fabb 	bl	8003bec <memset>
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <std+0x38>)
 8006678:	6263      	str	r3, [r4, #36]	; 0x24
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <std+0x3c>)
 800667c:	62a3      	str	r3, [r4, #40]	; 0x28
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <std+0x40>)
 8006680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <std+0x44>)
 8006684:	6224      	str	r4, [r4, #32]
 8006686:	6323      	str	r3, [r4, #48]	; 0x30
 8006688:	bd10      	pop	{r4, pc}
 800668a:	bf00      	nop
 800668c:	080069ad 	.word	0x080069ad
 8006690:	080069cf 	.word	0x080069cf
 8006694:	08006a07 	.word	0x08006a07
 8006698:	08006a2b 	.word	0x08006a2b

0800669c <_cleanup_r>:
 800669c:	4901      	ldr	r1, [pc, #4]	; (80066a4 <_cleanup_r+0x8>)
 800669e:	f000 b8af 	b.w	8006800 <_fwalk_reent>
 80066a2:	bf00      	nop
 80066a4:	080065dd 	.word	0x080065dd

080066a8 <__sfmoreglue>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	1e4a      	subs	r2, r1, #1
 80066ac:	2568      	movs	r5, #104	; 0x68
 80066ae:	4355      	muls	r5, r2
 80066b0:	460e      	mov	r6, r1
 80066b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066b6:	f7ff fac1 	bl	8005c3c <_malloc_r>
 80066ba:	4604      	mov	r4, r0
 80066bc:	b140      	cbz	r0, 80066d0 <__sfmoreglue+0x28>
 80066be:	2100      	movs	r1, #0
 80066c0:	e9c0 1600 	strd	r1, r6, [r0]
 80066c4:	300c      	adds	r0, #12
 80066c6:	60a0      	str	r0, [r4, #8]
 80066c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066cc:	f7fd fa8e 	bl	8003bec <memset>
 80066d0:	4620      	mov	r0, r4
 80066d2:	bd70      	pop	{r4, r5, r6, pc}

080066d4 <__sfp_lock_acquire>:
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__sfp_lock_acquire+0x8>)
 80066d6:	f000 b8b3 	b.w	8006840 <__retarget_lock_acquire_recursive>
 80066da:	bf00      	nop
 80066dc:	200002c8 	.word	0x200002c8

080066e0 <__sfp_lock_release>:
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <__sfp_lock_release+0x8>)
 80066e2:	f000 b8ae 	b.w	8006842 <__retarget_lock_release_recursive>
 80066e6:	bf00      	nop
 80066e8:	200002c8 	.word	0x200002c8

080066ec <__sinit_lock_acquire>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__sinit_lock_acquire+0x8>)
 80066ee:	f000 b8a7 	b.w	8006840 <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	200002c3 	.word	0x200002c3

080066f8 <__sinit_lock_release>:
 80066f8:	4801      	ldr	r0, [pc, #4]	; (8006700 <__sinit_lock_release+0x8>)
 80066fa:	f000 b8a2 	b.w	8006842 <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	200002c3 	.word	0x200002c3

08006704 <__sinit>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	f7ff fff0 	bl	80066ec <__sinit_lock_acquire>
 800670c:	69a3      	ldr	r3, [r4, #24]
 800670e:	b11b      	cbz	r3, 8006718 <__sinit+0x14>
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f7ff bff0 	b.w	80066f8 <__sinit_lock_release>
 8006718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800671c:	6523      	str	r3, [r4, #80]	; 0x50
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <__sinit+0x68>)
 8006720:	4a13      	ldr	r2, [pc, #76]	; (8006770 <__sinit+0x6c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	62a2      	str	r2, [r4, #40]	; 0x28
 8006726:	42a3      	cmp	r3, r4
 8006728:	bf04      	itt	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	61a3      	streq	r3, [r4, #24]
 800672e:	4620      	mov	r0, r4
 8006730:	f000 f820 	bl	8006774 <__sfp>
 8006734:	6060      	str	r0, [r4, #4]
 8006736:	4620      	mov	r0, r4
 8006738:	f000 f81c 	bl	8006774 <__sfp>
 800673c:	60a0      	str	r0, [r4, #8]
 800673e:	4620      	mov	r0, r4
 8006740:	f000 f818 	bl	8006774 <__sfp>
 8006744:	2200      	movs	r2, #0
 8006746:	60e0      	str	r0, [r4, #12]
 8006748:	2104      	movs	r1, #4
 800674a:	6860      	ldr	r0, [r4, #4]
 800674c:	f7ff ff82 	bl	8006654 <std>
 8006750:	68a0      	ldr	r0, [r4, #8]
 8006752:	2201      	movs	r2, #1
 8006754:	2109      	movs	r1, #9
 8006756:	f7ff ff7d 	bl	8006654 <std>
 800675a:	68e0      	ldr	r0, [r4, #12]
 800675c:	2202      	movs	r2, #2
 800675e:	2112      	movs	r1, #18
 8006760:	f7ff ff78 	bl	8006654 <std>
 8006764:	2301      	movs	r3, #1
 8006766:	61a3      	str	r3, [r4, #24]
 8006768:	e7d2      	b.n	8006710 <__sinit+0xc>
 800676a:	bf00      	nop
 800676c:	08006c88 	.word	0x08006c88
 8006770:	0800669d 	.word	0x0800669d

08006774 <__sfp>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	4607      	mov	r7, r0
 8006778:	f7ff ffac 	bl	80066d4 <__sfp_lock_acquire>
 800677c:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <__sfp+0x84>)
 800677e:	681e      	ldr	r6, [r3, #0]
 8006780:	69b3      	ldr	r3, [r6, #24]
 8006782:	b913      	cbnz	r3, 800678a <__sfp+0x16>
 8006784:	4630      	mov	r0, r6
 8006786:	f7ff ffbd 	bl	8006704 <__sinit>
 800678a:	3648      	adds	r6, #72	; 0x48
 800678c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006790:	3b01      	subs	r3, #1
 8006792:	d503      	bpl.n	800679c <__sfp+0x28>
 8006794:	6833      	ldr	r3, [r6, #0]
 8006796:	b30b      	cbz	r3, 80067dc <__sfp+0x68>
 8006798:	6836      	ldr	r6, [r6, #0]
 800679a:	e7f7      	b.n	800678c <__sfp+0x18>
 800679c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067a0:	b9d5      	cbnz	r5, 80067d8 <__sfp+0x64>
 80067a2:	4b16      	ldr	r3, [pc, #88]	; (80067fc <__sfp+0x88>)
 80067a4:	60e3      	str	r3, [r4, #12]
 80067a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067aa:	6665      	str	r5, [r4, #100]	; 0x64
 80067ac:	f000 f847 	bl	800683e <__retarget_lock_init_recursive>
 80067b0:	f7ff ff96 	bl	80066e0 <__sfp_lock_release>
 80067b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067bc:	6025      	str	r5, [r4, #0]
 80067be:	61a5      	str	r5, [r4, #24]
 80067c0:	2208      	movs	r2, #8
 80067c2:	4629      	mov	r1, r5
 80067c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067c8:	f7fd fa10 	bl	8003bec <memset>
 80067cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067d4:	4620      	mov	r0, r4
 80067d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d8:	3468      	adds	r4, #104	; 0x68
 80067da:	e7d9      	b.n	8006790 <__sfp+0x1c>
 80067dc:	2104      	movs	r1, #4
 80067de:	4638      	mov	r0, r7
 80067e0:	f7ff ff62 	bl	80066a8 <__sfmoreglue>
 80067e4:	4604      	mov	r4, r0
 80067e6:	6030      	str	r0, [r6, #0]
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d1d5      	bne.n	8006798 <__sfp+0x24>
 80067ec:	f7ff ff78 	bl	80066e0 <__sfp_lock_release>
 80067f0:	230c      	movs	r3, #12
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	e7ee      	b.n	80067d4 <__sfp+0x60>
 80067f6:	bf00      	nop
 80067f8:	08006c88 	.word	0x08006c88
 80067fc:	ffff0001 	.word	0xffff0001

08006800 <_fwalk_reent>:
 8006800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006804:	4606      	mov	r6, r0
 8006806:	4688      	mov	r8, r1
 8006808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800680c:	2700      	movs	r7, #0
 800680e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006812:	f1b9 0901 	subs.w	r9, r9, #1
 8006816:	d505      	bpl.n	8006824 <_fwalk_reent+0x24>
 8006818:	6824      	ldr	r4, [r4, #0]
 800681a:	2c00      	cmp	r4, #0
 800681c:	d1f7      	bne.n	800680e <_fwalk_reent+0xe>
 800681e:	4638      	mov	r0, r7
 8006820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006824:	89ab      	ldrh	r3, [r5, #12]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d907      	bls.n	800683a <_fwalk_reent+0x3a>
 800682a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800682e:	3301      	adds	r3, #1
 8006830:	d003      	beq.n	800683a <_fwalk_reent+0x3a>
 8006832:	4629      	mov	r1, r5
 8006834:	4630      	mov	r0, r6
 8006836:	47c0      	blx	r8
 8006838:	4307      	orrs	r7, r0
 800683a:	3568      	adds	r5, #104	; 0x68
 800683c:	e7e9      	b.n	8006812 <_fwalk_reent+0x12>

0800683e <__retarget_lock_init_recursive>:
 800683e:	4770      	bx	lr

08006840 <__retarget_lock_acquire_recursive>:
 8006840:	4770      	bx	lr

08006842 <__retarget_lock_release_recursive>:
 8006842:	4770      	bx	lr

08006844 <__swhatbuf_r>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	460e      	mov	r6, r1
 8006848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684c:	2900      	cmp	r1, #0
 800684e:	b096      	sub	sp, #88	; 0x58
 8006850:	4614      	mov	r4, r2
 8006852:	461d      	mov	r5, r3
 8006854:	da07      	bge.n	8006866 <__swhatbuf_r+0x22>
 8006856:	2300      	movs	r3, #0
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	89b3      	ldrh	r3, [r6, #12]
 800685c:	061a      	lsls	r2, r3, #24
 800685e:	d410      	bmi.n	8006882 <__swhatbuf_r+0x3e>
 8006860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006864:	e00e      	b.n	8006884 <__swhatbuf_r+0x40>
 8006866:	466a      	mov	r2, sp
 8006868:	f000 f906 	bl	8006a78 <_fstat_r>
 800686c:	2800      	cmp	r0, #0
 800686e:	dbf2      	blt.n	8006856 <__swhatbuf_r+0x12>
 8006870:	9a01      	ldr	r2, [sp, #4]
 8006872:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006876:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800687a:	425a      	negs	r2, r3
 800687c:	415a      	adcs	r2, r3
 800687e:	602a      	str	r2, [r5, #0]
 8006880:	e7ee      	b.n	8006860 <__swhatbuf_r+0x1c>
 8006882:	2340      	movs	r3, #64	; 0x40
 8006884:	2000      	movs	r0, #0
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	b016      	add	sp, #88	; 0x58
 800688a:	bd70      	pop	{r4, r5, r6, pc}

0800688c <__smakebuf_r>:
 800688c:	898b      	ldrh	r3, [r1, #12]
 800688e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006890:	079d      	lsls	r5, r3, #30
 8006892:	4606      	mov	r6, r0
 8006894:	460c      	mov	r4, r1
 8006896:	d507      	bpl.n	80068a8 <__smakebuf_r+0x1c>
 8006898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	6123      	str	r3, [r4, #16]
 80068a0:	2301      	movs	r3, #1
 80068a2:	6163      	str	r3, [r4, #20]
 80068a4:	b002      	add	sp, #8
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	ab01      	add	r3, sp, #4
 80068aa:	466a      	mov	r2, sp
 80068ac:	f7ff ffca 	bl	8006844 <__swhatbuf_r>
 80068b0:	9900      	ldr	r1, [sp, #0]
 80068b2:	4605      	mov	r5, r0
 80068b4:	4630      	mov	r0, r6
 80068b6:	f7ff f9c1 	bl	8005c3c <_malloc_r>
 80068ba:	b948      	cbnz	r0, 80068d0 <__smakebuf_r+0x44>
 80068bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c0:	059a      	lsls	r2, r3, #22
 80068c2:	d4ef      	bmi.n	80068a4 <__smakebuf_r+0x18>
 80068c4:	f023 0303 	bic.w	r3, r3, #3
 80068c8:	f043 0302 	orr.w	r3, r3, #2
 80068cc:	81a3      	strh	r3, [r4, #12]
 80068ce:	e7e3      	b.n	8006898 <__smakebuf_r+0xc>
 80068d0:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <__smakebuf_r+0x7c>)
 80068d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	6020      	str	r0, [r4, #0]
 80068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068dc:	81a3      	strh	r3, [r4, #12]
 80068de:	9b00      	ldr	r3, [sp, #0]
 80068e0:	6163      	str	r3, [r4, #20]
 80068e2:	9b01      	ldr	r3, [sp, #4]
 80068e4:	6120      	str	r0, [r4, #16]
 80068e6:	b15b      	cbz	r3, 8006900 <__smakebuf_r+0x74>
 80068e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ec:	4630      	mov	r0, r6
 80068ee:	f000 f8d5 	bl	8006a9c <_isatty_r>
 80068f2:	b128      	cbz	r0, 8006900 <__smakebuf_r+0x74>
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	81a3      	strh	r3, [r4, #12]
 8006900:	89a0      	ldrh	r0, [r4, #12]
 8006902:	4305      	orrs	r5, r0
 8006904:	81a5      	strh	r5, [r4, #12]
 8006906:	e7cd      	b.n	80068a4 <__smakebuf_r+0x18>
 8006908:	0800669d 	.word	0x0800669d

0800690c <__malloc_lock>:
 800690c:	4801      	ldr	r0, [pc, #4]	; (8006914 <__malloc_lock+0x8>)
 800690e:	f7ff bf97 	b.w	8006840 <__retarget_lock_acquire_recursive>
 8006912:	bf00      	nop
 8006914:	200002c4 	.word	0x200002c4

08006918 <__malloc_unlock>:
 8006918:	4801      	ldr	r0, [pc, #4]	; (8006920 <__malloc_unlock+0x8>)
 800691a:	f7ff bf92 	b.w	8006842 <__retarget_lock_release_recursive>
 800691e:	bf00      	nop
 8006920:	200002c4 	.word	0x200002c4

08006924 <_raise_r>:
 8006924:	291f      	cmp	r1, #31
 8006926:	b538      	push	{r3, r4, r5, lr}
 8006928:	4604      	mov	r4, r0
 800692a:	460d      	mov	r5, r1
 800692c:	d904      	bls.n	8006938 <_raise_r+0x14>
 800692e:	2316      	movs	r3, #22
 8006930:	6003      	str	r3, [r0, #0]
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800693a:	b112      	cbz	r2, 8006942 <_raise_r+0x1e>
 800693c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006940:	b94b      	cbnz	r3, 8006956 <_raise_r+0x32>
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f830 	bl	80069a8 <_getpid_r>
 8006948:	462a      	mov	r2, r5
 800694a:	4601      	mov	r1, r0
 800694c:	4620      	mov	r0, r4
 800694e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006952:	f000 b817 	b.w	8006984 <_kill_r>
 8006956:	2b01      	cmp	r3, #1
 8006958:	d00a      	beq.n	8006970 <_raise_r+0x4c>
 800695a:	1c59      	adds	r1, r3, #1
 800695c:	d103      	bne.n	8006966 <_raise_r+0x42>
 800695e:	2316      	movs	r3, #22
 8006960:	6003      	str	r3, [r0, #0]
 8006962:	2001      	movs	r0, #1
 8006964:	e7e7      	b.n	8006936 <_raise_r+0x12>
 8006966:	2400      	movs	r4, #0
 8006968:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800696c:	4628      	mov	r0, r5
 800696e:	4798      	blx	r3
 8006970:	2000      	movs	r0, #0
 8006972:	e7e0      	b.n	8006936 <_raise_r+0x12>

08006974 <raise>:
 8006974:	4b02      	ldr	r3, [pc, #8]	; (8006980 <raise+0xc>)
 8006976:	4601      	mov	r1, r0
 8006978:	6818      	ldr	r0, [r3, #0]
 800697a:	f7ff bfd3 	b.w	8006924 <_raise_r>
 800697e:	bf00      	nop
 8006980:	2000000c 	.word	0x2000000c

08006984 <_kill_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d07      	ldr	r5, [pc, #28]	; (80069a4 <_kill_r+0x20>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	4611      	mov	r1, r2
 8006990:	602b      	str	r3, [r5, #0]
 8006992:	f7fa fd4b 	bl	800142c <_kill>
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	d102      	bne.n	80069a0 <_kill_r+0x1c>
 800699a:	682b      	ldr	r3, [r5, #0]
 800699c:	b103      	cbz	r3, 80069a0 <_kill_r+0x1c>
 800699e:	6023      	str	r3, [r4, #0]
 80069a0:	bd38      	pop	{r3, r4, r5, pc}
 80069a2:	bf00      	nop
 80069a4:	200002cc 	.word	0x200002cc

080069a8 <_getpid_r>:
 80069a8:	f7fa bd38 	b.w	800141c <_getpid>

080069ac <__sread>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	460c      	mov	r4, r1
 80069b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b4:	f000 f894 	bl	8006ae0 <_read_r>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	bfab      	itete	ge
 80069bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069be:	89a3      	ldrhlt	r3, [r4, #12]
 80069c0:	181b      	addge	r3, r3, r0
 80069c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069c6:	bfac      	ite	ge
 80069c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80069ca:	81a3      	strhlt	r3, [r4, #12]
 80069cc:	bd10      	pop	{r4, pc}

080069ce <__swrite>:
 80069ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d2:	461f      	mov	r7, r3
 80069d4:	898b      	ldrh	r3, [r1, #12]
 80069d6:	05db      	lsls	r3, r3, #23
 80069d8:	4605      	mov	r5, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	4616      	mov	r6, r2
 80069de:	d505      	bpl.n	80069ec <__swrite+0x1e>
 80069e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e4:	2302      	movs	r3, #2
 80069e6:	2200      	movs	r2, #0
 80069e8:	f000 f868 	bl	8006abc <_lseek_r>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	4632      	mov	r2, r6
 80069fa:	463b      	mov	r3, r7
 80069fc:	4628      	mov	r0, r5
 80069fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a02:	f000 b817 	b.w	8006a34 <_write_r>

08006a06 <__sseek>:
 8006a06:	b510      	push	{r4, lr}
 8006a08:	460c      	mov	r4, r1
 8006a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0e:	f000 f855 	bl	8006abc <_lseek_r>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	bf15      	itete	ne
 8006a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a22:	81a3      	strheq	r3, [r4, #12]
 8006a24:	bf18      	it	ne
 8006a26:	81a3      	strhne	r3, [r4, #12]
 8006a28:	bd10      	pop	{r4, pc}

08006a2a <__sclose>:
 8006a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a2e:	f000 b813 	b.w	8006a58 <_close_r>
	...

08006a34 <_write_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d07      	ldr	r5, [pc, #28]	; (8006a54 <_write_r+0x20>)
 8006a38:	4604      	mov	r4, r0
 8006a3a:	4608      	mov	r0, r1
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	2200      	movs	r2, #0
 8006a40:	602a      	str	r2, [r5, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	f7fa fd29 	bl	800149a <_write>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d102      	bne.n	8006a52 <_write_r+0x1e>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	b103      	cbz	r3, 8006a52 <_write_r+0x1e>
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	200002cc 	.word	0x200002cc

08006a58 <_close_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4d06      	ldr	r5, [pc, #24]	; (8006a74 <_close_r+0x1c>)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	602b      	str	r3, [r5, #0]
 8006a64:	f7fa fd35 	bl	80014d2 <_close>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_close_r+0x1a>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_close_r+0x1a>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	200002cc 	.word	0x200002cc

08006a78 <_fstat_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d07      	ldr	r5, [pc, #28]	; (8006a98 <_fstat_r+0x20>)
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4604      	mov	r4, r0
 8006a80:	4608      	mov	r0, r1
 8006a82:	4611      	mov	r1, r2
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	f7fa fd30 	bl	80014ea <_fstat>
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	d102      	bne.n	8006a94 <_fstat_r+0x1c>
 8006a8e:	682b      	ldr	r3, [r5, #0]
 8006a90:	b103      	cbz	r3, 8006a94 <_fstat_r+0x1c>
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	bd38      	pop	{r3, r4, r5, pc}
 8006a96:	bf00      	nop
 8006a98:	200002cc 	.word	0x200002cc

08006a9c <_isatty_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4d06      	ldr	r5, [pc, #24]	; (8006ab8 <_isatty_r+0x1c>)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	602b      	str	r3, [r5, #0]
 8006aa8:	f7fa fd2f 	bl	800150a <_isatty>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_isatty_r+0x1a>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_isatty_r+0x1a>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	200002cc 	.word	0x200002cc

08006abc <_lseek_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d07      	ldr	r5, [pc, #28]	; (8006adc <_lseek_r+0x20>)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f7fa fd28 	bl	8001520 <_lseek>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_lseek_r+0x1e>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_lseek_r+0x1e>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	200002cc 	.word	0x200002cc

08006ae0 <_read_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d07      	ldr	r5, [pc, #28]	; (8006b00 <_read_r+0x20>)
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	4608      	mov	r0, r1
 8006ae8:	4611      	mov	r1, r2
 8006aea:	2200      	movs	r2, #0
 8006aec:	602a      	str	r2, [r5, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7fa fcb6 	bl	8001460 <_read>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_read_r+0x1e>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_read_r+0x1e>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	200002cc 	.word	0x200002cc

08006b04 <_init>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr

08006b10 <_fini>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	bf00      	nop
 8006b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b16:	bc08      	pop	{r3}
 8006b18:	469e      	mov	lr, r3
 8006b1a:	4770      	bx	lr
