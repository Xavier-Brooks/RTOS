
dummy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000958c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  08009720  08009720  00019720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f00  08009f00  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009f00  08009f00  00019f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f08  08009f08  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f08  08009f08  00019f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f0c  08009f0c  00019f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  200001e8  0800a0f4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800a0f4  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001773e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc2  00000000  00000000  00037952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0003a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  0003ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029794  00000000  00000000  0003cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014387  00000000  00000000  00066244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7bae  00000000  00000000  0007a5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172179  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de0  00000000  00000000  001721cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009704 	.word	0x08009704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009704 	.word	0x08009704

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a4 	b.w	8000f48 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f040 8083 	bne.w	8000d9a <__udivmoddi4+0x116>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4617      	mov	r7, r2
 8000c98:	d947      	bls.n	8000d2a <__udivmoddi4+0xa6>
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	b142      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000ca0:	f1c2 0020 	rsb	r0, r2, #32
 8000ca4:	fa24 f000 	lsr.w	r0, r4, r0
 8000ca8:	4091      	lsls	r1, r2
 8000caa:	4097      	lsls	r7, r2
 8000cac:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cb6:	0c23      	lsrs	r3, r4, #16
 8000cb8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cbc:	fa1f fe87 	uxth.w	lr, r7
 8000cc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x60>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cd6:	f080 8119 	bcs.w	8000f0c <__udivmoddi4+0x288>
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	f240 8116 	bls.w	8000f0c <__udivmoddi4+0x288>
 8000ce0:	3e02      	subs	r6, #2
 8000ce2:	443b      	add	r3, r7
 8000ce4:	1a5b      	subs	r3, r3, r1
 8000ce6:	b2a4      	uxth	r4, r4
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x8c>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d02:	f080 8105 	bcs.w	8000f10 <__udivmoddi4+0x28c>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	f240 8102 	bls.w	8000f10 <__udivmoddi4+0x28c>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	443c      	add	r4, r7
 8000d10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d14:	eba4 040e 	sub.w	r4, r4, lr
 8000d18:	2600      	movs	r6, #0
 8000d1a:	b11d      	cbz	r5, 8000d24 <__udivmoddi4+0xa0>
 8000d1c:	40d4      	lsrs	r4, r2
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e9c5 4300 	strd	r4, r3, [r5]
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xaa>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f282 	clz	r2, r2
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d150      	bne.n	8000dd8 <__udivmoddi4+0x154>
 8000d36:	1bcb      	subs	r3, r1, r7
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	fa1f f887 	uxth.w	r8, r7
 8000d40:	2601      	movs	r6, #1
 8000d42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d46:	0c21      	lsrs	r1, r4, #16
 8000d48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d50:	fb08 f30c 	mul.w	r3, r8, ip
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0xe4>
 8000d58:	1879      	adds	r1, r7, r1
 8000d5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0xe2>
 8000d60:	428b      	cmp	r3, r1
 8000d62:	f200 80e9 	bhi.w	8000f38 <__udivmoddi4+0x2b4>
 8000d66:	4684      	mov	ip, r0
 8000d68:	1ac9      	subs	r1, r1, r3
 8000d6a:	b2a3      	uxth	r3, r4
 8000d6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d78:	fb08 f800 	mul.w	r8, r8, r0
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	d907      	bls.n	8000d90 <__udivmoddi4+0x10c>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x10a>
 8000d88:	45a0      	cmp	r8, r4
 8000d8a:	f200 80d9 	bhi.w	8000f40 <__udivmoddi4+0x2bc>
 8000d8e:	4618      	mov	r0, r3
 8000d90:	eba4 0408 	sub.w	r4, r4, r8
 8000d94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d98:	e7bf      	b.n	8000d1a <__udivmoddi4+0x96>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x12e>
 8000d9e:	2d00      	cmp	r5, #0
 8000da0:	f000 80b1 	beq.w	8000f06 <__udivmoddi4+0x282>
 8000da4:	2600      	movs	r6, #0
 8000da6:	e9c5 0100 	strd	r0, r1, [r5]
 8000daa:	4630      	mov	r0, r6
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	fab3 f683 	clz	r6, r3
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d14a      	bne.n	8000e50 <__udivmoddi4+0x1cc>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0x140>
 8000dbe:	4282      	cmp	r2, r0
 8000dc0:	f200 80b8 	bhi.w	8000f34 <__udivmoddi4+0x2b0>
 8000dc4:	1a84      	subs	r4, r0, r2
 8000dc6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	468c      	mov	ip, r1
 8000dce:	2d00      	cmp	r5, #0
 8000dd0:	d0a8      	beq.n	8000d24 <__udivmoddi4+0xa0>
 8000dd2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f603 	lsr.w	r6, r0, r3
 8000de0:	4097      	lsls	r7, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dea:	40d9      	lsrs	r1, r3
 8000dec:	4330      	orrs	r0, r6
 8000dee:	0c03      	lsrs	r3, r0, #16
 8000df0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df4:	fa1f f887 	uxth.w	r8, r7
 8000df8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e00:	fb06 f108 	mul.w	r1, r6, r8
 8000e04:	4299      	cmp	r1, r3
 8000e06:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x19c>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e12:	f080 808d 	bcs.w	8000f30 <__udivmoddi4+0x2ac>
 8000e16:	4299      	cmp	r1, r3
 8000e18:	f240 808a 	bls.w	8000f30 <__udivmoddi4+0x2ac>
 8000e1c:	3e02      	subs	r6, #2
 8000e1e:	443b      	add	r3, r7
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b281      	uxth	r1, r0
 8000e24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb00 f308 	mul.w	r3, r0, r8
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0x1c4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3e:	d273      	bcs.n	8000f28 <__udivmoddi4+0x2a4>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d971      	bls.n	8000f28 <__udivmoddi4+0x2a4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4439      	add	r1, r7
 8000e48:	1acb      	subs	r3, r1, r3
 8000e4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e4e:	e778      	b.n	8000d42 <__udivmoddi4+0xbe>
 8000e50:	f1c6 0c20 	rsb	ip, r6, #32
 8000e54:	fa03 f406 	lsl.w	r4, r3, r6
 8000e58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e5c:	431c      	orrs	r4, r3
 8000e5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e62:	fa01 f306 	lsl.w	r3, r1, r6
 8000e66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	0c3b      	lsrs	r3, r7, #16
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fa1f f884 	uxth.w	r8, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e82:	fb09 fa08 	mul.w	sl, r9, r8
 8000e86:	458a      	cmp	sl, r1
 8000e88:	fa02 f206 	lsl.w	r2, r2, r6
 8000e8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x220>
 8000e92:	1861      	adds	r1, r4, r1
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	d248      	bcs.n	8000f2c <__udivmoddi4+0x2a8>
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	d946      	bls.n	8000f2c <__udivmoddi4+0x2a8>
 8000e9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea2:	4421      	add	r1, r4
 8000ea4:	eba1 010a 	sub.w	r1, r1, sl
 8000ea8:	b2bf      	uxth	r7, r7
 8000eaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eb6:	fb00 f808 	mul.w	r8, r0, r8
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x24a>
 8000ebe:	19e7      	adds	r7, r4, r7
 8000ec0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec4:	d22e      	bcs.n	8000f24 <__udivmoddi4+0x2a0>
 8000ec6:	45b8      	cmp	r8, r7
 8000ec8:	d92c      	bls.n	8000f24 <__udivmoddi4+0x2a0>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4427      	add	r7, r4
 8000ece:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed2:	eba7 0708 	sub.w	r7, r7, r8
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	454f      	cmp	r7, r9
 8000edc:	46c6      	mov	lr, r8
 8000ede:	4649      	mov	r1, r9
 8000ee0:	d31a      	bcc.n	8000f18 <__udivmoddi4+0x294>
 8000ee2:	d017      	beq.n	8000f14 <__udivmoddi4+0x290>
 8000ee4:	b15d      	cbz	r5, 8000efe <__udivmoddi4+0x27a>
 8000ee6:	ebb3 020e 	subs.w	r2, r3, lr
 8000eea:	eb67 0701 	sbc.w	r7, r7, r1
 8000eee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef2:	40f2      	lsrs	r2, r6
 8000ef4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ef8:	40f7      	lsrs	r7, r6
 8000efa:	e9c5 2700 	strd	r2, r7, [r5]
 8000efe:	2600      	movs	r6, #0
 8000f00:	4631      	mov	r1, r6
 8000f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f06:	462e      	mov	r6, r5
 8000f08:	4628      	mov	r0, r5
 8000f0a:	e70b      	b.n	8000d24 <__udivmoddi4+0xa0>
 8000f0c:	4606      	mov	r6, r0
 8000f0e:	e6e9      	b.n	8000ce4 <__udivmoddi4+0x60>
 8000f10:	4618      	mov	r0, r3
 8000f12:	e6fd      	b.n	8000d10 <__udivmoddi4+0x8c>
 8000f14:	4543      	cmp	r3, r8
 8000f16:	d2e5      	bcs.n	8000ee4 <__udivmoddi4+0x260>
 8000f18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f20:	3801      	subs	r0, #1
 8000f22:	e7df      	b.n	8000ee4 <__udivmoddi4+0x260>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e7d2      	b.n	8000ece <__udivmoddi4+0x24a>
 8000f28:	4660      	mov	r0, ip
 8000f2a:	e78d      	b.n	8000e48 <__udivmoddi4+0x1c4>
 8000f2c:	4681      	mov	r9, r0
 8000f2e:	e7b9      	b.n	8000ea4 <__udivmoddi4+0x220>
 8000f30:	4666      	mov	r6, ip
 8000f32:	e775      	b.n	8000e20 <__udivmoddi4+0x19c>
 8000f34:	4630      	mov	r0, r6
 8000f36:	e74a      	b.n	8000dce <__udivmoddi4+0x14a>
 8000f38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f3c:	4439      	add	r1, r7
 8000f3e:	e713      	b.n	8000d68 <__udivmoddi4+0xe4>
 8000f40:	3802      	subs	r0, #2
 8000f42:	443c      	add	r4, r7
 8000f44:	e724      	b.n	8000d90 <__udivmoddi4+0x10c>
 8000f46:	bf00      	nop

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <startup>:

/*
 * Simple function that prints a guide to Putty upon startup
 * RET: nothing
 * */
void startup(UART_HandleTypeDef uart){
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	b590      	push	{r4, r7, lr}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	f107 0418 	add.w	r4, r7, #24
 8000f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char *msg = "Welcome: Type freq min max\r\nType - type of wave S(sine) T(triangle) R(Rectangle)\r\n";
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <startup+0x50>)
 8000f5e:	607b      	str	r3, [r7, #4]
	char *msg2 = "freq - frequency of the wave (10Hz - 100kHz)\r\nmin - minimum voltage allowed(0V limit)\r\nmax - maximum voltage allowed(3.3V limit)\r\nMax Must Be Greater Than Min\r\n";
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <startup+0x54>)
 8000f62:	603b      	str	r3, [r7, #0]
	USART_Write(uart.Instance, (uint8_t *)msg, strlen(msg));
 8000f64:	69bc      	ldr	r4, [r7, #24]
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff f932 	bl	80001d0 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4620      	mov	r0, r4
 8000f74:	f000 fd5d 	bl	8001a32 <USART_Write>
	USART_Write(uart.Instance, (uint8_t *)msg2, strlen(msg2));
 8000f78:	69bc      	ldr	r4, [r7, #24]
 8000f7a:	6838      	ldr	r0, [r7, #0]
 8000f7c:	f7ff f928 	bl	80001d0 <strlen>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	6839      	ldr	r1, [r7, #0]
 8000f86:	4620      	mov	r0, r4
 8000f88:	f000 fd53 	bl	8001a32 <USART_Write>
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f96:	b004      	add	sp, #16
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	08009720 	.word	0x08009720
 8000fa0:	08009774 	.word	0x08009774

08000fa4 <get_cmd>:
 * 	size - the size of the buffer being written too
 *
 * RETURN
 * 	1 if the settings are valid, 0 otherwise
 * */
void get_cmd(UART_HandleTypeDef uart, char* buffer){
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	f107 0c10 	add.w	ip, r7, #16
 8000fb0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//prints a prompt for the user to type the wave settings
	USART_Write(uart.Instance, (uint8_t *)"Wave Settings: ", strlen("Wave Settings: "));
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	220f      	movs	r2, #15
 8000fb8:	4915      	ldr	r1, [pc, #84]	; (8001010 <get_cmd+0x6c>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fd39 	bl	8001a32 <USART_Write>
	//enters while loop as user types
	while(1){
		char ch = USART_Read(uart.Instance); //gets characters from user
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fd20 	bl	8001a08 <USART_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
		if(ch == '\r' || ch == '\n'){ //if enter is pressed
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b0d      	cmp	r3, #13
 8000fd0:	d002      	beq.n	8000fd8 <get_cmd+0x34>
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b0a      	cmp	r3, #10
 8000fd6:	d106      	bne.n	8000fe6 <get_cmd+0x42>
				USART_Write(uart.Instance, (uint8_t *)"\r\n", strlen("\r\n"));
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	2202      	movs	r2, #2
 8000fdc:	490d      	ldr	r1, [pc, #52]	; (8001014 <get_cmd+0x70>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fd27 	bl	8001a32 <USART_Write>
				return;
 8000fe4:	e00d      	b.n	8001002 <get_cmd+0x5e>
		}
		USART_Write(uart.Instance, (uint8_t *)&ch, 1); //prints character as user types
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1df9      	adds	r1, r7, #7
 8000fea:	2201      	movs	r2, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fd20 	bl	8001a32 <USART_Write>
		strncat(buffer, &ch, 1); //adds the last pressed key to the instruction string
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8000ffc:	f004 fafd 	bl	80055fa <strncat>
	while(1){
 8001000:	e7de      	b.n	8000fc0 <get_cmd+0x1c>
	}
}
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800100a:	b004      	add	sp, #16
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	08009818 	.word	0x08009818
 8001014:	08009828 	.word	0x08009828

08001018 <parse>:

void parse(char* str, char* types, int* frequency, double* minimum, double* maximum){
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
	char* tok = strtok(str, " ");
 8001026:	4914      	ldr	r1, [pc, #80]	; (8001078 <parse+0x60>)
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f005 f92b 	bl	8006284 <strtok>
 800102e:	6138      	str	r0, [r7, #16]
	*types = (char)(*tok);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= 2; i++){
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e00f      	b.n	800105e <parse+0x46>
		tok = strtok(NULL, " "); //pull the next parameter
 800103e:	490e      	ldr	r1, [pc, #56]	; (8001078 <parse+0x60>)
 8001040:	2000      	movs	r0, #0
 8001042:	f005 f91f 	bl	8006284 <strtok>
 8001046:	6138      	str	r0, [r7, #16]
		assign(tok, i, frequency, minimum, maximum);
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6979      	ldr	r1, [r7, #20]
 8001052:	6938      	ldr	r0, [r7, #16]
 8001054:	f000 f812 	bl	800107c <assign>
	for(int i = 0; i <= 2; i++){
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2b02      	cmp	r3, #2
 8001062:	ddec      	ble.n	800103e <parse+0x26>
	}
	memset(str, '\0', BUFFER_SETTING_SIZE); //clears the buffer for the next waveform settings
 8001064:	2214      	movs	r2, #20
 8001066:	2100      	movs	r1, #0
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f004 fab1 	bl	80055d0 <memset>
	return;
 800106e:	bf00      	nop
}
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	0800982c 	.word	0x0800982c

0800107c <assign>:

void assign(char* str, int c, int* frequency, double* minimum, double* maximum){
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
	switch (c){
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d01b      	beq.n	80010c8 <assign+0x4c>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b02      	cmp	r3, #2
 8001094:	dc24      	bgt.n	80010e0 <assign+0x64>
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <assign+0x28>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d007      	beq.n	80010b2 <assign+0x36>
			break;
		case 2:
			*maximum = (double)atof(str);
			break;
		default:
			return;
 80010a2:	e01d      	b.n	80010e0 <assign+0x64>
			*frequency = atoi(str);
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f004 fa57 	bl	8005558 <atoi>
 80010aa:	4602      	mov	r2, r0
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	601a      	str	r2, [r3, #0]
			break;
 80010b0:	e015      	b.n	80010de <assign+0x62>
			*minimum = (double)atof(str);
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f004 fa4d 	bl	8005552 <atof>
 80010b8:	eeb0 7a40 	vmov.f32	s14, s0
 80010bc:	eef0 7a60 	vmov.f32	s15, s1
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	ed83 7b00 	vstr	d7, [r3]
			break;
 80010c6:	e00a      	b.n	80010de <assign+0x62>
			*maximum = (double)atof(str);
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f004 fa42 	bl	8005552 <atof>
 80010ce:	eeb0 7a40 	vmov.f32	s14, s0
 80010d2:	eef0 7a60 	vmov.f32	s15, s1
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	ed83 7b00 	vstr	d7, [r3]
			break;
 80010dc:	bf00      	nop
	}
	return;
 80010de:	e000      	b.n	80010e2 <assign+0x66>
			return;
 80010e0:	bf00      	nop
}
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <check_input>:

/* USER CODE BEGIN 0 */
/*
 * Verifies the user requested an acceptable signal
 * */
int check_input(){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	int flag = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
	if(!strchr("rstRST", type)){
 80010f2:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <check_input+0xc0>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	482c      	ldr	r0, [pc, #176]	; (80011ac <check_input+0xc4>)
 80010fa:	f004 fa71 	bl	80055e0 <strchr>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <check_input+0x20>
		flag = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
	}
	if( (frequency < 10) || (frequency > 100000)){
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <check_input+0xc8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b09      	cmp	r3, #9
 800110e:	dd04      	ble.n	800111a <check_input+0x32>
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <check_input+0xc8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <check_input+0xcc>)
 8001116:	4293      	cmp	r3, r2
 8001118:	dd01      	ble.n	800111e <check_input+0x36>
		flag = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
	}
	if((min < 0.0) || (min >= max) || (min >= 3.3)){
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <check_input+0xd0>)
 8001120:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f7ff fcd6 	bl	8000adc <__aeabi_dcmplt>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d115      	bne.n	8001162 <check_input+0x7a>
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <check_input+0xd0>)
 8001138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <check_input+0xd4>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fcdf 	bl	8000b04 <__aeabi_dcmpge>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10a      	bne.n	8001162 <check_input+0x7a>
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <check_input+0xd0>)
 800114e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001152:	a313      	add	r3, pc, #76	; (adr r3, 80011a0 <check_input+0xb8>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fcd4 	bl	8000b04 <__aeabi_dcmpge>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <check_input+0x7e>
		flag = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
	}
	if((max > 3.3) || (max <= min)){
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <check_input+0xd4>)
 8001168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800116c:	a30c      	add	r3, pc, #48	; (adr r3, 80011a0 <check_input+0xb8>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fcd1 	bl	8000b18 <__aeabi_dcmpgt>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10a      	bne.n	8001192 <check_input+0xaa>
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <check_input+0xd4>)
 800117e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <check_input+0xd0>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fcb2 	bl	8000af0 <__aeabi_dcmple>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <check_input+0xae>
		flag = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
	}
	return flag;
 8001196:	687b      	ldr	r3, [r7, #4]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	66666666 	.word	0x66666666
 80011a4:	400a6666 	.word	0x400a6666
 80011a8:	200003b4 	.word	0x200003b4
 80011ac:	08009830 	.word	0x08009830
 80011b0:	200003b0 	.word	0x200003b0
 80011b4:	000186a0 	.word	0x000186a0
 80011b8:	20000440 	.word	0x20000440
 80011bc:	20000208 	.word	0x20000208

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b0a1      	sub	sp, #132	; 0x84
 80011c4:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE BEGIN 1 */
  for(int i = 0; i < 50; i++){
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	e007      	b.n	80011dc <main+0x1c>
	  data[i] = i;
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4948      	ldr	r1, [pc, #288]	; (80012f0 <main+0x130>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 50; i++){
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3301      	adds	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b31      	cmp	r3, #49	; 0x31
 80011e0:	ddf4      	ble.n	80011cc <main+0xc>
  }

  for(int i = 50; i < WAVE_BUFFER_SIZE; i++){
 80011e2:	2332      	movs	r3, #50	; 0x32
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	e00a      	b.n	80011fe <main+0x3e>
	  data[i] = WAVE_BUFFER_SIZE - i;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80011ee:	4619      	mov	r1, r3
 80011f0:	4a3f      	ldr	r2, [pc, #252]	; (80012f0 <main+0x130>)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 50; i < WAVE_BUFFER_SIZE; i++){
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2b63      	cmp	r3, #99	; 0x63
 8001202:	ddf1      	ble.n	80011e8 <main+0x28>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f000 fe6f 	bl	8001ee6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f88a 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f000 f9a6 	bl	800155c <MX_GPIO_Init>
  MX_DMA_Init();
 8001210:	f000 f986 	bl	8001520 <MX_DMA_Init>
  MX_DAC1_Init();
 8001214:	f000 f8d6 	bl	80013c4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001218:	f000 f906 	bl	8001428 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800121c:	f000 f950 	bl	80014c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, data, WAVE_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001220:	2300      	movs	r3, #0
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <main+0x130>)
 8001228:	2100      	movs	r1, #0
 800122a:	4832      	ldr	r0, [pc, #200]	; (80012f4 <main+0x134>)
 800122c:	f001 f828 	bl	8002280 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8001230:	4831      	ldr	r0, [pc, #196]	; (80012f8 <main+0x138>)
 8001232:	f003 fa3d 	bl	80046b0 <HAL_TIM_Base_Start>
  startup(huart2);
 8001236:	4c31      	ldr	r4, [pc, #196]	; (80012fc <main+0x13c>)
 8001238:	4668      	mov	r0, sp
 800123a:	f104 0310 	add.w	r3, r4, #16
 800123e:	2274      	movs	r2, #116	; 0x74
 8001240:	4619      	mov	r1, r3
 8001242:	f004 f9b7 	bl	80055b4 <memcpy>
 8001246:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800124a:	f7ff fe7f 	bl	8000f4c <startup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	get_cmd(huart2, buffer);
 800124e:	4c2b      	ldr	r4, [pc, #172]	; (80012fc <main+0x13c>)
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <main+0x140>)
 8001252:	931d      	str	r3, [sp, #116]	; 0x74
 8001254:	4668      	mov	r0, sp
 8001256:	f104 0310 	add.w	r3, r4, #16
 800125a:	2274      	movs	r2, #116	; 0x74
 800125c:	4619      	mov	r1, r3
 800125e:	f004 f9a9 	bl	80055b4 <memcpy>
 8001262:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001266:	f7ff fe9d 	bl	8000fa4 <get_cmd>
	parse(buffer, &type, &frequency, &min, &max);
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <main+0x144>)
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <main+0x148>)
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <main+0x14c>)
 8001272:	4927      	ldr	r1, [pc, #156]	; (8001310 <main+0x150>)
 8001274:	4822      	ldr	r0, [pc, #136]	; (8001300 <main+0x140>)
 8001276:	f7ff fecf 	bl	8001018 <parse>
	if(!check_input()){ //checks for valid input
 800127a:	f7ff ff35 	bl	80010e8 <check_input>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d107      	bne.n	8001294 <main+0xd4>
		USART_Write(huart2.Instance, (uint8_t *) "Invalid Input\r\n", strlen("Invalid Input\r\n"));
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <main+0x13c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	220f      	movs	r2, #15
 800128a:	4922      	ldr	r1, [pc, #136]	; (8001314 <main+0x154>)
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fbd0 	bl	8001a32 <USART_Write>
		continue;
 8001292:	e02c      	b.n	80012ee <main+0x12e>
	}
	dc2analog(min, max, &analog_min, &analog_max); //calculates the number of samples and the min/max values for the dac to produce the proper min/max voltages
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <main+0x148>)
 8001296:	ed93 7b00 	vldr	d7, [r3]
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <main+0x144>)
 800129c:	ed93 6b00 	vldr	d6, [r3]
 80012a0:	491d      	ldr	r1, [pc, #116]	; (8001318 <main+0x158>)
 80012a2:	481e      	ldr	r0, [pc, #120]	; (800131c <main+0x15c>)
 80012a4:	eeb0 1a46 	vmov.f32	s2, s12
 80012a8:	eef0 1a66 	vmov.f32	s3, s13
 80012ac:	eeb0 0a47 	vmov.f32	s0, s14
 80012b0:	eef0 0a67 	vmov.f32	s1, s15
 80012b4:	f000 fbf0 	bl	8001a98 <dc2analog>
	update_timer(&htim2, &hdac1, frequency);
 80012b8:	4b14      	ldr	r3, [pc, #80]	; (800130c <main+0x14c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	490d      	ldr	r1, [pc, #52]	; (80012f4 <main+0x134>)
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <main+0x138>)
 80012c2:	f000 fc31 	bl	8001b28 <update_timer>
	update_data(data, type, analog_min, analog_max);
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <main+0x150>)
 80012c8:	7819      	ldrb	r1, [r3, #0]
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <main+0x15c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <main+0x158>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <main+0x130>)
 80012d4:	f000 fc6a 	bl	8001bac <update_data>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, data, WAVE_BUFFER_SIZE, DAC_ALIGN_12B_R);
 80012d8:	2300      	movs	r3, #0
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2364      	movs	r3, #100	; 0x64
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <main+0x130>)
 80012e0:	2100      	movs	r1, #0
 80012e2:	4804      	ldr	r0, [pc, #16]	; (80012f4 <main+0x134>)
 80012e4:	f000 ffcc 	bl	8002280 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <main+0x138>)
 80012ea:	f003 f9e1 	bl	80046b0 <HAL_TIM_Base_Start>
	get_cmd(huart2, buffer);
 80012ee:	e7ae      	b.n	800124e <main+0x8e>
 80012f0:	20000210 	.word	0x20000210
 80012f4:	200003b8 	.word	0x200003b8
 80012f8:	20000448 	.word	0x20000448
 80012fc:	20000494 	.word	0x20000494
 8001300:	20000418 	.word	0x20000418
 8001304:	20000208 	.word	0x20000208
 8001308:	20000440 	.word	0x20000440
 800130c:	200003b0 	.word	0x200003b0
 8001310:	200003b4 	.word	0x200003b4
 8001314:	08009838 	.word	0x08009838
 8001318:	20000204 	.word	0x20000204
 800131c:	200003cc 	.word	0x200003cc

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b096      	sub	sp, #88	; 0x58
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2244      	movs	r2, #68	; 0x44
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f004 f94e 	bl	80055d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001342:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001346:	f001 fe5d 	bl	8003004 <HAL_PWREx_ControlVoltageScaling>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001350:	f000 f91c 	bl	800158c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001354:	2310      	movs	r3, #16
 8001356:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001358:	2301      	movs	r3, #1
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001360:	2360      	movs	r3, #96	; 0x60
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	2302      	movs	r3, #2
 8001366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001368:	2301      	movs	r3, #1
 800136a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800136c:	2301      	movs	r3, #1
 800136e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001370:	2320      	movs	r3, #32
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001374:	2307      	movs	r3, #7
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001378:	2302      	movs	r3, #2
 800137a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800137c:	2302      	movs	r3, #2
 800137e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4618      	mov	r0, r3
 8001386:	f001 fe93 	bl	80030b0 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001390:	f000 f8fc 	bl	800158c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001398:	2303      	movs	r3, #3
 800139a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2103      	movs	r1, #3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fa65 	bl	800387c <HAL_RCC_ClockConfig>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013b8:	f000 f8e8 	bl	800158c <Error_Handler>
  }
}
 80013bc:	bf00      	nop
 80013be:	3758      	adds	r7, #88	; 0x58
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2224      	movs	r2, #36	; 0x24
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f004 f8fd 	bl	80055d0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_DAC1_Init+0x5c>)
 80013d8:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_DAC1_Init+0x60>)
 80013da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013dc:	4810      	ldr	r0, [pc, #64]	; (8001420 <MX_DAC1_Init+0x5c>)
 80013de:	f000 ff2c 	bl	800223a <HAL_DAC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013e8:	f000 f8d0 	bl	800158c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80013f0:	2324      	movs	r3, #36	; 0x24
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_DAC1_Init+0x5c>)
 8001408:	f001 f869 	bl	80024de <HAL_DAC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001412:	f000 f8bb 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200003b8 	.word	0x200003b8
 8001424:	40007400 	.word	0x40007400

08001428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_TIM2_Init+0x94>)
 8001448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 26;
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_TIM2_Init+0x94>)
 8001450:	221a      	movs	r2, #26
 8001452:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <MX_TIM2_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 26;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_TIM2_Init+0x94>)
 800145c:	221a      	movs	r2, #26
 800145e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_TIM2_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_TIM2_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <MX_TIM2_Init+0x94>)
 800146e:	f003 f8c7 	bl	8004600 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001478:	f000 f888 	bl	800158c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001480:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_TIM2_Init+0x94>)
 800148a:	f003 f9a0 	bl	80047ce <HAL_TIM_ConfigClockSource>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001494:	f000 f87a 	bl	800158c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001498:	2320      	movs	r3, #32
 800149a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM2_Init+0x94>)
 80014a6:	f003 fb8d 	bl	8004bc4 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014b0:	f000 f86c 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000448 	.word	0x20000448

080014c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <MX_USART2_UART_Init+0x5c>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USART2_UART_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USART2_UART_Init+0x58>)
 8001504:	f003 fbe6 	bl	8004cd4 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800150e:	f000 f83d 	bl	800158c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000494 	.word	0x20000494
 800151c:	40004400 	.word	0x40004400

08001520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_DMA_Init+0x38>)
 8001528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <MX_DMA_Init+0x38>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6493      	str	r3, [r2, #72]	; 0x48
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_DMA_Init+0x38>)
 8001534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	200d      	movs	r0, #13
 8001544:	f000 fe43 	bl	80021ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001548:	200d      	movs	r0, #13
 800154a:	f000 fe5c 	bl	8002206 <HAL_NVIC_EnableIRQ>

}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_GPIO_Init+0x2c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <MX_GPIO_Init+0x2c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_GPIO_Init+0x2c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001590:	b672      	cpsid	i
}
 8001592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001594:	e7fe      	b.n	8001594 <Error_Handler+0x8>
	...

08001598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_MspInit+0x44>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_MspInit+0x44>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6613      	str	r3, [r2, #96]	; 0x60
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <HAL_MspInit+0x44>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_MspInit+0x44>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	4a08      	ldr	r2, [pc, #32]	; (80015dc <HAL_MspInit+0x44>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6593      	str	r3, [r2, #88]	; 0x58
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_MspInit+0x44>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	603b      	str	r3, [r7, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a2b      	ldr	r2, [pc, #172]	; (80016ac <HAL_DAC_MspInit+0xcc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d14f      	bne.n	80016a2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_DAC_MspInit+0xd0>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_DAC_MspInit+0xd0>)
 8001608:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800160c:	6593      	str	r3, [r2, #88]	; 0x58
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_DAC_MspInit+0xd0>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_DAC_MspInit+0xd0>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <HAL_DAC_MspInit+0xd0>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_DAC_MspInit+0xd0>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001632:	2310      	movs	r3, #16
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001636:	2303      	movs	r3, #3
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f001 fb24 	bl	8002c94 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 800164e:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <HAL_DAC_MspInit+0xd8>)
 8001650:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 8001654:	2206      	movs	r2, #6
 8001656:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 800165a:	2210      	movs	r2, #16
 800165c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 8001666:	2280      	movs	r2, #128	; 0x80
 8001668:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 800166c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001670:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 8001674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001678:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 800167c:	2220      	movs	r2, #32
 800167e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001686:	480b      	ldr	r0, [pc, #44]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 8001688:	f001 f8ce 	bl	8002828 <HAL_DMA_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001692:	f7ff ff7b 	bl	800158c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <HAL_DAC_MspInit+0xd4>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40007400 	.word	0x40007400
 80016b0:	40021000 	.word	0x40021000
 80016b4:	200003d0 	.word	0x200003d0
 80016b8:	40020030 	.word	0x40020030

080016bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016cc:	d10b      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_TIM_Base_MspInit+0x38>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_TIM_Base_MspInit+0x38>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6593      	str	r3, [r2, #88]	; 0x58
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_TIM_Base_MspInit+0x38>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0ac      	sub	sp, #176	; 0xb0
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2288      	movs	r2, #136	; 0x88
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f003 ff59 	bl	80055d0 <memset>
  if(huart->Instance==USART2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <HAL_UART_MspInit+0xb0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d13b      	bne.n	80017a0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001728:	2302      	movs	r3, #2
 800172a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4618      	mov	r0, r3
 8001736:	f002 faa7 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001740:	f7ff ff24 	bl	800158c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_UART_MspInit+0xb4>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	4a18      	ldr	r2, [pc, #96]	; (80017ac <HAL_UART_MspInit+0xb4>)
 800174a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174e:	6593      	str	r3, [r2, #88]	; 0x58
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_UART_MspInit+0xb4>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_UART_MspInit+0xb4>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	4a12      	ldr	r2, [pc, #72]	; (80017ac <HAL_UART_MspInit+0xb4>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_UART_MspInit+0xb4>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001774:	230c      	movs	r3, #12
 8001776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800178c:	2307      	movs	r3, #7
 800178e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f001 fa7a 	bl	8002c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	37b0      	adds	r7, #176	; 0xb0
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40004400 	.word	0x40004400
 80017ac:	40021000 	.word	0x40021000

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <NMI_Handler+0x4>

080017b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <HardFault_Handler+0x4>

080017bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <MemManage_Handler+0x4>

080017c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <UsageFault_Handler+0x4>

080017ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fc:	f000 fbc8 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}

08001804 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA1_Channel3_IRQHandler+0x10>)
 800180a:	f001 f963 	bl	8002ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200003d0 	.word	0x200003d0

08001818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
	return 1;
 800181c:	2301      	movs	r3, #1
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_kill>:

int _kill(int pid, int sig)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001832:	f003 fe95 	bl	8005560 <__errno>
 8001836:	4603      	mov	r3, r0
 8001838:	2216      	movs	r2, #22
 800183a:	601a      	str	r2, [r3, #0]
	return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <_exit>:

void _exit (int status)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001850:	f04f 31ff 	mov.w	r1, #4294967295
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffe7 	bl	8001828 <_kill>
	while (1) {}		/* Make sure we hang here */
 800185a:	e7fe      	b.n	800185a <_exit+0x12>

0800185c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e00a      	b.n	8001884 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800186e:	f3af 8000 	nop.w
 8001872:	4601      	mov	r1, r0
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60ba      	str	r2, [r7, #8]
 800187a:	b2ca      	uxtb	r2, r1
 800187c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbf0      	blt.n	800186e <_read+0x12>
	}

return len;
 800188c:	687b      	ldr	r3, [r7, #4]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e009      	b.n	80018bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbf1      	blt.n	80018a8 <_write+0x12>
	}
	return len;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_close>:

int _close(int file)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	return -1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f6:	605a      	str	r2, [r3, #4]
	return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <_isatty>:

int _isatty(int file)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	return 1;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	return 0;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001940:	4a14      	ldr	r2, [pc, #80]	; (8001994 <_sbrk+0x5c>)
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <_sbrk+0x60>)
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <_sbrk+0x64>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <_sbrk+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	d207      	bcs.n	8001978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001968:	f003 fdfa 	bl	8005560 <__errno>
 800196c:	4603      	mov	r3, r0
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e009      	b.n	800198c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <_sbrk+0x64>)
 8001988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20018000 	.word	0x20018000
 8001998:	00000400 	.word	0x00000400
 800199c:	200003a0 	.word	0x200003a0
 80019a0:	20000530 	.word	0x20000530

080019a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <SystemInit+0x5c>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ae:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <SystemInit+0x5c>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <SystemInit+0x60>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <SystemInit+0x60>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <SystemInit+0x60>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <SystemInit+0x60>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <SystemInit+0x60>)
 80019d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <SystemInit+0x60>)
 80019dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <SystemInit+0x60>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <SystemInit+0x60>)
 80019e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SystemInit+0x60>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	40021000 	.word	0x40021000

08001a08 <USART_Read>:
#include "main.h"

uint8_t USART_Read (USART_TypeDef * USARTx) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
// SR_RXNE (Read data register not empty) bit is set by hardware
while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8001a10:	bf00      	nop
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0320 	and.w	r3, r3, #32
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f9      	beq.n	8001a12 <USART_Read+0xa>
// USART resets the RXNE flag automatically after reading DR
return ((uint8_t)(USARTx->RDR & 0xFF));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
// Reading USART_DR automatically clears the RXNE flag
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 8001a32:	b480      	push	{r7}
 8001a34:	b087      	sub	sp, #28
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data egister), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e010      	b.n	8001a66 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8001a44:	bf00      	nop
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f9      	beq.n	8001a46 <USART_Write+0x14>
;    	// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF; // writing USART_TDR automatically clears the TXE flag
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	4413      	add	r3, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3301      	adds	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d8ea      	bhi.n	8001a44 <USART_Write+0x12>
		}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001a6e:	bf00      	nop
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f9      	beq.n	8001a70 <USART_Write+0x3e>
		;  // wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	61da      	str	r2, [r3, #28]
}
 8001a88:	bf00      	nop
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	0000      	movs	r0, r0
	...

08001a98 <dc2analog>:
#include "main.h"

void dc2analog(double min, double max, int* dacmn, int* dacmx){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	ed87 0b04 	vstr	d0, [r7, #16]
 8001aa2:	ed87 1b02 	vstr	d1, [r7, #8]
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	*dacmn = (int) ((min * 4095)/3.3); //assigns the minimum voltage the dac can output
 8001aaa:	a31b      	add	r3, pc, #108	; (adr r3, 8001b18 <dc2analog+0x80>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ab4:	f7fe fda0 	bl	80005f8 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	a317      	add	r3, pc, #92	; (adr r3, 8001b20 <dc2analog+0x88>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fec1 	bl	800084c <__aeabi_ddiv>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f841 	bl	8000b58 <__aeabi_d2iz>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	601a      	str	r2, [r3, #0]
	*dacmx = (int) ((max * 4095)/3.3); //assigns maximum voltage the dac can output
 8001adc:	a30e      	add	r3, pc, #56	; (adr r3, 8001b18 <dc2analog+0x80>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ae6:	f7fe fd87 	bl	80005f8 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	a30b      	add	r3, pc, #44	; (adr r3, 8001b20 <dc2analog+0x88>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fea8 	bl	800084c <__aeabi_ddiv>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff f828 	bl	8000b58 <__aeabi_d2iz>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	601a      	str	r2, [r3, #0]
	return;
 8001b0e:	bf00      	nop
}
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40affe00 	.word	0x40affe00
 8001b20:	66666666 	.word	0x66666666
 8001b24:	400a6666 	.word	0x400a6666

08001b28 <update_timer>:

void update_timer(TIM_HandleTypeDef* timer, DAC_HandleTypeDef* dac, int freq){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	//stops the timer and dac until we are finished updating
	HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_1);
 8001b34:	2100      	movs	r1, #0
 8001b36:	68b8      	ldr	r0, [r7, #8]
 8001b38:	f000 fc6e 	bl	8002418 <HAL_DAC_Stop_DMA>
	HAL_TIM_Base_Stop(timer);
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f002 fe1f 	bl	8004780 <HAL_TIM_Base_Stop>
	int x = (int) (SCC/(freq * (WAVE_BUFFER_SIZE/2)));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2232      	movs	r2, #50	; 0x32
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <update_timer+0x7c>)
 8001b4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
	x = sqrt(x) - 1;
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7fe fce6 	bl	8000524 <__aeabi_i2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	ec43 2b10 	vmov	d0, r2, r3
 8001b60:	f006 fd06 	bl	8008570 <sqrt>
 8001b64:	ec51 0b10 	vmov	r0, r1, d0
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <update_timer+0x80>)
 8001b6e:	f7fe fb8b 	bl	8000288 <__aeabi_dsub>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7fe ffed 	bl	8000b58 <__aeabi_d2iz>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	617b      	str	r3, [r7, #20]
	(timer->Instance)->ARR = (x/2); //division by calibrates the ARR to produce the proper frequency
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	0fda      	lsrs	r2, r3, #31
 8001b86:	4413      	add	r3, r2
 8001b88:	105b      	asrs	r3, r3, #1
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
	(timer->Instance)->PSC = x;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
	return;
 8001b9a:	bf00      	nop
}
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	03d09000 	.word	0x03d09000
 8001ba8:	3ff00000 	.word	0x3ff00000

08001bac <update_data>:

void update_data(uint32_t* buffer, char form, int min, int max){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	72fb      	strb	r3, [r7, #11]
	switch (form){
 8001bbc:	7afb      	ldrb	r3, [r7, #11]
 8001bbe:	3b52      	subs	r3, #82	; 0x52
 8001bc0:	2b22      	cmp	r3, #34	; 0x22
 8001bc2:	d85b      	bhi.n	8001c7c <update_data+0xd0>
 8001bc4:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <update_data+0x20>)
 8001bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bca:	bf00      	nop
 8001bcc:	08001c65 	.word	0x08001c65
 8001bd0:	08001c71 	.word	0x08001c71
 8001bd4:	08001c59 	.word	0x08001c59
 8001bd8:	08001c7d 	.word	0x08001c7d
 8001bdc:	08001c7d 	.word	0x08001c7d
 8001be0:	08001c7d 	.word	0x08001c7d
 8001be4:	08001c7d 	.word	0x08001c7d
 8001be8:	08001c7d 	.word	0x08001c7d
 8001bec:	08001c7d 	.word	0x08001c7d
 8001bf0:	08001c7d 	.word	0x08001c7d
 8001bf4:	08001c7d 	.word	0x08001c7d
 8001bf8:	08001c7d 	.word	0x08001c7d
 8001bfc:	08001c7d 	.word	0x08001c7d
 8001c00:	08001c7d 	.word	0x08001c7d
 8001c04:	08001c7d 	.word	0x08001c7d
 8001c08:	08001c7d 	.word	0x08001c7d
 8001c0c:	08001c7d 	.word	0x08001c7d
 8001c10:	08001c7d 	.word	0x08001c7d
 8001c14:	08001c7d 	.word	0x08001c7d
 8001c18:	08001c7d 	.word	0x08001c7d
 8001c1c:	08001c7d 	.word	0x08001c7d
 8001c20:	08001c7d 	.word	0x08001c7d
 8001c24:	08001c7d 	.word	0x08001c7d
 8001c28:	08001c7d 	.word	0x08001c7d
 8001c2c:	08001c7d 	.word	0x08001c7d
 8001c30:	08001c7d 	.word	0x08001c7d
 8001c34:	08001c7d 	.word	0x08001c7d
 8001c38:	08001c7d 	.word	0x08001c7d
 8001c3c:	08001c7d 	.word	0x08001c7d
 8001c40:	08001c7d 	.word	0x08001c7d
 8001c44:	08001c7d 	.word	0x08001c7d
 8001c48:	08001c7d 	.word	0x08001c7d
 8001c4c:	08001c65 	.word	0x08001c65
 8001c50:	08001c71 	.word	0x08001c71
 8001c54:	08001c59 	.word	0x08001c59
	case 't':
	case 'T':
		populate_triangle_wave(buffer, min, max);
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f813 	bl	8001c88 <populate_triangle_wave>
		break;
 8001c62:	e00c      	b.n	8001c7e <update_data+0xd2>
	case 'r':
	case 'R':
		populate_rectangle_wave(buffer, min, max);
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f877 	bl	8001d5c <populate_rectangle_wave>
		break;
 8001c6e:	e006      	b.n	8001c7e <update_data+0xd2>
	case 's':
	case 'S':
		populate_sine_wave(buffer, min, max);
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f89f 	bl	8001db8 <populate_sine_wave>
		break;
 8001c7a:	e000      	b.n	8001c7e <update_data+0xd2>
	default:
		break;
 8001c7c:	bf00      	nop
	}
	return;
 8001c7e:	bf00      	nop
}
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop

08001c88 <populate_triangle_wave>:

void populate_triangle_wave(uint32_t* buffer, int min, int max){
 8001c88:	b5b0      	push	{r4, r5, r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	int idx = (WAVE_BUFFER_SIZE/2);
 8001c94:	2332      	movs	r3, #50	; 0x32
 8001c96:	61fb      	str	r3, [r7, #28]
	double steps = 2.0*((max-min)/WAVE_BUFFER_SIZE); //calculates the steping size to increment/decrement each sample point and make the wave as smooth as possible
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	4a2e      	ldr	r2, [pc, #184]	; (8001d58 <populate_triangle_wave+0xd0>)
 8001ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca4:	1152      	asrs	r2, r2, #5
 8001ca6:	17db      	asrs	r3, r3, #31
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fc3a 	bl	8000524 <__aeabi_i2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	f7fe faea 	bl	800028c <__adddf3>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0; i < idx; i++){
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	e020      	b.n	8001d08 <populate_triangle_wave+0x80>
		buffer[i] = (uint32_t)(min + (i*steps));
 8001cc6:	68b8      	ldr	r0, [r7, #8]
 8001cc8:	f7fe fc2c 	bl	8000524 <__aeabi_i2d>
 8001ccc:	4604      	mov	r4, r0
 8001cce:	460d      	mov	r5, r1
 8001cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cd2:	f7fe fc27 	bl	8000524 <__aeabi_i2d>
 8001cd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cda:	f7fe fc8d 	bl	80005f8 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f7fe fad1 	bl	800028c <__adddf3>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	18d4      	adds	r4, r2, r3
 8001cfa:	f7fe ff55 	bl	8000ba8 <__aeabi_d2uiz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < idx; i++){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3301      	adds	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbda      	blt.n	8001cc6 <populate_triangle_wave+0x3e>
	}
	for(int j = idx; j < WAVE_BUFFER_SIZE; j++){
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	623b      	str	r3, [r7, #32]
 8001d14:	e017      	b.n	8001d46 <populate_triangle_wave+0xbe>
		buffer[j] =(uint32_t) max;
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	601a      	str	r2, [r3, #0]
		max -= steps;
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fbfe 	bl	8000524 <__aeabi_i2d>
 8001d28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d2c:	f7fe faac 	bl	8000288 <__aeabi_dsub>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe ff0e 	bl	8000b58 <__aeabi_d2iz>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	607b      	str	r3, [r7, #4]
	for(int j = idx; j < WAVE_BUFFER_SIZE; j++){
 8001d40:	6a3b      	ldr	r3, [r7, #32]
 8001d42:	3301      	adds	r3, #1
 8001d44:	623b      	str	r3, [r7, #32]
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	2b63      	cmp	r3, #99	; 0x63
 8001d4a:	dde4      	ble.n	8001d16 <populate_triangle_wave+0x8e>
	}
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bdb0      	pop	{r4, r5, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	51eb851f 	.word	0x51eb851f

08001d5c <populate_rectangle_wave>:

void populate_rectangle_wave(uint32_t* buffer, int min, int max){
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
	int idx = (WAVE_BUFFER_SIZE/2);
 8001d68:	2332      	movs	r3, #50	; 0x32
 8001d6a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < idx; i++){
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	e008      	b.n	8001d84 <populate_rectangle_wave+0x28>
		buffer[i] = max;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < idx; i++){
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3301      	adds	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf2      	blt.n	8001d72 <populate_rectangle_wave+0x16>
	}
	for(int j = idx; j < WAVE_BUFFER_SIZE; j++){
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	e008      	b.n	8001da4 <populate_rectangle_wave+0x48>
		buffer[j] = min;
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4413      	add	r3, r2
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	601a      	str	r2, [r3, #0]
	for(int j = idx; j < WAVE_BUFFER_SIZE; j++){
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b63      	cmp	r3, #99	; 0x63
 8001da8:	ddf3      	ble.n	8001d92 <populate_rectangle_wave+0x36>
	}
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	3724      	adds	r7, #36	; 0x24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <populate_sine_wave>:

void populate_sine_wave(uint32_t* buffer, int min, int max){
 8001db8:	b5b0      	push	{r4, r5, r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	double amp = ((max-min)/2); // calculates the amplitude/midpoint of the sine wave so that it fits with the min and max values
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	0fda      	lsrs	r2, r3, #31
 8001dcc:	4413      	add	r3, r2
 8001dce:	105b      	asrs	r3, r3, #1
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fba7 	bl	8000524 <__aeabi_i2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0; i < WAVE_BUFFER_SIZE; i++){
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e046      	b.n	8001e72 <populate_sine_wave+0xba>
		buffer[i] = (amp * sin(2*i*M_PI/100)) + min + amp;
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb9b 	bl	8000524 <__aeabi_i2d>
 8001dee:	a327      	add	r3, pc, #156	; (adr r3, 8001e8c <populate_sine_wave+0xd4>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe fc00 	bl	80005f8 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <populate_sine_wave+0xd0>)
 8001e06:	f7fe fd21 	bl	800084c <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	ec43 2b17 	vmov	d7, r2, r3
 8001e12:	eeb0 0a47 	vmov.f32	s0, s14
 8001e16:	eef0 0a67 	vmov.f32	s1, s15
 8001e1a:	f006 fb55 	bl	80084c8 <sin>
 8001e1e:	ec51 0b10 	vmov	r0, r1, d0
 8001e22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e26:	f7fe fbe7 	bl	80005f8 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4614      	mov	r4, r2
 8001e30:	461d      	mov	r5, r3
 8001e32:	68b8      	ldr	r0, [r7, #8]
 8001e34:	f7fe fb76 	bl	8000524 <__aeabi_i2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f7fe fa24 	bl	800028c <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e50:	f7fe fa1c 	bl	800028c <__adddf3>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	18d4      	adds	r4, r2, r3
 8001e64:	f7fe fea0 	bl	8000ba8 <__aeabi_d2uiz>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	6023      	str	r3, [r4, #0]
	for(int i = 0; i < WAVE_BUFFER_SIZE; i++){
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	2b63      	cmp	r3, #99	; 0x63
 8001e76:	ddb5      	ble.n	8001de4 <populate_sine_wave+0x2c>
	}

}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdb0      	pop	{r4, r5, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	f3af 8000 	nop.w
 8001e88:	40590000 	.word	0x40590000
 8001e8c:	54442d18 	.word	0x54442d18
 8001e90:	400921fb 	.word	0x400921fb

08001e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ecc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e98:	f7ff fd84 	bl	80019a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e9e:	e003      	b.n	8001ea8 <LoopCopyDataInit>

08001ea0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ea2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ea4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ea6:	3104      	adds	r1, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001eac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001eae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001eb0:	d3f6      	bcc.n	8001ea0 <CopyDataInit>
	ldr	r2, =_sbss
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001eb4:	e002      	b.n	8001ebc <LoopFillZerobss>

08001eb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001eb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001eb8:	f842 3b04 	str.w	r3, [r2], #4

08001ebc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <LoopForever+0x16>)
	cmp	r2, r3
 8001ebe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ec0:	d3f9      	bcc.n	8001eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f003 fb53 	bl	800556c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ec6:	f7ff f97b 	bl	80011c0 <main>

08001eca <LoopForever>:

LoopForever:
    b LoopForever
 8001eca:	e7fe      	b.n	8001eca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ecc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001ed0:	08009f10 	.word	0x08009f10
	ldr	r0, =_sdata
 8001ed4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ed8:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8001edc:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8001ee0:	2000052c 	.word	0x2000052c

08001ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC1_2_IRQHandler>

08001ee6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	f000 f961 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f000 f80e 	bl	8001f18 <HAL_InitTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	71fb      	strb	r3, [r7, #7]
 8001f06:	e001      	b.n	8001f0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f08:	f7ff fb46 	bl	8001598 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_InitTick+0x6c>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d023      	beq.n	8001f74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <HAL_InitTick+0x70>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_InitTick+0x6c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f96d 	bl	8002222 <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10f      	bne.n	8001f6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d809      	bhi.n	8001f68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 f937 	bl	80021ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_InitTick+0x74>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e007      	b.n	8001f78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e004      	b.n	8001f78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	73fb      	strb	r3, [r7, #15]
 8001f72:	e001      	b.n	8001f78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000008 	.word	0x20000008
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_IncTick+0x20>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x24>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_IncTick+0x24>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000518 	.word	0x20000518

08001fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_GetTick+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000518 	.word	0x20000518

08001fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff ffee 	bl	8001fb8 <HAL_GetTick>
 8001fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d005      	beq.n	8001ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_Delay+0x44>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ff6:	bf00      	nop
 8001ff8:	f7ff ffde 	bl	8001fb8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	429a      	cmp	r2, r3
 8002006:	d8f7      	bhi.n	8001ff8 <HAL_Delay+0x28>
  {
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008

08002018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002034:	4013      	ands	r3, r2
 8002036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204a:	4a04      	ldr	r2, [pc, #16]	; (800205c <__NVIC_SetPriorityGrouping+0x44>)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	60d3      	str	r3, [r2, #12]
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <__NVIC_GetPriorityGrouping+0x18>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	f003 0307 	and.w	r3, r3, #7
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	db0b      	blt.n	80020a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4907      	ldr	r1, [pc, #28]	; (80020b4 <__NVIC_EnableIRQ+0x38>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2001      	movs	r0, #1
 800209e:	fa00 f202 	lsl.w	r2, r0, r2
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff8e 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff29 	bl	8002018 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff3e 	bl	8002060 <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff8e 	bl	800210c <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5d 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff31 	bl	800207c <__NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ffa2 	bl	8002174 <SysTick_Config>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e014      	b.n	8002276 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	791b      	ldrb	r3, [r3, #4]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff f9bf 	bl	80015e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	795b      	ldrb	r3, [r3, #5]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_DAC_Start_DMA+0x1e>
 800229a:	2302      	movs	r3, #2
 800229c:	e0ab      	b.n	80023f6 <HAL_DAC_Start_DMA+0x176>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2202      	movs	r2, #2
 80022a8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d12f      	bne.n	8002310 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_DAC_Start_DMA+0x180>)
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a51      	ldr	r2, [pc, #324]	; (8002404 <HAL_DAC_Start_DMA+0x184>)
 80022be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a50      	ldr	r2, [pc, #320]	; (8002408 <HAL_DAC_Start_DMA+0x188>)
 80022c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80022d8:	6a3b      	ldr	r3, [r7, #32]
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d013      	beq.n	8002306 <HAL_DAC_Start_DMA+0x86>
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d845      	bhi.n	8002370 <HAL_DAC_Start_DMA+0xf0>
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_DAC_Start_DMA+0x72>
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d005      	beq.n	80022fc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80022f0:	e03e      	b.n	8002370 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3308      	adds	r3, #8
 80022f8:	613b      	str	r3, [r7, #16]
        break;
 80022fa:	e03c      	b.n	8002376 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	330c      	adds	r3, #12
 8002302:	613b      	str	r3, [r7, #16]
        break;
 8002304:	e037      	b.n	8002376 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3310      	adds	r3, #16
 800230c:	613b      	str	r3, [r7, #16]
        break;
 800230e:	e032      	b.n	8002376 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a3d      	ldr	r2, [pc, #244]	; (800240c <HAL_DAC_Start_DMA+0x18c>)
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a3c      	ldr	r2, [pc, #240]	; (8002410 <HAL_DAC_Start_DMA+0x190>)
 800231e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <HAL_DAC_Start_DMA+0x194>)
 8002326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002336:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b08      	cmp	r3, #8
 800233c:	d013      	beq.n	8002366 <HAL_DAC_Start_DMA+0xe6>
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	2b08      	cmp	r3, #8
 8002342:	d817      	bhi.n	8002374 <HAL_DAC_Start_DMA+0xf4>
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_DAC_Start_DMA+0xd2>
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	2b04      	cmp	r3, #4
 800234e:	d005      	beq.n	800235c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002350:	e010      	b.n	8002374 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3314      	adds	r3, #20
 8002358:	613b      	str	r3, [r7, #16]
        break;
 800235a:	e00c      	b.n	8002376 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3318      	adds	r3, #24
 8002362:	613b      	str	r3, [r7, #16]
        break;
 8002364:	e007      	b.n	8002376 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	331c      	adds	r3, #28
 800236c:	613b      	str	r3, [r7, #16]
        break;
 800236e:	e002      	b.n	8002376 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002370:	bf00      	nop
 8002372:	e000      	b.n	8002376 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002374:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d111      	bne.n	80023a0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800238a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6898      	ldr	r0, [r3, #8]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	f000 faff 	bl	8002998 <HAL_DMA_Start_IT>
 800239a:	4603      	mov	r3, r0
 800239c:	75fb      	strb	r3, [r7, #23]
 800239e:	e010      	b.n	80023c2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80023ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	68d8      	ldr	r0, [r3, #12]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	f000 faed 	bl	8002998 <HAL_DMA_Start_IT>
 80023be:	4603      	mov	r3, r0
 80023c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6819      	ldr	r1, [r3, #0]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e005      	b.n	80023f4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f043 0204 	orr.w	r2, r3, #4
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	08002713 	.word	0x08002713
 8002404:	08002735 	.word	0x08002735
 8002408:	08002751 	.word	0x08002751
 800240c:	080027bb 	.word	0x080027bb
 8002410:	080027dd 	.word	0x080027dd
 8002414:	080027f9 	.word	0x080027f9

08002418 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6819      	ldr	r1, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	400a      	ands	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2201      	movs	r2, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	400a      	ands	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 faf6 	bl	8002a58 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e00c      	b.n	8002498 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 fae8 	bl	8002a58 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002496:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b088      	sub	sp, #32
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	795b      	ldrb	r3, [r3, #5]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_DAC_ConfigChannel+0x1c>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e107      	b.n	800270a <HAL_DAC_ConfigChannel+0x22c>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2202      	movs	r2, #2
 8002504:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b04      	cmp	r3, #4
 800250c:	d174      	bne.n	80025f8 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800250e:	f7ff fd53 	bl	8001fb8 <HAL_GetTick>
 8002512:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d134      	bne.n	8002584 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800251a:	e011      	b.n	8002540 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800251c:	f7ff fd4c 	bl	8001fb8 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d90a      	bls.n	8002540 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f043 0208 	orr.w	r2, r3, #8
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2203      	movs	r2, #3
 800253a:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0e4      	b.n	800270a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e6      	bne.n	800251c <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800254e:	2001      	movs	r0, #1
 8002550:	f7ff fd3e 	bl	8001fd0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	6992      	ldr	r2, [r2, #24]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
 800255e:	e01e      	b.n	800259e <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002560:	f7ff fd2a 	bl	8001fb8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b01      	cmp	r3, #1
 800256c:	d90a      	bls.n	8002584 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f043 0208 	orr.w	r2, r3, #8
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2203      	movs	r2, #3
 800257e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e0c2      	b.n	800270a <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258a:	2b00      	cmp	r3, #0
 800258c:	dbe8      	blt.n	8002560 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800258e:	2001      	movs	r0, #1
 8002590:	f7ff fd1e 	bl	8001fd0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	6992      	ldr	r2, [r2, #24]
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	ea02 0103 	and.w	r1, r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	21ff      	movs	r1, #255	; 0xff
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	ea02 0103 	and.w	r1, r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	6a1a      	ldr	r2, [r3, #32]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d11d      	bne.n	800263c <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	221f      	movs	r2, #31
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2207      	movs	r2, #7
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	431a      	orrs	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43da      	mvns	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	400a      	ands	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	f640 72fc 	movw	r2, #4092	; 0xffc
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	22c0      	movs	r2, #192	; 0xc0
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	400a      	ands	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff febe 	bl	80024a2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	711a      	strb	r2, [r3, #4]
}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff feb7 	bl	80024b6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	f043 0204 	orr.w	r2, r3, #4
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f7ff fead 	bl	80024ca <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	711a      	strb	r2, [r3, #4]
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7ff ffd8 	bl	800277e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	711a      	strb	r2, [r3, #4]
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff ffd1 	bl	8002792 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f043 0204 	orr.w	r2, r3, #4
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff ffc7 	bl	80027a6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	711a      	strb	r2, [r3, #4]
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e098      	b.n	800296c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <HAL_DMA_Init+0x150>)
 8002842:	429a      	cmp	r2, r3
 8002844:	d80f      	bhi.n	8002866 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	4b4b      	ldr	r3, [pc, #300]	; (800297c <HAL_DMA_Init+0x154>)
 800284e:	4413      	add	r3, r2
 8002850:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <HAL_DMA_Init+0x158>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	009a      	lsls	r2, r3, #2
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a48      	ldr	r2, [pc, #288]	; (8002984 <HAL_DMA_Init+0x15c>)
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
 8002864:	e00e      	b.n	8002884 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_DMA_Init+0x160>)
 800286e:	4413      	add	r3, r2
 8002870:	4a43      	ldr	r2, [pc, #268]	; (8002980 <HAL_DMA_Init+0x158>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	009a      	lsls	r2, r3, #2
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a42      	ldr	r2, [pc, #264]	; (800298c <HAL_DMA_Init+0x164>)
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028de:	d039      	beq.n	8002954 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4a27      	ldr	r2, [pc, #156]	; (8002984 <HAL_DMA_Init+0x15c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d11a      	bne.n	8002920 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028ea:	4b29      	ldr	r3, [pc, #164]	; (8002990 <HAL_DMA_Init+0x168>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f003 031c 	and.w	r3, r3, #28
 80028f6:	210f      	movs	r1, #15
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4924      	ldr	r1, [pc, #144]	; (8002990 <HAL_DMA_Init+0x168>)
 8002900:	4013      	ands	r3, r2
 8002902:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002904:	4b22      	ldr	r3, [pc, #136]	; (8002990 <HAL_DMA_Init+0x168>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	f003 031c 	and.w	r3, r3, #28
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	491d      	ldr	r1, [pc, #116]	; (8002990 <HAL_DMA_Init+0x168>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
 800291e:	e019      	b.n	8002954 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002920:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_DMA_Init+0x16c>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	f003 031c 	and.w	r3, r3, #28
 800292c:	210f      	movs	r1, #15
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	4917      	ldr	r1, [pc, #92]	; (8002994 <HAL_DMA_Init+0x16c>)
 8002936:	4013      	ands	r3, r2
 8002938:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <HAL_DMA_Init+0x16c>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f003 031c 	and.w	r3, r3, #28
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	4911      	ldr	r1, [pc, #68]	; (8002994 <HAL_DMA_Init+0x16c>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40020407 	.word	0x40020407
 800297c:	bffdfff8 	.word	0xbffdfff8
 8002980:	cccccccd 	.word	0xcccccccd
 8002984:	40020000 	.word	0x40020000
 8002988:	bffdfbf8 	.word	0xbffdfbf8
 800298c:	40020400 	.word	0x40020400
 8002990:	400200a8 	.word	0x400200a8
 8002994:	400204a8 	.word	0x400204a8

08002998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA_Start_IT+0x20>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e04b      	b.n	8002a50 <HAL_DMA_Start_IT+0xb8>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d13a      	bne.n	8002a42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f91e 	bl	8002c32 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 020e 	orr.w	r2, r2, #14
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e00f      	b.n	8002a30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0204 	bic.w	r2, r2, #4
 8002a1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 020a 	orr.w	r2, r2, #10
 8002a2e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e005      	b.n	8002a4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d008      	beq.n	8002a82 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2204      	movs	r2, #4
 8002a74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e022      	b.n	8002ac8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 020e 	bic.w	r2, r2, #14
 8002a90:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	f003 021c 	and.w	r2, r3, #28
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	f003 031c 	and.w	r3, r3, #28
 8002af4:	2204      	movs	r2, #4
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d026      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x7a>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d021      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	f003 021c 	and.w	r2, r3, #28
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	2104      	movs	r1, #4
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d071      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002b4c:	e06c      	b.n	8002c28 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f003 031c 	and.w	r3, r3, #28
 8002b56:	2202      	movs	r2, #2
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d02e      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0xec>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d029      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 020a 	bic.w	r2, r2, #10
 8002b88:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f003 021c 	and.w	r2, r3, #28
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d038      	beq.n	8002c28 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002bbe:	e033      	b.n	8002c28 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	f003 031c 	and.w	r3, r3, #28
 8002bc8:	2208      	movs	r2, #8
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d02a      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x156>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d025      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 020e 	bic.w	r2, r2, #14
 8002bec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f003 021c 	and.w	r2, r3, #28
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
}
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f003 021c 	and.w	r2, r3, #28
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d108      	bne.n	8002c76 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c74:	e007      	b.n	8002c86 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	60da      	str	r2, [r3, #12]
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca2:	e17f      	b.n	8002fa4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2101      	movs	r1, #1
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8171 	beq.w	8002f9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d00b      	beq.n	8002cdc <HAL_GPIO_Init+0x48>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d007      	beq.n	8002cdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cd0:	2b11      	cmp	r3, #17
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b12      	cmp	r3, #18
 8002cda:	d130      	bne.n	8002d3e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d12:	2201      	movs	r2, #1
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f003 0201 	and.w	r2, r3, #1
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d118      	bne.n	8002d7c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d50:	2201      	movs	r2, #1
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	08db      	lsrs	r3, r3, #3
 8002d66:	f003 0201 	and.w	r2, r3, #1
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2203      	movs	r2, #3
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x128>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b12      	cmp	r3, #18
 8002dba:	d123      	bne.n	8002e04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	08da      	lsrs	r2, r3, #3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3208      	adds	r2, #8
 8002dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	08da      	lsrs	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3208      	adds	r2, #8
 8002dfe:	6939      	ldr	r1, [r7, #16]
 8002e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0203 	and.w	r2, r3, #3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80ac 	beq.w	8002f9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e46:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <HAL_GPIO_Init+0x330>)
 8002e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4a:	4a5e      	ldr	r2, [pc, #376]	; (8002fc4 <HAL_GPIO_Init+0x330>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6613      	str	r3, [r2, #96]	; 0x60
 8002e52:	4b5c      	ldr	r3, [pc, #368]	; (8002fc4 <HAL_GPIO_Init+0x330>)
 8002e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e5e:	4a5a      	ldr	r2, [pc, #360]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	3302      	adds	r3, #2
 8002e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	220f      	movs	r2, #15
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e88:	d025      	beq.n	8002ed6 <HAL_GPIO_Init+0x242>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4f      	ldr	r2, [pc, #316]	; (8002fcc <HAL_GPIO_Init+0x338>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01f      	beq.n	8002ed2 <HAL_GPIO_Init+0x23e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4e      	ldr	r2, [pc, #312]	; (8002fd0 <HAL_GPIO_Init+0x33c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d019      	beq.n	8002ece <HAL_GPIO_Init+0x23a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	; (8002fd4 <HAL_GPIO_Init+0x340>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d013      	beq.n	8002eca <HAL_GPIO_Init+0x236>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4c      	ldr	r2, [pc, #304]	; (8002fd8 <HAL_GPIO_Init+0x344>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_GPIO_Init+0x232>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4b      	ldr	r2, [pc, #300]	; (8002fdc <HAL_GPIO_Init+0x348>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <HAL_GPIO_Init+0x22e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4a      	ldr	r2, [pc, #296]	; (8002fe0 <HAL_GPIO_Init+0x34c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d101      	bne.n	8002ebe <HAL_GPIO_Init+0x22a>
 8002eba:	2306      	movs	r3, #6
 8002ebc:	e00c      	b.n	8002ed8 <HAL_GPIO_Init+0x244>
 8002ebe:	2307      	movs	r3, #7
 8002ec0:	e00a      	b.n	8002ed8 <HAL_GPIO_Init+0x244>
 8002ec2:	2305      	movs	r3, #5
 8002ec4:	e008      	b.n	8002ed8 <HAL_GPIO_Init+0x244>
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	e006      	b.n	8002ed8 <HAL_GPIO_Init+0x244>
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e004      	b.n	8002ed8 <HAL_GPIO_Init+0x244>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e002      	b.n	8002ed8 <HAL_GPIO_Init+0x244>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <HAL_GPIO_Init+0x244>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	f002 0203 	and.w	r2, r2, #3
 8002ede:	0092      	lsls	r2, r2, #2
 8002ee0:	4093      	lsls	r3, r2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ee8:	4937      	ldr	r1, [pc, #220]	; (8002fc8 <HAL_GPIO_Init+0x334>)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	; (8002fe4 <HAL_GPIO_Init+0x350>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f1a:	4a32      	ldr	r2, [pc, #200]	; (8002fe4 <HAL_GPIO_Init+0x350>)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002f20:	4b30      	ldr	r3, [pc, #192]	; (8002fe4 <HAL_GPIO_Init+0x350>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f44:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <HAL_GPIO_Init+0x350>)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <HAL_GPIO_Init+0x350>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4013      	ands	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f6e:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <HAL_GPIO_Init+0x350>)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_GPIO_Init+0x350>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f98:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <HAL_GPIO_Init+0x350>)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa22 f303 	lsr.w	r3, r2, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f47f ae78 	bne.w	8002ca4 <HAL_GPIO_Init+0x10>
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	48000400 	.word	0x48000400
 8002fd0:	48000800 	.word	0x48000800
 8002fd4:	48000c00 	.word	0x48000c00
 8002fd8:	48001000 	.word	0x48001000
 8002fdc:	48001400 	.word	0x48001400
 8002fe0:	48001800 	.word	0x48001800
 8002fe4:	40010400 	.word	0x40010400

08002fe8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40007000 	.word	0x40007000

08003004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003012:	d130      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003014:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800301c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003020:	d038      	beq.n	8003094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003022:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800302a:	4a1e      	ldr	r2, [pc, #120]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800302c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003030:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2232      	movs	r2, #50	; 0x32
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	4a1b      	ldr	r2, [pc, #108]	; (80030ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0c9b      	lsrs	r3, r3, #18
 8003044:	3301      	adds	r3, #1
 8003046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003048:	e002      	b.n	8003050 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3b01      	subs	r3, #1
 800304e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305c:	d102      	bne.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x60>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f2      	bne.n	800304a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003070:	d110      	bne.n	8003094 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e00f      	b.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003082:	d007      	beq.n	8003094 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800308c:	4a05      	ldr	r2, [pc, #20]	; (80030a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003092:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40007000 	.word	0x40007000
 80030a8:	20000000 	.word	0x20000000
 80030ac:	431bde83 	.word	0x431bde83

080030b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e3d4      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c2:	4ba1      	ldr	r3, [pc, #644]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030cc:	4b9e      	ldr	r3, [pc, #632]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80e4 	beq.w	80032ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <HAL_RCC_OscConfig+0x4a>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	f040 808b 	bne.w	8003208 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f040 8087 	bne.w	8003208 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030fa:	4b93      	ldr	r3, [pc, #588]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x62>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e3ac      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1a      	ldr	r2, [r3, #32]
 8003116:	4b8c      	ldr	r3, [pc, #560]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <HAL_RCC_OscConfig+0x7c>
 8003122:	4b89      	ldr	r3, [pc, #548]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800312a:	e005      	b.n	8003138 <HAL_RCC_OscConfig+0x88>
 800312c:	4b86      	ldr	r3, [pc, #536]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800312e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003138:	4293      	cmp	r3, r2
 800313a:	d223      	bcs.n	8003184 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fd41 	bl	8003bc8 <RCC_SetFlashLatencyFromMSIRange>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e38d      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003150:	4b7d      	ldr	r3, [pc, #500]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a7c      	ldr	r2, [pc, #496]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003156:	f043 0308 	orr.w	r3, r3, #8
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b7a      	ldr	r3, [pc, #488]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4977      	ldr	r1, [pc, #476]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800316e:	4b76      	ldr	r3, [pc, #472]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	4972      	ldr	r1, [pc, #456]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
 8003182:	e025      	b.n	80031d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003184:	4b70      	ldr	r3, [pc, #448]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a6f      	ldr	r2, [pc, #444]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800318a:	f043 0308 	orr.w	r3, r3, #8
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b6d      	ldr	r3, [pc, #436]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	496a      	ldr	r1, [pc, #424]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a2:	4b69      	ldr	r3, [pc, #420]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	4965      	ldr	r1, [pc, #404]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fd01 	bl	8003bc8 <RCC_SetFlashLatencyFromMSIRange>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e34d      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031d0:	f000 fc36 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b5c      	ldr	r3, [pc, #368]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	495a      	ldr	r1, [pc, #360]	; (800334c <HAL_RCC_OscConfig+0x29c>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ec:	4a58      	ldr	r2, [pc, #352]	; (8003350 <HAL_RCC_OscConfig+0x2a0>)
 80031ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031f0:	4b58      	ldr	r3, [pc, #352]	; (8003354 <HAL_RCC_OscConfig+0x2a4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe fe8f 	bl	8001f18 <HAL_InitTick>
 80031fa:	4603      	mov	r3, r0
 80031fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d052      	beq.n	80032aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	e331      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d032      	beq.n	8003276 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003210:	4b4d      	ldr	r3, [pc, #308]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a4c      	ldr	r2, [pc, #304]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800321c:	f7fe fecc 	bl	8001fb8 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003224:	f7fe fec8 	bl	8001fb8 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e31a      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003236:	4b44      	ldr	r3, [pc, #272]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a40      	ldr	r2, [pc, #256]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003248:	f043 0308 	orr.w	r3, r3, #8
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b3e      	ldr	r3, [pc, #248]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	493b      	ldr	r1, [pc, #236]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003260:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	4936      	ldr	r1, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]
 8003274:	e01a      	b.n	80032ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003276:	4b34      	ldr	r3, [pc, #208]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a33      	ldr	r2, [pc, #204]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003282:	f7fe fe99 	bl	8001fb8 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800328a:	f7fe fe95 	bl	8001fb8 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e2e7      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x1da>
 80032a8:	e000      	b.n	80032ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d074      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d005      	beq.n	80032ca <HAL_RCC_OscConfig+0x21a>
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d10e      	bne.n	80032e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ca:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d064      	beq.n	80033a0 <HAL_RCC_OscConfig+0x2f0>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d160      	bne.n	80033a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e2c4      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x24a>
 80032ec:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a15      	ldr	r2, [pc, #84]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e01d      	b.n	8003336 <HAL_RCC_OscConfig+0x286>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003302:	d10c      	bne.n	800331e <HAL_RCC_OscConfig+0x26e>
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0f      	ldr	r2, [pc, #60]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800330a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e00b      	b.n	8003336 <HAL_RCC_OscConfig+0x286>
 800331e:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a06      	ldr	r2, [pc, #24]	; (8003348 <HAL_RCC_OscConfig+0x298>)
 8003330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003334:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01c      	beq.n	8003378 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fe fe3b 	bl	8001fb8 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003344:	e011      	b.n	800336a <HAL_RCC_OscConfig+0x2ba>
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	08009848 	.word	0x08009848
 8003350:	20000000 	.word	0x20000000
 8003354:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003358:	f7fe fe2e 	bl	8001fb8 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e280      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800336a:	4baf      	ldr	r3, [pc, #700]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x2a8>
 8003376:	e014      	b.n	80033a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fe1e 	bl	8001fb8 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003380:	f7fe fe1a 	bl	8001fb8 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e26c      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003392:	4ba5      	ldr	r3, [pc, #660]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x2d0>
 800339e:	e000      	b.n	80033a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d060      	beq.n	8003470 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_OscConfig+0x310>
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	2b0c      	cmp	r3, #12
 80033b8:	d119      	bne.n	80033ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d116      	bne.n	80033ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c0:	4b99      	ldr	r3, [pc, #612]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x328>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e249      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b93      	ldr	r3, [pc, #588]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	4990      	ldr	r1, [pc, #576]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ec:	e040      	b.n	8003470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d023      	beq.n	800343e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f6:	4b8c      	ldr	r3, [pc, #560]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a8b      	ldr	r2, [pc, #556]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fe fdd9 	bl	8001fb8 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340a:	f7fe fdd5 	bl	8001fb8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e227      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800341c:	4b82      	ldr	r3, [pc, #520]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003428:	4b7f      	ldr	r3, [pc, #508]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	497c      	ldr	r1, [pc, #496]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
 800343c:	e018      	b.n	8003470 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343e:	4b7a      	ldr	r3, [pc, #488]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a79      	ldr	r2, [pc, #484]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7fe fdb5 	bl	8001fb8 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003452:	f7fe fdb1 	bl	8001fb8 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e203      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003464:	4b70      	ldr	r3, [pc, #448]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d03c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01c      	beq.n	80034be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003484:	4b68      	ldr	r3, [pc, #416]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800348a:	4a67      	ldr	r2, [pc, #412]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe fd90 	bl	8001fb8 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe fd8c 	bl	8001fb8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1de      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ae:	4b5e      	ldr	r3, [pc, #376]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80034b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ef      	beq.n	800349c <HAL_RCC_OscConfig+0x3ec>
 80034bc:	e01b      	b.n	80034f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034be:	4b5a      	ldr	r3, [pc, #360]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80034c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c4:	4a58      	ldr	r2, [pc, #352]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ce:	f7fe fd73 	bl	8001fb8 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d6:	f7fe fd6f 	bl	8001fb8 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e1c1      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e8:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80034ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ef      	bne.n	80034d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80a6 	beq.w	8003650 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003504:	2300      	movs	r3, #0
 8003506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003508:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10d      	bne.n	8003530 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003514:	4b44      	ldr	r3, [pc, #272]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	4a43      	ldr	r2, [pc, #268]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 800351a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351e:	6593      	str	r3, [r2, #88]	; 0x58
 8003520:	4b41      	ldr	r3, [pc, #260]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352c:	2301      	movs	r3, #1
 800352e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003530:	4b3e      	ldr	r3, [pc, #248]	; (800362c <HAL_RCC_OscConfig+0x57c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d118      	bne.n	800356e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800353c:	4b3b      	ldr	r3, [pc, #236]	; (800362c <HAL_RCC_OscConfig+0x57c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a3a      	ldr	r2, [pc, #232]	; (800362c <HAL_RCC_OscConfig+0x57c>)
 8003542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003548:	f7fe fd36 	bl	8001fb8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003550:	f7fe fd32 	bl	8001fb8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e184      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003562:	4b32      	ldr	r3, [pc, #200]	; (800362c <HAL_RCC_OscConfig+0x57c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d108      	bne.n	8003588 <HAL_RCC_OscConfig+0x4d8>
 8003576:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	4a2a      	ldr	r2, [pc, #168]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003586:	e024      	b.n	80035d2 <HAL_RCC_OscConfig+0x522>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	2b05      	cmp	r3, #5
 800358e:	d110      	bne.n	80035b2 <HAL_RCC_OscConfig+0x502>
 8003590:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	4a24      	ldr	r2, [pc, #144]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035a0:	4b21      	ldr	r3, [pc, #132]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	4a20      	ldr	r2, [pc, #128]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b0:	e00f      	b.n	80035d2 <HAL_RCC_OscConfig+0x522>
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c2:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	4a17      	ldr	r2, [pc, #92]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80035ca:	f023 0304 	bic.w	r3, r3, #4
 80035ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fe fced 	bl	8001fb8 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e0:	e00a      	b.n	80035f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e2:	f7fe fce9 	bl	8001fb8 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e139      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_OscConfig+0x578>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0ed      	beq.n	80035e2 <HAL_RCC_OscConfig+0x532>
 8003606:	e01a      	b.n	800363e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fe fcd6 	bl	8001fb8 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800360e:	e00f      	b.n	8003630 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003610:	f7fe fcd2 	bl	8001fb8 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d906      	bls.n	8003630 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e122      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
 8003626:	bf00      	nop
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003630:	4b90      	ldr	r3, [pc, #576]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e8      	bne.n	8003610 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800363e:	7ffb      	ldrb	r3, [r7, #31]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003644:	4b8b      	ldr	r3, [pc, #556]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003648:	4a8a      	ldr	r2, [pc, #552]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 800364a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800364e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8108 	beq.w	800386a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	2b02      	cmp	r3, #2
 8003660:	f040 80d0 	bne.w	8003804 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003664:	4b83      	ldr	r3, [pc, #524]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 0203 	and.w	r2, r3, #3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	429a      	cmp	r2, r3
 8003676:	d130      	bne.n	80036da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	3b01      	subs	r3, #1
 8003684:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d127      	bne.n	80036da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d11f      	bne.n	80036da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036a4:	2a07      	cmp	r2, #7
 80036a6:	bf14      	ite	ne
 80036a8:	2201      	movne	r2, #1
 80036aa:	2200      	moveq	r2, #0
 80036ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d113      	bne.n	80036da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	3b01      	subs	r3, #1
 80036c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d109      	bne.n	80036da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	3b01      	subs	r3, #1
 80036d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d06e      	beq.n	80037b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	d069      	beq.n	80037b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036e0:	4b64      	ldr	r3, [pc, #400]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036ec:	4b61      	ldr	r3, [pc, #388]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0b7      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036fc:	4b5d      	ldr	r3, [pc, #372]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a5c      	ldr	r2, [pc, #368]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003706:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003708:	f7fe fc56 	bl	8001fb8 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe fc52 	bl	8001fb8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0a4      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003722:	4b54      	ldr	r3, [pc, #336]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800372e:	4b51      	ldr	r3, [pc, #324]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	4b51      	ldr	r3, [pc, #324]	; (8003878 <HAL_RCC_OscConfig+0x7c8>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800373e:	3a01      	subs	r2, #1
 8003740:	0112      	lsls	r2, r2, #4
 8003742:	4311      	orrs	r1, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003748:	0212      	lsls	r2, r2, #8
 800374a:	4311      	orrs	r1, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003750:	0852      	lsrs	r2, r2, #1
 8003752:	3a01      	subs	r2, #1
 8003754:	0552      	lsls	r2, r2, #21
 8003756:	4311      	orrs	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800375c:	0852      	lsrs	r2, r2, #1
 800375e:	3a01      	subs	r2, #1
 8003760:	0652      	lsls	r2, r2, #25
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003768:	0912      	lsrs	r2, r2, #4
 800376a:	0452      	lsls	r2, r2, #17
 800376c:	430a      	orrs	r2, r1
 800376e:	4941      	ldr	r1, [pc, #260]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003774:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a3e      	ldr	r2, [pc, #248]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003780:	4b3c      	ldr	r3, [pc, #240]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a3b      	ldr	r2, [pc, #236]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800378c:	f7fe fc14 	bl	8001fb8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe fc10 	bl	8001fb8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e062      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	4b33      	ldr	r3, [pc, #204]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b2:	e05a      	b.n	800386a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e059      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b8:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d152      	bne.n	800386a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037c4:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2a      	ldr	r2, [pc, #168]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 80037ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037d0:	4b28      	ldr	r3, [pc, #160]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a27      	ldr	r2, [pc, #156]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 80037d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037dc:	f7fe fbec 	bl	8001fb8 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fe fbe8 	bl	8001fb8 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e03a      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x734>
 8003802:	e032      	b.n	800386a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d02d      	beq.n	8003866 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003814:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d105      	bne.n	800382e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003822:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	4a13      	ldr	r2, [pc, #76]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003828:	f023 0303 	bic.w	r3, r3, #3
 800382c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	4a10      	ldr	r2, [pc, #64]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 8003834:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fe fbbb 	bl	8001fb8 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003846:	f7fe fbb7 	bl	8001fb8 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e009      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_RCC_OscConfig+0x7c4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0x796>
 8003864:	e001      	b.n	800386a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	f99d808c 	.word	0xf99d808c

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0c8      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b66      	ldr	r3, [pc, #408]	; (8003a2c <HAL_RCC_ClockConfig+0x1b0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d910      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_RCC_ClockConfig+0x1b0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 0207 	bic.w	r2, r3, #7
 80038a6:	4961      	ldr	r1, [pc, #388]	; (8003a2c <HAL_RCC_ClockConfig+0x1b0>)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b5f      	ldr	r3, [pc, #380]	; (8003a2c <HAL_RCC_ClockConfig+0x1b0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0b0      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d04c      	beq.n	8003966 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d107      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d4:	4b56      	ldr	r3, [pc, #344]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d121      	bne.n	8003924 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e09e      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ec:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d115      	bne.n	8003924 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e092      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d107      	bne.n	8003914 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003904:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e086      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003914:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e07e      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003924:	4b42      	ldr	r3, [pc, #264]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 0203 	bic.w	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	493f      	ldr	r1, [pc, #252]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003936:	f7fe fb3f 	bl	8001fb8 <HAL_GetTick>
 800393a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393c:	e00a      	b.n	8003954 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393e:	f7fe fb3b 	bl	8001fb8 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f241 3288 	movw	r2, #5000	; 0x1388
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e066      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003954:	4b36      	ldr	r3, [pc, #216]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 020c 	and.w	r2, r3, #12
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	429a      	cmp	r2, r3
 8003964:	d1eb      	bne.n	800393e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003972:	4b2f      	ldr	r3, [pc, #188]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	492c      	ldr	r1, [pc, #176]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCC_ClockConfig+0x1b0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d210      	bcs.n	80039b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <HAL_RCC_ClockConfig+0x1b0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 0207 	bic.w	r2, r3, #7
 800399a:	4924      	ldr	r1, [pc, #144]	; (8003a2c <HAL_RCC_ClockConfig+0x1b0>)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b22      	ldr	r3, [pc, #136]	; (8003a2c <HAL_RCC_ClockConfig+0x1b0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e036      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4918      	ldr	r1, [pc, #96]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4910      	ldr	r1, [pc, #64]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039f2:	f000 f825 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <HAL_RCC_ClockConfig+0x1b4>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	490c      	ldr	r1, [pc, #48]	; (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	5ccb      	ldrb	r3, [r1, r3]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fa7e 	bl	8001f18 <HAL_InitTick>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a20:	7afb      	ldrb	r3, [r7, #11]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	40021000 	.word	0x40021000
 8003a34:	08009848 	.word	0x08009848
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	20000004 	.word	0x20000004

08003a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a4e:	4b3e      	ldr	r3, [pc, #248]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a58:	4b3b      	ldr	r3, [pc, #236]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x34>
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d121      	bne.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d11e      	bne.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a74:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a80:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	e005      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a90:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a9c:	4a2b      	ldr	r2, [pc, #172]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10d      	bne.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d102      	bne.n	8003abe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ab8:	4b25      	ldr	r3, [pc, #148]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	e004      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ac4:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ac6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	2b0c      	cmp	r3, #12
 8003acc:	d134      	bne.n	8003b38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ace:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d003      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0xac>
 8003ae4:	e005      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ae8:	617b      	str	r3, [r7, #20]
      break;
 8003aea:	e005      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003aec:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aee:	617b      	str	r3, [r7, #20]
      break;
 8003af0:	e002      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	617b      	str	r3, [r7, #20]
      break;
 8003af6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003af8:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	3301      	adds	r3, #1
 8003b04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	fb02 f203 	mul.w	r2, r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	0e5b      	lsrs	r3, r3, #25
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b38:	69bb      	ldr	r3, [r7, #24]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3724      	adds	r7, #36	; 0x24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	08009860 	.word	0x08009860
 8003b50:	00f42400 	.word	0x00f42400
 8003b54:	007a1200 	.word	0x007a1200

08003b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20000000 	.word	0x20000000

08003b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b74:	f7ff fff0 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	4904      	ldr	r1, [pc, #16]	; (8003b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b86:	5ccb      	ldrb	r3, [r1, r3]
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	08009858 	.word	0x08009858

08003b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ba0:	f7ff ffda 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	0adb      	lsrs	r3, r3, #11
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4904      	ldr	r1, [pc, #16]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	f003 031f 	and.w	r3, r3, #31
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	08009858 	.word	0x08009858

08003bc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bd4:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003be0:	f7ff fa02 	bl	8002fe8 <HAL_PWREx_GetVoltageRange>
 8003be4:	6178      	str	r0, [r7, #20]
 8003be6:	e014      	b.n	8003c12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	4a24      	ldr	r2, [pc, #144]	; (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf4:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c00:	f7ff f9f2 	bl	8002fe8 <HAL_PWREx_GetVoltageRange>
 8003c04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c06:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c18:	d10b      	bne.n	8003c32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d919      	bls.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2ba0      	cmp	r3, #160	; 0xa0
 8003c24:	d902      	bls.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c26:	2302      	movs	r3, #2
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e013      	b.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	e010      	b.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b80      	cmp	r3, #128	; 0x80
 8003c36:	d902      	bls.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c38:	2303      	movs	r3, #3
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e00a      	b.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d102      	bne.n	8003c4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c44:	2302      	movs	r3, #2
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	e004      	b.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b70      	cmp	r3, #112	; 0x70
 8003c4e:	d101      	bne.n	8003c54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c50:	2301      	movs	r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 0207 	bic.w	r2, r3, #7
 8003c5c:	4909      	ldr	r1, [pc, #36]	; (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c64:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d001      	beq.n	8003c76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40022000 	.word	0x40022000

08003c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c90:	2300      	movs	r3, #0
 8003c92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c94:	2300      	movs	r3, #0
 8003c96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d041      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cac:	d02a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cb2:	d824      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cb8:	d008      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cbe:	d81e      	bhi.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc8:	d010      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cca:	e018      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ccc:	4b86      	ldr	r3, [pc, #536]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a85      	ldr	r2, [pc, #532]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cd8:	e015      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fabb 	bl	800425c <RCCEx_PLLSAI1_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cea:	e00c      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3320      	adds	r3, #32
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fba6 	bl	8004444 <RCCEx_PLLSAI2_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cfc:	e003      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	74fb      	strb	r3, [r7, #19]
      break;
 8003d02:	e000      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d0c:	4b76      	ldr	r3, [pc, #472]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d1a:	4973      	ldr	r1, [pc, #460]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d22:	e001      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d041      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d3c:	d02a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d42:	d824      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d48:	d008      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d4e:	d81e      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d58:	d010      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d5a:	e018      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d5c:	4b62      	ldr	r3, [pc, #392]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a61      	ldr	r2, [pc, #388]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d68:	e015      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fa73 	bl	800425c <RCCEx_PLLSAI1_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d7a:	e00c      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3320      	adds	r3, #32
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fb5e 	bl	8004444 <RCCEx_PLLSAI2_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d8c:	e003      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	74fb      	strb	r3, [r7, #19]
      break;
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d9c:	4b52      	ldr	r3, [pc, #328]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003daa:	494f      	ldr	r1, [pc, #316]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003db2:	e001      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80a0 	beq.w	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dca:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dea:	6593      	str	r3, [r2, #88]	; 0x58
 8003dec:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfc:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a3a      	ldr	r2, [pc, #232]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e08:	f7fe f8d6 	bl	8001fb8 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e0e:	e009      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fe f8d2 	bl	8001fb8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	74fb      	strb	r3, [r7, #19]
        break;
 8003e22:	e005      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e24:	4b31      	ldr	r3, [pc, #196]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ef      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e30:	7cfb      	ldrb	r3, [r7, #19]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d15c      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e36:	4b2c      	ldr	r3, [pc, #176]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01f      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d019      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e54:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e60:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	4a20      	ldr	r2, [pc, #128]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e80:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fe f891 	bl	8001fb8 <HAL_GetTick>
 8003e96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e98:	e00b      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe f88d 	bl	8001fb8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d902      	bls.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	74fb      	strb	r3, [r7, #19]
            break;
 8003eb0:	e006      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ec      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ec0:	7cfb      	ldrb	r3, [r7, #19]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed6:	4904      	ldr	r1, [pc, #16]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ede:	e009      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	74bb      	strb	r3, [r7, #18]
 8003ee4:	e006      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7cfb      	ldrb	r3, [r7, #19]
 8003ef2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef4:	7c7b      	ldrb	r3, [r7, #17]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d105      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efa:	4b9e      	ldr	r3, [pc, #632]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efe:	4a9d      	ldr	r2, [pc, #628]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f12:	4b98      	ldr	r3, [pc, #608]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	f023 0203 	bic.w	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	4994      	ldr	r1, [pc, #592]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f34:	4b8f      	ldr	r3, [pc, #572]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	f023 020c 	bic.w	r2, r3, #12
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	498c      	ldr	r1, [pc, #560]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f56:	4b87      	ldr	r3, [pc, #540]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	4983      	ldr	r1, [pc, #524]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f78:	4b7e      	ldr	r3, [pc, #504]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	497b      	ldr	r1, [pc, #492]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f9a:	4b76      	ldr	r3, [pc, #472]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa8:	4972      	ldr	r1, [pc, #456]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fbc:	4b6d      	ldr	r3, [pc, #436]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	496a      	ldr	r1, [pc, #424]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fde:	4b65      	ldr	r3, [pc, #404]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fec:	4961      	ldr	r1, [pc, #388]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004000:	4b5c      	ldr	r3, [pc, #368]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400e:	4959      	ldr	r1, [pc, #356]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004022:	4b54      	ldr	r3, [pc, #336]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004030:	4950      	ldr	r1, [pc, #320]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004044:	4b4b      	ldr	r3, [pc, #300]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	4948      	ldr	r1, [pc, #288]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004066:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	493f      	ldr	r1, [pc, #252]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d028      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004088:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004096:	4937      	ldr	r1, [pc, #220]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040a6:	d106      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a8:	4b32      	ldr	r3, [pc, #200]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a31      	ldr	r2, [pc, #196]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b2:	60d3      	str	r3, [r2, #12]
 80040b4:	e011      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040be:	d10c      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3304      	adds	r3, #4
 80040c4:	2101      	movs	r1, #1
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f8c8 	bl	800425c <RCCEx_PLLSAI1_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040d6:	7cfb      	ldrb	r3, [r7, #19]
 80040d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d028      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040e6:	4b23      	ldr	r3, [pc, #140]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	491f      	ldr	r1, [pc, #124]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004104:	d106      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004106:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	4a1a      	ldr	r2, [pc, #104]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004110:	60d3      	str	r3, [r2, #12]
 8004112:	e011      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800411c:	d10c      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f899 	bl	800425c <RCCEx_PLLSAI1_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02b      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004152:	4908      	ldr	r1, [pc, #32]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004162:	d109      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004164:	4b03      	ldr	r3, [pc, #12]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4a02      	ldr	r2, [pc, #8]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800416e:	60d3      	str	r3, [r2, #12]
 8004170:	e014      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004180:	d10c      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	2101      	movs	r1, #1
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f867 	bl	800425c <RCCEx_PLLSAI1_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02f      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b6:	4928      	ldr	r1, [pc, #160]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c6:	d10d      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f844 	bl	800425c <RCCEx_PLLSAI1_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d014      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	74bb      	strb	r3, [r7, #18]
 80041e2:	e011      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ec:	d10c      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3320      	adds	r3, #32
 80041f2:	2102      	movs	r1, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f925 	bl	8004444 <RCCEx_PLLSAI2_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004222:	490d      	ldr	r1, [pc, #52]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004236:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004246:	4904      	ldr	r1, [pc, #16]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800424e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000

0800425c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800426a:	4b75      	ldr	r3, [pc, #468]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d018      	beq.n	80042a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004276:	4b72      	ldr	r3, [pc, #456]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0203 	and.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d10d      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
       ||
 800428a:	2b00      	cmp	r3, #0
 800428c:	d009      	beq.n	80042a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800428e:	4b6c      	ldr	r3, [pc, #432]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
       ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d047      	beq.n	8004332 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
 80042a6:	e044      	b.n	8004332 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d018      	beq.n	80042e2 <RCCEx_PLLSAI1_Config+0x86>
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d825      	bhi.n	8004300 <RCCEx_PLLSAI1_Config+0xa4>
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d002      	beq.n	80042be <RCCEx_PLLSAI1_Config+0x62>
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d009      	beq.n	80042d0 <RCCEx_PLLSAI1_Config+0x74>
 80042bc:	e020      	b.n	8004300 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042be:	4b60      	ldr	r3, [pc, #384]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d11d      	bne.n	8004306 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ce:	e01a      	b.n	8004306 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042d0:	4b5b      	ldr	r3, [pc, #364]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d116      	bne.n	800430a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e0:	e013      	b.n	800430a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042e2:	4b57      	ldr	r3, [pc, #348]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10f      	bne.n	800430e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ee:	4b54      	ldr	r3, [pc, #336]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042fe:	e006      	b.n	800430e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
      break;
 8004304:	e004      	b.n	8004310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004306:	bf00      	nop
 8004308:	e002      	b.n	8004310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800430e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004316:	4b4a      	ldr	r3, [pc, #296]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	430b      	orrs	r3, r1
 800432c:	4944      	ldr	r1, [pc, #272]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d17d      	bne.n	8004434 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004338:	4b41      	ldr	r3, [pc, #260]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a40      	ldr	r2, [pc, #256]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004344:	f7fd fe38 	bl	8001fb8 <HAL_GetTick>
 8004348:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800434a:	e009      	b.n	8004360 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800434c:	f7fd fe34 	bl	8001fb8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d902      	bls.n	8004360 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	73fb      	strb	r3, [r7, #15]
        break;
 800435e:	e005      	b.n	800436c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004360:	4b37      	ldr	r3, [pc, #220]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1ef      	bne.n	800434c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d160      	bne.n	8004434 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d111      	bne.n	800439c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004378:	4b31      	ldr	r3, [pc, #196]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6892      	ldr	r2, [r2, #8]
 8004388:	0211      	lsls	r1, r2, #8
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	68d2      	ldr	r2, [r2, #12]
 800438e:	0912      	lsrs	r2, r2, #4
 8004390:	0452      	lsls	r2, r2, #17
 8004392:	430a      	orrs	r2, r1
 8004394:	492a      	ldr	r1, [pc, #168]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	610b      	str	r3, [r1, #16]
 800439a:	e027      	b.n	80043ec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d112      	bne.n	80043c8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043a2:	4b27      	ldr	r3, [pc, #156]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6892      	ldr	r2, [r2, #8]
 80043b2:	0211      	lsls	r1, r2, #8
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6912      	ldr	r2, [r2, #16]
 80043b8:	0852      	lsrs	r2, r2, #1
 80043ba:	3a01      	subs	r2, #1
 80043bc:	0552      	lsls	r2, r2, #21
 80043be:	430a      	orrs	r2, r1
 80043c0:	491f      	ldr	r1, [pc, #124]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	610b      	str	r3, [r1, #16]
 80043c6:	e011      	b.n	80043ec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6892      	ldr	r2, [r2, #8]
 80043d8:	0211      	lsls	r1, r2, #8
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6952      	ldr	r2, [r2, #20]
 80043de:	0852      	lsrs	r2, r2, #1
 80043e0:	3a01      	subs	r2, #1
 80043e2:	0652      	lsls	r2, r2, #25
 80043e4:	430a      	orrs	r2, r1
 80043e6:	4916      	ldr	r1, [pc, #88]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043ec:	4b14      	ldr	r3, [pc, #80]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a13      	ldr	r2, [pc, #76]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f8:	f7fd fdde 	bl	8001fb8 <HAL_GetTick>
 80043fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043fe:	e009      	b.n	8004414 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004400:	f7fd fdda 	bl	8001fb8 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d902      	bls.n	8004414 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	73fb      	strb	r3, [r7, #15]
          break;
 8004412:	e005      	b.n	8004420 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ef      	beq.n	8004400 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	4904      	ldr	r1, [pc, #16]	; (8004440 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004430:	4313      	orrs	r3, r2
 8004432:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000

08004444 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004452:	4b6a      	ldr	r3, [pc, #424]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d018      	beq.n	8004490 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800445e:	4b67      	ldr	r3, [pc, #412]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0203 	and.w	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d10d      	bne.n	800448a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
       ||
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004476:	4b61      	ldr	r3, [pc, #388]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	091b      	lsrs	r3, r3, #4
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
       ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d047      	beq.n	800451a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	e044      	b.n	800451a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d018      	beq.n	80044ca <RCCEx_PLLSAI2_Config+0x86>
 8004498:	2b03      	cmp	r3, #3
 800449a:	d825      	bhi.n	80044e8 <RCCEx_PLLSAI2_Config+0xa4>
 800449c:	2b01      	cmp	r3, #1
 800449e:	d002      	beq.n	80044a6 <RCCEx_PLLSAI2_Config+0x62>
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d009      	beq.n	80044b8 <RCCEx_PLLSAI2_Config+0x74>
 80044a4:	e020      	b.n	80044e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044a6:	4b55      	ldr	r3, [pc, #340]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11d      	bne.n	80044ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b6:	e01a      	b.n	80044ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044b8:	4b50      	ldr	r3, [pc, #320]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d116      	bne.n	80044f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c8:	e013      	b.n	80044f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044ca:	4b4c      	ldr	r3, [pc, #304]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10f      	bne.n	80044f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044d6:	4b49      	ldr	r3, [pc, #292]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044e6:	e006      	b.n	80044f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
      break;
 80044ec:	e004      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ee:	bf00      	nop
 80044f0:	e002      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044fe:	4b3f      	ldr	r3, [pc, #252]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	3b01      	subs	r3, #1
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	430b      	orrs	r3, r1
 8004514:	4939      	ldr	r1, [pc, #228]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d167      	bne.n	80045f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004520:	4b36      	ldr	r3, [pc, #216]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a35      	ldr	r2, [pc, #212]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452c:	f7fd fd44 	bl	8001fb8 <HAL_GetTick>
 8004530:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004532:	e009      	b.n	8004548 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004534:	f7fd fd40 	bl	8001fb8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d902      	bls.n	8004548 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	73fb      	strb	r3, [r7, #15]
        break;
 8004546:	e005      	b.n	8004554 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004548:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ef      	bne.n	8004534 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d14a      	bne.n	80045f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d111      	bne.n	8004584 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004560:	4b26      	ldr	r3, [pc, #152]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6892      	ldr	r2, [r2, #8]
 8004570:	0211      	lsls	r1, r2, #8
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68d2      	ldr	r2, [r2, #12]
 8004576:	0912      	lsrs	r2, r2, #4
 8004578:	0452      	lsls	r2, r2, #17
 800457a:	430a      	orrs	r2, r1
 800457c:	491f      	ldr	r1, [pc, #124]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800457e:	4313      	orrs	r3, r2
 8004580:	614b      	str	r3, [r1, #20]
 8004582:	e011      	b.n	80045a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800458c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6892      	ldr	r2, [r2, #8]
 8004594:	0211      	lsls	r1, r2, #8
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6912      	ldr	r2, [r2, #16]
 800459a:	0852      	lsrs	r2, r2, #1
 800459c:	3a01      	subs	r2, #1
 800459e:	0652      	lsls	r2, r2, #25
 80045a0:	430a      	orrs	r2, r1
 80045a2:	4916      	ldr	r1, [pc, #88]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a13      	ldr	r2, [pc, #76]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fd fd00 	bl	8001fb8 <HAL_GetTick>
 80045b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045ba:	e009      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045bc:	f7fd fcfc 	bl	8001fb8 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d902      	bls.n	80045d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	73fb      	strb	r3, [r7, #15]
          break;
 80045ce:	e005      	b.n	80045dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045d0:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ef      	beq.n	80045bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e4:	695a      	ldr	r2, [r3, #20]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	4904      	ldr	r1, [pc, #16]	; (80045fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000

08004600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e049      	b.n	80046a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fd f848 	bl	80016bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f000 f98c 	bl	800495c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e047      	b.n	8004758 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a23      	ldr	r2, [pc, #140]	; (8004764 <HAL_TIM_Base_Start+0xb4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01d      	beq.n	8004716 <HAL_TIM_Base_Start+0x66>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e2:	d018      	beq.n	8004716 <HAL_TIM_Base_Start+0x66>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <HAL_TIM_Base_Start+0xb8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_TIM_Base_Start+0x66>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1e      	ldr	r2, [pc, #120]	; (800476c <HAL_TIM_Base_Start+0xbc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_TIM_Base_Start+0x66>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1c      	ldr	r2, [pc, #112]	; (8004770 <HAL_TIM_Base_Start+0xc0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_TIM_Base_Start+0x66>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <HAL_TIM_Base_Start+0xc4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_TIM_Base_Start+0x66>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a19      	ldr	r2, [pc, #100]	; (8004778 <HAL_TIM_Base_Start+0xc8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d115      	bne.n	8004742 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	4b17      	ldr	r3, [pc, #92]	; (800477c <HAL_TIM_Base_Start+0xcc>)
 800471e:	4013      	ands	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b06      	cmp	r3, #6
 8004726:	d015      	beq.n	8004754 <HAL_TIM_Base_Start+0xa4>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472e:	d011      	beq.n	8004754 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004740:	e008      	b.n	8004754 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	e000      	b.n	8004756 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004754:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	40012c00 	.word	0x40012c00
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40013400 	.word	0x40013400
 8004778:	40014000 	.word	0x40014000
 800477c:	00010007 	.word	0x00010007

08004780 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6a1a      	ldr	r2, [r3, #32]
 800478e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10f      	bne.n	80047b8 <HAL_TIM_Base_Stop+0x38>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	f240 4344 	movw	r3, #1092	; 0x444
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_Base_Stop+0x38>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_ConfigClockSource+0x18>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e0b5      	b.n	8004952 <HAL_TIM_ConfigClockSource+0x184>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004804:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004808:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004810:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004822:	d03e      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0xd4>
 8004824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004828:	f200 8087 	bhi.w	800493a <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	f000 8085 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x170>
 8004834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004838:	d87f      	bhi.n	800493a <HAL_TIM_ConfigClockSource+0x16c>
 800483a:	2b70      	cmp	r3, #112	; 0x70
 800483c:	d01a      	beq.n	8004874 <HAL_TIM_ConfigClockSource+0xa6>
 800483e:	2b70      	cmp	r3, #112	; 0x70
 8004840:	d87b      	bhi.n	800493a <HAL_TIM_ConfigClockSource+0x16c>
 8004842:	2b60      	cmp	r3, #96	; 0x60
 8004844:	d050      	beq.n	80048e8 <HAL_TIM_ConfigClockSource+0x11a>
 8004846:	2b60      	cmp	r3, #96	; 0x60
 8004848:	d877      	bhi.n	800493a <HAL_TIM_ConfigClockSource+0x16c>
 800484a:	2b50      	cmp	r3, #80	; 0x50
 800484c:	d03c      	beq.n	80048c8 <HAL_TIM_ConfigClockSource+0xfa>
 800484e:	2b50      	cmp	r3, #80	; 0x50
 8004850:	d873      	bhi.n	800493a <HAL_TIM_ConfigClockSource+0x16c>
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d058      	beq.n	8004908 <HAL_TIM_ConfigClockSource+0x13a>
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d86f      	bhi.n	800493a <HAL_TIM_ConfigClockSource+0x16c>
 800485a:	2b30      	cmp	r3, #48	; 0x30
 800485c:	d064      	beq.n	8004928 <HAL_TIM_ConfigClockSource+0x15a>
 800485e:	2b30      	cmp	r3, #48	; 0x30
 8004860:	d86b      	bhi.n	800493a <HAL_TIM_ConfigClockSource+0x16c>
 8004862:	2b20      	cmp	r3, #32
 8004864:	d060      	beq.n	8004928 <HAL_TIM_ConfigClockSource+0x15a>
 8004866:	2b20      	cmp	r3, #32
 8004868:	d867      	bhi.n	800493a <HAL_TIM_ConfigClockSource+0x16c>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d05c      	beq.n	8004928 <HAL_TIM_ConfigClockSource+0x15a>
 800486e:	2b10      	cmp	r3, #16
 8004870:	d05a      	beq.n	8004928 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004872:	e062      	b.n	800493a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	6899      	ldr	r1, [r3, #8]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f000 f97e 	bl	8004b84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004896:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	609a      	str	r2, [r3, #8]
      break;
 80048a0:	e04e      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6899      	ldr	r1, [r3, #8]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f000 f967 	bl	8004b84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048c4:	609a      	str	r2, [r3, #8]
      break;
 80048c6:	e03b      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	6859      	ldr	r1, [r3, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	461a      	mov	r2, r3
 80048d6:	f000 f8db 	bl	8004a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2150      	movs	r1, #80	; 0x50
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 f934 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 80048e6:	e02b      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6859      	ldr	r1, [r3, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	461a      	mov	r2, r3
 80048f6:	f000 f8fa 	bl	8004aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2160      	movs	r1, #96	; 0x60
 8004900:	4618      	mov	r0, r3
 8004902:	f000 f924 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 8004906:	e01b      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	6859      	ldr	r1, [r3, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	461a      	mov	r2, r3
 8004916:	f000 f8bb 	bl	8004a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2140      	movs	r1, #64	; 0x40
 8004920:	4618      	mov	r0, r3
 8004922:	f000 f914 	bl	8004b4e <TIM_ITRx_SetConfig>
      break;
 8004926:	e00b      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 f90b 	bl	8004b4e <TIM_ITRx_SetConfig>
        break;
 8004938:	e002      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800493e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a40      	ldr	r2, [pc, #256]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d00f      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3d      	ldr	r2, [pc, #244]	; (8004a74 <TIM_Base_SetConfig+0x118>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00b      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3c      	ldr	r2, [pc, #240]	; (8004a78 <TIM_Base_SetConfig+0x11c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3b      	ldr	r2, [pc, #236]	; (8004a7c <TIM_Base_SetConfig+0x120>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d108      	bne.n	80049ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d01f      	beq.n	80049f6 <TIM_Base_SetConfig+0x9a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049bc:	d01b      	beq.n	80049f6 <TIM_Base_SetConfig+0x9a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <TIM_Base_SetConfig+0x118>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d017      	beq.n	80049f6 <TIM_Base_SetConfig+0x9a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2b      	ldr	r2, [pc, #172]	; (8004a78 <TIM_Base_SetConfig+0x11c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <TIM_Base_SetConfig+0x9a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <TIM_Base_SetConfig+0x120>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00f      	beq.n	80049f6 <TIM_Base_SetConfig+0x9a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00b      	beq.n	80049f6 <TIM_Base_SetConfig+0x9a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <TIM_Base_SetConfig+0x128>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <TIM_Base_SetConfig+0x9a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a27      	ldr	r2, [pc, #156]	; (8004a88 <TIM_Base_SetConfig+0x12c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d003      	beq.n	80049f6 <TIM_Base_SetConfig+0x9a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a26      	ldr	r2, [pc, #152]	; (8004a8c <TIM_Base_SetConfig+0x130>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d108      	bne.n	8004a08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a10      	ldr	r2, [pc, #64]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00f      	beq.n	8004a54 <TIM_Base_SetConfig+0xf8>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a12      	ldr	r2, [pc, #72]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_Base_SetConfig+0xf8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a11      	ldr	r2, [pc, #68]	; (8004a84 <TIM_Base_SetConfig+0x128>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_Base_SetConfig+0xf8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a10      	ldr	r2, [pc, #64]	; (8004a88 <TIM_Base_SetConfig+0x12c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_Base_SetConfig+0xf8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a0f      	ldr	r2, [pc, #60]	; (8004a8c <TIM_Base_SetConfig+0x130>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d103      	bne.n	8004a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	615a      	str	r2, [r3, #20]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40013400 	.word	0x40013400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800

08004a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f023 030a 	bic.w	r3, r3, #10
 8004acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b087      	sub	sp, #28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f023 0210 	bic.w	r2, r3, #16
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	031b      	lsls	r3, r3, #12
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f043 0307 	orr.w	r3, r3, #7
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	021a      	lsls	r2, r3, #8
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	609a      	str	r2, [r3, #8]
}
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e068      	b.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a2e      	ldr	r2, [pc, #184]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2d      	ldr	r2, [pc, #180]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d108      	bne.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1e      	ldr	r2, [pc, #120]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01d      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4e:	d018      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10c      	bne.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40013400 	.word	0x40013400
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40014000 	.word	0x40014000

08004cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e040      	b.n	8004d68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc fcfe 	bl	80016f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2224      	movs	r2, #36	; 0x24
 8004d00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f82c 	bl	8004d70 <UART_SetConfig>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e022      	b.n	8004d68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 faaa 	bl	8005284 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb31 	bl	80053c8 <UART_CheckIdleState>
 8004d66:	4603      	mov	r3, r0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d70:	b5b0      	push	{r4, r5, r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4bad      	ldr	r3, [pc, #692]	; (8005050 <UART_SetConfig+0x2e0>)
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	69f9      	ldr	r1, [r7, #28]
 8004da4:	430b      	orrs	r3, r1
 8004da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4aa2      	ldr	r2, [pc, #648]	; (8005054 <UART_SetConfig+0x2e4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d004      	beq.n	8004dd8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a99      	ldr	r2, [pc, #612]	; (8005058 <UART_SetConfig+0x2e8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d121      	bne.n	8004e3a <UART_SetConfig+0xca>
 8004df6:	4b99      	ldr	r3, [pc, #612]	; (800505c <UART_SetConfig+0x2ec>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d817      	bhi.n	8004e34 <UART_SetConfig+0xc4>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <UART_SetConfig+0x9c>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e29 	.word	0x08004e29
 8004e14:	08004e23 	.word	0x08004e23
 8004e18:	08004e2f 	.word	0x08004e2f
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	76fb      	strb	r3, [r7, #27]
 8004e20:	e0e7      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004e22:	2302      	movs	r3, #2
 8004e24:	76fb      	strb	r3, [r7, #27]
 8004e26:	e0e4      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	76fb      	strb	r3, [r7, #27]
 8004e2c:	e0e1      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004e2e:	2308      	movs	r3, #8
 8004e30:	76fb      	strb	r3, [r7, #27]
 8004e32:	e0de      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004e34:	2310      	movs	r3, #16
 8004e36:	76fb      	strb	r3, [r7, #27]
 8004e38:	e0db      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a88      	ldr	r2, [pc, #544]	; (8005060 <UART_SetConfig+0x2f0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d132      	bne.n	8004eaa <UART_SetConfig+0x13a>
 8004e44:	4b85      	ldr	r3, [pc, #532]	; (800505c <UART_SetConfig+0x2ec>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f003 030c 	and.w	r3, r3, #12
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d828      	bhi.n	8004ea4 <UART_SetConfig+0x134>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0xe8>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e8d 	.word	0x08004e8d
 8004e5c:	08004ea5 	.word	0x08004ea5
 8004e60:	08004ea5 	.word	0x08004ea5
 8004e64:	08004ea5 	.word	0x08004ea5
 8004e68:	08004e99 	.word	0x08004e99
 8004e6c:	08004ea5 	.word	0x08004ea5
 8004e70:	08004ea5 	.word	0x08004ea5
 8004e74:	08004ea5 	.word	0x08004ea5
 8004e78:	08004e93 	.word	0x08004e93
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004ea5 	.word	0x08004ea5
 8004e84:	08004ea5 	.word	0x08004ea5
 8004e88:	08004e9f 	.word	0x08004e9f
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	76fb      	strb	r3, [r7, #27]
 8004e90:	e0af      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004e92:	2302      	movs	r3, #2
 8004e94:	76fb      	strb	r3, [r7, #27]
 8004e96:	e0ac      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004e98:	2304      	movs	r3, #4
 8004e9a:	76fb      	strb	r3, [r7, #27]
 8004e9c:	e0a9      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	76fb      	strb	r3, [r7, #27]
 8004ea2:	e0a6      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	76fb      	strb	r3, [r7, #27]
 8004ea8:	e0a3      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6d      	ldr	r2, [pc, #436]	; (8005064 <UART_SetConfig+0x2f4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d120      	bne.n	8004ef6 <UART_SetConfig+0x186>
 8004eb4:	4b69      	ldr	r3, [pc, #420]	; (800505c <UART_SetConfig+0x2ec>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ebe:	2b30      	cmp	r3, #48	; 0x30
 8004ec0:	d013      	beq.n	8004eea <UART_SetConfig+0x17a>
 8004ec2:	2b30      	cmp	r3, #48	; 0x30
 8004ec4:	d814      	bhi.n	8004ef0 <UART_SetConfig+0x180>
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d009      	beq.n	8004ede <UART_SetConfig+0x16e>
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d810      	bhi.n	8004ef0 <UART_SetConfig+0x180>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <UART_SetConfig+0x168>
 8004ed2:	2b10      	cmp	r3, #16
 8004ed4:	d006      	beq.n	8004ee4 <UART_SetConfig+0x174>
 8004ed6:	e00b      	b.n	8004ef0 <UART_SetConfig+0x180>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	76fb      	strb	r3, [r7, #27]
 8004edc:	e089      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	76fb      	strb	r3, [r7, #27]
 8004ee2:	e086      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	76fb      	strb	r3, [r7, #27]
 8004ee8:	e083      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004eea:	2308      	movs	r3, #8
 8004eec:	76fb      	strb	r3, [r7, #27]
 8004eee:	e080      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	76fb      	strb	r3, [r7, #27]
 8004ef4:	e07d      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a5b      	ldr	r2, [pc, #364]	; (8005068 <UART_SetConfig+0x2f8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d120      	bne.n	8004f42 <UART_SetConfig+0x1d2>
 8004f00:	4b56      	ldr	r3, [pc, #344]	; (800505c <UART_SetConfig+0x2ec>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f0c:	d013      	beq.n	8004f36 <UART_SetConfig+0x1c6>
 8004f0e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f10:	d814      	bhi.n	8004f3c <UART_SetConfig+0x1cc>
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d009      	beq.n	8004f2a <UART_SetConfig+0x1ba>
 8004f16:	2b80      	cmp	r3, #128	; 0x80
 8004f18:	d810      	bhi.n	8004f3c <UART_SetConfig+0x1cc>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <UART_SetConfig+0x1b4>
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d006      	beq.n	8004f30 <UART_SetConfig+0x1c0>
 8004f22:	e00b      	b.n	8004f3c <UART_SetConfig+0x1cc>
 8004f24:	2300      	movs	r3, #0
 8004f26:	76fb      	strb	r3, [r7, #27]
 8004f28:	e063      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	76fb      	strb	r3, [r7, #27]
 8004f2e:	e060      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004f30:	2304      	movs	r3, #4
 8004f32:	76fb      	strb	r3, [r7, #27]
 8004f34:	e05d      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004f36:	2308      	movs	r3, #8
 8004f38:	76fb      	strb	r3, [r7, #27]
 8004f3a:	e05a      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	76fb      	strb	r3, [r7, #27]
 8004f40:	e057      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a49      	ldr	r2, [pc, #292]	; (800506c <UART_SetConfig+0x2fc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d125      	bne.n	8004f98 <UART_SetConfig+0x228>
 8004f4c:	4b43      	ldr	r3, [pc, #268]	; (800505c <UART_SetConfig+0x2ec>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5a:	d017      	beq.n	8004f8c <UART_SetConfig+0x21c>
 8004f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f60:	d817      	bhi.n	8004f92 <UART_SetConfig+0x222>
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f66:	d00b      	beq.n	8004f80 <UART_SetConfig+0x210>
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6c:	d811      	bhi.n	8004f92 <UART_SetConfig+0x222>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <UART_SetConfig+0x20a>
 8004f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f76:	d006      	beq.n	8004f86 <UART_SetConfig+0x216>
 8004f78:	e00b      	b.n	8004f92 <UART_SetConfig+0x222>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	76fb      	strb	r3, [r7, #27]
 8004f7e:	e038      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004f80:	2302      	movs	r3, #2
 8004f82:	76fb      	strb	r3, [r7, #27]
 8004f84:	e035      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004f86:	2304      	movs	r3, #4
 8004f88:	76fb      	strb	r3, [r7, #27]
 8004f8a:	e032      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	76fb      	strb	r3, [r7, #27]
 8004f90:	e02f      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004f92:	2310      	movs	r3, #16
 8004f94:	76fb      	strb	r3, [r7, #27]
 8004f96:	e02c      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <UART_SetConfig+0x2e4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d125      	bne.n	8004fee <UART_SetConfig+0x27e>
 8004fa2:	4b2e      	ldr	r3, [pc, #184]	; (800505c <UART_SetConfig+0x2ec>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb0:	d017      	beq.n	8004fe2 <UART_SetConfig+0x272>
 8004fb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb6:	d817      	bhi.n	8004fe8 <UART_SetConfig+0x278>
 8004fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbc:	d00b      	beq.n	8004fd6 <UART_SetConfig+0x266>
 8004fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc2:	d811      	bhi.n	8004fe8 <UART_SetConfig+0x278>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <UART_SetConfig+0x260>
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fcc:	d006      	beq.n	8004fdc <UART_SetConfig+0x26c>
 8004fce:	e00b      	b.n	8004fe8 <UART_SetConfig+0x278>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	76fb      	strb	r3, [r7, #27]
 8004fd4:	e00d      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	76fb      	strb	r3, [r7, #27]
 8004fda:	e00a      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	76fb      	strb	r3, [r7, #27]
 8004fe0:	e007      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	76fb      	strb	r3, [r7, #27]
 8004fe6:	e004      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	76fb      	strb	r3, [r7, #27]
 8004fec:	e001      	b.n	8004ff2 <UART_SetConfig+0x282>
 8004fee:	2310      	movs	r3, #16
 8004ff0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a17      	ldr	r2, [pc, #92]	; (8005054 <UART_SetConfig+0x2e4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	f040 8087 	bne.w	800510c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ffe:	7efb      	ldrb	r3, [r7, #27]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d837      	bhi.n	8005074 <UART_SetConfig+0x304>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0x29c>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005031 	.word	0x08005031
 8005010:	08005075 	.word	0x08005075
 8005014:	08005039 	.word	0x08005039
 8005018:	08005075 	.word	0x08005075
 800501c:	0800503f 	.word	0x0800503f
 8005020:	08005075 	.word	0x08005075
 8005024:	08005075 	.word	0x08005075
 8005028:	08005075 	.word	0x08005075
 800502c:	08005047 	.word	0x08005047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005030:	f7fe fd9e 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 8005034:	6178      	str	r0, [r7, #20]
        break;
 8005036:	e022      	b.n	800507e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <UART_SetConfig+0x300>)
 800503a:	617b      	str	r3, [r7, #20]
        break;
 800503c:	e01f      	b.n	800507e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503e:	f7fe fcff 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 8005042:	6178      	str	r0, [r7, #20]
        break;
 8005044:	e01b      	b.n	800507e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504a:	617b      	str	r3, [r7, #20]
        break;
 800504c:	e017      	b.n	800507e <UART_SetConfig+0x30e>
 800504e:	bf00      	nop
 8005050:	efff69f3 	.word	0xefff69f3
 8005054:	40008000 	.word	0x40008000
 8005058:	40013800 	.word	0x40013800
 800505c:	40021000 	.word	0x40021000
 8005060:	40004400 	.word	0x40004400
 8005064:	40004800 	.word	0x40004800
 8005068:	40004c00 	.word	0x40004c00
 800506c:	40005000 	.word	0x40005000
 8005070:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	76bb      	strb	r3, [r7, #26]
        break;
 800507c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80f1 	beq.w	8005268 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	4413      	add	r3, r2
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	429a      	cmp	r2, r3
 8005094:	d305      	bcc.n	80050a2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d902      	bls.n	80050a8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	76bb      	strb	r3, [r7, #26]
 80050a6:	e0df      	b.n	8005268 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f04f 0100 	mov.w	r1, #0
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	020b      	lsls	r3, r1, #8
 80050ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050be:	0202      	lsls	r2, r0, #8
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	6849      	ldr	r1, [r1, #4]
 80050c4:	0849      	lsrs	r1, r1, #1
 80050c6:	4608      	mov	r0, r1
 80050c8:	f04f 0100 	mov.w	r1, #0
 80050cc:	1814      	adds	r4, r2, r0
 80050ce:	eb43 0501 	adc.w	r5, r3, r1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	4620      	mov	r0, r4
 80050de:	4629      	mov	r1, r5
 80050e0:	f7fb fd82 	bl	8000be8 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4613      	mov	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050f2:	d308      	bcc.n	8005106 <UART_SetConfig+0x396>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050fa:	d204      	bcs.n	8005106 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	60da      	str	r2, [r3, #12]
 8005104:	e0b0      	b.n	8005268 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	76bb      	strb	r3, [r7, #26]
 800510a:	e0ad      	b.n	8005268 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005114:	d15c      	bne.n	80051d0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005116:	7efb      	ldrb	r3, [r7, #27]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d828      	bhi.n	800516e <UART_SetConfig+0x3fe>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x3b4>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005149 	.word	0x08005149
 8005128:	08005151 	.word	0x08005151
 800512c:	08005159 	.word	0x08005159
 8005130:	0800516f 	.word	0x0800516f
 8005134:	0800515f 	.word	0x0800515f
 8005138:	0800516f 	.word	0x0800516f
 800513c:	0800516f 	.word	0x0800516f
 8005140:	0800516f 	.word	0x0800516f
 8005144:	08005167 	.word	0x08005167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fe fd12 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 800514c:	6178      	str	r0, [r7, #20]
        break;
 800514e:	e013      	b.n	8005178 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005150:	f7fe fd24 	bl	8003b9c <HAL_RCC_GetPCLK2Freq>
 8005154:	6178      	str	r0, [r7, #20]
        break;
 8005156:	e00f      	b.n	8005178 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005158:	4b49      	ldr	r3, [pc, #292]	; (8005280 <UART_SetConfig+0x510>)
 800515a:	617b      	str	r3, [r7, #20]
        break;
 800515c:	e00c      	b.n	8005178 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515e:	f7fe fc6f 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 8005162:	6178      	str	r0, [r7, #20]
        break;
 8005164:	e008      	b.n	8005178 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516a:	617b      	str	r3, [r7, #20]
        break;
 800516c:	e004      	b.n	8005178 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	76bb      	strb	r3, [r7, #26]
        break;
 8005176:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d074      	beq.n	8005268 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	005a      	lsls	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	441a      	add	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005192:	b29b      	uxth	r3, r3
 8005194:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b0f      	cmp	r3, #15
 800519a:	d916      	bls.n	80051ca <UART_SetConfig+0x45a>
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a2:	d212      	bcs.n	80051ca <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f023 030f 	bic.w	r3, r3, #15
 80051ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	89fb      	ldrh	r3, [r7, #14]
 80051bc:	4313      	orrs	r3, r2
 80051be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	89fa      	ldrh	r2, [r7, #14]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	e04e      	b.n	8005268 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	76bb      	strb	r3, [r7, #26]
 80051ce:	e04b      	b.n	8005268 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051d0:	7efb      	ldrb	r3, [r7, #27]
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d827      	bhi.n	8005226 <UART_SetConfig+0x4b6>
 80051d6:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <UART_SetConfig+0x46c>)
 80051d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051dc:	08005201 	.word	0x08005201
 80051e0:	08005209 	.word	0x08005209
 80051e4:	08005211 	.word	0x08005211
 80051e8:	08005227 	.word	0x08005227
 80051ec:	08005217 	.word	0x08005217
 80051f0:	08005227 	.word	0x08005227
 80051f4:	08005227 	.word	0x08005227
 80051f8:	08005227 	.word	0x08005227
 80051fc:	0800521f 	.word	0x0800521f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005200:	f7fe fcb6 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 8005204:	6178      	str	r0, [r7, #20]
        break;
 8005206:	e013      	b.n	8005230 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7fe fcc8 	bl	8003b9c <HAL_RCC_GetPCLK2Freq>
 800520c:	6178      	str	r0, [r7, #20]
        break;
 800520e:	e00f      	b.n	8005230 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005210:	4b1b      	ldr	r3, [pc, #108]	; (8005280 <UART_SetConfig+0x510>)
 8005212:	617b      	str	r3, [r7, #20]
        break;
 8005214:	e00c      	b.n	8005230 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005216:	f7fe fc13 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 800521a:	6178      	str	r0, [r7, #20]
        break;
 800521c:	e008      	b.n	8005230 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005222:	617b      	str	r3, [r7, #20]
        break;
 8005224:	e004      	b.n	8005230 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	76bb      	strb	r3, [r7, #26]
        break;
 800522e:	bf00      	nop
    }

    if (pclk != 0U)
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d018      	beq.n	8005268 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	085a      	lsrs	r2, r3, #1
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	441a      	add	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	b29b      	uxth	r3, r3
 800524a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b0f      	cmp	r3, #15
 8005250:	d908      	bls.n	8005264 <UART_SetConfig+0x4f4>
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005258:	d204      	bcs.n	8005264 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	60da      	str	r2, [r3, #12]
 8005262:	e001      	b.n	8005268 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005274:	7ebb      	ldrb	r3, [r7, #26]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bdb0      	pop	{r4, r5, r7, pc}
 800527e:	bf00      	nop
 8005280:	00f42400 	.word	0x00f42400

08005284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01a      	beq.n	800539a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005382:	d10a      	bne.n	800539a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053d8:	f7fc fdee 	bl	8001fb8 <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d10e      	bne.n	800540a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f82d 	bl	800545a <UART_WaitOnFlagUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e023      	b.n	8005452 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d10e      	bne.n	8005436 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f817 	bl	800545a <UART_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e00d      	b.n	8005452 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800546a:	e05e      	b.n	800552a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d05a      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005474:	f7fc fda0 	bl	8001fb8 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	429a      	cmp	r2, r3
 8005482:	d302      	bcc.n	800548a <UART_WaitOnFlagUntilTimeout+0x30>
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11b      	bne.n	80054c2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005498:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e043      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02c      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054de:	d124      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054f8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2220      	movs	r2, #32
 800550e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e00f      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	429a      	cmp	r2, r3
 8005546:	d091      	beq.n	800546c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <atof>:
 8005552:	2100      	movs	r1, #0
 8005554:	f000 be8a 	b.w	800626c <strtod>

08005558 <atoi>:
 8005558:	220a      	movs	r2, #10
 800555a:	2100      	movs	r1, #0
 800555c:	f000 bf72 	b.w	8006444 <strtol>

08005560 <__errno>:
 8005560:	4b01      	ldr	r3, [pc, #4]	; (8005568 <__errno+0x8>)
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	2000000c 	.word	0x2000000c

0800556c <__libc_init_array>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4d0d      	ldr	r5, [pc, #52]	; (80055a4 <__libc_init_array+0x38>)
 8005570:	4c0d      	ldr	r4, [pc, #52]	; (80055a8 <__libc_init_array+0x3c>)
 8005572:	1b64      	subs	r4, r4, r5
 8005574:	10a4      	asrs	r4, r4, #2
 8005576:	2600      	movs	r6, #0
 8005578:	42a6      	cmp	r6, r4
 800557a:	d109      	bne.n	8005590 <__libc_init_array+0x24>
 800557c:	4d0b      	ldr	r5, [pc, #44]	; (80055ac <__libc_init_array+0x40>)
 800557e:	4c0c      	ldr	r4, [pc, #48]	; (80055b0 <__libc_init_array+0x44>)
 8005580:	f004 f8c0 	bl	8009704 <_init>
 8005584:	1b64      	subs	r4, r4, r5
 8005586:	10a4      	asrs	r4, r4, #2
 8005588:	2600      	movs	r6, #0
 800558a:	42a6      	cmp	r6, r4
 800558c:	d105      	bne.n	800559a <__libc_init_array+0x2e>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	f855 3b04 	ldr.w	r3, [r5], #4
 8005594:	4798      	blx	r3
 8005596:	3601      	adds	r6, #1
 8005598:	e7ee      	b.n	8005578 <__libc_init_array+0xc>
 800559a:	f855 3b04 	ldr.w	r3, [r5], #4
 800559e:	4798      	blx	r3
 80055a0:	3601      	adds	r6, #1
 80055a2:	e7f2      	b.n	800558a <__libc_init_array+0x1e>
 80055a4:	08009f08 	.word	0x08009f08
 80055a8:	08009f08 	.word	0x08009f08
 80055ac:	08009f08 	.word	0x08009f08
 80055b0:	08009f0c 	.word	0x08009f0c

080055b4 <memcpy>:
 80055b4:	440a      	add	r2, r1
 80055b6:	4291      	cmp	r1, r2
 80055b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055bc:	d100      	bne.n	80055c0 <memcpy+0xc>
 80055be:	4770      	bx	lr
 80055c0:	b510      	push	{r4, lr}
 80055c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ca:	4291      	cmp	r1, r2
 80055cc:	d1f9      	bne.n	80055c2 <memcpy+0xe>
 80055ce:	bd10      	pop	{r4, pc}

080055d0 <memset>:
 80055d0:	4402      	add	r2, r0
 80055d2:	4603      	mov	r3, r0
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d100      	bne.n	80055da <memset+0xa>
 80055d8:	4770      	bx	lr
 80055da:	f803 1b01 	strb.w	r1, [r3], #1
 80055de:	e7f9      	b.n	80055d4 <memset+0x4>

080055e0 <strchr>:
 80055e0:	b2c9      	uxtb	r1, r1
 80055e2:	4603      	mov	r3, r0
 80055e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055e8:	b11a      	cbz	r2, 80055f2 <strchr+0x12>
 80055ea:	428a      	cmp	r2, r1
 80055ec:	d1f9      	bne.n	80055e2 <strchr+0x2>
 80055ee:	4618      	mov	r0, r3
 80055f0:	4770      	bx	lr
 80055f2:	2900      	cmp	r1, #0
 80055f4:	bf18      	it	ne
 80055f6:	2300      	movne	r3, #0
 80055f8:	e7f9      	b.n	80055ee <strchr+0xe>

080055fa <strncat>:
 80055fa:	b530      	push	{r4, r5, lr}
 80055fc:	4604      	mov	r4, r0
 80055fe:	7825      	ldrb	r5, [r4, #0]
 8005600:	4623      	mov	r3, r4
 8005602:	3401      	adds	r4, #1
 8005604:	2d00      	cmp	r5, #0
 8005606:	d1fa      	bne.n	80055fe <strncat+0x4>
 8005608:	3a01      	subs	r2, #1
 800560a:	d304      	bcc.n	8005616 <strncat+0x1c>
 800560c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005610:	f803 4b01 	strb.w	r4, [r3], #1
 8005614:	b904      	cbnz	r4, 8005618 <strncat+0x1e>
 8005616:	bd30      	pop	{r4, r5, pc}
 8005618:	2a00      	cmp	r2, #0
 800561a:	d1f5      	bne.n	8005608 <strncat+0xe>
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e7f3      	b.n	8005608 <strncat+0xe>

08005620 <sulp>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4604      	mov	r4, r0
 8005624:	460d      	mov	r5, r1
 8005626:	ec45 4b10 	vmov	d0, r4, r5
 800562a:	4616      	mov	r6, r2
 800562c:	f001 fe3a 	bl	80072a4 <__ulp>
 8005630:	ec51 0b10 	vmov	r0, r1, d0
 8005634:	b17e      	cbz	r6, 8005656 <sulp+0x36>
 8005636:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800563a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800563e:	2b00      	cmp	r3, #0
 8005640:	dd09      	ble.n	8005656 <sulp+0x36>
 8005642:	051b      	lsls	r3, r3, #20
 8005644:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005648:	2400      	movs	r4, #0
 800564a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800564e:	4622      	mov	r2, r4
 8005650:	462b      	mov	r3, r5
 8005652:	f7fa ffd1 	bl	80005f8 <__aeabi_dmul>
 8005656:	bd70      	pop	{r4, r5, r6, pc}

08005658 <_strtod_l>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	b0a3      	sub	sp, #140	; 0x8c
 800565e:	461f      	mov	r7, r3
 8005660:	2300      	movs	r3, #0
 8005662:	931e      	str	r3, [sp, #120]	; 0x78
 8005664:	4ba4      	ldr	r3, [pc, #656]	; (80058f8 <_strtod_l+0x2a0>)
 8005666:	9219      	str	r2, [sp, #100]	; 0x64
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	9307      	str	r3, [sp, #28]
 800566c:	4604      	mov	r4, r0
 800566e:	4618      	mov	r0, r3
 8005670:	4688      	mov	r8, r1
 8005672:	f7fa fdad 	bl	80001d0 <strlen>
 8005676:	f04f 0a00 	mov.w	sl, #0
 800567a:	4605      	mov	r5, r0
 800567c:	f04f 0b00 	mov.w	fp, #0
 8005680:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005684:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005686:	781a      	ldrb	r2, [r3, #0]
 8005688:	2a2b      	cmp	r2, #43	; 0x2b
 800568a:	d04c      	beq.n	8005726 <_strtod_l+0xce>
 800568c:	d839      	bhi.n	8005702 <_strtod_l+0xaa>
 800568e:	2a0d      	cmp	r2, #13
 8005690:	d832      	bhi.n	80056f8 <_strtod_l+0xa0>
 8005692:	2a08      	cmp	r2, #8
 8005694:	d832      	bhi.n	80056fc <_strtod_l+0xa4>
 8005696:	2a00      	cmp	r2, #0
 8005698:	d03c      	beq.n	8005714 <_strtod_l+0xbc>
 800569a:	2300      	movs	r3, #0
 800569c:	930e      	str	r3, [sp, #56]	; 0x38
 800569e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80056a0:	7833      	ldrb	r3, [r6, #0]
 80056a2:	2b30      	cmp	r3, #48	; 0x30
 80056a4:	f040 80b4 	bne.w	8005810 <_strtod_l+0x1b8>
 80056a8:	7873      	ldrb	r3, [r6, #1]
 80056aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80056ae:	2b58      	cmp	r3, #88	; 0x58
 80056b0:	d16c      	bne.n	800578c <_strtod_l+0x134>
 80056b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	ab1e      	add	r3, sp, #120	; 0x78
 80056b8:	9702      	str	r7, [sp, #8]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	4a8f      	ldr	r2, [pc, #572]	; (80058fc <_strtod_l+0x2a4>)
 80056be:	ab1f      	add	r3, sp, #124	; 0x7c
 80056c0:	a91d      	add	r1, sp, #116	; 0x74
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 ff60 	bl	8006588 <__gethex>
 80056c8:	f010 0707 	ands.w	r7, r0, #7
 80056cc:	4605      	mov	r5, r0
 80056ce:	d005      	beq.n	80056dc <_strtod_l+0x84>
 80056d0:	2f06      	cmp	r7, #6
 80056d2:	d12a      	bne.n	800572a <_strtod_l+0xd2>
 80056d4:	3601      	adds	r6, #1
 80056d6:	2300      	movs	r3, #0
 80056d8:	961d      	str	r6, [sp, #116]	; 0x74
 80056da:	930e      	str	r3, [sp, #56]	; 0x38
 80056dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 8596 	bne.w	8006210 <_strtod_l+0xbb8>
 80056e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056e6:	b1db      	cbz	r3, 8005720 <_strtod_l+0xc8>
 80056e8:	4652      	mov	r2, sl
 80056ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056ee:	ec43 2b10 	vmov	d0, r2, r3
 80056f2:	b023      	add	sp, #140	; 0x8c
 80056f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f8:	2a20      	cmp	r2, #32
 80056fa:	d1ce      	bne.n	800569a <_strtod_l+0x42>
 80056fc:	3301      	adds	r3, #1
 80056fe:	931d      	str	r3, [sp, #116]	; 0x74
 8005700:	e7c0      	b.n	8005684 <_strtod_l+0x2c>
 8005702:	2a2d      	cmp	r2, #45	; 0x2d
 8005704:	d1c9      	bne.n	800569a <_strtod_l+0x42>
 8005706:	2201      	movs	r2, #1
 8005708:	920e      	str	r2, [sp, #56]	; 0x38
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	921d      	str	r2, [sp, #116]	; 0x74
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1c4      	bne.n	800569e <_strtod_l+0x46>
 8005714:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005716:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800571a:	2b00      	cmp	r3, #0
 800571c:	f040 8576 	bne.w	800620c <_strtod_l+0xbb4>
 8005720:	4652      	mov	r2, sl
 8005722:	465b      	mov	r3, fp
 8005724:	e7e3      	b.n	80056ee <_strtod_l+0x96>
 8005726:	2200      	movs	r2, #0
 8005728:	e7ee      	b.n	8005708 <_strtod_l+0xb0>
 800572a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800572c:	b13a      	cbz	r2, 800573e <_strtod_l+0xe6>
 800572e:	2135      	movs	r1, #53	; 0x35
 8005730:	a820      	add	r0, sp, #128	; 0x80
 8005732:	f001 fec2 	bl	80074ba <__copybits>
 8005736:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005738:	4620      	mov	r0, r4
 800573a:	f001 fa87 	bl	8006c4c <_Bfree>
 800573e:	3f01      	subs	r7, #1
 8005740:	2f05      	cmp	r7, #5
 8005742:	d807      	bhi.n	8005754 <_strtod_l+0xfc>
 8005744:	e8df f007 	tbb	[pc, r7]
 8005748:	1d180b0e 	.word	0x1d180b0e
 800574c:	030e      	.short	0x030e
 800574e:	f04f 0b00 	mov.w	fp, #0
 8005752:	46da      	mov	sl, fp
 8005754:	0728      	lsls	r0, r5, #28
 8005756:	d5c1      	bpl.n	80056dc <_strtod_l+0x84>
 8005758:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800575c:	e7be      	b.n	80056dc <_strtod_l+0x84>
 800575e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005762:	e7f7      	b.n	8005754 <_strtod_l+0xfc>
 8005764:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005768:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800576a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800576e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005772:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005776:	e7ed      	b.n	8005754 <_strtod_l+0xfc>
 8005778:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005900 <_strtod_l+0x2a8>
 800577c:	f04f 0a00 	mov.w	sl, #0
 8005780:	e7e8      	b.n	8005754 <_strtod_l+0xfc>
 8005782:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005786:	f04f 3aff 	mov.w	sl, #4294967295
 800578a:	e7e3      	b.n	8005754 <_strtod_l+0xfc>
 800578c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	921d      	str	r2, [sp, #116]	; 0x74
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b30      	cmp	r3, #48	; 0x30
 8005796:	d0f9      	beq.n	800578c <_strtod_l+0x134>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d09f      	beq.n	80056dc <_strtod_l+0x84>
 800579c:	2301      	movs	r3, #1
 800579e:	f04f 0900 	mov.w	r9, #0
 80057a2:	9304      	str	r3, [sp, #16]
 80057a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057a6:	930a      	str	r3, [sp, #40]	; 0x28
 80057a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80057ac:	464f      	mov	r7, r9
 80057ae:	220a      	movs	r2, #10
 80057b0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80057b2:	7806      	ldrb	r6, [r0, #0]
 80057b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80057b8:	b2d9      	uxtb	r1, r3
 80057ba:	2909      	cmp	r1, #9
 80057bc:	d92a      	bls.n	8005814 <_strtod_l+0x1bc>
 80057be:	9907      	ldr	r1, [sp, #28]
 80057c0:	462a      	mov	r2, r5
 80057c2:	f002 fa7d 	bl	8007cc0 <strncmp>
 80057c6:	b398      	cbz	r0, 8005830 <_strtod_l+0x1d8>
 80057c8:	2000      	movs	r0, #0
 80057ca:	4633      	mov	r3, r6
 80057cc:	463d      	mov	r5, r7
 80057ce:	9007      	str	r0, [sp, #28]
 80057d0:	4602      	mov	r2, r0
 80057d2:	2b65      	cmp	r3, #101	; 0x65
 80057d4:	d001      	beq.n	80057da <_strtod_l+0x182>
 80057d6:	2b45      	cmp	r3, #69	; 0x45
 80057d8:	d118      	bne.n	800580c <_strtod_l+0x1b4>
 80057da:	b91d      	cbnz	r5, 80057e4 <_strtod_l+0x18c>
 80057dc:	9b04      	ldr	r3, [sp, #16]
 80057de:	4303      	orrs	r3, r0
 80057e0:	d098      	beq.n	8005714 <_strtod_l+0xbc>
 80057e2:	2500      	movs	r5, #0
 80057e4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80057e8:	f108 0301 	add.w	r3, r8, #1
 80057ec:	931d      	str	r3, [sp, #116]	; 0x74
 80057ee:	f898 3001 	ldrb.w	r3, [r8, #1]
 80057f2:	2b2b      	cmp	r3, #43	; 0x2b
 80057f4:	d075      	beq.n	80058e2 <_strtod_l+0x28a>
 80057f6:	2b2d      	cmp	r3, #45	; 0x2d
 80057f8:	d07b      	beq.n	80058f2 <_strtod_l+0x29a>
 80057fa:	f04f 0c00 	mov.w	ip, #0
 80057fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005802:	2909      	cmp	r1, #9
 8005804:	f240 8082 	bls.w	800590c <_strtod_l+0x2b4>
 8005808:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800580c:	2600      	movs	r6, #0
 800580e:	e09d      	b.n	800594c <_strtod_l+0x2f4>
 8005810:	2300      	movs	r3, #0
 8005812:	e7c4      	b.n	800579e <_strtod_l+0x146>
 8005814:	2f08      	cmp	r7, #8
 8005816:	bfd8      	it	le
 8005818:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800581a:	f100 0001 	add.w	r0, r0, #1
 800581e:	bfda      	itte	le
 8005820:	fb02 3301 	mlale	r3, r2, r1, r3
 8005824:	9309      	strle	r3, [sp, #36]	; 0x24
 8005826:	fb02 3909 	mlagt	r9, r2, r9, r3
 800582a:	3701      	adds	r7, #1
 800582c:	901d      	str	r0, [sp, #116]	; 0x74
 800582e:	e7bf      	b.n	80057b0 <_strtod_l+0x158>
 8005830:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005832:	195a      	adds	r2, r3, r5
 8005834:	921d      	str	r2, [sp, #116]	; 0x74
 8005836:	5d5b      	ldrb	r3, [r3, r5]
 8005838:	2f00      	cmp	r7, #0
 800583a:	d037      	beq.n	80058ac <_strtod_l+0x254>
 800583c:	9007      	str	r0, [sp, #28]
 800583e:	463d      	mov	r5, r7
 8005840:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005844:	2a09      	cmp	r2, #9
 8005846:	d912      	bls.n	800586e <_strtod_l+0x216>
 8005848:	2201      	movs	r2, #1
 800584a:	e7c2      	b.n	80057d2 <_strtod_l+0x17a>
 800584c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	921d      	str	r2, [sp, #116]	; 0x74
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	3001      	adds	r0, #1
 8005856:	2b30      	cmp	r3, #48	; 0x30
 8005858:	d0f8      	beq.n	800584c <_strtod_l+0x1f4>
 800585a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800585e:	2a08      	cmp	r2, #8
 8005860:	f200 84db 	bhi.w	800621a <_strtod_l+0xbc2>
 8005864:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005866:	9007      	str	r0, [sp, #28]
 8005868:	2000      	movs	r0, #0
 800586a:	920a      	str	r2, [sp, #40]	; 0x28
 800586c:	4605      	mov	r5, r0
 800586e:	3b30      	subs	r3, #48	; 0x30
 8005870:	f100 0201 	add.w	r2, r0, #1
 8005874:	d014      	beq.n	80058a0 <_strtod_l+0x248>
 8005876:	9907      	ldr	r1, [sp, #28]
 8005878:	4411      	add	r1, r2
 800587a:	9107      	str	r1, [sp, #28]
 800587c:	462a      	mov	r2, r5
 800587e:	eb00 0e05 	add.w	lr, r0, r5
 8005882:	210a      	movs	r1, #10
 8005884:	4572      	cmp	r2, lr
 8005886:	d113      	bne.n	80058b0 <_strtod_l+0x258>
 8005888:	182a      	adds	r2, r5, r0
 800588a:	2a08      	cmp	r2, #8
 800588c:	f105 0501 	add.w	r5, r5, #1
 8005890:	4405      	add	r5, r0
 8005892:	dc1c      	bgt.n	80058ce <_strtod_l+0x276>
 8005894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005896:	220a      	movs	r2, #10
 8005898:	fb02 3301 	mla	r3, r2, r1, r3
 800589c:	9309      	str	r3, [sp, #36]	; 0x24
 800589e:	2200      	movs	r2, #0
 80058a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80058a2:	1c59      	adds	r1, r3, #1
 80058a4:	911d      	str	r1, [sp, #116]	; 0x74
 80058a6:	785b      	ldrb	r3, [r3, #1]
 80058a8:	4610      	mov	r0, r2
 80058aa:	e7c9      	b.n	8005840 <_strtod_l+0x1e8>
 80058ac:	4638      	mov	r0, r7
 80058ae:	e7d2      	b.n	8005856 <_strtod_l+0x1fe>
 80058b0:	2a08      	cmp	r2, #8
 80058b2:	dc04      	bgt.n	80058be <_strtod_l+0x266>
 80058b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80058b6:	434e      	muls	r6, r1
 80058b8:	9609      	str	r6, [sp, #36]	; 0x24
 80058ba:	3201      	adds	r2, #1
 80058bc:	e7e2      	b.n	8005884 <_strtod_l+0x22c>
 80058be:	f102 0c01 	add.w	ip, r2, #1
 80058c2:	f1bc 0f10 	cmp.w	ip, #16
 80058c6:	bfd8      	it	le
 80058c8:	fb01 f909 	mulle.w	r9, r1, r9
 80058cc:	e7f5      	b.n	80058ba <_strtod_l+0x262>
 80058ce:	2d10      	cmp	r5, #16
 80058d0:	bfdc      	itt	le
 80058d2:	220a      	movle	r2, #10
 80058d4:	fb02 3909 	mlale	r9, r2, r9, r3
 80058d8:	e7e1      	b.n	800589e <_strtod_l+0x246>
 80058da:	2300      	movs	r3, #0
 80058dc:	9307      	str	r3, [sp, #28]
 80058de:	2201      	movs	r2, #1
 80058e0:	e77c      	b.n	80057dc <_strtod_l+0x184>
 80058e2:	f04f 0c00 	mov.w	ip, #0
 80058e6:	f108 0302 	add.w	r3, r8, #2
 80058ea:	931d      	str	r3, [sp, #116]	; 0x74
 80058ec:	f898 3002 	ldrb.w	r3, [r8, #2]
 80058f0:	e785      	b.n	80057fe <_strtod_l+0x1a6>
 80058f2:	f04f 0c01 	mov.w	ip, #1
 80058f6:	e7f6      	b.n	80058e6 <_strtod_l+0x28e>
 80058f8:	08009b20 	.word	0x08009b20
 80058fc:	080098a0 	.word	0x080098a0
 8005900:	7ff00000 	.word	0x7ff00000
 8005904:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005906:	1c59      	adds	r1, r3, #1
 8005908:	911d      	str	r1, [sp, #116]	; 0x74
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b30      	cmp	r3, #48	; 0x30
 800590e:	d0f9      	beq.n	8005904 <_strtod_l+0x2ac>
 8005910:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005914:	2908      	cmp	r1, #8
 8005916:	f63f af79 	bhi.w	800580c <_strtod_l+0x1b4>
 800591a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800591e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005920:	9308      	str	r3, [sp, #32]
 8005922:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005924:	1c59      	adds	r1, r3, #1
 8005926:	911d      	str	r1, [sp, #116]	; 0x74
 8005928:	785b      	ldrb	r3, [r3, #1]
 800592a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800592e:	2e09      	cmp	r6, #9
 8005930:	d937      	bls.n	80059a2 <_strtod_l+0x34a>
 8005932:	9e08      	ldr	r6, [sp, #32]
 8005934:	1b89      	subs	r1, r1, r6
 8005936:	2908      	cmp	r1, #8
 8005938:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800593c:	dc02      	bgt.n	8005944 <_strtod_l+0x2ec>
 800593e:	4576      	cmp	r6, lr
 8005940:	bfa8      	it	ge
 8005942:	4676      	movge	r6, lr
 8005944:	f1bc 0f00 	cmp.w	ip, #0
 8005948:	d000      	beq.n	800594c <_strtod_l+0x2f4>
 800594a:	4276      	negs	r6, r6
 800594c:	2d00      	cmp	r5, #0
 800594e:	d14f      	bne.n	80059f0 <_strtod_l+0x398>
 8005950:	9904      	ldr	r1, [sp, #16]
 8005952:	4301      	orrs	r1, r0
 8005954:	f47f aec2 	bne.w	80056dc <_strtod_l+0x84>
 8005958:	2a00      	cmp	r2, #0
 800595a:	f47f aedb 	bne.w	8005714 <_strtod_l+0xbc>
 800595e:	2b69      	cmp	r3, #105	; 0x69
 8005960:	d027      	beq.n	80059b2 <_strtod_l+0x35a>
 8005962:	dc24      	bgt.n	80059ae <_strtod_l+0x356>
 8005964:	2b49      	cmp	r3, #73	; 0x49
 8005966:	d024      	beq.n	80059b2 <_strtod_l+0x35a>
 8005968:	2b4e      	cmp	r3, #78	; 0x4e
 800596a:	f47f aed3 	bne.w	8005714 <_strtod_l+0xbc>
 800596e:	499e      	ldr	r1, [pc, #632]	; (8005be8 <_strtod_l+0x590>)
 8005970:	a81d      	add	r0, sp, #116	; 0x74
 8005972:	f001 f861 	bl	8006a38 <__match>
 8005976:	2800      	cmp	r0, #0
 8005978:	f43f aecc 	beq.w	8005714 <_strtod_l+0xbc>
 800597c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b28      	cmp	r3, #40	; 0x28
 8005982:	d12d      	bne.n	80059e0 <_strtod_l+0x388>
 8005984:	4999      	ldr	r1, [pc, #612]	; (8005bec <_strtod_l+0x594>)
 8005986:	aa20      	add	r2, sp, #128	; 0x80
 8005988:	a81d      	add	r0, sp, #116	; 0x74
 800598a:	f001 f869 	bl	8006a60 <__hexnan>
 800598e:	2805      	cmp	r0, #5
 8005990:	d126      	bne.n	80059e0 <_strtod_l+0x388>
 8005992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005994:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005998:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800599c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80059a0:	e69c      	b.n	80056dc <_strtod_l+0x84>
 80059a2:	210a      	movs	r1, #10
 80059a4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80059a8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80059ac:	e7b9      	b.n	8005922 <_strtod_l+0x2ca>
 80059ae:	2b6e      	cmp	r3, #110	; 0x6e
 80059b0:	e7db      	b.n	800596a <_strtod_l+0x312>
 80059b2:	498f      	ldr	r1, [pc, #572]	; (8005bf0 <_strtod_l+0x598>)
 80059b4:	a81d      	add	r0, sp, #116	; 0x74
 80059b6:	f001 f83f 	bl	8006a38 <__match>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f43f aeaa 	beq.w	8005714 <_strtod_l+0xbc>
 80059c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059c2:	498c      	ldr	r1, [pc, #560]	; (8005bf4 <_strtod_l+0x59c>)
 80059c4:	3b01      	subs	r3, #1
 80059c6:	a81d      	add	r0, sp, #116	; 0x74
 80059c8:	931d      	str	r3, [sp, #116]	; 0x74
 80059ca:	f001 f835 	bl	8006a38 <__match>
 80059ce:	b910      	cbnz	r0, 80059d6 <_strtod_l+0x37e>
 80059d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059d2:	3301      	adds	r3, #1
 80059d4:	931d      	str	r3, [sp, #116]	; 0x74
 80059d6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005c04 <_strtod_l+0x5ac>
 80059da:	f04f 0a00 	mov.w	sl, #0
 80059de:	e67d      	b.n	80056dc <_strtod_l+0x84>
 80059e0:	4885      	ldr	r0, [pc, #532]	; (8005bf8 <_strtod_l+0x5a0>)
 80059e2:	f002 f955 	bl	8007c90 <nan>
 80059e6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80059ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80059ee:	e675      	b.n	80056dc <_strtod_l+0x84>
 80059f0:	9b07      	ldr	r3, [sp, #28]
 80059f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059f4:	1af3      	subs	r3, r6, r3
 80059f6:	2f00      	cmp	r7, #0
 80059f8:	bf08      	it	eq
 80059fa:	462f      	moveq	r7, r5
 80059fc:	2d10      	cmp	r5, #16
 80059fe:	9308      	str	r3, [sp, #32]
 8005a00:	46a8      	mov	r8, r5
 8005a02:	bfa8      	it	ge
 8005a04:	f04f 0810 	movge.w	r8, #16
 8005a08:	f7fa fd7c 	bl	8000504 <__aeabi_ui2d>
 8005a0c:	2d09      	cmp	r5, #9
 8005a0e:	4682      	mov	sl, r0
 8005a10:	468b      	mov	fp, r1
 8005a12:	dd13      	ble.n	8005a3c <_strtod_l+0x3e4>
 8005a14:	4b79      	ldr	r3, [pc, #484]	; (8005bfc <_strtod_l+0x5a4>)
 8005a16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005a1a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005a1e:	f7fa fdeb 	bl	80005f8 <__aeabi_dmul>
 8005a22:	4682      	mov	sl, r0
 8005a24:	4648      	mov	r0, r9
 8005a26:	468b      	mov	fp, r1
 8005a28:	f7fa fd6c 	bl	8000504 <__aeabi_ui2d>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4650      	mov	r0, sl
 8005a32:	4659      	mov	r1, fp
 8005a34:	f7fa fc2a 	bl	800028c <__adddf3>
 8005a38:	4682      	mov	sl, r0
 8005a3a:	468b      	mov	fp, r1
 8005a3c:	2d0f      	cmp	r5, #15
 8005a3e:	dc38      	bgt.n	8005ab2 <_strtod_l+0x45a>
 8005a40:	9b08      	ldr	r3, [sp, #32]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f43f ae4a 	beq.w	80056dc <_strtod_l+0x84>
 8005a48:	dd24      	ble.n	8005a94 <_strtod_l+0x43c>
 8005a4a:	2b16      	cmp	r3, #22
 8005a4c:	dc0b      	bgt.n	8005a66 <_strtod_l+0x40e>
 8005a4e:	4d6b      	ldr	r5, [pc, #428]	; (8005bfc <_strtod_l+0x5a4>)
 8005a50:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005a54:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005a58:	4652      	mov	r2, sl
 8005a5a:	465b      	mov	r3, fp
 8005a5c:	f7fa fdcc 	bl	80005f8 <__aeabi_dmul>
 8005a60:	4682      	mov	sl, r0
 8005a62:	468b      	mov	fp, r1
 8005a64:	e63a      	b.n	80056dc <_strtod_l+0x84>
 8005a66:	9a08      	ldr	r2, [sp, #32]
 8005a68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	db20      	blt.n	8005ab2 <_strtod_l+0x45a>
 8005a70:	4c62      	ldr	r4, [pc, #392]	; (8005bfc <_strtod_l+0x5a4>)
 8005a72:	f1c5 050f 	rsb	r5, r5, #15
 8005a76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005a7a:	4652      	mov	r2, sl
 8005a7c:	465b      	mov	r3, fp
 8005a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a82:	f7fa fdb9 	bl	80005f8 <__aeabi_dmul>
 8005a86:	9b08      	ldr	r3, [sp, #32]
 8005a88:	1b5d      	subs	r5, r3, r5
 8005a8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005a8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005a92:	e7e3      	b.n	8005a5c <_strtod_l+0x404>
 8005a94:	9b08      	ldr	r3, [sp, #32]
 8005a96:	3316      	adds	r3, #22
 8005a98:	db0b      	blt.n	8005ab2 <_strtod_l+0x45a>
 8005a9a:	9b07      	ldr	r3, [sp, #28]
 8005a9c:	4a57      	ldr	r2, [pc, #348]	; (8005bfc <_strtod_l+0x5a4>)
 8005a9e:	1b9e      	subs	r6, r3, r6
 8005aa0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005aa4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005aa8:	4650      	mov	r0, sl
 8005aaa:	4659      	mov	r1, fp
 8005aac:	f7fa fece 	bl	800084c <__aeabi_ddiv>
 8005ab0:	e7d6      	b.n	8005a60 <_strtod_l+0x408>
 8005ab2:	9b08      	ldr	r3, [sp, #32]
 8005ab4:	eba5 0808 	sub.w	r8, r5, r8
 8005ab8:	4498      	add	r8, r3
 8005aba:	f1b8 0f00 	cmp.w	r8, #0
 8005abe:	dd71      	ble.n	8005ba4 <_strtod_l+0x54c>
 8005ac0:	f018 030f 	ands.w	r3, r8, #15
 8005ac4:	d00a      	beq.n	8005adc <_strtod_l+0x484>
 8005ac6:	494d      	ldr	r1, [pc, #308]	; (8005bfc <_strtod_l+0x5a4>)
 8005ac8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005acc:	4652      	mov	r2, sl
 8005ace:	465b      	mov	r3, fp
 8005ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ad4:	f7fa fd90 	bl	80005f8 <__aeabi_dmul>
 8005ad8:	4682      	mov	sl, r0
 8005ada:	468b      	mov	fp, r1
 8005adc:	f038 080f 	bics.w	r8, r8, #15
 8005ae0:	d04d      	beq.n	8005b7e <_strtod_l+0x526>
 8005ae2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005ae6:	dd22      	ble.n	8005b2e <_strtod_l+0x4d6>
 8005ae8:	2500      	movs	r5, #0
 8005aea:	462e      	mov	r6, r5
 8005aec:	9509      	str	r5, [sp, #36]	; 0x24
 8005aee:	9507      	str	r5, [sp, #28]
 8005af0:	2322      	movs	r3, #34	; 0x22
 8005af2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005c04 <_strtod_l+0x5ac>
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	f04f 0a00 	mov.w	sl, #0
 8005afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f43f adec 	beq.w	80056dc <_strtod_l+0x84>
 8005b04:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005b06:	4620      	mov	r0, r4
 8005b08:	f001 f8a0 	bl	8006c4c <_Bfree>
 8005b0c:	9907      	ldr	r1, [sp, #28]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f001 f89c 	bl	8006c4c <_Bfree>
 8005b14:	4631      	mov	r1, r6
 8005b16:	4620      	mov	r0, r4
 8005b18:	f001 f898 	bl	8006c4c <_Bfree>
 8005b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f001 f894 	bl	8006c4c <_Bfree>
 8005b24:	4629      	mov	r1, r5
 8005b26:	4620      	mov	r0, r4
 8005b28:	f001 f890 	bl	8006c4c <_Bfree>
 8005b2c:	e5d6      	b.n	80056dc <_strtod_l+0x84>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005b34:	4650      	mov	r0, sl
 8005b36:	4659      	mov	r1, fp
 8005b38:	4699      	mov	r9, r3
 8005b3a:	f1b8 0f01 	cmp.w	r8, #1
 8005b3e:	dc21      	bgt.n	8005b84 <_strtod_l+0x52c>
 8005b40:	b10b      	cbz	r3, 8005b46 <_strtod_l+0x4ee>
 8005b42:	4682      	mov	sl, r0
 8005b44:	468b      	mov	fp, r1
 8005b46:	4b2e      	ldr	r3, [pc, #184]	; (8005c00 <_strtod_l+0x5a8>)
 8005b48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005b4c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005b50:	4652      	mov	r2, sl
 8005b52:	465b      	mov	r3, fp
 8005b54:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005b58:	f7fa fd4e 	bl	80005f8 <__aeabi_dmul>
 8005b5c:	4b29      	ldr	r3, [pc, #164]	; (8005c04 <_strtod_l+0x5ac>)
 8005b5e:	460a      	mov	r2, r1
 8005b60:	400b      	ands	r3, r1
 8005b62:	4929      	ldr	r1, [pc, #164]	; (8005c08 <_strtod_l+0x5b0>)
 8005b64:	428b      	cmp	r3, r1
 8005b66:	4682      	mov	sl, r0
 8005b68:	d8be      	bhi.n	8005ae8 <_strtod_l+0x490>
 8005b6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b6e:	428b      	cmp	r3, r1
 8005b70:	bf86      	itte	hi
 8005b72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005c0c <_strtod_l+0x5b4>
 8005b76:	f04f 3aff 	movhi.w	sl, #4294967295
 8005b7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005b7e:	2300      	movs	r3, #0
 8005b80:	9304      	str	r3, [sp, #16]
 8005b82:	e081      	b.n	8005c88 <_strtod_l+0x630>
 8005b84:	f018 0f01 	tst.w	r8, #1
 8005b88:	d007      	beq.n	8005b9a <_strtod_l+0x542>
 8005b8a:	4b1d      	ldr	r3, [pc, #116]	; (8005c00 <_strtod_l+0x5a8>)
 8005b8c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f7fa fd30 	bl	80005f8 <__aeabi_dmul>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	f109 0901 	add.w	r9, r9, #1
 8005b9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ba2:	e7ca      	b.n	8005b3a <_strtod_l+0x4e2>
 8005ba4:	d0eb      	beq.n	8005b7e <_strtod_l+0x526>
 8005ba6:	f1c8 0800 	rsb	r8, r8, #0
 8005baa:	f018 020f 	ands.w	r2, r8, #15
 8005bae:	d00a      	beq.n	8005bc6 <_strtod_l+0x56e>
 8005bb0:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <_strtod_l+0x5a4>)
 8005bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bb6:	4650      	mov	r0, sl
 8005bb8:	4659      	mov	r1, fp
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f7fa fe45 	bl	800084c <__aeabi_ddiv>
 8005bc2:	4682      	mov	sl, r0
 8005bc4:	468b      	mov	fp, r1
 8005bc6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005bca:	d0d8      	beq.n	8005b7e <_strtod_l+0x526>
 8005bcc:	f1b8 0f1f 	cmp.w	r8, #31
 8005bd0:	dd1e      	ble.n	8005c10 <_strtod_l+0x5b8>
 8005bd2:	2500      	movs	r5, #0
 8005bd4:	462e      	mov	r6, r5
 8005bd6:	9509      	str	r5, [sp, #36]	; 0x24
 8005bd8:	9507      	str	r5, [sp, #28]
 8005bda:	2322      	movs	r3, #34	; 0x22
 8005bdc:	f04f 0a00 	mov.w	sl, #0
 8005be0:	f04f 0b00 	mov.w	fp, #0
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	e789      	b.n	8005afc <_strtod_l+0x4a4>
 8005be8:	0800989d 	.word	0x0800989d
 8005bec:	080098b4 	.word	0x080098b4
 8005bf0:	08009894 	.word	0x08009894
 8005bf4:	08009897 	.word	0x08009897
 8005bf8:	080099a3 	.word	0x080099a3
 8005bfc:	08009bc0 	.word	0x08009bc0
 8005c00:	08009b98 	.word	0x08009b98
 8005c04:	7ff00000 	.word	0x7ff00000
 8005c08:	7ca00000 	.word	0x7ca00000
 8005c0c:	7fefffff 	.word	0x7fefffff
 8005c10:	f018 0310 	ands.w	r3, r8, #16
 8005c14:	bf18      	it	ne
 8005c16:	236a      	movne	r3, #106	; 0x6a
 8005c18:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005fd0 <_strtod_l+0x978>
 8005c1c:	9304      	str	r3, [sp, #16]
 8005c1e:	4650      	mov	r0, sl
 8005c20:	4659      	mov	r1, fp
 8005c22:	2300      	movs	r3, #0
 8005c24:	f018 0f01 	tst.w	r8, #1
 8005c28:	d004      	beq.n	8005c34 <_strtod_l+0x5dc>
 8005c2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005c2e:	f7fa fce3 	bl	80005f8 <__aeabi_dmul>
 8005c32:	2301      	movs	r3, #1
 8005c34:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005c38:	f109 0908 	add.w	r9, r9, #8
 8005c3c:	d1f2      	bne.n	8005c24 <_strtod_l+0x5cc>
 8005c3e:	b10b      	cbz	r3, 8005c44 <_strtod_l+0x5ec>
 8005c40:	4682      	mov	sl, r0
 8005c42:	468b      	mov	fp, r1
 8005c44:	9b04      	ldr	r3, [sp, #16]
 8005c46:	b1bb      	cbz	r3, 8005c78 <_strtod_l+0x620>
 8005c48:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005c4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	4659      	mov	r1, fp
 8005c54:	dd10      	ble.n	8005c78 <_strtod_l+0x620>
 8005c56:	2b1f      	cmp	r3, #31
 8005c58:	f340 8128 	ble.w	8005eac <_strtod_l+0x854>
 8005c5c:	2b34      	cmp	r3, #52	; 0x34
 8005c5e:	bfde      	ittt	le
 8005c60:	3b20      	suble	r3, #32
 8005c62:	f04f 32ff 	movle.w	r2, #4294967295
 8005c66:	fa02 f303 	lslle.w	r3, r2, r3
 8005c6a:	f04f 0a00 	mov.w	sl, #0
 8005c6e:	bfcc      	ite	gt
 8005c70:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005c74:	ea03 0b01 	andle.w	fp, r3, r1
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	4659      	mov	r1, fp
 8005c80:	f7fa ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d1a4      	bne.n	8005bd2 <_strtod_l+0x57a>
 8005c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c8e:	462b      	mov	r3, r5
 8005c90:	463a      	mov	r2, r7
 8005c92:	4620      	mov	r0, r4
 8005c94:	f001 f846 	bl	8006d24 <__s2b>
 8005c98:	9009      	str	r0, [sp, #36]	; 0x24
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	f43f af24 	beq.w	8005ae8 <_strtod_l+0x490>
 8005ca0:	9b07      	ldr	r3, [sp, #28]
 8005ca2:	1b9e      	subs	r6, r3, r6
 8005ca4:	9b08      	ldr	r3, [sp, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bfb4      	ite	lt
 8005caa:	4633      	movlt	r3, r6
 8005cac:	2300      	movge	r3, #0
 8005cae:	9310      	str	r3, [sp, #64]	; 0x40
 8005cb0:	9b08      	ldr	r3, [sp, #32]
 8005cb2:	2500      	movs	r5, #0
 8005cb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005cb8:	9318      	str	r3, [sp, #96]	; 0x60
 8005cba:	462e      	mov	r6, r5
 8005cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	6859      	ldr	r1, [r3, #4]
 8005cc2:	f000 ff83 	bl	8006bcc <_Balloc>
 8005cc6:	9007      	str	r0, [sp, #28]
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	f43f af11 	beq.w	8005af0 <_strtod_l+0x498>
 8005cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	3202      	adds	r2, #2
 8005cd4:	f103 010c 	add.w	r1, r3, #12
 8005cd8:	0092      	lsls	r2, r2, #2
 8005cda:	300c      	adds	r0, #12
 8005cdc:	f7ff fc6a 	bl	80055b4 <memcpy>
 8005ce0:	ec4b ab10 	vmov	d0, sl, fp
 8005ce4:	aa20      	add	r2, sp, #128	; 0x80
 8005ce6:	a91f      	add	r1, sp, #124	; 0x7c
 8005ce8:	4620      	mov	r0, r4
 8005cea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005cee:	f001 fb55 	bl	800739c <__d2b>
 8005cf2:	901e      	str	r0, [sp, #120]	; 0x78
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f43f aefb 	beq.w	8005af0 <_strtod_l+0x498>
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f001 f8ab 	bl	8006e58 <__i2b>
 8005d02:	4606      	mov	r6, r0
 8005d04:	2800      	cmp	r0, #0
 8005d06:	f43f aef3 	beq.w	8005af0 <_strtod_l+0x498>
 8005d0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d0c:	9904      	ldr	r1, [sp, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bfab      	itete	ge
 8005d12:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005d14:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005d16:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005d18:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005d1c:	bfac      	ite	ge
 8005d1e:	eb03 0902 	addge.w	r9, r3, r2
 8005d22:	1ad7      	sublt	r7, r2, r3
 8005d24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d26:	eba3 0801 	sub.w	r8, r3, r1
 8005d2a:	4490      	add	r8, r2
 8005d2c:	4ba3      	ldr	r3, [pc, #652]	; (8005fbc <_strtod_l+0x964>)
 8005d2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d32:	4598      	cmp	r8, r3
 8005d34:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d38:	f280 80cc 	bge.w	8005ed4 <_strtod_l+0x87c>
 8005d3c:	eba3 0308 	sub.w	r3, r3, r8
 8005d40:	2b1f      	cmp	r3, #31
 8005d42:	eba2 0203 	sub.w	r2, r2, r3
 8005d46:	f04f 0101 	mov.w	r1, #1
 8005d4a:	f300 80b6 	bgt.w	8005eba <_strtod_l+0x862>
 8005d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d52:	9311      	str	r3, [sp, #68]	; 0x44
 8005d54:	2300      	movs	r3, #0
 8005d56:	930c      	str	r3, [sp, #48]	; 0x30
 8005d58:	eb09 0802 	add.w	r8, r9, r2
 8005d5c:	9b04      	ldr	r3, [sp, #16]
 8005d5e:	45c1      	cmp	r9, r8
 8005d60:	4417      	add	r7, r2
 8005d62:	441f      	add	r7, r3
 8005d64:	464b      	mov	r3, r9
 8005d66:	bfa8      	it	ge
 8005d68:	4643      	movge	r3, r8
 8005d6a:	42bb      	cmp	r3, r7
 8005d6c:	bfa8      	it	ge
 8005d6e:	463b      	movge	r3, r7
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bfc2      	ittt	gt
 8005d74:	eba8 0803 	subgt.w	r8, r8, r3
 8005d78:	1aff      	subgt	r7, r7, r3
 8005d7a:	eba9 0903 	subgt.w	r9, r9, r3
 8005d7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dd17      	ble.n	8005db4 <_strtod_l+0x75c>
 8005d84:	4631      	mov	r1, r6
 8005d86:	461a      	mov	r2, r3
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f001 f921 	bl	8006fd0 <__pow5mult>
 8005d8e:	4606      	mov	r6, r0
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f43f aead 	beq.w	8005af0 <_strtod_l+0x498>
 8005d96:	4601      	mov	r1, r0
 8005d98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f001 f872 	bl	8006e84 <__multiply>
 8005da0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005da2:	2800      	cmp	r0, #0
 8005da4:	f43f aea4 	beq.w	8005af0 <_strtod_l+0x498>
 8005da8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 ff4e 	bl	8006c4c <_Bfree>
 8005db0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005db2:	931e      	str	r3, [sp, #120]	; 0x78
 8005db4:	f1b8 0f00 	cmp.w	r8, #0
 8005db8:	f300 8091 	bgt.w	8005ede <_strtod_l+0x886>
 8005dbc:	9b08      	ldr	r3, [sp, #32]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dd08      	ble.n	8005dd4 <_strtod_l+0x77c>
 8005dc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005dc4:	9907      	ldr	r1, [sp, #28]
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f001 f902 	bl	8006fd0 <__pow5mult>
 8005dcc:	9007      	str	r0, [sp, #28]
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	f43f ae8e 	beq.w	8005af0 <_strtod_l+0x498>
 8005dd4:	2f00      	cmp	r7, #0
 8005dd6:	dd08      	ble.n	8005dea <_strtod_l+0x792>
 8005dd8:	9907      	ldr	r1, [sp, #28]
 8005dda:	463a      	mov	r2, r7
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f001 f951 	bl	8007084 <__lshift>
 8005de2:	9007      	str	r0, [sp, #28]
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f43f ae83 	beq.w	8005af0 <_strtod_l+0x498>
 8005dea:	f1b9 0f00 	cmp.w	r9, #0
 8005dee:	dd08      	ble.n	8005e02 <_strtod_l+0x7aa>
 8005df0:	4631      	mov	r1, r6
 8005df2:	464a      	mov	r2, r9
 8005df4:	4620      	mov	r0, r4
 8005df6:	f001 f945 	bl	8007084 <__lshift>
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	f43f ae77 	beq.w	8005af0 <_strtod_l+0x498>
 8005e02:	9a07      	ldr	r2, [sp, #28]
 8005e04:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005e06:	4620      	mov	r0, r4
 8005e08:	f001 f9c4 	bl	8007194 <__mdiff>
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f43f ae6e 	beq.w	8005af0 <_strtod_l+0x498>
 8005e14:	68c3      	ldr	r3, [r0, #12]
 8005e16:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60c3      	str	r3, [r0, #12]
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	f001 f99d 	bl	800715c <__mcmp>
 8005e22:	2800      	cmp	r0, #0
 8005e24:	da65      	bge.n	8005ef2 <_strtod_l+0x89a>
 8005e26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e28:	ea53 030a 	orrs.w	r3, r3, sl
 8005e2c:	f040 8087 	bne.w	8005f3e <_strtod_l+0x8e6>
 8005e30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f040 8082 	bne.w	8005f3e <_strtod_l+0x8e6>
 8005e3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e3e:	0d1b      	lsrs	r3, r3, #20
 8005e40:	051b      	lsls	r3, r3, #20
 8005e42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005e46:	d97a      	bls.n	8005f3e <_strtod_l+0x8e6>
 8005e48:	696b      	ldr	r3, [r5, #20]
 8005e4a:	b913      	cbnz	r3, 8005e52 <_strtod_l+0x7fa>
 8005e4c:	692b      	ldr	r3, [r5, #16]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	dd75      	ble.n	8005f3e <_strtod_l+0x8e6>
 8005e52:	4629      	mov	r1, r5
 8005e54:	2201      	movs	r2, #1
 8005e56:	4620      	mov	r0, r4
 8005e58:	f001 f914 	bl	8007084 <__lshift>
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	4605      	mov	r5, r0
 8005e60:	f001 f97c 	bl	800715c <__mcmp>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	dd6a      	ble.n	8005f3e <_strtod_l+0x8e6>
 8005e68:	9904      	ldr	r1, [sp, #16]
 8005e6a:	4a55      	ldr	r2, [pc, #340]	; (8005fc0 <_strtod_l+0x968>)
 8005e6c:	465b      	mov	r3, fp
 8005e6e:	2900      	cmp	r1, #0
 8005e70:	f000 8085 	beq.w	8005f7e <_strtod_l+0x926>
 8005e74:	ea02 010b 	and.w	r1, r2, fp
 8005e78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005e7c:	dc7f      	bgt.n	8005f7e <_strtod_l+0x926>
 8005e7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005e82:	f77f aeaa 	ble.w	8005bda <_strtod_l+0x582>
 8005e86:	4a4f      	ldr	r2, [pc, #316]	; (8005fc4 <_strtod_l+0x96c>)
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005e8e:	4650      	mov	r0, sl
 8005e90:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005e94:	4659      	mov	r1, fp
 8005e96:	f7fa fbaf 	bl	80005f8 <__aeabi_dmul>
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4303      	orrs	r3, r0
 8005e9e:	bf08      	it	eq
 8005ea0:	2322      	moveq	r3, #34	; 0x22
 8005ea2:	4682      	mov	sl, r0
 8005ea4:	468b      	mov	fp, r1
 8005ea6:	bf08      	it	eq
 8005ea8:	6023      	streq	r3, [r4, #0]
 8005eaa:	e62b      	b.n	8005b04 <_strtod_l+0x4ac>
 8005eac:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	ea03 0a0a 	and.w	sl, r3, sl
 8005eb8:	e6de      	b.n	8005c78 <_strtod_l+0x620>
 8005eba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005ebe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005ec2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005ec6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005eca:	fa01 f308 	lsl.w	r3, r1, r8
 8005ece:	930c      	str	r3, [sp, #48]	; 0x30
 8005ed0:	9111      	str	r1, [sp, #68]	; 0x44
 8005ed2:	e741      	b.n	8005d58 <_strtod_l+0x700>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ed8:	2301      	movs	r3, #1
 8005eda:	9311      	str	r3, [sp, #68]	; 0x44
 8005edc:	e73c      	b.n	8005d58 <_strtod_l+0x700>
 8005ede:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ee0:	4642      	mov	r2, r8
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f001 f8ce 	bl	8007084 <__lshift>
 8005ee8:	901e      	str	r0, [sp, #120]	; 0x78
 8005eea:	2800      	cmp	r0, #0
 8005eec:	f47f af66 	bne.w	8005dbc <_strtod_l+0x764>
 8005ef0:	e5fe      	b.n	8005af0 <_strtod_l+0x498>
 8005ef2:	465f      	mov	r7, fp
 8005ef4:	d16e      	bne.n	8005fd4 <_strtod_l+0x97c>
 8005ef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ef8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005efc:	b342      	cbz	r2, 8005f50 <_strtod_l+0x8f8>
 8005efe:	4a32      	ldr	r2, [pc, #200]	; (8005fc8 <_strtod_l+0x970>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d128      	bne.n	8005f56 <_strtod_l+0x8fe>
 8005f04:	9b04      	ldr	r3, [sp, #16]
 8005f06:	4650      	mov	r0, sl
 8005f08:	b1eb      	cbz	r3, 8005f46 <_strtod_l+0x8ee>
 8005f0a:	4a2d      	ldr	r2, [pc, #180]	; (8005fc0 <_strtod_l+0x968>)
 8005f0c:	403a      	ands	r2, r7
 8005f0e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005f12:	f04f 31ff 	mov.w	r1, #4294967295
 8005f16:	d819      	bhi.n	8005f4c <_strtod_l+0x8f4>
 8005f18:	0d12      	lsrs	r2, r2, #20
 8005f1a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f22:	4298      	cmp	r0, r3
 8005f24:	d117      	bne.n	8005f56 <_strtod_l+0x8fe>
 8005f26:	4b29      	ldr	r3, [pc, #164]	; (8005fcc <_strtod_l+0x974>)
 8005f28:	429f      	cmp	r7, r3
 8005f2a:	d102      	bne.n	8005f32 <_strtod_l+0x8da>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f addf 	beq.w	8005af0 <_strtod_l+0x498>
 8005f32:	4b23      	ldr	r3, [pc, #140]	; (8005fc0 <_strtod_l+0x968>)
 8005f34:	403b      	ands	r3, r7
 8005f36:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005f3a:	f04f 0a00 	mov.w	sl, #0
 8005f3e:	9b04      	ldr	r3, [sp, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1a0      	bne.n	8005e86 <_strtod_l+0x82e>
 8005f44:	e5de      	b.n	8005b04 <_strtod_l+0x4ac>
 8005f46:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4a:	e7ea      	b.n	8005f22 <_strtod_l+0x8ca>
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	e7e8      	b.n	8005f22 <_strtod_l+0x8ca>
 8005f50:	ea53 030a 	orrs.w	r3, r3, sl
 8005f54:	d088      	beq.n	8005e68 <_strtod_l+0x810>
 8005f56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f58:	b1db      	cbz	r3, 8005f92 <_strtod_l+0x93a>
 8005f5a:	423b      	tst	r3, r7
 8005f5c:	d0ef      	beq.n	8005f3e <_strtod_l+0x8e6>
 8005f5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f60:	9a04      	ldr	r2, [sp, #16]
 8005f62:	4650      	mov	r0, sl
 8005f64:	4659      	mov	r1, fp
 8005f66:	b1c3      	cbz	r3, 8005f9a <_strtod_l+0x942>
 8005f68:	f7ff fb5a 	bl	8005620 <sulp>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f74:	f7fa f98a 	bl	800028c <__adddf3>
 8005f78:	4682      	mov	sl, r0
 8005f7a:	468b      	mov	fp, r1
 8005f7c:	e7df      	b.n	8005f3e <_strtod_l+0x8e6>
 8005f7e:	4013      	ands	r3, r2
 8005f80:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005f84:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005f88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005f8c:	f04f 3aff 	mov.w	sl, #4294967295
 8005f90:	e7d5      	b.n	8005f3e <_strtod_l+0x8e6>
 8005f92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f94:	ea13 0f0a 	tst.w	r3, sl
 8005f98:	e7e0      	b.n	8005f5c <_strtod_l+0x904>
 8005f9a:	f7ff fb41 	bl	8005620 <sulp>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005fa6:	f7fa f96f 	bl	8000288 <__aeabi_dsub>
 8005faa:	2200      	movs	r2, #0
 8005fac:	2300      	movs	r3, #0
 8005fae:	4682      	mov	sl, r0
 8005fb0:	468b      	mov	fp, r1
 8005fb2:	f7fa fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d0c1      	beq.n	8005f3e <_strtod_l+0x8e6>
 8005fba:	e60e      	b.n	8005bda <_strtod_l+0x582>
 8005fbc:	fffffc02 	.word	0xfffffc02
 8005fc0:	7ff00000 	.word	0x7ff00000
 8005fc4:	39500000 	.word	0x39500000
 8005fc8:	000fffff 	.word	0x000fffff
 8005fcc:	7fefffff 	.word	0x7fefffff
 8005fd0:	080098c8 	.word	0x080098c8
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f001 fa3c 	bl	8007454 <__ratio>
 8005fdc:	ec59 8b10 	vmov	r8, r9, d0
 8005fe0:	ee10 0a10 	vmov	r0, s0
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fea:	4649      	mov	r1, r9
 8005fec:	f7fa fd80 	bl	8000af0 <__aeabi_dcmple>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d07c      	beq.n	80060ee <_strtod_l+0xa96>
 8005ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d04c      	beq.n	8006094 <_strtod_l+0xa3c>
 8005ffa:	4b95      	ldr	r3, [pc, #596]	; (8006250 <_strtod_l+0xbf8>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006002:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006250 <_strtod_l+0xbf8>
 8006006:	f04f 0800 	mov.w	r8, #0
 800600a:	4b92      	ldr	r3, [pc, #584]	; (8006254 <_strtod_l+0xbfc>)
 800600c:	403b      	ands	r3, r7
 800600e:	9311      	str	r3, [sp, #68]	; 0x44
 8006010:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006012:	4b91      	ldr	r3, [pc, #580]	; (8006258 <_strtod_l+0xc00>)
 8006014:	429a      	cmp	r2, r3
 8006016:	f040 80b2 	bne.w	800617e <_strtod_l+0xb26>
 800601a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800601e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006022:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006026:	ec4b ab10 	vmov	d0, sl, fp
 800602a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800602e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006032:	f001 f937 	bl	80072a4 <__ulp>
 8006036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800603a:	ec53 2b10 	vmov	r2, r3, d0
 800603e:	f7fa fadb 	bl	80005f8 <__aeabi_dmul>
 8006042:	4652      	mov	r2, sl
 8006044:	465b      	mov	r3, fp
 8006046:	f7fa f921 	bl	800028c <__adddf3>
 800604a:	460b      	mov	r3, r1
 800604c:	4981      	ldr	r1, [pc, #516]	; (8006254 <_strtod_l+0xbfc>)
 800604e:	4a83      	ldr	r2, [pc, #524]	; (800625c <_strtod_l+0xc04>)
 8006050:	4019      	ands	r1, r3
 8006052:	4291      	cmp	r1, r2
 8006054:	4682      	mov	sl, r0
 8006056:	d95e      	bls.n	8006116 <_strtod_l+0xabe>
 8006058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800605a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800605e:	4293      	cmp	r3, r2
 8006060:	d103      	bne.n	800606a <_strtod_l+0xa12>
 8006062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006064:	3301      	adds	r3, #1
 8006066:	f43f ad43 	beq.w	8005af0 <_strtod_l+0x498>
 800606a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006268 <_strtod_l+0xc10>
 800606e:	f04f 3aff 	mov.w	sl, #4294967295
 8006072:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fde9 	bl	8006c4c <_Bfree>
 800607a:	9907      	ldr	r1, [sp, #28]
 800607c:	4620      	mov	r0, r4
 800607e:	f000 fde5 	bl	8006c4c <_Bfree>
 8006082:	4631      	mov	r1, r6
 8006084:	4620      	mov	r0, r4
 8006086:	f000 fde1 	bl	8006c4c <_Bfree>
 800608a:	4629      	mov	r1, r5
 800608c:	4620      	mov	r0, r4
 800608e:	f000 fddd 	bl	8006c4c <_Bfree>
 8006092:	e613      	b.n	8005cbc <_strtod_l+0x664>
 8006094:	f1ba 0f00 	cmp.w	sl, #0
 8006098:	d11b      	bne.n	80060d2 <_strtod_l+0xa7a>
 800609a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800609e:	b9f3      	cbnz	r3, 80060de <_strtod_l+0xa86>
 80060a0:	4b6b      	ldr	r3, [pc, #428]	; (8006250 <_strtod_l+0xbf8>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	4640      	mov	r0, r8
 80060a6:	4649      	mov	r1, r9
 80060a8:	f7fa fd18 	bl	8000adc <__aeabi_dcmplt>
 80060ac:	b9d0      	cbnz	r0, 80060e4 <_strtod_l+0xa8c>
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	4b6b      	ldr	r3, [pc, #428]	; (8006260 <_strtod_l+0xc08>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	f7fa fa9f 	bl	80005f8 <__aeabi_dmul>
 80060ba:	4680      	mov	r8, r0
 80060bc:	4689      	mov	r9, r1
 80060be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80060c2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80060c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80060c8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80060cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80060d0:	e79b      	b.n	800600a <_strtod_l+0x9b2>
 80060d2:	f1ba 0f01 	cmp.w	sl, #1
 80060d6:	d102      	bne.n	80060de <_strtod_l+0xa86>
 80060d8:	2f00      	cmp	r7, #0
 80060da:	f43f ad7e 	beq.w	8005bda <_strtod_l+0x582>
 80060de:	4b61      	ldr	r3, [pc, #388]	; (8006264 <_strtod_l+0xc0c>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	e78c      	b.n	8005ffe <_strtod_l+0x9a6>
 80060e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006260 <_strtod_l+0xc08>
 80060e8:	f04f 0800 	mov.w	r8, #0
 80060ec:	e7e7      	b.n	80060be <_strtod_l+0xa66>
 80060ee:	4b5c      	ldr	r3, [pc, #368]	; (8006260 <_strtod_l+0xc08>)
 80060f0:	4640      	mov	r0, r8
 80060f2:	4649      	mov	r1, r9
 80060f4:	2200      	movs	r2, #0
 80060f6:	f7fa fa7f 	bl	80005f8 <__aeabi_dmul>
 80060fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060fc:	4680      	mov	r8, r0
 80060fe:	4689      	mov	r9, r1
 8006100:	b933      	cbnz	r3, 8006110 <_strtod_l+0xab8>
 8006102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006106:	9012      	str	r0, [sp, #72]	; 0x48
 8006108:	9313      	str	r3, [sp, #76]	; 0x4c
 800610a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800610e:	e7dd      	b.n	80060cc <_strtod_l+0xa74>
 8006110:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006114:	e7f9      	b.n	800610a <_strtod_l+0xab2>
 8006116:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800611a:	9b04      	ldr	r3, [sp, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1a8      	bne.n	8006072 <_strtod_l+0xa1a>
 8006120:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006124:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006126:	0d1b      	lsrs	r3, r3, #20
 8006128:	051b      	lsls	r3, r3, #20
 800612a:	429a      	cmp	r2, r3
 800612c:	d1a1      	bne.n	8006072 <_strtod_l+0xa1a>
 800612e:	4640      	mov	r0, r8
 8006130:	4649      	mov	r1, r9
 8006132:	f7fa fd71 	bl	8000c18 <__aeabi_d2lz>
 8006136:	f7fa fa31 	bl	800059c <__aeabi_l2d>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4640      	mov	r0, r8
 8006140:	4649      	mov	r1, r9
 8006142:	f7fa f8a1 	bl	8000288 <__aeabi_dsub>
 8006146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006148:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800614c:	ea43 030a 	orr.w	r3, r3, sl
 8006150:	4313      	orrs	r3, r2
 8006152:	4680      	mov	r8, r0
 8006154:	4689      	mov	r9, r1
 8006156:	d053      	beq.n	8006200 <_strtod_l+0xba8>
 8006158:	a335      	add	r3, pc, #212	; (adr r3, 8006230 <_strtod_l+0xbd8>)
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	f7fa fcbd 	bl	8000adc <__aeabi_dcmplt>
 8006162:	2800      	cmp	r0, #0
 8006164:	f47f acce 	bne.w	8005b04 <_strtod_l+0x4ac>
 8006168:	a333      	add	r3, pc, #204	; (adr r3, 8006238 <_strtod_l+0xbe0>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	4640      	mov	r0, r8
 8006170:	4649      	mov	r1, r9
 8006172:	f7fa fcd1 	bl	8000b18 <__aeabi_dcmpgt>
 8006176:	2800      	cmp	r0, #0
 8006178:	f43f af7b 	beq.w	8006072 <_strtod_l+0xa1a>
 800617c:	e4c2      	b.n	8005b04 <_strtod_l+0x4ac>
 800617e:	9b04      	ldr	r3, [sp, #16]
 8006180:	b333      	cbz	r3, 80061d0 <_strtod_l+0xb78>
 8006182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006184:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006188:	d822      	bhi.n	80061d0 <_strtod_l+0xb78>
 800618a:	a32d      	add	r3, pc, #180	; (adr r3, 8006240 <_strtod_l+0xbe8>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	4640      	mov	r0, r8
 8006192:	4649      	mov	r1, r9
 8006194:	f7fa fcac 	bl	8000af0 <__aeabi_dcmple>
 8006198:	b1a0      	cbz	r0, 80061c4 <_strtod_l+0xb6c>
 800619a:	4649      	mov	r1, r9
 800619c:	4640      	mov	r0, r8
 800619e:	f7fa fd03 	bl	8000ba8 <__aeabi_d2uiz>
 80061a2:	2801      	cmp	r0, #1
 80061a4:	bf38      	it	cc
 80061a6:	2001      	movcc	r0, #1
 80061a8:	f7fa f9ac 	bl	8000504 <__aeabi_ui2d>
 80061ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061ae:	4680      	mov	r8, r0
 80061b0:	4689      	mov	r9, r1
 80061b2:	bb13      	cbnz	r3, 80061fa <_strtod_l+0xba2>
 80061b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061b8:	9014      	str	r0, [sp, #80]	; 0x50
 80061ba:	9315      	str	r3, [sp, #84]	; 0x54
 80061bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80061c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80061c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80061c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	930d      	str	r3, [sp, #52]	; 0x34
 80061d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061d4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80061d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80061dc:	f001 f862 	bl	80072a4 <__ulp>
 80061e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061e4:	ec53 2b10 	vmov	r2, r3, d0
 80061e8:	f7fa fa06 	bl	80005f8 <__aeabi_dmul>
 80061ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061f0:	f7fa f84c 	bl	800028c <__adddf3>
 80061f4:	4682      	mov	sl, r0
 80061f6:	468b      	mov	fp, r1
 80061f8:	e78f      	b.n	800611a <_strtod_l+0xac2>
 80061fa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80061fe:	e7dd      	b.n	80061bc <_strtod_l+0xb64>
 8006200:	a311      	add	r3, pc, #68	; (adr r3, 8006248 <_strtod_l+0xbf0>)
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f7fa fc69 	bl	8000adc <__aeabi_dcmplt>
 800620a:	e7b4      	b.n	8006176 <_strtod_l+0xb1e>
 800620c:	2300      	movs	r3, #0
 800620e:	930e      	str	r3, [sp, #56]	; 0x38
 8006210:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006212:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	f7ff ba65 	b.w	80056e4 <_strtod_l+0x8c>
 800621a:	2b65      	cmp	r3, #101	; 0x65
 800621c:	f43f ab5d 	beq.w	80058da <_strtod_l+0x282>
 8006220:	2b45      	cmp	r3, #69	; 0x45
 8006222:	f43f ab5a 	beq.w	80058da <_strtod_l+0x282>
 8006226:	2201      	movs	r2, #1
 8006228:	f7ff bb92 	b.w	8005950 <_strtod_l+0x2f8>
 800622c:	f3af 8000 	nop.w
 8006230:	94a03595 	.word	0x94a03595
 8006234:	3fdfffff 	.word	0x3fdfffff
 8006238:	35afe535 	.word	0x35afe535
 800623c:	3fe00000 	.word	0x3fe00000
 8006240:	ffc00000 	.word	0xffc00000
 8006244:	41dfffff 	.word	0x41dfffff
 8006248:	94a03595 	.word	0x94a03595
 800624c:	3fcfffff 	.word	0x3fcfffff
 8006250:	3ff00000 	.word	0x3ff00000
 8006254:	7ff00000 	.word	0x7ff00000
 8006258:	7fe00000 	.word	0x7fe00000
 800625c:	7c9fffff 	.word	0x7c9fffff
 8006260:	3fe00000 	.word	0x3fe00000
 8006264:	bff00000 	.word	0xbff00000
 8006268:	7fefffff 	.word	0x7fefffff

0800626c <strtod>:
 800626c:	460a      	mov	r2, r1
 800626e:	4601      	mov	r1, r0
 8006270:	4802      	ldr	r0, [pc, #8]	; (800627c <strtod+0x10>)
 8006272:	4b03      	ldr	r3, [pc, #12]	; (8006280 <strtod+0x14>)
 8006274:	6800      	ldr	r0, [r0, #0]
 8006276:	f7ff b9ef 	b.w	8005658 <_strtod_l>
 800627a:	bf00      	nop
 800627c:	2000000c 	.word	0x2000000c
 8006280:	20000074 	.word	0x20000074

08006284 <strtok>:
 8006284:	4b16      	ldr	r3, [pc, #88]	; (80062e0 <strtok+0x5c>)
 8006286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006288:	681e      	ldr	r6, [r3, #0]
 800628a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800628c:	4605      	mov	r5, r0
 800628e:	b9fc      	cbnz	r4, 80062d0 <strtok+0x4c>
 8006290:	2050      	movs	r0, #80	; 0x50
 8006292:	9101      	str	r1, [sp, #4]
 8006294:	f000 fc80 	bl	8006b98 <malloc>
 8006298:	9901      	ldr	r1, [sp, #4]
 800629a:	65b0      	str	r0, [r6, #88]	; 0x58
 800629c:	4602      	mov	r2, r0
 800629e:	b920      	cbnz	r0, 80062aa <strtok+0x26>
 80062a0:	4b10      	ldr	r3, [pc, #64]	; (80062e4 <strtok+0x60>)
 80062a2:	4811      	ldr	r0, [pc, #68]	; (80062e8 <strtok+0x64>)
 80062a4:	2157      	movs	r1, #87	; 0x57
 80062a6:	f000 f8d7 	bl	8006458 <__assert_func>
 80062aa:	e9c0 4400 	strd	r4, r4, [r0]
 80062ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80062b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80062b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80062ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80062be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80062c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80062c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80062ca:	6184      	str	r4, [r0, #24]
 80062cc:	7704      	strb	r4, [r0, #28]
 80062ce:	6244      	str	r4, [r0, #36]	; 0x24
 80062d0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80062d2:	2301      	movs	r3, #1
 80062d4:	4628      	mov	r0, r5
 80062d6:	b002      	add	sp, #8
 80062d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062dc:	f000 b806 	b.w	80062ec <__strtok_r>
 80062e0:	2000000c 	.word	0x2000000c
 80062e4:	080098f0 	.word	0x080098f0
 80062e8:	08009907 	.word	0x08009907

080062ec <__strtok_r>:
 80062ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ee:	b908      	cbnz	r0, 80062f4 <__strtok_r+0x8>
 80062f0:	6810      	ldr	r0, [r2, #0]
 80062f2:	b188      	cbz	r0, 8006318 <__strtok_r+0x2c>
 80062f4:	4604      	mov	r4, r0
 80062f6:	4620      	mov	r0, r4
 80062f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80062fc:	460f      	mov	r7, r1
 80062fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006302:	b91e      	cbnz	r6, 800630c <__strtok_r+0x20>
 8006304:	b965      	cbnz	r5, 8006320 <__strtok_r+0x34>
 8006306:	6015      	str	r5, [r2, #0]
 8006308:	4628      	mov	r0, r5
 800630a:	e005      	b.n	8006318 <__strtok_r+0x2c>
 800630c:	42b5      	cmp	r5, r6
 800630e:	d1f6      	bne.n	80062fe <__strtok_r+0x12>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f0      	bne.n	80062f6 <__strtok_r+0xa>
 8006314:	6014      	str	r4, [r2, #0]
 8006316:	7003      	strb	r3, [r0, #0]
 8006318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631a:	461c      	mov	r4, r3
 800631c:	e00c      	b.n	8006338 <__strtok_r+0x4c>
 800631e:	b915      	cbnz	r5, 8006326 <__strtok_r+0x3a>
 8006320:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006324:	460e      	mov	r6, r1
 8006326:	f816 5b01 	ldrb.w	r5, [r6], #1
 800632a:	42ab      	cmp	r3, r5
 800632c:	d1f7      	bne.n	800631e <__strtok_r+0x32>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f3      	beq.n	800631a <__strtok_r+0x2e>
 8006332:	2300      	movs	r3, #0
 8006334:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006338:	6014      	str	r4, [r2, #0]
 800633a:	e7ed      	b.n	8006318 <__strtok_r+0x2c>

0800633c <_strtol_l.isra.0>:
 800633c:	2b01      	cmp	r3, #1
 800633e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006342:	d001      	beq.n	8006348 <_strtol_l.isra.0+0xc>
 8006344:	2b24      	cmp	r3, #36	; 0x24
 8006346:	d906      	bls.n	8006356 <_strtol_l.isra.0+0x1a>
 8006348:	f7ff f90a 	bl	8005560 <__errno>
 800634c:	2316      	movs	r3, #22
 800634e:	6003      	str	r3, [r0, #0]
 8006350:	2000      	movs	r0, #0
 8006352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006356:	4f3a      	ldr	r7, [pc, #232]	; (8006440 <_strtol_l.isra.0+0x104>)
 8006358:	468e      	mov	lr, r1
 800635a:	4676      	mov	r6, lr
 800635c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006360:	5de5      	ldrb	r5, [r4, r7]
 8006362:	f015 0508 	ands.w	r5, r5, #8
 8006366:	d1f8      	bne.n	800635a <_strtol_l.isra.0+0x1e>
 8006368:	2c2d      	cmp	r4, #45	; 0x2d
 800636a:	d134      	bne.n	80063d6 <_strtol_l.isra.0+0x9a>
 800636c:	f89e 4000 	ldrb.w	r4, [lr]
 8006370:	f04f 0801 	mov.w	r8, #1
 8006374:	f106 0e02 	add.w	lr, r6, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d05c      	beq.n	8006436 <_strtol_l.isra.0+0xfa>
 800637c:	2b10      	cmp	r3, #16
 800637e:	d10c      	bne.n	800639a <_strtol_l.isra.0+0x5e>
 8006380:	2c30      	cmp	r4, #48	; 0x30
 8006382:	d10a      	bne.n	800639a <_strtol_l.isra.0+0x5e>
 8006384:	f89e 4000 	ldrb.w	r4, [lr]
 8006388:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800638c:	2c58      	cmp	r4, #88	; 0x58
 800638e:	d14d      	bne.n	800642c <_strtol_l.isra.0+0xf0>
 8006390:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006394:	2310      	movs	r3, #16
 8006396:	f10e 0e02 	add.w	lr, lr, #2
 800639a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800639e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80063a2:	2600      	movs	r6, #0
 80063a4:	fbbc f9f3 	udiv	r9, ip, r3
 80063a8:	4635      	mov	r5, r6
 80063aa:	fb03 ca19 	mls	sl, r3, r9, ip
 80063ae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80063b2:	2f09      	cmp	r7, #9
 80063b4:	d818      	bhi.n	80063e8 <_strtol_l.isra.0+0xac>
 80063b6:	463c      	mov	r4, r7
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	dd24      	ble.n	8006406 <_strtol_l.isra.0+0xca>
 80063bc:	2e00      	cmp	r6, #0
 80063be:	db1f      	blt.n	8006400 <_strtol_l.isra.0+0xc4>
 80063c0:	45a9      	cmp	r9, r5
 80063c2:	d31d      	bcc.n	8006400 <_strtol_l.isra.0+0xc4>
 80063c4:	d101      	bne.n	80063ca <_strtol_l.isra.0+0x8e>
 80063c6:	45a2      	cmp	sl, r4
 80063c8:	db1a      	blt.n	8006400 <_strtol_l.isra.0+0xc4>
 80063ca:	fb05 4503 	mla	r5, r5, r3, r4
 80063ce:	2601      	movs	r6, #1
 80063d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80063d4:	e7eb      	b.n	80063ae <_strtol_l.isra.0+0x72>
 80063d6:	2c2b      	cmp	r4, #43	; 0x2b
 80063d8:	bf08      	it	eq
 80063da:	f89e 4000 	ldrbeq.w	r4, [lr]
 80063de:	46a8      	mov	r8, r5
 80063e0:	bf08      	it	eq
 80063e2:	f106 0e02 	addeq.w	lr, r6, #2
 80063e6:	e7c7      	b.n	8006378 <_strtol_l.isra.0+0x3c>
 80063e8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80063ec:	2f19      	cmp	r7, #25
 80063ee:	d801      	bhi.n	80063f4 <_strtol_l.isra.0+0xb8>
 80063f0:	3c37      	subs	r4, #55	; 0x37
 80063f2:	e7e1      	b.n	80063b8 <_strtol_l.isra.0+0x7c>
 80063f4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80063f8:	2f19      	cmp	r7, #25
 80063fa:	d804      	bhi.n	8006406 <_strtol_l.isra.0+0xca>
 80063fc:	3c57      	subs	r4, #87	; 0x57
 80063fe:	e7db      	b.n	80063b8 <_strtol_l.isra.0+0x7c>
 8006400:	f04f 36ff 	mov.w	r6, #4294967295
 8006404:	e7e4      	b.n	80063d0 <_strtol_l.isra.0+0x94>
 8006406:	2e00      	cmp	r6, #0
 8006408:	da05      	bge.n	8006416 <_strtol_l.isra.0+0xda>
 800640a:	2322      	movs	r3, #34	; 0x22
 800640c:	6003      	str	r3, [r0, #0]
 800640e:	4665      	mov	r5, ip
 8006410:	b942      	cbnz	r2, 8006424 <_strtol_l.isra.0+0xe8>
 8006412:	4628      	mov	r0, r5
 8006414:	e79d      	b.n	8006352 <_strtol_l.isra.0+0x16>
 8006416:	f1b8 0f00 	cmp.w	r8, #0
 800641a:	d000      	beq.n	800641e <_strtol_l.isra.0+0xe2>
 800641c:	426d      	negs	r5, r5
 800641e:	2a00      	cmp	r2, #0
 8006420:	d0f7      	beq.n	8006412 <_strtol_l.isra.0+0xd6>
 8006422:	b10e      	cbz	r6, 8006428 <_strtol_l.isra.0+0xec>
 8006424:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	e7f2      	b.n	8006412 <_strtol_l.isra.0+0xd6>
 800642c:	2430      	movs	r4, #48	; 0x30
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1b3      	bne.n	800639a <_strtol_l.isra.0+0x5e>
 8006432:	2308      	movs	r3, #8
 8006434:	e7b1      	b.n	800639a <_strtol_l.isra.0+0x5e>
 8006436:	2c30      	cmp	r4, #48	; 0x30
 8006438:	d0a4      	beq.n	8006384 <_strtol_l.isra.0+0x48>
 800643a:	230a      	movs	r3, #10
 800643c:	e7ad      	b.n	800639a <_strtol_l.isra.0+0x5e>
 800643e:	bf00      	nop
 8006440:	080099a5 	.word	0x080099a5

08006444 <strtol>:
 8006444:	4613      	mov	r3, r2
 8006446:	460a      	mov	r2, r1
 8006448:	4601      	mov	r1, r0
 800644a:	4802      	ldr	r0, [pc, #8]	; (8006454 <strtol+0x10>)
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f7ff bf75 	b.w	800633c <_strtol_l.isra.0>
 8006452:	bf00      	nop
 8006454:	2000000c 	.word	0x2000000c

08006458 <__assert_func>:
 8006458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800645a:	4614      	mov	r4, r2
 800645c:	461a      	mov	r2, r3
 800645e:	4b09      	ldr	r3, [pc, #36]	; (8006484 <__assert_func+0x2c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4605      	mov	r5, r0
 8006464:	68d8      	ldr	r0, [r3, #12]
 8006466:	b14c      	cbz	r4, 800647c <__assert_func+0x24>
 8006468:	4b07      	ldr	r3, [pc, #28]	; (8006488 <__assert_func+0x30>)
 800646a:	9100      	str	r1, [sp, #0]
 800646c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006470:	4906      	ldr	r1, [pc, #24]	; (800648c <__assert_func+0x34>)
 8006472:	462b      	mov	r3, r5
 8006474:	f000 f80e 	bl	8006494 <fiprintf>
 8006478:	f001 fd02 	bl	8007e80 <abort>
 800647c:	4b04      	ldr	r3, [pc, #16]	; (8006490 <__assert_func+0x38>)
 800647e:	461c      	mov	r4, r3
 8006480:	e7f3      	b.n	800646a <__assert_func+0x12>
 8006482:	bf00      	nop
 8006484:	2000000c 	.word	0x2000000c
 8006488:	08009968 	.word	0x08009968
 800648c:	08009975 	.word	0x08009975
 8006490:	080099a3 	.word	0x080099a3

08006494 <fiprintf>:
 8006494:	b40e      	push	{r1, r2, r3}
 8006496:	b503      	push	{r0, r1, lr}
 8006498:	4601      	mov	r1, r0
 800649a:	ab03      	add	r3, sp, #12
 800649c:	4805      	ldr	r0, [pc, #20]	; (80064b4 <fiprintf+0x20>)
 800649e:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a2:	6800      	ldr	r0, [r0, #0]
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	f001 f92f 	bl	8007708 <_vfiprintf_r>
 80064aa:	b002      	add	sp, #8
 80064ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80064b0:	b003      	add	sp, #12
 80064b2:	4770      	bx	lr
 80064b4:	2000000c 	.word	0x2000000c

080064b8 <rshift>:
 80064b8:	6903      	ldr	r3, [r0, #16]
 80064ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80064be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80064c6:	f100 0414 	add.w	r4, r0, #20
 80064ca:	dd45      	ble.n	8006558 <rshift+0xa0>
 80064cc:	f011 011f 	ands.w	r1, r1, #31
 80064d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80064d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80064d8:	d10c      	bne.n	80064f4 <rshift+0x3c>
 80064da:	f100 0710 	add.w	r7, r0, #16
 80064de:	4629      	mov	r1, r5
 80064e0:	42b1      	cmp	r1, r6
 80064e2:	d334      	bcc.n	800654e <rshift+0x96>
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	1eea      	subs	r2, r5, #3
 80064ea:	4296      	cmp	r6, r2
 80064ec:	bf38      	it	cc
 80064ee:	2300      	movcc	r3, #0
 80064f0:	4423      	add	r3, r4
 80064f2:	e015      	b.n	8006520 <rshift+0x68>
 80064f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80064f8:	f1c1 0820 	rsb	r8, r1, #32
 80064fc:	40cf      	lsrs	r7, r1
 80064fe:	f105 0e04 	add.w	lr, r5, #4
 8006502:	46a1      	mov	r9, r4
 8006504:	4576      	cmp	r6, lr
 8006506:	46f4      	mov	ip, lr
 8006508:	d815      	bhi.n	8006536 <rshift+0x7e>
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	009a      	lsls	r2, r3, #2
 800650e:	3a04      	subs	r2, #4
 8006510:	3501      	adds	r5, #1
 8006512:	42ae      	cmp	r6, r5
 8006514:	bf38      	it	cc
 8006516:	2200      	movcc	r2, #0
 8006518:	18a3      	adds	r3, r4, r2
 800651a:	50a7      	str	r7, [r4, r2]
 800651c:	b107      	cbz	r7, 8006520 <rshift+0x68>
 800651e:	3304      	adds	r3, #4
 8006520:	1b1a      	subs	r2, r3, r4
 8006522:	42a3      	cmp	r3, r4
 8006524:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006528:	bf08      	it	eq
 800652a:	2300      	moveq	r3, #0
 800652c:	6102      	str	r2, [r0, #16]
 800652e:	bf08      	it	eq
 8006530:	6143      	streq	r3, [r0, #20]
 8006532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006536:	f8dc c000 	ldr.w	ip, [ip]
 800653a:	fa0c fc08 	lsl.w	ip, ip, r8
 800653e:	ea4c 0707 	orr.w	r7, ip, r7
 8006542:	f849 7b04 	str.w	r7, [r9], #4
 8006546:	f85e 7b04 	ldr.w	r7, [lr], #4
 800654a:	40cf      	lsrs	r7, r1
 800654c:	e7da      	b.n	8006504 <rshift+0x4c>
 800654e:	f851 cb04 	ldr.w	ip, [r1], #4
 8006552:	f847 cf04 	str.w	ip, [r7, #4]!
 8006556:	e7c3      	b.n	80064e0 <rshift+0x28>
 8006558:	4623      	mov	r3, r4
 800655a:	e7e1      	b.n	8006520 <rshift+0x68>

0800655c <__hexdig_fun>:
 800655c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006560:	2b09      	cmp	r3, #9
 8006562:	d802      	bhi.n	800656a <__hexdig_fun+0xe>
 8006564:	3820      	subs	r0, #32
 8006566:	b2c0      	uxtb	r0, r0
 8006568:	4770      	bx	lr
 800656a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800656e:	2b05      	cmp	r3, #5
 8006570:	d801      	bhi.n	8006576 <__hexdig_fun+0x1a>
 8006572:	3847      	subs	r0, #71	; 0x47
 8006574:	e7f7      	b.n	8006566 <__hexdig_fun+0xa>
 8006576:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800657a:	2b05      	cmp	r3, #5
 800657c:	d801      	bhi.n	8006582 <__hexdig_fun+0x26>
 800657e:	3827      	subs	r0, #39	; 0x27
 8006580:	e7f1      	b.n	8006566 <__hexdig_fun+0xa>
 8006582:	2000      	movs	r0, #0
 8006584:	4770      	bx	lr
	...

08006588 <__gethex>:
 8006588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	ed2d 8b02 	vpush	{d8}
 8006590:	b089      	sub	sp, #36	; 0x24
 8006592:	ee08 0a10 	vmov	s16, r0
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	4bbc      	ldr	r3, [pc, #752]	; (800688c <__gethex+0x304>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	4618      	mov	r0, r3
 80065a0:	468b      	mov	fp, r1
 80065a2:	4690      	mov	r8, r2
 80065a4:	f7f9 fe14 	bl	80001d0 <strlen>
 80065a8:	9b01      	ldr	r3, [sp, #4]
 80065aa:	f8db 2000 	ldr.w	r2, [fp]
 80065ae:	4403      	add	r3, r0
 80065b0:	4682      	mov	sl, r0
 80065b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80065b6:	9305      	str	r3, [sp, #20]
 80065b8:	1c93      	adds	r3, r2, #2
 80065ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80065be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80065c2:	32fe      	adds	r2, #254	; 0xfe
 80065c4:	18d1      	adds	r1, r2, r3
 80065c6:	461f      	mov	r7, r3
 80065c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80065cc:	9100      	str	r1, [sp, #0]
 80065ce:	2830      	cmp	r0, #48	; 0x30
 80065d0:	d0f8      	beq.n	80065c4 <__gethex+0x3c>
 80065d2:	f7ff ffc3 	bl	800655c <__hexdig_fun>
 80065d6:	4604      	mov	r4, r0
 80065d8:	2800      	cmp	r0, #0
 80065da:	d13a      	bne.n	8006652 <__gethex+0xca>
 80065dc:	9901      	ldr	r1, [sp, #4]
 80065de:	4652      	mov	r2, sl
 80065e0:	4638      	mov	r0, r7
 80065e2:	f001 fb6d 	bl	8007cc0 <strncmp>
 80065e6:	4605      	mov	r5, r0
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d168      	bne.n	80066be <__gethex+0x136>
 80065ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 80065f0:	eb07 060a 	add.w	r6, r7, sl
 80065f4:	f7ff ffb2 	bl	800655c <__hexdig_fun>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d062      	beq.n	80066c2 <__gethex+0x13a>
 80065fc:	4633      	mov	r3, r6
 80065fe:	7818      	ldrb	r0, [r3, #0]
 8006600:	2830      	cmp	r0, #48	; 0x30
 8006602:	461f      	mov	r7, r3
 8006604:	f103 0301 	add.w	r3, r3, #1
 8006608:	d0f9      	beq.n	80065fe <__gethex+0x76>
 800660a:	f7ff ffa7 	bl	800655c <__hexdig_fun>
 800660e:	2301      	movs	r3, #1
 8006610:	fab0 f480 	clz	r4, r0
 8006614:	0964      	lsrs	r4, r4, #5
 8006616:	4635      	mov	r5, r6
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	463a      	mov	r2, r7
 800661c:	4616      	mov	r6, r2
 800661e:	3201      	adds	r2, #1
 8006620:	7830      	ldrb	r0, [r6, #0]
 8006622:	f7ff ff9b 	bl	800655c <__hexdig_fun>
 8006626:	2800      	cmp	r0, #0
 8006628:	d1f8      	bne.n	800661c <__gethex+0x94>
 800662a:	9901      	ldr	r1, [sp, #4]
 800662c:	4652      	mov	r2, sl
 800662e:	4630      	mov	r0, r6
 8006630:	f001 fb46 	bl	8007cc0 <strncmp>
 8006634:	b980      	cbnz	r0, 8006658 <__gethex+0xd0>
 8006636:	b94d      	cbnz	r5, 800664c <__gethex+0xc4>
 8006638:	eb06 050a 	add.w	r5, r6, sl
 800663c:	462a      	mov	r2, r5
 800663e:	4616      	mov	r6, r2
 8006640:	3201      	adds	r2, #1
 8006642:	7830      	ldrb	r0, [r6, #0]
 8006644:	f7ff ff8a 	bl	800655c <__hexdig_fun>
 8006648:	2800      	cmp	r0, #0
 800664a:	d1f8      	bne.n	800663e <__gethex+0xb6>
 800664c:	1bad      	subs	r5, r5, r6
 800664e:	00ad      	lsls	r5, r5, #2
 8006650:	e004      	b.n	800665c <__gethex+0xd4>
 8006652:	2400      	movs	r4, #0
 8006654:	4625      	mov	r5, r4
 8006656:	e7e0      	b.n	800661a <__gethex+0x92>
 8006658:	2d00      	cmp	r5, #0
 800665a:	d1f7      	bne.n	800664c <__gethex+0xc4>
 800665c:	7833      	ldrb	r3, [r6, #0]
 800665e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006662:	2b50      	cmp	r3, #80	; 0x50
 8006664:	d13b      	bne.n	80066de <__gethex+0x156>
 8006666:	7873      	ldrb	r3, [r6, #1]
 8006668:	2b2b      	cmp	r3, #43	; 0x2b
 800666a:	d02c      	beq.n	80066c6 <__gethex+0x13e>
 800666c:	2b2d      	cmp	r3, #45	; 0x2d
 800666e:	d02e      	beq.n	80066ce <__gethex+0x146>
 8006670:	1c71      	adds	r1, r6, #1
 8006672:	f04f 0900 	mov.w	r9, #0
 8006676:	7808      	ldrb	r0, [r1, #0]
 8006678:	f7ff ff70 	bl	800655c <__hexdig_fun>
 800667c:	1e43      	subs	r3, r0, #1
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b18      	cmp	r3, #24
 8006682:	d82c      	bhi.n	80066de <__gethex+0x156>
 8006684:	f1a0 0210 	sub.w	r2, r0, #16
 8006688:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800668c:	f7ff ff66 	bl	800655c <__hexdig_fun>
 8006690:	1e43      	subs	r3, r0, #1
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b18      	cmp	r3, #24
 8006696:	d91d      	bls.n	80066d4 <__gethex+0x14c>
 8006698:	f1b9 0f00 	cmp.w	r9, #0
 800669c:	d000      	beq.n	80066a0 <__gethex+0x118>
 800669e:	4252      	negs	r2, r2
 80066a0:	4415      	add	r5, r2
 80066a2:	f8cb 1000 	str.w	r1, [fp]
 80066a6:	b1e4      	cbz	r4, 80066e2 <__gethex+0x15a>
 80066a8:	9b00      	ldr	r3, [sp, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bf14      	ite	ne
 80066ae:	2700      	movne	r7, #0
 80066b0:	2706      	moveq	r7, #6
 80066b2:	4638      	mov	r0, r7
 80066b4:	b009      	add	sp, #36	; 0x24
 80066b6:	ecbd 8b02 	vpop	{d8}
 80066ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066be:	463e      	mov	r6, r7
 80066c0:	4625      	mov	r5, r4
 80066c2:	2401      	movs	r4, #1
 80066c4:	e7ca      	b.n	800665c <__gethex+0xd4>
 80066c6:	f04f 0900 	mov.w	r9, #0
 80066ca:	1cb1      	adds	r1, r6, #2
 80066cc:	e7d3      	b.n	8006676 <__gethex+0xee>
 80066ce:	f04f 0901 	mov.w	r9, #1
 80066d2:	e7fa      	b.n	80066ca <__gethex+0x142>
 80066d4:	230a      	movs	r3, #10
 80066d6:	fb03 0202 	mla	r2, r3, r2, r0
 80066da:	3a10      	subs	r2, #16
 80066dc:	e7d4      	b.n	8006688 <__gethex+0x100>
 80066de:	4631      	mov	r1, r6
 80066e0:	e7df      	b.n	80066a2 <__gethex+0x11a>
 80066e2:	1bf3      	subs	r3, r6, r7
 80066e4:	3b01      	subs	r3, #1
 80066e6:	4621      	mov	r1, r4
 80066e8:	2b07      	cmp	r3, #7
 80066ea:	dc0b      	bgt.n	8006704 <__gethex+0x17c>
 80066ec:	ee18 0a10 	vmov	r0, s16
 80066f0:	f000 fa6c 	bl	8006bcc <_Balloc>
 80066f4:	4604      	mov	r4, r0
 80066f6:	b940      	cbnz	r0, 800670a <__gethex+0x182>
 80066f8:	4b65      	ldr	r3, [pc, #404]	; (8006890 <__gethex+0x308>)
 80066fa:	4602      	mov	r2, r0
 80066fc:	21de      	movs	r1, #222	; 0xde
 80066fe:	4865      	ldr	r0, [pc, #404]	; (8006894 <__gethex+0x30c>)
 8006700:	f7ff feaa 	bl	8006458 <__assert_func>
 8006704:	3101      	adds	r1, #1
 8006706:	105b      	asrs	r3, r3, #1
 8006708:	e7ee      	b.n	80066e8 <__gethex+0x160>
 800670a:	f100 0914 	add.w	r9, r0, #20
 800670e:	f04f 0b00 	mov.w	fp, #0
 8006712:	f1ca 0301 	rsb	r3, sl, #1
 8006716:	f8cd 9008 	str.w	r9, [sp, #8]
 800671a:	f8cd b000 	str.w	fp, [sp]
 800671e:	9306      	str	r3, [sp, #24]
 8006720:	42b7      	cmp	r7, r6
 8006722:	d340      	bcc.n	80067a6 <__gethex+0x21e>
 8006724:	9802      	ldr	r0, [sp, #8]
 8006726:	9b00      	ldr	r3, [sp, #0]
 8006728:	f840 3b04 	str.w	r3, [r0], #4
 800672c:	eba0 0009 	sub.w	r0, r0, r9
 8006730:	1080      	asrs	r0, r0, #2
 8006732:	0146      	lsls	r6, r0, #5
 8006734:	6120      	str	r0, [r4, #16]
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fb3e 	bl	8006db8 <__hi0bits>
 800673c:	1a30      	subs	r0, r6, r0
 800673e:	f8d8 6000 	ldr.w	r6, [r8]
 8006742:	42b0      	cmp	r0, r6
 8006744:	dd63      	ble.n	800680e <__gethex+0x286>
 8006746:	1b87      	subs	r7, r0, r6
 8006748:	4639      	mov	r1, r7
 800674a:	4620      	mov	r0, r4
 800674c:	f000 fed8 	bl	8007500 <__any_on>
 8006750:	4682      	mov	sl, r0
 8006752:	b1a8      	cbz	r0, 8006780 <__gethex+0x1f8>
 8006754:	1e7b      	subs	r3, r7, #1
 8006756:	1159      	asrs	r1, r3, #5
 8006758:	f003 021f 	and.w	r2, r3, #31
 800675c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006760:	f04f 0a01 	mov.w	sl, #1
 8006764:	fa0a f202 	lsl.w	r2, sl, r2
 8006768:	420a      	tst	r2, r1
 800676a:	d009      	beq.n	8006780 <__gethex+0x1f8>
 800676c:	4553      	cmp	r3, sl
 800676e:	dd05      	ble.n	800677c <__gethex+0x1f4>
 8006770:	1eb9      	subs	r1, r7, #2
 8006772:	4620      	mov	r0, r4
 8006774:	f000 fec4 	bl	8007500 <__any_on>
 8006778:	2800      	cmp	r0, #0
 800677a:	d145      	bne.n	8006808 <__gethex+0x280>
 800677c:	f04f 0a02 	mov.w	sl, #2
 8006780:	4639      	mov	r1, r7
 8006782:	4620      	mov	r0, r4
 8006784:	f7ff fe98 	bl	80064b8 <rshift>
 8006788:	443d      	add	r5, r7
 800678a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800678e:	42ab      	cmp	r3, r5
 8006790:	da4c      	bge.n	800682c <__gethex+0x2a4>
 8006792:	ee18 0a10 	vmov	r0, s16
 8006796:	4621      	mov	r1, r4
 8006798:	f000 fa58 	bl	8006c4c <_Bfree>
 800679c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800679e:	2300      	movs	r3, #0
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	27a3      	movs	r7, #163	; 0xa3
 80067a4:	e785      	b.n	80066b2 <__gethex+0x12a>
 80067a6:	1e73      	subs	r3, r6, #1
 80067a8:	9a05      	ldr	r2, [sp, #20]
 80067aa:	9303      	str	r3, [sp, #12]
 80067ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d019      	beq.n	80067e8 <__gethex+0x260>
 80067b4:	f1bb 0f20 	cmp.w	fp, #32
 80067b8:	d107      	bne.n	80067ca <__gethex+0x242>
 80067ba:	9b02      	ldr	r3, [sp, #8]
 80067bc:	9a00      	ldr	r2, [sp, #0]
 80067be:	f843 2b04 	str.w	r2, [r3], #4
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	2300      	movs	r3, #0
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	469b      	mov	fp, r3
 80067ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80067ce:	f7ff fec5 	bl	800655c <__hexdig_fun>
 80067d2:	9b00      	ldr	r3, [sp, #0]
 80067d4:	f000 000f 	and.w	r0, r0, #15
 80067d8:	fa00 f00b 	lsl.w	r0, r0, fp
 80067dc:	4303      	orrs	r3, r0
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	f10b 0b04 	add.w	fp, fp, #4
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	e00d      	b.n	8006804 <__gethex+0x27c>
 80067e8:	9b03      	ldr	r3, [sp, #12]
 80067ea:	9a06      	ldr	r2, [sp, #24]
 80067ec:	4413      	add	r3, r2
 80067ee:	42bb      	cmp	r3, r7
 80067f0:	d3e0      	bcc.n	80067b4 <__gethex+0x22c>
 80067f2:	4618      	mov	r0, r3
 80067f4:	9901      	ldr	r1, [sp, #4]
 80067f6:	9307      	str	r3, [sp, #28]
 80067f8:	4652      	mov	r2, sl
 80067fa:	f001 fa61 	bl	8007cc0 <strncmp>
 80067fe:	9b07      	ldr	r3, [sp, #28]
 8006800:	2800      	cmp	r0, #0
 8006802:	d1d7      	bne.n	80067b4 <__gethex+0x22c>
 8006804:	461e      	mov	r6, r3
 8006806:	e78b      	b.n	8006720 <__gethex+0x198>
 8006808:	f04f 0a03 	mov.w	sl, #3
 800680c:	e7b8      	b.n	8006780 <__gethex+0x1f8>
 800680e:	da0a      	bge.n	8006826 <__gethex+0x29e>
 8006810:	1a37      	subs	r7, r6, r0
 8006812:	4621      	mov	r1, r4
 8006814:	ee18 0a10 	vmov	r0, s16
 8006818:	463a      	mov	r2, r7
 800681a:	f000 fc33 	bl	8007084 <__lshift>
 800681e:	1bed      	subs	r5, r5, r7
 8006820:	4604      	mov	r4, r0
 8006822:	f100 0914 	add.w	r9, r0, #20
 8006826:	f04f 0a00 	mov.w	sl, #0
 800682a:	e7ae      	b.n	800678a <__gethex+0x202>
 800682c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006830:	42a8      	cmp	r0, r5
 8006832:	dd72      	ble.n	800691a <__gethex+0x392>
 8006834:	1b45      	subs	r5, r0, r5
 8006836:	42ae      	cmp	r6, r5
 8006838:	dc36      	bgt.n	80068a8 <__gethex+0x320>
 800683a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d02a      	beq.n	8006898 <__gethex+0x310>
 8006842:	2b03      	cmp	r3, #3
 8006844:	d02c      	beq.n	80068a0 <__gethex+0x318>
 8006846:	2b01      	cmp	r3, #1
 8006848:	d115      	bne.n	8006876 <__gethex+0x2ee>
 800684a:	42ae      	cmp	r6, r5
 800684c:	d113      	bne.n	8006876 <__gethex+0x2ee>
 800684e:	2e01      	cmp	r6, #1
 8006850:	d10b      	bne.n	800686a <__gethex+0x2e2>
 8006852:	9a04      	ldr	r2, [sp, #16]
 8006854:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	2301      	movs	r3, #1
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	f8c9 3000 	str.w	r3, [r9]
 8006862:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006864:	2762      	movs	r7, #98	; 0x62
 8006866:	601c      	str	r4, [r3, #0]
 8006868:	e723      	b.n	80066b2 <__gethex+0x12a>
 800686a:	1e71      	subs	r1, r6, #1
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fe47 	bl	8007500 <__any_on>
 8006872:	2800      	cmp	r0, #0
 8006874:	d1ed      	bne.n	8006852 <__gethex+0x2ca>
 8006876:	ee18 0a10 	vmov	r0, s16
 800687a:	4621      	mov	r1, r4
 800687c:	f000 f9e6 	bl	8006c4c <_Bfree>
 8006880:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006882:	2300      	movs	r3, #0
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	2750      	movs	r7, #80	; 0x50
 8006888:	e713      	b.n	80066b2 <__gethex+0x12a>
 800688a:	bf00      	nop
 800688c:	08009b20 	.word	0x08009b20
 8006890:	08009aa5 	.word	0x08009aa5
 8006894:	08009ab6 	.word	0x08009ab6
 8006898:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1eb      	bne.n	8006876 <__gethex+0x2ee>
 800689e:	e7d8      	b.n	8006852 <__gethex+0x2ca>
 80068a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1d5      	bne.n	8006852 <__gethex+0x2ca>
 80068a6:	e7e6      	b.n	8006876 <__gethex+0x2ee>
 80068a8:	1e6f      	subs	r7, r5, #1
 80068aa:	f1ba 0f00 	cmp.w	sl, #0
 80068ae:	d131      	bne.n	8006914 <__gethex+0x38c>
 80068b0:	b127      	cbz	r7, 80068bc <__gethex+0x334>
 80068b2:	4639      	mov	r1, r7
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 fe23 	bl	8007500 <__any_on>
 80068ba:	4682      	mov	sl, r0
 80068bc:	117b      	asrs	r3, r7, #5
 80068be:	2101      	movs	r1, #1
 80068c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80068c4:	f007 071f 	and.w	r7, r7, #31
 80068c8:	fa01 f707 	lsl.w	r7, r1, r7
 80068cc:	421f      	tst	r7, r3
 80068ce:	4629      	mov	r1, r5
 80068d0:	4620      	mov	r0, r4
 80068d2:	bf18      	it	ne
 80068d4:	f04a 0a02 	orrne.w	sl, sl, #2
 80068d8:	1b76      	subs	r6, r6, r5
 80068da:	f7ff fded 	bl	80064b8 <rshift>
 80068de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80068e2:	2702      	movs	r7, #2
 80068e4:	f1ba 0f00 	cmp.w	sl, #0
 80068e8:	d048      	beq.n	800697c <__gethex+0x3f4>
 80068ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d015      	beq.n	800691e <__gethex+0x396>
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d017      	beq.n	8006926 <__gethex+0x39e>
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d109      	bne.n	800690e <__gethex+0x386>
 80068fa:	f01a 0f02 	tst.w	sl, #2
 80068fe:	d006      	beq.n	800690e <__gethex+0x386>
 8006900:	f8d9 0000 	ldr.w	r0, [r9]
 8006904:	ea4a 0a00 	orr.w	sl, sl, r0
 8006908:	f01a 0f01 	tst.w	sl, #1
 800690c:	d10e      	bne.n	800692c <__gethex+0x3a4>
 800690e:	f047 0710 	orr.w	r7, r7, #16
 8006912:	e033      	b.n	800697c <__gethex+0x3f4>
 8006914:	f04f 0a01 	mov.w	sl, #1
 8006918:	e7d0      	b.n	80068bc <__gethex+0x334>
 800691a:	2701      	movs	r7, #1
 800691c:	e7e2      	b.n	80068e4 <__gethex+0x35c>
 800691e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006920:	f1c3 0301 	rsb	r3, r3, #1
 8006924:	9315      	str	r3, [sp, #84]	; 0x54
 8006926:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0f0      	beq.n	800690e <__gethex+0x386>
 800692c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006930:	f104 0314 	add.w	r3, r4, #20
 8006934:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006938:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800693c:	f04f 0c00 	mov.w	ip, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f853 2b04 	ldr.w	r2, [r3], #4
 8006946:	f1b2 3fff 	cmp.w	r2, #4294967295
 800694a:	d01c      	beq.n	8006986 <__gethex+0x3fe>
 800694c:	3201      	adds	r2, #1
 800694e:	6002      	str	r2, [r0, #0]
 8006950:	2f02      	cmp	r7, #2
 8006952:	f104 0314 	add.w	r3, r4, #20
 8006956:	d13f      	bne.n	80069d8 <__gethex+0x450>
 8006958:	f8d8 2000 	ldr.w	r2, [r8]
 800695c:	3a01      	subs	r2, #1
 800695e:	42b2      	cmp	r2, r6
 8006960:	d10a      	bne.n	8006978 <__gethex+0x3f0>
 8006962:	1171      	asrs	r1, r6, #5
 8006964:	2201      	movs	r2, #1
 8006966:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800696a:	f006 061f 	and.w	r6, r6, #31
 800696e:	fa02 f606 	lsl.w	r6, r2, r6
 8006972:	421e      	tst	r6, r3
 8006974:	bf18      	it	ne
 8006976:	4617      	movne	r7, r2
 8006978:	f047 0720 	orr.w	r7, r7, #32
 800697c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800697e:	601c      	str	r4, [r3, #0]
 8006980:	9b04      	ldr	r3, [sp, #16]
 8006982:	601d      	str	r5, [r3, #0]
 8006984:	e695      	b.n	80066b2 <__gethex+0x12a>
 8006986:	4299      	cmp	r1, r3
 8006988:	f843 cc04 	str.w	ip, [r3, #-4]
 800698c:	d8d8      	bhi.n	8006940 <__gethex+0x3b8>
 800698e:	68a3      	ldr	r3, [r4, #8]
 8006990:	459b      	cmp	fp, r3
 8006992:	db19      	blt.n	80069c8 <__gethex+0x440>
 8006994:	6861      	ldr	r1, [r4, #4]
 8006996:	ee18 0a10 	vmov	r0, s16
 800699a:	3101      	adds	r1, #1
 800699c:	f000 f916 	bl	8006bcc <_Balloc>
 80069a0:	4681      	mov	r9, r0
 80069a2:	b918      	cbnz	r0, 80069ac <__gethex+0x424>
 80069a4:	4b1a      	ldr	r3, [pc, #104]	; (8006a10 <__gethex+0x488>)
 80069a6:	4602      	mov	r2, r0
 80069a8:	2184      	movs	r1, #132	; 0x84
 80069aa:	e6a8      	b.n	80066fe <__gethex+0x176>
 80069ac:	6922      	ldr	r2, [r4, #16]
 80069ae:	3202      	adds	r2, #2
 80069b0:	f104 010c 	add.w	r1, r4, #12
 80069b4:	0092      	lsls	r2, r2, #2
 80069b6:	300c      	adds	r0, #12
 80069b8:	f7fe fdfc 	bl	80055b4 <memcpy>
 80069bc:	4621      	mov	r1, r4
 80069be:	ee18 0a10 	vmov	r0, s16
 80069c2:	f000 f943 	bl	8006c4c <_Bfree>
 80069c6:	464c      	mov	r4, r9
 80069c8:	6923      	ldr	r3, [r4, #16]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069d0:	6122      	str	r2, [r4, #16]
 80069d2:	2201      	movs	r2, #1
 80069d4:	615a      	str	r2, [r3, #20]
 80069d6:	e7bb      	b.n	8006950 <__gethex+0x3c8>
 80069d8:	6922      	ldr	r2, [r4, #16]
 80069da:	455a      	cmp	r2, fp
 80069dc:	dd0b      	ble.n	80069f6 <__gethex+0x46e>
 80069de:	2101      	movs	r1, #1
 80069e0:	4620      	mov	r0, r4
 80069e2:	f7ff fd69 	bl	80064b8 <rshift>
 80069e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069ea:	3501      	adds	r5, #1
 80069ec:	42ab      	cmp	r3, r5
 80069ee:	f6ff aed0 	blt.w	8006792 <__gethex+0x20a>
 80069f2:	2701      	movs	r7, #1
 80069f4:	e7c0      	b.n	8006978 <__gethex+0x3f0>
 80069f6:	f016 061f 	ands.w	r6, r6, #31
 80069fa:	d0fa      	beq.n	80069f2 <__gethex+0x46a>
 80069fc:	449a      	add	sl, r3
 80069fe:	f1c6 0620 	rsb	r6, r6, #32
 8006a02:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006a06:	f000 f9d7 	bl	8006db8 <__hi0bits>
 8006a0a:	42b0      	cmp	r0, r6
 8006a0c:	dbe7      	blt.n	80069de <__gethex+0x456>
 8006a0e:	e7f0      	b.n	80069f2 <__gethex+0x46a>
 8006a10:	08009aa5 	.word	0x08009aa5

08006a14 <L_shift>:
 8006a14:	f1c2 0208 	rsb	r2, r2, #8
 8006a18:	0092      	lsls	r2, r2, #2
 8006a1a:	b570      	push	{r4, r5, r6, lr}
 8006a1c:	f1c2 0620 	rsb	r6, r2, #32
 8006a20:	6843      	ldr	r3, [r0, #4]
 8006a22:	6804      	ldr	r4, [r0, #0]
 8006a24:	fa03 f506 	lsl.w	r5, r3, r6
 8006a28:	432c      	orrs	r4, r5
 8006a2a:	40d3      	lsrs	r3, r2
 8006a2c:	6004      	str	r4, [r0, #0]
 8006a2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006a32:	4288      	cmp	r0, r1
 8006a34:	d3f4      	bcc.n	8006a20 <L_shift+0xc>
 8006a36:	bd70      	pop	{r4, r5, r6, pc}

08006a38 <__match>:
 8006a38:	b530      	push	{r4, r5, lr}
 8006a3a:	6803      	ldr	r3, [r0, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a42:	b914      	cbnz	r4, 8006a4a <__match+0x12>
 8006a44:	6003      	str	r3, [r0, #0]
 8006a46:	2001      	movs	r0, #1
 8006a48:	bd30      	pop	{r4, r5, pc}
 8006a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006a52:	2d19      	cmp	r5, #25
 8006a54:	bf98      	it	ls
 8006a56:	3220      	addls	r2, #32
 8006a58:	42a2      	cmp	r2, r4
 8006a5a:	d0f0      	beq.n	8006a3e <__match+0x6>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e7f3      	b.n	8006a48 <__match+0x10>

08006a60 <__hexnan>:
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	680b      	ldr	r3, [r1, #0]
 8006a66:	6801      	ldr	r1, [r0, #0]
 8006a68:	115e      	asrs	r6, r3, #5
 8006a6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006a6e:	f013 031f 	ands.w	r3, r3, #31
 8006a72:	b087      	sub	sp, #28
 8006a74:	bf18      	it	ne
 8006a76:	3604      	addne	r6, #4
 8006a78:	2500      	movs	r5, #0
 8006a7a:	1f37      	subs	r7, r6, #4
 8006a7c:	4682      	mov	sl, r0
 8006a7e:	4690      	mov	r8, r2
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	f846 5c04 	str.w	r5, [r6, #-4]
 8006a86:	46b9      	mov	r9, r7
 8006a88:	463c      	mov	r4, r7
 8006a8a:	9502      	str	r5, [sp, #8]
 8006a8c:	46ab      	mov	fp, r5
 8006a8e:	784a      	ldrb	r2, [r1, #1]
 8006a90:	1c4b      	adds	r3, r1, #1
 8006a92:	9303      	str	r3, [sp, #12]
 8006a94:	b342      	cbz	r2, 8006ae8 <__hexnan+0x88>
 8006a96:	4610      	mov	r0, r2
 8006a98:	9105      	str	r1, [sp, #20]
 8006a9a:	9204      	str	r2, [sp, #16]
 8006a9c:	f7ff fd5e 	bl	800655c <__hexdig_fun>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d14f      	bne.n	8006b44 <__hexnan+0xe4>
 8006aa4:	9a04      	ldr	r2, [sp, #16]
 8006aa6:	9905      	ldr	r1, [sp, #20]
 8006aa8:	2a20      	cmp	r2, #32
 8006aaa:	d818      	bhi.n	8006ade <__hexnan+0x7e>
 8006aac:	9b02      	ldr	r3, [sp, #8]
 8006aae:	459b      	cmp	fp, r3
 8006ab0:	dd13      	ble.n	8006ada <__hexnan+0x7a>
 8006ab2:	454c      	cmp	r4, r9
 8006ab4:	d206      	bcs.n	8006ac4 <__hexnan+0x64>
 8006ab6:	2d07      	cmp	r5, #7
 8006ab8:	dc04      	bgt.n	8006ac4 <__hexnan+0x64>
 8006aba:	462a      	mov	r2, r5
 8006abc:	4649      	mov	r1, r9
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f7ff ffa8 	bl	8006a14 <L_shift>
 8006ac4:	4544      	cmp	r4, r8
 8006ac6:	d950      	bls.n	8006b6a <__hexnan+0x10a>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f1a4 0904 	sub.w	r9, r4, #4
 8006ace:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ad2:	f8cd b008 	str.w	fp, [sp, #8]
 8006ad6:	464c      	mov	r4, r9
 8006ad8:	461d      	mov	r5, r3
 8006ada:	9903      	ldr	r1, [sp, #12]
 8006adc:	e7d7      	b.n	8006a8e <__hexnan+0x2e>
 8006ade:	2a29      	cmp	r2, #41	; 0x29
 8006ae0:	d156      	bne.n	8006b90 <__hexnan+0x130>
 8006ae2:	3102      	adds	r1, #2
 8006ae4:	f8ca 1000 	str.w	r1, [sl]
 8006ae8:	f1bb 0f00 	cmp.w	fp, #0
 8006aec:	d050      	beq.n	8006b90 <__hexnan+0x130>
 8006aee:	454c      	cmp	r4, r9
 8006af0:	d206      	bcs.n	8006b00 <__hexnan+0xa0>
 8006af2:	2d07      	cmp	r5, #7
 8006af4:	dc04      	bgt.n	8006b00 <__hexnan+0xa0>
 8006af6:	462a      	mov	r2, r5
 8006af8:	4649      	mov	r1, r9
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7ff ff8a 	bl	8006a14 <L_shift>
 8006b00:	4544      	cmp	r4, r8
 8006b02:	d934      	bls.n	8006b6e <__hexnan+0x10e>
 8006b04:	f1a8 0204 	sub.w	r2, r8, #4
 8006b08:	4623      	mov	r3, r4
 8006b0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8006b0e:	f842 1f04 	str.w	r1, [r2, #4]!
 8006b12:	429f      	cmp	r7, r3
 8006b14:	d2f9      	bcs.n	8006b0a <__hexnan+0xaa>
 8006b16:	1b3b      	subs	r3, r7, r4
 8006b18:	f023 0303 	bic.w	r3, r3, #3
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	3401      	adds	r4, #1
 8006b20:	3e03      	subs	r6, #3
 8006b22:	42b4      	cmp	r4, r6
 8006b24:	bf88      	it	hi
 8006b26:	2304      	movhi	r3, #4
 8006b28:	4443      	add	r3, r8
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f843 2b04 	str.w	r2, [r3], #4
 8006b30:	429f      	cmp	r7, r3
 8006b32:	d2fb      	bcs.n	8006b2c <__hexnan+0xcc>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	b91b      	cbnz	r3, 8006b40 <__hexnan+0xe0>
 8006b38:	4547      	cmp	r7, r8
 8006b3a:	d127      	bne.n	8006b8c <__hexnan+0x12c>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	2005      	movs	r0, #5
 8006b42:	e026      	b.n	8006b92 <__hexnan+0x132>
 8006b44:	3501      	adds	r5, #1
 8006b46:	2d08      	cmp	r5, #8
 8006b48:	f10b 0b01 	add.w	fp, fp, #1
 8006b4c:	dd06      	ble.n	8006b5c <__hexnan+0xfc>
 8006b4e:	4544      	cmp	r4, r8
 8006b50:	d9c3      	bls.n	8006ada <__hexnan+0x7a>
 8006b52:	2300      	movs	r3, #0
 8006b54:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b58:	2501      	movs	r5, #1
 8006b5a:	3c04      	subs	r4, #4
 8006b5c:	6822      	ldr	r2, [r4, #0]
 8006b5e:	f000 000f 	and.w	r0, r0, #15
 8006b62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	e7b7      	b.n	8006ada <__hexnan+0x7a>
 8006b6a:	2508      	movs	r5, #8
 8006b6c:	e7b5      	b.n	8006ada <__hexnan+0x7a>
 8006b6e:	9b01      	ldr	r3, [sp, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0df      	beq.n	8006b34 <__hexnan+0xd4>
 8006b74:	f04f 32ff 	mov.w	r2, #4294967295
 8006b78:	f1c3 0320 	rsb	r3, r3, #32
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006b84:	401a      	ands	r2, r3
 8006b86:	f846 2c04 	str.w	r2, [r6, #-4]
 8006b8a:	e7d3      	b.n	8006b34 <__hexnan+0xd4>
 8006b8c:	3f04      	subs	r7, #4
 8006b8e:	e7d1      	b.n	8006b34 <__hexnan+0xd4>
 8006b90:	2004      	movs	r0, #4
 8006b92:	b007      	add	sp, #28
 8006b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b98 <malloc>:
 8006b98:	4b02      	ldr	r3, [pc, #8]	; (8006ba4 <malloc+0xc>)
 8006b9a:	4601      	mov	r1, r0
 8006b9c:	6818      	ldr	r0, [r3, #0]
 8006b9e:	f000 bd2f 	b.w	8007600 <_malloc_r>
 8006ba2:	bf00      	nop
 8006ba4:	2000000c 	.word	0x2000000c

08006ba8 <__ascii_mbtowc>:
 8006ba8:	b082      	sub	sp, #8
 8006baa:	b901      	cbnz	r1, 8006bae <__ascii_mbtowc+0x6>
 8006bac:	a901      	add	r1, sp, #4
 8006bae:	b142      	cbz	r2, 8006bc2 <__ascii_mbtowc+0x1a>
 8006bb0:	b14b      	cbz	r3, 8006bc6 <__ascii_mbtowc+0x1e>
 8006bb2:	7813      	ldrb	r3, [r2, #0]
 8006bb4:	600b      	str	r3, [r1, #0]
 8006bb6:	7812      	ldrb	r2, [r2, #0]
 8006bb8:	1e10      	subs	r0, r2, #0
 8006bba:	bf18      	it	ne
 8006bbc:	2001      	movne	r0, #1
 8006bbe:	b002      	add	sp, #8
 8006bc0:	4770      	bx	lr
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	e7fb      	b.n	8006bbe <__ascii_mbtowc+0x16>
 8006bc6:	f06f 0001 	mvn.w	r0, #1
 8006bca:	e7f8      	b.n	8006bbe <__ascii_mbtowc+0x16>

08006bcc <_Balloc>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	460d      	mov	r5, r1
 8006bd4:	b976      	cbnz	r6, 8006bf4 <_Balloc+0x28>
 8006bd6:	2010      	movs	r0, #16
 8006bd8:	f7ff ffde 	bl	8006b98 <malloc>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6260      	str	r0, [r4, #36]	; 0x24
 8006be0:	b920      	cbnz	r0, 8006bec <_Balloc+0x20>
 8006be2:	4b18      	ldr	r3, [pc, #96]	; (8006c44 <_Balloc+0x78>)
 8006be4:	4818      	ldr	r0, [pc, #96]	; (8006c48 <_Balloc+0x7c>)
 8006be6:	2166      	movs	r1, #102	; 0x66
 8006be8:	f7ff fc36 	bl	8006458 <__assert_func>
 8006bec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bf0:	6006      	str	r6, [r0, #0]
 8006bf2:	60c6      	str	r6, [r0, #12]
 8006bf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006bf6:	68f3      	ldr	r3, [r6, #12]
 8006bf8:	b183      	cbz	r3, 8006c1c <_Balloc+0x50>
 8006bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c02:	b9b8      	cbnz	r0, 8006c34 <_Balloc+0x68>
 8006c04:	2101      	movs	r1, #1
 8006c06:	fa01 f605 	lsl.w	r6, r1, r5
 8006c0a:	1d72      	adds	r2, r6, #5
 8006c0c:	0092      	lsls	r2, r2, #2
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 fc97 	bl	8007542 <_calloc_r>
 8006c14:	b160      	cbz	r0, 8006c30 <_Balloc+0x64>
 8006c16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c1a:	e00e      	b.n	8006c3a <_Balloc+0x6e>
 8006c1c:	2221      	movs	r2, #33	; 0x21
 8006c1e:	2104      	movs	r1, #4
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fc8e 	bl	8007542 <_calloc_r>
 8006c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c28:	60f0      	str	r0, [r6, #12]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e4      	bne.n	8006bfa <_Balloc+0x2e>
 8006c30:	2000      	movs	r0, #0
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	6802      	ldr	r2, [r0, #0]
 8006c36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c40:	e7f7      	b.n	8006c32 <_Balloc+0x66>
 8006c42:	bf00      	nop
 8006c44:	080098f0 	.word	0x080098f0
 8006c48:	08009b34 	.word	0x08009b34

08006c4c <_Bfree>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c50:	4605      	mov	r5, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	b976      	cbnz	r6, 8006c74 <_Bfree+0x28>
 8006c56:	2010      	movs	r0, #16
 8006c58:	f7ff ff9e 	bl	8006b98 <malloc>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	6268      	str	r0, [r5, #36]	; 0x24
 8006c60:	b920      	cbnz	r0, 8006c6c <_Bfree+0x20>
 8006c62:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <_Bfree+0x3c>)
 8006c64:	4809      	ldr	r0, [pc, #36]	; (8006c8c <_Bfree+0x40>)
 8006c66:	218a      	movs	r1, #138	; 0x8a
 8006c68:	f7ff fbf6 	bl	8006458 <__assert_func>
 8006c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c70:	6006      	str	r6, [r0, #0]
 8006c72:	60c6      	str	r6, [r0, #12]
 8006c74:	b13c      	cbz	r4, 8006c86 <_Bfree+0x3a>
 8006c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c78:	6862      	ldr	r2, [r4, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c80:	6021      	str	r1, [r4, #0]
 8006c82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	080098f0 	.word	0x080098f0
 8006c8c:	08009b34 	.word	0x08009b34

08006c90 <__multadd>:
 8006c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c94:	690e      	ldr	r6, [r1, #16]
 8006c96:	4607      	mov	r7, r0
 8006c98:	4698      	mov	r8, r3
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	f101 0014 	add.w	r0, r1, #20
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	6805      	ldr	r5, [r0, #0]
 8006ca4:	b2a9      	uxth	r1, r5
 8006ca6:	fb02 8101 	mla	r1, r2, r1, r8
 8006caa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006cae:	0c2d      	lsrs	r5, r5, #16
 8006cb0:	fb02 c505 	mla	r5, r2, r5, ip
 8006cb4:	b289      	uxth	r1, r1
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006cbc:	429e      	cmp	r6, r3
 8006cbe:	f840 1b04 	str.w	r1, [r0], #4
 8006cc2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006cc6:	dcec      	bgt.n	8006ca2 <__multadd+0x12>
 8006cc8:	f1b8 0f00 	cmp.w	r8, #0
 8006ccc:	d022      	beq.n	8006d14 <__multadd+0x84>
 8006cce:	68a3      	ldr	r3, [r4, #8]
 8006cd0:	42b3      	cmp	r3, r6
 8006cd2:	dc19      	bgt.n	8006d08 <__multadd+0x78>
 8006cd4:	6861      	ldr	r1, [r4, #4]
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	3101      	adds	r1, #1
 8006cda:	f7ff ff77 	bl	8006bcc <_Balloc>
 8006cde:	4605      	mov	r5, r0
 8006ce0:	b928      	cbnz	r0, 8006cee <__multadd+0x5e>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	4b0d      	ldr	r3, [pc, #52]	; (8006d1c <__multadd+0x8c>)
 8006ce6:	480e      	ldr	r0, [pc, #56]	; (8006d20 <__multadd+0x90>)
 8006ce8:	21b5      	movs	r1, #181	; 0xb5
 8006cea:	f7ff fbb5 	bl	8006458 <__assert_func>
 8006cee:	6922      	ldr	r2, [r4, #16]
 8006cf0:	3202      	adds	r2, #2
 8006cf2:	f104 010c 	add.w	r1, r4, #12
 8006cf6:	0092      	lsls	r2, r2, #2
 8006cf8:	300c      	adds	r0, #12
 8006cfa:	f7fe fc5b 	bl	80055b4 <memcpy>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4638      	mov	r0, r7
 8006d02:	f7ff ffa3 	bl	8006c4c <_Bfree>
 8006d06:	462c      	mov	r4, r5
 8006d08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006d0c:	3601      	adds	r6, #1
 8006d0e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006d12:	6126      	str	r6, [r4, #16]
 8006d14:	4620      	mov	r0, r4
 8006d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08009aa5 	.word	0x08009aa5
 8006d20:	08009b34 	.word	0x08009b34

08006d24 <__s2b>:
 8006d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d28:	460c      	mov	r4, r1
 8006d2a:	4615      	mov	r5, r2
 8006d2c:	461f      	mov	r7, r3
 8006d2e:	2209      	movs	r2, #9
 8006d30:	3308      	adds	r3, #8
 8006d32:	4606      	mov	r6, r0
 8006d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d38:	2100      	movs	r1, #0
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	db09      	blt.n	8006d54 <__s2b+0x30>
 8006d40:	4630      	mov	r0, r6
 8006d42:	f7ff ff43 	bl	8006bcc <_Balloc>
 8006d46:	b940      	cbnz	r0, 8006d5a <__s2b+0x36>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <__s2b+0x8c>)
 8006d4c:	4819      	ldr	r0, [pc, #100]	; (8006db4 <__s2b+0x90>)
 8006d4e:	21ce      	movs	r1, #206	; 0xce
 8006d50:	f7ff fb82 	bl	8006458 <__assert_func>
 8006d54:	0052      	lsls	r2, r2, #1
 8006d56:	3101      	adds	r1, #1
 8006d58:	e7f0      	b.n	8006d3c <__s2b+0x18>
 8006d5a:	9b08      	ldr	r3, [sp, #32]
 8006d5c:	6143      	str	r3, [r0, #20]
 8006d5e:	2d09      	cmp	r5, #9
 8006d60:	f04f 0301 	mov.w	r3, #1
 8006d64:	6103      	str	r3, [r0, #16]
 8006d66:	dd16      	ble.n	8006d96 <__s2b+0x72>
 8006d68:	f104 0909 	add.w	r9, r4, #9
 8006d6c:	46c8      	mov	r8, r9
 8006d6e:	442c      	add	r4, r5
 8006d70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d74:	4601      	mov	r1, r0
 8006d76:	3b30      	subs	r3, #48	; 0x30
 8006d78:	220a      	movs	r2, #10
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f7ff ff88 	bl	8006c90 <__multadd>
 8006d80:	45a0      	cmp	r8, r4
 8006d82:	d1f5      	bne.n	8006d70 <__s2b+0x4c>
 8006d84:	f1a5 0408 	sub.w	r4, r5, #8
 8006d88:	444c      	add	r4, r9
 8006d8a:	1b2d      	subs	r5, r5, r4
 8006d8c:	1963      	adds	r3, r4, r5
 8006d8e:	42bb      	cmp	r3, r7
 8006d90:	db04      	blt.n	8006d9c <__s2b+0x78>
 8006d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d96:	340a      	adds	r4, #10
 8006d98:	2509      	movs	r5, #9
 8006d9a:	e7f6      	b.n	8006d8a <__s2b+0x66>
 8006d9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006da0:	4601      	mov	r1, r0
 8006da2:	3b30      	subs	r3, #48	; 0x30
 8006da4:	220a      	movs	r2, #10
 8006da6:	4630      	mov	r0, r6
 8006da8:	f7ff ff72 	bl	8006c90 <__multadd>
 8006dac:	e7ee      	b.n	8006d8c <__s2b+0x68>
 8006dae:	bf00      	nop
 8006db0:	08009aa5 	.word	0x08009aa5
 8006db4:	08009b34 	.word	0x08009b34

08006db8 <__hi0bits>:
 8006db8:	0c03      	lsrs	r3, r0, #16
 8006dba:	041b      	lsls	r3, r3, #16
 8006dbc:	b9d3      	cbnz	r3, 8006df4 <__hi0bits+0x3c>
 8006dbe:	0400      	lsls	r0, r0, #16
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006dc6:	bf04      	itt	eq
 8006dc8:	0200      	lsleq	r0, r0, #8
 8006dca:	3308      	addeq	r3, #8
 8006dcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006dd0:	bf04      	itt	eq
 8006dd2:	0100      	lsleq	r0, r0, #4
 8006dd4:	3304      	addeq	r3, #4
 8006dd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006dda:	bf04      	itt	eq
 8006ddc:	0080      	lsleq	r0, r0, #2
 8006dde:	3302      	addeq	r3, #2
 8006de0:	2800      	cmp	r0, #0
 8006de2:	db05      	blt.n	8006df0 <__hi0bits+0x38>
 8006de4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006de8:	f103 0301 	add.w	r3, r3, #1
 8006dec:	bf08      	it	eq
 8006dee:	2320      	moveq	r3, #32
 8006df0:	4618      	mov	r0, r3
 8006df2:	4770      	bx	lr
 8006df4:	2300      	movs	r3, #0
 8006df6:	e7e4      	b.n	8006dc2 <__hi0bits+0xa>

08006df8 <__lo0bits>:
 8006df8:	6803      	ldr	r3, [r0, #0]
 8006dfa:	f013 0207 	ands.w	r2, r3, #7
 8006dfe:	4601      	mov	r1, r0
 8006e00:	d00b      	beq.n	8006e1a <__lo0bits+0x22>
 8006e02:	07da      	lsls	r2, r3, #31
 8006e04:	d424      	bmi.n	8006e50 <__lo0bits+0x58>
 8006e06:	0798      	lsls	r0, r3, #30
 8006e08:	bf49      	itett	mi
 8006e0a:	085b      	lsrmi	r3, r3, #1
 8006e0c:	089b      	lsrpl	r3, r3, #2
 8006e0e:	2001      	movmi	r0, #1
 8006e10:	600b      	strmi	r3, [r1, #0]
 8006e12:	bf5c      	itt	pl
 8006e14:	600b      	strpl	r3, [r1, #0]
 8006e16:	2002      	movpl	r0, #2
 8006e18:	4770      	bx	lr
 8006e1a:	b298      	uxth	r0, r3
 8006e1c:	b9b0      	cbnz	r0, 8006e4c <__lo0bits+0x54>
 8006e1e:	0c1b      	lsrs	r3, r3, #16
 8006e20:	2010      	movs	r0, #16
 8006e22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e26:	bf04      	itt	eq
 8006e28:	0a1b      	lsreq	r3, r3, #8
 8006e2a:	3008      	addeq	r0, #8
 8006e2c:	071a      	lsls	r2, r3, #28
 8006e2e:	bf04      	itt	eq
 8006e30:	091b      	lsreq	r3, r3, #4
 8006e32:	3004      	addeq	r0, #4
 8006e34:	079a      	lsls	r2, r3, #30
 8006e36:	bf04      	itt	eq
 8006e38:	089b      	lsreq	r3, r3, #2
 8006e3a:	3002      	addeq	r0, #2
 8006e3c:	07da      	lsls	r2, r3, #31
 8006e3e:	d403      	bmi.n	8006e48 <__lo0bits+0x50>
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	f100 0001 	add.w	r0, r0, #1
 8006e46:	d005      	beq.n	8006e54 <__lo0bits+0x5c>
 8006e48:	600b      	str	r3, [r1, #0]
 8006e4a:	4770      	bx	lr
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	e7e8      	b.n	8006e22 <__lo0bits+0x2a>
 8006e50:	2000      	movs	r0, #0
 8006e52:	4770      	bx	lr
 8006e54:	2020      	movs	r0, #32
 8006e56:	4770      	bx	lr

08006e58 <__i2b>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	f7ff feb5 	bl	8006bcc <_Balloc>
 8006e62:	4602      	mov	r2, r0
 8006e64:	b928      	cbnz	r0, 8006e72 <__i2b+0x1a>
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <__i2b+0x24>)
 8006e68:	4805      	ldr	r0, [pc, #20]	; (8006e80 <__i2b+0x28>)
 8006e6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e6e:	f7ff faf3 	bl	8006458 <__assert_func>
 8006e72:	2301      	movs	r3, #1
 8006e74:	6144      	str	r4, [r0, #20]
 8006e76:	6103      	str	r3, [r0, #16]
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	bf00      	nop
 8006e7c:	08009aa5 	.word	0x08009aa5
 8006e80:	08009b34 	.word	0x08009b34

08006e84 <__multiply>:
 8006e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	4614      	mov	r4, r2
 8006e8a:	690a      	ldr	r2, [r1, #16]
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	bfb8      	it	lt
 8006e92:	460b      	movlt	r3, r1
 8006e94:	460d      	mov	r5, r1
 8006e96:	bfbc      	itt	lt
 8006e98:	4625      	movlt	r5, r4
 8006e9a:	461c      	movlt	r4, r3
 8006e9c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006ea0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ea4:	68ab      	ldr	r3, [r5, #8]
 8006ea6:	6869      	ldr	r1, [r5, #4]
 8006ea8:	eb0a 0709 	add.w	r7, sl, r9
 8006eac:	42bb      	cmp	r3, r7
 8006eae:	b085      	sub	sp, #20
 8006eb0:	bfb8      	it	lt
 8006eb2:	3101      	addlt	r1, #1
 8006eb4:	f7ff fe8a 	bl	8006bcc <_Balloc>
 8006eb8:	b930      	cbnz	r0, 8006ec8 <__multiply+0x44>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	4b42      	ldr	r3, [pc, #264]	; (8006fc8 <__multiply+0x144>)
 8006ebe:	4843      	ldr	r0, [pc, #268]	; (8006fcc <__multiply+0x148>)
 8006ec0:	f240 115d 	movw	r1, #349	; 0x15d
 8006ec4:	f7ff fac8 	bl	8006458 <__assert_func>
 8006ec8:	f100 0614 	add.w	r6, r0, #20
 8006ecc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006ed0:	4633      	mov	r3, r6
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	4543      	cmp	r3, r8
 8006ed6:	d31e      	bcc.n	8006f16 <__multiply+0x92>
 8006ed8:	f105 0c14 	add.w	ip, r5, #20
 8006edc:	f104 0314 	add.w	r3, r4, #20
 8006ee0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006ee4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006ee8:	9202      	str	r2, [sp, #8]
 8006eea:	ebac 0205 	sub.w	r2, ip, r5
 8006eee:	3a15      	subs	r2, #21
 8006ef0:	f022 0203 	bic.w	r2, r2, #3
 8006ef4:	3204      	adds	r2, #4
 8006ef6:	f105 0115 	add.w	r1, r5, #21
 8006efa:	458c      	cmp	ip, r1
 8006efc:	bf38      	it	cc
 8006efe:	2204      	movcc	r2, #4
 8006f00:	9201      	str	r2, [sp, #4]
 8006f02:	9a02      	ldr	r2, [sp, #8]
 8006f04:	9303      	str	r3, [sp, #12]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d808      	bhi.n	8006f1c <__multiply+0x98>
 8006f0a:	2f00      	cmp	r7, #0
 8006f0c:	dc55      	bgt.n	8006fba <__multiply+0x136>
 8006f0e:	6107      	str	r7, [r0, #16]
 8006f10:	b005      	add	sp, #20
 8006f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f16:	f843 2b04 	str.w	r2, [r3], #4
 8006f1a:	e7db      	b.n	8006ed4 <__multiply+0x50>
 8006f1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f20:	f1ba 0f00 	cmp.w	sl, #0
 8006f24:	d020      	beq.n	8006f68 <__multiply+0xe4>
 8006f26:	f105 0e14 	add.w	lr, r5, #20
 8006f2a:	46b1      	mov	r9, r6
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006f32:	f8d9 b000 	ldr.w	fp, [r9]
 8006f36:	b2a1      	uxth	r1, r4
 8006f38:	fa1f fb8b 	uxth.w	fp, fp
 8006f3c:	fb0a b101 	mla	r1, sl, r1, fp
 8006f40:	4411      	add	r1, r2
 8006f42:	f8d9 2000 	ldr.w	r2, [r9]
 8006f46:	0c24      	lsrs	r4, r4, #16
 8006f48:	0c12      	lsrs	r2, r2, #16
 8006f4a:	fb0a 2404 	mla	r4, sl, r4, r2
 8006f4e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006f52:	b289      	uxth	r1, r1
 8006f54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006f58:	45f4      	cmp	ip, lr
 8006f5a:	f849 1b04 	str.w	r1, [r9], #4
 8006f5e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006f62:	d8e4      	bhi.n	8006f2e <__multiply+0xaa>
 8006f64:	9901      	ldr	r1, [sp, #4]
 8006f66:	5072      	str	r2, [r6, r1]
 8006f68:	9a03      	ldr	r2, [sp, #12]
 8006f6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	f1b9 0f00 	cmp.w	r9, #0
 8006f74:	d01f      	beq.n	8006fb6 <__multiply+0x132>
 8006f76:	6834      	ldr	r4, [r6, #0]
 8006f78:	f105 0114 	add.w	r1, r5, #20
 8006f7c:	46b6      	mov	lr, r6
 8006f7e:	f04f 0a00 	mov.w	sl, #0
 8006f82:	880a      	ldrh	r2, [r1, #0]
 8006f84:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006f88:	fb09 b202 	mla	r2, r9, r2, fp
 8006f8c:	4492      	add	sl, r2
 8006f8e:	b2a4      	uxth	r4, r4
 8006f90:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006f94:	f84e 4b04 	str.w	r4, [lr], #4
 8006f98:	f851 4b04 	ldr.w	r4, [r1], #4
 8006f9c:	f8be 2000 	ldrh.w	r2, [lr]
 8006fa0:	0c24      	lsrs	r4, r4, #16
 8006fa2:	fb09 2404 	mla	r4, r9, r4, r2
 8006fa6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006faa:	458c      	cmp	ip, r1
 8006fac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006fb0:	d8e7      	bhi.n	8006f82 <__multiply+0xfe>
 8006fb2:	9a01      	ldr	r2, [sp, #4]
 8006fb4:	50b4      	str	r4, [r6, r2]
 8006fb6:	3604      	adds	r6, #4
 8006fb8:	e7a3      	b.n	8006f02 <__multiply+0x7e>
 8006fba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1a5      	bne.n	8006f0e <__multiply+0x8a>
 8006fc2:	3f01      	subs	r7, #1
 8006fc4:	e7a1      	b.n	8006f0a <__multiply+0x86>
 8006fc6:	bf00      	nop
 8006fc8:	08009aa5 	.word	0x08009aa5
 8006fcc:	08009b34 	.word	0x08009b34

08006fd0 <__pow5mult>:
 8006fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd4:	4615      	mov	r5, r2
 8006fd6:	f012 0203 	ands.w	r2, r2, #3
 8006fda:	4606      	mov	r6, r0
 8006fdc:	460f      	mov	r7, r1
 8006fde:	d007      	beq.n	8006ff0 <__pow5mult+0x20>
 8006fe0:	4c25      	ldr	r4, [pc, #148]	; (8007078 <__pow5mult+0xa8>)
 8006fe2:	3a01      	subs	r2, #1
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fea:	f7ff fe51 	bl	8006c90 <__multadd>
 8006fee:	4607      	mov	r7, r0
 8006ff0:	10ad      	asrs	r5, r5, #2
 8006ff2:	d03d      	beq.n	8007070 <__pow5mult+0xa0>
 8006ff4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ff6:	b97c      	cbnz	r4, 8007018 <__pow5mult+0x48>
 8006ff8:	2010      	movs	r0, #16
 8006ffa:	f7ff fdcd 	bl	8006b98 <malloc>
 8006ffe:	4602      	mov	r2, r0
 8007000:	6270      	str	r0, [r6, #36]	; 0x24
 8007002:	b928      	cbnz	r0, 8007010 <__pow5mult+0x40>
 8007004:	4b1d      	ldr	r3, [pc, #116]	; (800707c <__pow5mult+0xac>)
 8007006:	481e      	ldr	r0, [pc, #120]	; (8007080 <__pow5mult+0xb0>)
 8007008:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800700c:	f7ff fa24 	bl	8006458 <__assert_func>
 8007010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007014:	6004      	str	r4, [r0, #0]
 8007016:	60c4      	str	r4, [r0, #12]
 8007018:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800701c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007020:	b94c      	cbnz	r4, 8007036 <__pow5mult+0x66>
 8007022:	f240 2171 	movw	r1, #625	; 0x271
 8007026:	4630      	mov	r0, r6
 8007028:	f7ff ff16 	bl	8006e58 <__i2b>
 800702c:	2300      	movs	r3, #0
 800702e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007032:	4604      	mov	r4, r0
 8007034:	6003      	str	r3, [r0, #0]
 8007036:	f04f 0900 	mov.w	r9, #0
 800703a:	07eb      	lsls	r3, r5, #31
 800703c:	d50a      	bpl.n	8007054 <__pow5mult+0x84>
 800703e:	4639      	mov	r1, r7
 8007040:	4622      	mov	r2, r4
 8007042:	4630      	mov	r0, r6
 8007044:	f7ff ff1e 	bl	8006e84 <__multiply>
 8007048:	4639      	mov	r1, r7
 800704a:	4680      	mov	r8, r0
 800704c:	4630      	mov	r0, r6
 800704e:	f7ff fdfd 	bl	8006c4c <_Bfree>
 8007052:	4647      	mov	r7, r8
 8007054:	106d      	asrs	r5, r5, #1
 8007056:	d00b      	beq.n	8007070 <__pow5mult+0xa0>
 8007058:	6820      	ldr	r0, [r4, #0]
 800705a:	b938      	cbnz	r0, 800706c <__pow5mult+0x9c>
 800705c:	4622      	mov	r2, r4
 800705e:	4621      	mov	r1, r4
 8007060:	4630      	mov	r0, r6
 8007062:	f7ff ff0f 	bl	8006e84 <__multiply>
 8007066:	6020      	str	r0, [r4, #0]
 8007068:	f8c0 9000 	str.w	r9, [r0]
 800706c:	4604      	mov	r4, r0
 800706e:	e7e4      	b.n	800703a <__pow5mult+0x6a>
 8007070:	4638      	mov	r0, r7
 8007072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007076:	bf00      	nop
 8007078:	08009c88 	.word	0x08009c88
 800707c:	080098f0 	.word	0x080098f0
 8007080:	08009b34 	.word	0x08009b34

08007084 <__lshift>:
 8007084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	460c      	mov	r4, r1
 800708a:	6849      	ldr	r1, [r1, #4]
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007092:	68a3      	ldr	r3, [r4, #8]
 8007094:	4607      	mov	r7, r0
 8007096:	4691      	mov	r9, r2
 8007098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800709c:	f108 0601 	add.w	r6, r8, #1
 80070a0:	42b3      	cmp	r3, r6
 80070a2:	db0b      	blt.n	80070bc <__lshift+0x38>
 80070a4:	4638      	mov	r0, r7
 80070a6:	f7ff fd91 	bl	8006bcc <_Balloc>
 80070aa:	4605      	mov	r5, r0
 80070ac:	b948      	cbnz	r0, 80070c2 <__lshift+0x3e>
 80070ae:	4602      	mov	r2, r0
 80070b0:	4b28      	ldr	r3, [pc, #160]	; (8007154 <__lshift+0xd0>)
 80070b2:	4829      	ldr	r0, [pc, #164]	; (8007158 <__lshift+0xd4>)
 80070b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80070b8:	f7ff f9ce 	bl	8006458 <__assert_func>
 80070bc:	3101      	adds	r1, #1
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	e7ee      	b.n	80070a0 <__lshift+0x1c>
 80070c2:	2300      	movs	r3, #0
 80070c4:	f100 0114 	add.w	r1, r0, #20
 80070c8:	f100 0210 	add.w	r2, r0, #16
 80070cc:	4618      	mov	r0, r3
 80070ce:	4553      	cmp	r3, sl
 80070d0:	db33      	blt.n	800713a <__lshift+0xb6>
 80070d2:	6920      	ldr	r0, [r4, #16]
 80070d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070d8:	f104 0314 	add.w	r3, r4, #20
 80070dc:	f019 091f 	ands.w	r9, r9, #31
 80070e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070e8:	d02b      	beq.n	8007142 <__lshift+0xbe>
 80070ea:	f1c9 0e20 	rsb	lr, r9, #32
 80070ee:	468a      	mov	sl, r1
 80070f0:	2200      	movs	r2, #0
 80070f2:	6818      	ldr	r0, [r3, #0]
 80070f4:	fa00 f009 	lsl.w	r0, r0, r9
 80070f8:	4302      	orrs	r2, r0
 80070fa:	f84a 2b04 	str.w	r2, [sl], #4
 80070fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007102:	459c      	cmp	ip, r3
 8007104:	fa22 f20e 	lsr.w	r2, r2, lr
 8007108:	d8f3      	bhi.n	80070f2 <__lshift+0x6e>
 800710a:	ebac 0304 	sub.w	r3, ip, r4
 800710e:	3b15      	subs	r3, #21
 8007110:	f023 0303 	bic.w	r3, r3, #3
 8007114:	3304      	adds	r3, #4
 8007116:	f104 0015 	add.w	r0, r4, #21
 800711a:	4584      	cmp	ip, r0
 800711c:	bf38      	it	cc
 800711e:	2304      	movcc	r3, #4
 8007120:	50ca      	str	r2, [r1, r3]
 8007122:	b10a      	cbz	r2, 8007128 <__lshift+0xa4>
 8007124:	f108 0602 	add.w	r6, r8, #2
 8007128:	3e01      	subs	r6, #1
 800712a:	4638      	mov	r0, r7
 800712c:	612e      	str	r6, [r5, #16]
 800712e:	4621      	mov	r1, r4
 8007130:	f7ff fd8c 	bl	8006c4c <_Bfree>
 8007134:	4628      	mov	r0, r5
 8007136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713a:	f842 0f04 	str.w	r0, [r2, #4]!
 800713e:	3301      	adds	r3, #1
 8007140:	e7c5      	b.n	80070ce <__lshift+0x4a>
 8007142:	3904      	subs	r1, #4
 8007144:	f853 2b04 	ldr.w	r2, [r3], #4
 8007148:	f841 2f04 	str.w	r2, [r1, #4]!
 800714c:	459c      	cmp	ip, r3
 800714e:	d8f9      	bhi.n	8007144 <__lshift+0xc0>
 8007150:	e7ea      	b.n	8007128 <__lshift+0xa4>
 8007152:	bf00      	nop
 8007154:	08009aa5 	.word	0x08009aa5
 8007158:	08009b34 	.word	0x08009b34

0800715c <__mcmp>:
 800715c:	b530      	push	{r4, r5, lr}
 800715e:	6902      	ldr	r2, [r0, #16]
 8007160:	690c      	ldr	r4, [r1, #16]
 8007162:	1b12      	subs	r2, r2, r4
 8007164:	d10e      	bne.n	8007184 <__mcmp+0x28>
 8007166:	f100 0314 	add.w	r3, r0, #20
 800716a:	3114      	adds	r1, #20
 800716c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800717c:	42a5      	cmp	r5, r4
 800717e:	d003      	beq.n	8007188 <__mcmp+0x2c>
 8007180:	d305      	bcc.n	800718e <__mcmp+0x32>
 8007182:	2201      	movs	r2, #1
 8007184:	4610      	mov	r0, r2
 8007186:	bd30      	pop	{r4, r5, pc}
 8007188:	4283      	cmp	r3, r0
 800718a:	d3f3      	bcc.n	8007174 <__mcmp+0x18>
 800718c:	e7fa      	b.n	8007184 <__mcmp+0x28>
 800718e:	f04f 32ff 	mov.w	r2, #4294967295
 8007192:	e7f7      	b.n	8007184 <__mcmp+0x28>

08007194 <__mdiff>:
 8007194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	460c      	mov	r4, r1
 800719a:	4606      	mov	r6, r0
 800719c:	4611      	mov	r1, r2
 800719e:	4620      	mov	r0, r4
 80071a0:	4617      	mov	r7, r2
 80071a2:	f7ff ffdb 	bl	800715c <__mcmp>
 80071a6:	1e05      	subs	r5, r0, #0
 80071a8:	d110      	bne.n	80071cc <__mdiff+0x38>
 80071aa:	4629      	mov	r1, r5
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7ff fd0d 	bl	8006bcc <_Balloc>
 80071b2:	b930      	cbnz	r0, 80071c2 <__mdiff+0x2e>
 80071b4:	4b39      	ldr	r3, [pc, #228]	; (800729c <__mdiff+0x108>)
 80071b6:	4602      	mov	r2, r0
 80071b8:	f240 2132 	movw	r1, #562	; 0x232
 80071bc:	4838      	ldr	r0, [pc, #224]	; (80072a0 <__mdiff+0x10c>)
 80071be:	f7ff f94b 	bl	8006458 <__assert_func>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071cc:	bfa4      	itt	ge
 80071ce:	463b      	movge	r3, r7
 80071d0:	4627      	movge	r7, r4
 80071d2:	4630      	mov	r0, r6
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	bfa6      	itte	ge
 80071d8:	461c      	movge	r4, r3
 80071da:	2500      	movge	r5, #0
 80071dc:	2501      	movlt	r5, #1
 80071de:	f7ff fcf5 	bl	8006bcc <_Balloc>
 80071e2:	b920      	cbnz	r0, 80071ee <__mdiff+0x5a>
 80071e4:	4b2d      	ldr	r3, [pc, #180]	; (800729c <__mdiff+0x108>)
 80071e6:	4602      	mov	r2, r0
 80071e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80071ec:	e7e6      	b.n	80071bc <__mdiff+0x28>
 80071ee:	693e      	ldr	r6, [r7, #16]
 80071f0:	60c5      	str	r5, [r0, #12]
 80071f2:	6925      	ldr	r5, [r4, #16]
 80071f4:	f107 0114 	add.w	r1, r7, #20
 80071f8:	f104 0914 	add.w	r9, r4, #20
 80071fc:	f100 0e14 	add.w	lr, r0, #20
 8007200:	f107 0210 	add.w	r2, r7, #16
 8007204:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007208:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800720c:	46f2      	mov	sl, lr
 800720e:	2700      	movs	r7, #0
 8007210:	f859 3b04 	ldr.w	r3, [r9], #4
 8007214:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007218:	fa1f f883 	uxth.w	r8, r3
 800721c:	fa17 f78b 	uxtah	r7, r7, fp
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	eba7 0808 	sub.w	r8, r7, r8
 8007226:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800722a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800722e:	fa1f f888 	uxth.w	r8, r8
 8007232:	141f      	asrs	r7, r3, #16
 8007234:	454d      	cmp	r5, r9
 8007236:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800723a:	f84a 3b04 	str.w	r3, [sl], #4
 800723e:	d8e7      	bhi.n	8007210 <__mdiff+0x7c>
 8007240:	1b2b      	subs	r3, r5, r4
 8007242:	3b15      	subs	r3, #21
 8007244:	f023 0303 	bic.w	r3, r3, #3
 8007248:	3304      	adds	r3, #4
 800724a:	3415      	adds	r4, #21
 800724c:	42a5      	cmp	r5, r4
 800724e:	bf38      	it	cc
 8007250:	2304      	movcc	r3, #4
 8007252:	4419      	add	r1, r3
 8007254:	4473      	add	r3, lr
 8007256:	469e      	mov	lr, r3
 8007258:	460d      	mov	r5, r1
 800725a:	4565      	cmp	r5, ip
 800725c:	d30e      	bcc.n	800727c <__mdiff+0xe8>
 800725e:	f10c 0203 	add.w	r2, ip, #3
 8007262:	1a52      	subs	r2, r2, r1
 8007264:	f022 0203 	bic.w	r2, r2, #3
 8007268:	3903      	subs	r1, #3
 800726a:	458c      	cmp	ip, r1
 800726c:	bf38      	it	cc
 800726e:	2200      	movcc	r2, #0
 8007270:	441a      	add	r2, r3
 8007272:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007276:	b17b      	cbz	r3, 8007298 <__mdiff+0x104>
 8007278:	6106      	str	r6, [r0, #16]
 800727a:	e7a5      	b.n	80071c8 <__mdiff+0x34>
 800727c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007280:	fa17 f488 	uxtah	r4, r7, r8
 8007284:	1422      	asrs	r2, r4, #16
 8007286:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800728a:	b2a4      	uxth	r4, r4
 800728c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007290:	f84e 4b04 	str.w	r4, [lr], #4
 8007294:	1417      	asrs	r7, r2, #16
 8007296:	e7e0      	b.n	800725a <__mdiff+0xc6>
 8007298:	3e01      	subs	r6, #1
 800729a:	e7ea      	b.n	8007272 <__mdiff+0xde>
 800729c:	08009aa5 	.word	0x08009aa5
 80072a0:	08009b34 	.word	0x08009b34

080072a4 <__ulp>:
 80072a4:	b082      	sub	sp, #8
 80072a6:	ed8d 0b00 	vstr	d0, [sp]
 80072aa:	9b01      	ldr	r3, [sp, #4]
 80072ac:	4912      	ldr	r1, [pc, #72]	; (80072f8 <__ulp+0x54>)
 80072ae:	4019      	ands	r1, r3
 80072b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80072b4:	2900      	cmp	r1, #0
 80072b6:	dd05      	ble.n	80072c4 <__ulp+0x20>
 80072b8:	2200      	movs	r2, #0
 80072ba:	460b      	mov	r3, r1
 80072bc:	ec43 2b10 	vmov	d0, r2, r3
 80072c0:	b002      	add	sp, #8
 80072c2:	4770      	bx	lr
 80072c4:	4249      	negs	r1, r1
 80072c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80072ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	da04      	bge.n	80072e2 <__ulp+0x3e>
 80072d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80072dc:	fa41 f300 	asr.w	r3, r1, r0
 80072e0:	e7ec      	b.n	80072bc <__ulp+0x18>
 80072e2:	f1a0 0114 	sub.w	r1, r0, #20
 80072e6:	291e      	cmp	r1, #30
 80072e8:	bfda      	itte	le
 80072ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80072ee:	fa20 f101 	lsrle.w	r1, r0, r1
 80072f2:	2101      	movgt	r1, #1
 80072f4:	460a      	mov	r2, r1
 80072f6:	e7e1      	b.n	80072bc <__ulp+0x18>
 80072f8:	7ff00000 	.word	0x7ff00000

080072fc <__b2d>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	6905      	ldr	r5, [r0, #16]
 8007300:	f100 0714 	add.w	r7, r0, #20
 8007304:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007308:	1f2e      	subs	r6, r5, #4
 800730a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800730e:	4620      	mov	r0, r4
 8007310:	f7ff fd52 	bl	8006db8 <__hi0bits>
 8007314:	f1c0 0320 	rsb	r3, r0, #32
 8007318:	280a      	cmp	r0, #10
 800731a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007398 <__b2d+0x9c>
 800731e:	600b      	str	r3, [r1, #0]
 8007320:	dc14      	bgt.n	800734c <__b2d+0x50>
 8007322:	f1c0 0e0b 	rsb	lr, r0, #11
 8007326:	fa24 f10e 	lsr.w	r1, r4, lr
 800732a:	42b7      	cmp	r7, r6
 800732c:	ea41 030c 	orr.w	r3, r1, ip
 8007330:	bf34      	ite	cc
 8007332:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007336:	2100      	movcs	r1, #0
 8007338:	3015      	adds	r0, #21
 800733a:	fa04 f000 	lsl.w	r0, r4, r0
 800733e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007342:	ea40 0201 	orr.w	r2, r0, r1
 8007346:	ec43 2b10 	vmov	d0, r2, r3
 800734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800734c:	42b7      	cmp	r7, r6
 800734e:	bf3a      	itte	cc
 8007350:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007354:	f1a5 0608 	subcc.w	r6, r5, #8
 8007358:	2100      	movcs	r1, #0
 800735a:	380b      	subs	r0, #11
 800735c:	d017      	beq.n	800738e <__b2d+0x92>
 800735e:	f1c0 0c20 	rsb	ip, r0, #32
 8007362:	fa04 f500 	lsl.w	r5, r4, r0
 8007366:	42be      	cmp	r6, r7
 8007368:	fa21 f40c 	lsr.w	r4, r1, ip
 800736c:	ea45 0504 	orr.w	r5, r5, r4
 8007370:	bf8c      	ite	hi
 8007372:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007376:	2400      	movls	r4, #0
 8007378:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800737c:	fa01 f000 	lsl.w	r0, r1, r0
 8007380:	fa24 f40c 	lsr.w	r4, r4, ip
 8007384:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007388:	ea40 0204 	orr.w	r2, r0, r4
 800738c:	e7db      	b.n	8007346 <__b2d+0x4a>
 800738e:	ea44 030c 	orr.w	r3, r4, ip
 8007392:	460a      	mov	r2, r1
 8007394:	e7d7      	b.n	8007346 <__b2d+0x4a>
 8007396:	bf00      	nop
 8007398:	3ff00000 	.word	0x3ff00000

0800739c <__d2b>:
 800739c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	4689      	mov	r9, r1
 80073a2:	2101      	movs	r1, #1
 80073a4:	ec57 6b10 	vmov	r6, r7, d0
 80073a8:	4690      	mov	r8, r2
 80073aa:	f7ff fc0f 	bl	8006bcc <_Balloc>
 80073ae:	4604      	mov	r4, r0
 80073b0:	b930      	cbnz	r0, 80073c0 <__d2b+0x24>
 80073b2:	4602      	mov	r2, r0
 80073b4:	4b25      	ldr	r3, [pc, #148]	; (800744c <__d2b+0xb0>)
 80073b6:	4826      	ldr	r0, [pc, #152]	; (8007450 <__d2b+0xb4>)
 80073b8:	f240 310a 	movw	r1, #778	; 0x30a
 80073bc:	f7ff f84c 	bl	8006458 <__assert_func>
 80073c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80073c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073c8:	bb35      	cbnz	r5, 8007418 <__d2b+0x7c>
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	d028      	beq.n	8007422 <__d2b+0x86>
 80073d0:	4668      	mov	r0, sp
 80073d2:	9600      	str	r6, [sp, #0]
 80073d4:	f7ff fd10 	bl	8006df8 <__lo0bits>
 80073d8:	9900      	ldr	r1, [sp, #0]
 80073da:	b300      	cbz	r0, 800741e <__d2b+0x82>
 80073dc:	9a01      	ldr	r2, [sp, #4]
 80073de:	f1c0 0320 	rsb	r3, r0, #32
 80073e2:	fa02 f303 	lsl.w	r3, r2, r3
 80073e6:	430b      	orrs	r3, r1
 80073e8:	40c2      	lsrs	r2, r0
 80073ea:	6163      	str	r3, [r4, #20]
 80073ec:	9201      	str	r2, [sp, #4]
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	61a3      	str	r3, [r4, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bf14      	ite	ne
 80073f6:	2202      	movne	r2, #2
 80073f8:	2201      	moveq	r2, #1
 80073fa:	6122      	str	r2, [r4, #16]
 80073fc:	b1d5      	cbz	r5, 8007434 <__d2b+0x98>
 80073fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007402:	4405      	add	r5, r0
 8007404:	f8c9 5000 	str.w	r5, [r9]
 8007408:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800740c:	f8c8 0000 	str.w	r0, [r8]
 8007410:	4620      	mov	r0, r4
 8007412:	b003      	add	sp, #12
 8007414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800741c:	e7d5      	b.n	80073ca <__d2b+0x2e>
 800741e:	6161      	str	r1, [r4, #20]
 8007420:	e7e5      	b.n	80073ee <__d2b+0x52>
 8007422:	a801      	add	r0, sp, #4
 8007424:	f7ff fce8 	bl	8006df8 <__lo0bits>
 8007428:	9b01      	ldr	r3, [sp, #4]
 800742a:	6163      	str	r3, [r4, #20]
 800742c:	2201      	movs	r2, #1
 800742e:	6122      	str	r2, [r4, #16]
 8007430:	3020      	adds	r0, #32
 8007432:	e7e3      	b.n	80073fc <__d2b+0x60>
 8007434:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007438:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800743c:	f8c9 0000 	str.w	r0, [r9]
 8007440:	6918      	ldr	r0, [r3, #16]
 8007442:	f7ff fcb9 	bl	8006db8 <__hi0bits>
 8007446:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800744a:	e7df      	b.n	800740c <__d2b+0x70>
 800744c:	08009aa5 	.word	0x08009aa5
 8007450:	08009b34 	.word	0x08009b34

08007454 <__ratio>:
 8007454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	4688      	mov	r8, r1
 800745a:	4669      	mov	r1, sp
 800745c:	4681      	mov	r9, r0
 800745e:	f7ff ff4d 	bl	80072fc <__b2d>
 8007462:	a901      	add	r1, sp, #4
 8007464:	4640      	mov	r0, r8
 8007466:	ec55 4b10 	vmov	r4, r5, d0
 800746a:	f7ff ff47 	bl	80072fc <__b2d>
 800746e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007472:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007476:	eba3 0c02 	sub.w	ip, r3, r2
 800747a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800747e:	1a9b      	subs	r3, r3, r2
 8007480:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007484:	ec51 0b10 	vmov	r0, r1, d0
 8007488:	2b00      	cmp	r3, #0
 800748a:	bfd6      	itet	le
 800748c:	460a      	movle	r2, r1
 800748e:	462a      	movgt	r2, r5
 8007490:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007494:	468b      	mov	fp, r1
 8007496:	462f      	mov	r7, r5
 8007498:	bfd4      	ite	le
 800749a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800749e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80074a2:	4620      	mov	r0, r4
 80074a4:	ee10 2a10 	vmov	r2, s0
 80074a8:	465b      	mov	r3, fp
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f9 f9ce 	bl	800084c <__aeabi_ddiv>
 80074b0:	ec41 0b10 	vmov	d0, r0, r1
 80074b4:	b003      	add	sp, #12
 80074b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074ba <__copybits>:
 80074ba:	3901      	subs	r1, #1
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	1149      	asrs	r1, r1, #5
 80074c0:	6914      	ldr	r4, [r2, #16]
 80074c2:	3101      	adds	r1, #1
 80074c4:	f102 0314 	add.w	r3, r2, #20
 80074c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80074d0:	1f05      	subs	r5, r0, #4
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	d30c      	bcc.n	80074f0 <__copybits+0x36>
 80074d6:	1aa3      	subs	r3, r4, r2
 80074d8:	3b11      	subs	r3, #17
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	3211      	adds	r2, #17
 80074e0:	42a2      	cmp	r2, r4
 80074e2:	bf88      	it	hi
 80074e4:	2300      	movhi	r3, #0
 80074e6:	4418      	add	r0, r3
 80074e8:	2300      	movs	r3, #0
 80074ea:	4288      	cmp	r0, r1
 80074ec:	d305      	bcc.n	80074fa <__copybits+0x40>
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
 80074f0:	f853 6b04 	ldr.w	r6, [r3], #4
 80074f4:	f845 6f04 	str.w	r6, [r5, #4]!
 80074f8:	e7eb      	b.n	80074d2 <__copybits+0x18>
 80074fa:	f840 3b04 	str.w	r3, [r0], #4
 80074fe:	e7f4      	b.n	80074ea <__copybits+0x30>

08007500 <__any_on>:
 8007500:	f100 0214 	add.w	r2, r0, #20
 8007504:	6900      	ldr	r0, [r0, #16]
 8007506:	114b      	asrs	r3, r1, #5
 8007508:	4298      	cmp	r0, r3
 800750a:	b510      	push	{r4, lr}
 800750c:	db11      	blt.n	8007532 <__any_on+0x32>
 800750e:	dd0a      	ble.n	8007526 <__any_on+0x26>
 8007510:	f011 011f 	ands.w	r1, r1, #31
 8007514:	d007      	beq.n	8007526 <__any_on+0x26>
 8007516:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800751a:	fa24 f001 	lsr.w	r0, r4, r1
 800751e:	fa00 f101 	lsl.w	r1, r0, r1
 8007522:	428c      	cmp	r4, r1
 8007524:	d10b      	bne.n	800753e <__any_on+0x3e>
 8007526:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800752a:	4293      	cmp	r3, r2
 800752c:	d803      	bhi.n	8007536 <__any_on+0x36>
 800752e:	2000      	movs	r0, #0
 8007530:	bd10      	pop	{r4, pc}
 8007532:	4603      	mov	r3, r0
 8007534:	e7f7      	b.n	8007526 <__any_on+0x26>
 8007536:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800753a:	2900      	cmp	r1, #0
 800753c:	d0f5      	beq.n	800752a <__any_on+0x2a>
 800753e:	2001      	movs	r0, #1
 8007540:	e7f6      	b.n	8007530 <__any_on+0x30>

08007542 <_calloc_r>:
 8007542:	b513      	push	{r0, r1, r4, lr}
 8007544:	434a      	muls	r2, r1
 8007546:	4611      	mov	r1, r2
 8007548:	9201      	str	r2, [sp, #4]
 800754a:	f000 f859 	bl	8007600 <_malloc_r>
 800754e:	4604      	mov	r4, r0
 8007550:	b118      	cbz	r0, 800755a <_calloc_r+0x18>
 8007552:	9a01      	ldr	r2, [sp, #4]
 8007554:	2100      	movs	r1, #0
 8007556:	f7fe f83b 	bl	80055d0 <memset>
 800755a:	4620      	mov	r0, r4
 800755c:	b002      	add	sp, #8
 800755e:	bd10      	pop	{r4, pc}

08007560 <_free_r>:
 8007560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007562:	2900      	cmp	r1, #0
 8007564:	d048      	beq.n	80075f8 <_free_r+0x98>
 8007566:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756a:	9001      	str	r0, [sp, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f1a1 0404 	sub.w	r4, r1, #4
 8007572:	bfb8      	it	lt
 8007574:	18e4      	addlt	r4, r4, r3
 8007576:	f000 fea9 	bl	80082cc <__malloc_lock>
 800757a:	4a20      	ldr	r2, [pc, #128]	; (80075fc <_free_r+0x9c>)
 800757c:	9801      	ldr	r0, [sp, #4]
 800757e:	6813      	ldr	r3, [r2, #0]
 8007580:	4615      	mov	r5, r2
 8007582:	b933      	cbnz	r3, 8007592 <_free_r+0x32>
 8007584:	6063      	str	r3, [r4, #4]
 8007586:	6014      	str	r4, [r2, #0]
 8007588:	b003      	add	sp, #12
 800758a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800758e:	f000 bea3 	b.w	80082d8 <__malloc_unlock>
 8007592:	42a3      	cmp	r3, r4
 8007594:	d90b      	bls.n	80075ae <_free_r+0x4e>
 8007596:	6821      	ldr	r1, [r4, #0]
 8007598:	1862      	adds	r2, r4, r1
 800759a:	4293      	cmp	r3, r2
 800759c:	bf04      	itt	eq
 800759e:	681a      	ldreq	r2, [r3, #0]
 80075a0:	685b      	ldreq	r3, [r3, #4]
 80075a2:	6063      	str	r3, [r4, #4]
 80075a4:	bf04      	itt	eq
 80075a6:	1852      	addeq	r2, r2, r1
 80075a8:	6022      	streq	r2, [r4, #0]
 80075aa:	602c      	str	r4, [r5, #0]
 80075ac:	e7ec      	b.n	8007588 <_free_r+0x28>
 80075ae:	461a      	mov	r2, r3
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	b10b      	cbz	r3, 80075b8 <_free_r+0x58>
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	d9fa      	bls.n	80075ae <_free_r+0x4e>
 80075b8:	6811      	ldr	r1, [r2, #0]
 80075ba:	1855      	adds	r5, r2, r1
 80075bc:	42a5      	cmp	r5, r4
 80075be:	d10b      	bne.n	80075d8 <_free_r+0x78>
 80075c0:	6824      	ldr	r4, [r4, #0]
 80075c2:	4421      	add	r1, r4
 80075c4:	1854      	adds	r4, r2, r1
 80075c6:	42a3      	cmp	r3, r4
 80075c8:	6011      	str	r1, [r2, #0]
 80075ca:	d1dd      	bne.n	8007588 <_free_r+0x28>
 80075cc:	681c      	ldr	r4, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	6053      	str	r3, [r2, #4]
 80075d2:	4421      	add	r1, r4
 80075d4:	6011      	str	r1, [r2, #0]
 80075d6:	e7d7      	b.n	8007588 <_free_r+0x28>
 80075d8:	d902      	bls.n	80075e0 <_free_r+0x80>
 80075da:	230c      	movs	r3, #12
 80075dc:	6003      	str	r3, [r0, #0]
 80075de:	e7d3      	b.n	8007588 <_free_r+0x28>
 80075e0:	6825      	ldr	r5, [r4, #0]
 80075e2:	1961      	adds	r1, r4, r5
 80075e4:	428b      	cmp	r3, r1
 80075e6:	bf04      	itt	eq
 80075e8:	6819      	ldreq	r1, [r3, #0]
 80075ea:	685b      	ldreq	r3, [r3, #4]
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	bf04      	itt	eq
 80075f0:	1949      	addeq	r1, r1, r5
 80075f2:	6021      	streq	r1, [r4, #0]
 80075f4:	6054      	str	r4, [r2, #4]
 80075f6:	e7c7      	b.n	8007588 <_free_r+0x28>
 80075f8:	b003      	add	sp, #12
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	200003a4 	.word	0x200003a4

08007600 <_malloc_r>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	1ccd      	adds	r5, r1, #3
 8007604:	f025 0503 	bic.w	r5, r5, #3
 8007608:	3508      	adds	r5, #8
 800760a:	2d0c      	cmp	r5, #12
 800760c:	bf38      	it	cc
 800760e:	250c      	movcc	r5, #12
 8007610:	2d00      	cmp	r5, #0
 8007612:	4606      	mov	r6, r0
 8007614:	db01      	blt.n	800761a <_malloc_r+0x1a>
 8007616:	42a9      	cmp	r1, r5
 8007618:	d903      	bls.n	8007622 <_malloc_r+0x22>
 800761a:	230c      	movs	r3, #12
 800761c:	6033      	str	r3, [r6, #0]
 800761e:	2000      	movs	r0, #0
 8007620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007622:	f000 fe53 	bl	80082cc <__malloc_lock>
 8007626:	4921      	ldr	r1, [pc, #132]	; (80076ac <_malloc_r+0xac>)
 8007628:	680a      	ldr	r2, [r1, #0]
 800762a:	4614      	mov	r4, r2
 800762c:	b99c      	cbnz	r4, 8007656 <_malloc_r+0x56>
 800762e:	4f20      	ldr	r7, [pc, #128]	; (80076b0 <_malloc_r+0xb0>)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	b923      	cbnz	r3, 800763e <_malloc_r+0x3e>
 8007634:	4621      	mov	r1, r4
 8007636:	4630      	mov	r0, r6
 8007638:	f000 fb32 	bl	8007ca0 <_sbrk_r>
 800763c:	6038      	str	r0, [r7, #0]
 800763e:	4629      	mov	r1, r5
 8007640:	4630      	mov	r0, r6
 8007642:	f000 fb2d 	bl	8007ca0 <_sbrk_r>
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	d123      	bne.n	8007692 <_malloc_r+0x92>
 800764a:	230c      	movs	r3, #12
 800764c:	6033      	str	r3, [r6, #0]
 800764e:	4630      	mov	r0, r6
 8007650:	f000 fe42 	bl	80082d8 <__malloc_unlock>
 8007654:	e7e3      	b.n	800761e <_malloc_r+0x1e>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	1b5b      	subs	r3, r3, r5
 800765a:	d417      	bmi.n	800768c <_malloc_r+0x8c>
 800765c:	2b0b      	cmp	r3, #11
 800765e:	d903      	bls.n	8007668 <_malloc_r+0x68>
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	441c      	add	r4, r3
 8007664:	6025      	str	r5, [r4, #0]
 8007666:	e004      	b.n	8007672 <_malloc_r+0x72>
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	42a2      	cmp	r2, r4
 800766c:	bf0c      	ite	eq
 800766e:	600b      	streq	r3, [r1, #0]
 8007670:	6053      	strne	r3, [r2, #4]
 8007672:	4630      	mov	r0, r6
 8007674:	f000 fe30 	bl	80082d8 <__malloc_unlock>
 8007678:	f104 000b 	add.w	r0, r4, #11
 800767c:	1d23      	adds	r3, r4, #4
 800767e:	f020 0007 	bic.w	r0, r0, #7
 8007682:	1ac2      	subs	r2, r0, r3
 8007684:	d0cc      	beq.n	8007620 <_malloc_r+0x20>
 8007686:	1a1b      	subs	r3, r3, r0
 8007688:	50a3      	str	r3, [r4, r2]
 800768a:	e7c9      	b.n	8007620 <_malloc_r+0x20>
 800768c:	4622      	mov	r2, r4
 800768e:	6864      	ldr	r4, [r4, #4]
 8007690:	e7cc      	b.n	800762c <_malloc_r+0x2c>
 8007692:	1cc4      	adds	r4, r0, #3
 8007694:	f024 0403 	bic.w	r4, r4, #3
 8007698:	42a0      	cmp	r0, r4
 800769a:	d0e3      	beq.n	8007664 <_malloc_r+0x64>
 800769c:	1a21      	subs	r1, r4, r0
 800769e:	4630      	mov	r0, r6
 80076a0:	f000 fafe 	bl	8007ca0 <_sbrk_r>
 80076a4:	3001      	adds	r0, #1
 80076a6:	d1dd      	bne.n	8007664 <_malloc_r+0x64>
 80076a8:	e7cf      	b.n	800764a <_malloc_r+0x4a>
 80076aa:	bf00      	nop
 80076ac:	200003a4 	.word	0x200003a4
 80076b0:	200003a8 	.word	0x200003a8

080076b4 <__sfputc_r>:
 80076b4:	6893      	ldr	r3, [r2, #8]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	b410      	push	{r4}
 80076bc:	6093      	str	r3, [r2, #8]
 80076be:	da08      	bge.n	80076d2 <__sfputc_r+0x1e>
 80076c0:	6994      	ldr	r4, [r2, #24]
 80076c2:	42a3      	cmp	r3, r4
 80076c4:	db01      	blt.n	80076ca <__sfputc_r+0x16>
 80076c6:	290a      	cmp	r1, #10
 80076c8:	d103      	bne.n	80076d2 <__sfputc_r+0x1e>
 80076ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ce:	f000 bb09 	b.w	8007ce4 <__swbuf_r>
 80076d2:	6813      	ldr	r3, [r2, #0]
 80076d4:	1c58      	adds	r0, r3, #1
 80076d6:	6010      	str	r0, [r2, #0]
 80076d8:	7019      	strb	r1, [r3, #0]
 80076da:	4608      	mov	r0, r1
 80076dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <__sfputs_r>:
 80076e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	4614      	mov	r4, r2
 80076ea:	18d5      	adds	r5, r2, r3
 80076ec:	42ac      	cmp	r4, r5
 80076ee:	d101      	bne.n	80076f4 <__sfputs_r+0x12>
 80076f0:	2000      	movs	r0, #0
 80076f2:	e007      	b.n	8007704 <__sfputs_r+0x22>
 80076f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f8:	463a      	mov	r2, r7
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7ff ffda 	bl	80076b4 <__sfputc_r>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d1f3      	bne.n	80076ec <__sfputs_r+0xa>
 8007704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007708 <_vfiprintf_r>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	460d      	mov	r5, r1
 800770e:	b09d      	sub	sp, #116	; 0x74
 8007710:	4614      	mov	r4, r2
 8007712:	4698      	mov	r8, r3
 8007714:	4606      	mov	r6, r0
 8007716:	b118      	cbz	r0, 8007720 <_vfiprintf_r+0x18>
 8007718:	6983      	ldr	r3, [r0, #24]
 800771a:	b90b      	cbnz	r3, 8007720 <_vfiprintf_r+0x18>
 800771c:	f000 fcd2 	bl	80080c4 <__sinit>
 8007720:	4b89      	ldr	r3, [pc, #548]	; (8007948 <_vfiprintf_r+0x240>)
 8007722:	429d      	cmp	r5, r3
 8007724:	d11b      	bne.n	800775e <_vfiprintf_r+0x56>
 8007726:	6875      	ldr	r5, [r6, #4]
 8007728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800772a:	07d9      	lsls	r1, r3, #31
 800772c:	d405      	bmi.n	800773a <_vfiprintf_r+0x32>
 800772e:	89ab      	ldrh	r3, [r5, #12]
 8007730:	059a      	lsls	r2, r3, #22
 8007732:	d402      	bmi.n	800773a <_vfiprintf_r+0x32>
 8007734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007736:	f000 fd63 	bl	8008200 <__retarget_lock_acquire_recursive>
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	071b      	lsls	r3, r3, #28
 800773e:	d501      	bpl.n	8007744 <_vfiprintf_r+0x3c>
 8007740:	692b      	ldr	r3, [r5, #16]
 8007742:	b9eb      	cbnz	r3, 8007780 <_vfiprintf_r+0x78>
 8007744:	4629      	mov	r1, r5
 8007746:	4630      	mov	r0, r6
 8007748:	f000 fb2c 	bl	8007da4 <__swsetup_r>
 800774c:	b1c0      	cbz	r0, 8007780 <_vfiprintf_r+0x78>
 800774e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007750:	07dc      	lsls	r4, r3, #31
 8007752:	d50e      	bpl.n	8007772 <_vfiprintf_r+0x6a>
 8007754:	f04f 30ff 	mov.w	r0, #4294967295
 8007758:	b01d      	add	sp, #116	; 0x74
 800775a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775e:	4b7b      	ldr	r3, [pc, #492]	; (800794c <_vfiprintf_r+0x244>)
 8007760:	429d      	cmp	r5, r3
 8007762:	d101      	bne.n	8007768 <_vfiprintf_r+0x60>
 8007764:	68b5      	ldr	r5, [r6, #8]
 8007766:	e7df      	b.n	8007728 <_vfiprintf_r+0x20>
 8007768:	4b79      	ldr	r3, [pc, #484]	; (8007950 <_vfiprintf_r+0x248>)
 800776a:	429d      	cmp	r5, r3
 800776c:	bf08      	it	eq
 800776e:	68f5      	ldreq	r5, [r6, #12]
 8007770:	e7da      	b.n	8007728 <_vfiprintf_r+0x20>
 8007772:	89ab      	ldrh	r3, [r5, #12]
 8007774:	0598      	lsls	r0, r3, #22
 8007776:	d4ed      	bmi.n	8007754 <_vfiprintf_r+0x4c>
 8007778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800777a:	f000 fd42 	bl	8008202 <__retarget_lock_release_recursive>
 800777e:	e7e9      	b.n	8007754 <_vfiprintf_r+0x4c>
 8007780:	2300      	movs	r3, #0
 8007782:	9309      	str	r3, [sp, #36]	; 0x24
 8007784:	2320      	movs	r3, #32
 8007786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800778a:	f8cd 800c 	str.w	r8, [sp, #12]
 800778e:	2330      	movs	r3, #48	; 0x30
 8007790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007954 <_vfiprintf_r+0x24c>
 8007794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007798:	f04f 0901 	mov.w	r9, #1
 800779c:	4623      	mov	r3, r4
 800779e:	469a      	mov	sl, r3
 80077a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a4:	b10a      	cbz	r2, 80077aa <_vfiprintf_r+0xa2>
 80077a6:	2a25      	cmp	r2, #37	; 0x25
 80077a8:	d1f9      	bne.n	800779e <_vfiprintf_r+0x96>
 80077aa:	ebba 0b04 	subs.w	fp, sl, r4
 80077ae:	d00b      	beq.n	80077c8 <_vfiprintf_r+0xc0>
 80077b0:	465b      	mov	r3, fp
 80077b2:	4622      	mov	r2, r4
 80077b4:	4629      	mov	r1, r5
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7ff ff93 	bl	80076e2 <__sfputs_r>
 80077bc:	3001      	adds	r0, #1
 80077be:	f000 80aa 	beq.w	8007916 <_vfiprintf_r+0x20e>
 80077c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c4:	445a      	add	r2, fp
 80077c6:	9209      	str	r2, [sp, #36]	; 0x24
 80077c8:	f89a 3000 	ldrb.w	r3, [sl]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80a2 	beq.w	8007916 <_vfiprintf_r+0x20e>
 80077d2:	2300      	movs	r3, #0
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295
 80077d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077dc:	f10a 0a01 	add.w	sl, sl, #1
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	9307      	str	r3, [sp, #28]
 80077e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077e8:	931a      	str	r3, [sp, #104]	; 0x68
 80077ea:	4654      	mov	r4, sl
 80077ec:	2205      	movs	r2, #5
 80077ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f2:	4858      	ldr	r0, [pc, #352]	; (8007954 <_vfiprintf_r+0x24c>)
 80077f4:	f7f8 fcf4 	bl	80001e0 <memchr>
 80077f8:	9a04      	ldr	r2, [sp, #16]
 80077fa:	b9d8      	cbnz	r0, 8007834 <_vfiprintf_r+0x12c>
 80077fc:	06d1      	lsls	r1, r2, #27
 80077fe:	bf44      	itt	mi
 8007800:	2320      	movmi	r3, #32
 8007802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007806:	0713      	lsls	r3, r2, #28
 8007808:	bf44      	itt	mi
 800780a:	232b      	movmi	r3, #43	; 0x2b
 800780c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007810:	f89a 3000 	ldrb.w	r3, [sl]
 8007814:	2b2a      	cmp	r3, #42	; 0x2a
 8007816:	d015      	beq.n	8007844 <_vfiprintf_r+0x13c>
 8007818:	9a07      	ldr	r2, [sp, #28]
 800781a:	4654      	mov	r4, sl
 800781c:	2000      	movs	r0, #0
 800781e:	f04f 0c0a 	mov.w	ip, #10
 8007822:	4621      	mov	r1, r4
 8007824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007828:	3b30      	subs	r3, #48	; 0x30
 800782a:	2b09      	cmp	r3, #9
 800782c:	d94e      	bls.n	80078cc <_vfiprintf_r+0x1c4>
 800782e:	b1b0      	cbz	r0, 800785e <_vfiprintf_r+0x156>
 8007830:	9207      	str	r2, [sp, #28]
 8007832:	e014      	b.n	800785e <_vfiprintf_r+0x156>
 8007834:	eba0 0308 	sub.w	r3, r0, r8
 8007838:	fa09 f303 	lsl.w	r3, r9, r3
 800783c:	4313      	orrs	r3, r2
 800783e:	9304      	str	r3, [sp, #16]
 8007840:	46a2      	mov	sl, r4
 8007842:	e7d2      	b.n	80077ea <_vfiprintf_r+0xe2>
 8007844:	9b03      	ldr	r3, [sp, #12]
 8007846:	1d19      	adds	r1, r3, #4
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	9103      	str	r1, [sp, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	bfbb      	ittet	lt
 8007850:	425b      	neglt	r3, r3
 8007852:	f042 0202 	orrlt.w	r2, r2, #2
 8007856:	9307      	strge	r3, [sp, #28]
 8007858:	9307      	strlt	r3, [sp, #28]
 800785a:	bfb8      	it	lt
 800785c:	9204      	strlt	r2, [sp, #16]
 800785e:	7823      	ldrb	r3, [r4, #0]
 8007860:	2b2e      	cmp	r3, #46	; 0x2e
 8007862:	d10c      	bne.n	800787e <_vfiprintf_r+0x176>
 8007864:	7863      	ldrb	r3, [r4, #1]
 8007866:	2b2a      	cmp	r3, #42	; 0x2a
 8007868:	d135      	bne.n	80078d6 <_vfiprintf_r+0x1ce>
 800786a:	9b03      	ldr	r3, [sp, #12]
 800786c:	1d1a      	adds	r2, r3, #4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	9203      	str	r2, [sp, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	bfb8      	it	lt
 8007876:	f04f 33ff 	movlt.w	r3, #4294967295
 800787a:	3402      	adds	r4, #2
 800787c:	9305      	str	r3, [sp, #20]
 800787e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007964 <_vfiprintf_r+0x25c>
 8007882:	7821      	ldrb	r1, [r4, #0]
 8007884:	2203      	movs	r2, #3
 8007886:	4650      	mov	r0, sl
 8007888:	f7f8 fcaa 	bl	80001e0 <memchr>
 800788c:	b140      	cbz	r0, 80078a0 <_vfiprintf_r+0x198>
 800788e:	2340      	movs	r3, #64	; 0x40
 8007890:	eba0 000a 	sub.w	r0, r0, sl
 8007894:	fa03 f000 	lsl.w	r0, r3, r0
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	4303      	orrs	r3, r0
 800789c:	3401      	adds	r4, #1
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a4:	482c      	ldr	r0, [pc, #176]	; (8007958 <_vfiprintf_r+0x250>)
 80078a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078aa:	2206      	movs	r2, #6
 80078ac:	f7f8 fc98 	bl	80001e0 <memchr>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d03f      	beq.n	8007934 <_vfiprintf_r+0x22c>
 80078b4:	4b29      	ldr	r3, [pc, #164]	; (800795c <_vfiprintf_r+0x254>)
 80078b6:	bb1b      	cbnz	r3, 8007900 <_vfiprintf_r+0x1f8>
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	3307      	adds	r3, #7
 80078bc:	f023 0307 	bic.w	r3, r3, #7
 80078c0:	3308      	adds	r3, #8
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c6:	443b      	add	r3, r7
 80078c8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ca:	e767      	b.n	800779c <_vfiprintf_r+0x94>
 80078cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80078d0:	460c      	mov	r4, r1
 80078d2:	2001      	movs	r0, #1
 80078d4:	e7a5      	b.n	8007822 <_vfiprintf_r+0x11a>
 80078d6:	2300      	movs	r3, #0
 80078d8:	3401      	adds	r4, #1
 80078da:	9305      	str	r3, [sp, #20]
 80078dc:	4619      	mov	r1, r3
 80078de:	f04f 0c0a 	mov.w	ip, #10
 80078e2:	4620      	mov	r0, r4
 80078e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e8:	3a30      	subs	r2, #48	; 0x30
 80078ea:	2a09      	cmp	r2, #9
 80078ec:	d903      	bls.n	80078f6 <_vfiprintf_r+0x1ee>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0c5      	beq.n	800787e <_vfiprintf_r+0x176>
 80078f2:	9105      	str	r1, [sp, #20]
 80078f4:	e7c3      	b.n	800787e <_vfiprintf_r+0x176>
 80078f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078fa:	4604      	mov	r4, r0
 80078fc:	2301      	movs	r3, #1
 80078fe:	e7f0      	b.n	80078e2 <_vfiprintf_r+0x1da>
 8007900:	ab03      	add	r3, sp, #12
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	462a      	mov	r2, r5
 8007906:	4b16      	ldr	r3, [pc, #88]	; (8007960 <_vfiprintf_r+0x258>)
 8007908:	a904      	add	r1, sp, #16
 800790a:	4630      	mov	r0, r6
 800790c:	f3af 8000 	nop.w
 8007910:	4607      	mov	r7, r0
 8007912:	1c78      	adds	r0, r7, #1
 8007914:	d1d6      	bne.n	80078c4 <_vfiprintf_r+0x1bc>
 8007916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007918:	07d9      	lsls	r1, r3, #31
 800791a:	d405      	bmi.n	8007928 <_vfiprintf_r+0x220>
 800791c:	89ab      	ldrh	r3, [r5, #12]
 800791e:	059a      	lsls	r2, r3, #22
 8007920:	d402      	bmi.n	8007928 <_vfiprintf_r+0x220>
 8007922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007924:	f000 fc6d 	bl	8008202 <__retarget_lock_release_recursive>
 8007928:	89ab      	ldrh	r3, [r5, #12]
 800792a:	065b      	lsls	r3, r3, #25
 800792c:	f53f af12 	bmi.w	8007754 <_vfiprintf_r+0x4c>
 8007930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007932:	e711      	b.n	8007758 <_vfiprintf_r+0x50>
 8007934:	ab03      	add	r3, sp, #12
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	462a      	mov	r2, r5
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <_vfiprintf_r+0x258>)
 800793c:	a904      	add	r1, sp, #16
 800793e:	4630      	mov	r0, r6
 8007940:	f000 f880 	bl	8007a44 <_printf_i>
 8007944:	e7e4      	b.n	8007910 <_vfiprintf_r+0x208>
 8007946:	bf00      	nop
 8007948:	08009ce8 	.word	0x08009ce8
 800794c:	08009d08 	.word	0x08009d08
 8007950:	08009cc8 	.word	0x08009cc8
 8007954:	08009c94 	.word	0x08009c94
 8007958:	08009c9e 	.word	0x08009c9e
 800795c:	00000000 	.word	0x00000000
 8007960:	080076e3 	.word	0x080076e3
 8007964:	08009c9a 	.word	0x08009c9a

08007968 <_printf_common>:
 8007968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	4616      	mov	r6, r2
 800796e:	4699      	mov	r9, r3
 8007970:	688a      	ldr	r2, [r1, #8]
 8007972:	690b      	ldr	r3, [r1, #16]
 8007974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007978:	4293      	cmp	r3, r2
 800797a:	bfb8      	it	lt
 800797c:	4613      	movlt	r3, r2
 800797e:	6033      	str	r3, [r6, #0]
 8007980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007984:	4607      	mov	r7, r0
 8007986:	460c      	mov	r4, r1
 8007988:	b10a      	cbz	r2, 800798e <_printf_common+0x26>
 800798a:	3301      	adds	r3, #1
 800798c:	6033      	str	r3, [r6, #0]
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	0699      	lsls	r1, r3, #26
 8007992:	bf42      	ittt	mi
 8007994:	6833      	ldrmi	r3, [r6, #0]
 8007996:	3302      	addmi	r3, #2
 8007998:	6033      	strmi	r3, [r6, #0]
 800799a:	6825      	ldr	r5, [r4, #0]
 800799c:	f015 0506 	ands.w	r5, r5, #6
 80079a0:	d106      	bne.n	80079b0 <_printf_common+0x48>
 80079a2:	f104 0a19 	add.w	sl, r4, #25
 80079a6:	68e3      	ldr	r3, [r4, #12]
 80079a8:	6832      	ldr	r2, [r6, #0]
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	42ab      	cmp	r3, r5
 80079ae:	dc26      	bgt.n	80079fe <_printf_common+0x96>
 80079b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079b4:	1e13      	subs	r3, r2, #0
 80079b6:	6822      	ldr	r2, [r4, #0]
 80079b8:	bf18      	it	ne
 80079ba:	2301      	movne	r3, #1
 80079bc:	0692      	lsls	r2, r2, #26
 80079be:	d42b      	bmi.n	8007a18 <_printf_common+0xb0>
 80079c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079c4:	4649      	mov	r1, r9
 80079c6:	4638      	mov	r0, r7
 80079c8:	47c0      	blx	r8
 80079ca:	3001      	adds	r0, #1
 80079cc:	d01e      	beq.n	8007a0c <_printf_common+0xa4>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	68e5      	ldr	r5, [r4, #12]
 80079d2:	6832      	ldr	r2, [r6, #0]
 80079d4:	f003 0306 	and.w	r3, r3, #6
 80079d8:	2b04      	cmp	r3, #4
 80079da:	bf08      	it	eq
 80079dc:	1aad      	subeq	r5, r5, r2
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	6922      	ldr	r2, [r4, #16]
 80079e2:	bf0c      	ite	eq
 80079e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079e8:	2500      	movne	r5, #0
 80079ea:	4293      	cmp	r3, r2
 80079ec:	bfc4      	itt	gt
 80079ee:	1a9b      	subgt	r3, r3, r2
 80079f0:	18ed      	addgt	r5, r5, r3
 80079f2:	2600      	movs	r6, #0
 80079f4:	341a      	adds	r4, #26
 80079f6:	42b5      	cmp	r5, r6
 80079f8:	d11a      	bne.n	8007a30 <_printf_common+0xc8>
 80079fa:	2000      	movs	r0, #0
 80079fc:	e008      	b.n	8007a10 <_printf_common+0xa8>
 80079fe:	2301      	movs	r3, #1
 8007a00:	4652      	mov	r2, sl
 8007a02:	4649      	mov	r1, r9
 8007a04:	4638      	mov	r0, r7
 8007a06:	47c0      	blx	r8
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d103      	bne.n	8007a14 <_printf_common+0xac>
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a14:	3501      	adds	r5, #1
 8007a16:	e7c6      	b.n	80079a6 <_printf_common+0x3e>
 8007a18:	18e1      	adds	r1, r4, r3
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	2030      	movs	r0, #48	; 0x30
 8007a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a22:	4422      	add	r2, r4
 8007a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a2c:	3302      	adds	r3, #2
 8007a2e:	e7c7      	b.n	80079c0 <_printf_common+0x58>
 8007a30:	2301      	movs	r3, #1
 8007a32:	4622      	mov	r2, r4
 8007a34:	4649      	mov	r1, r9
 8007a36:	4638      	mov	r0, r7
 8007a38:	47c0      	blx	r8
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d0e6      	beq.n	8007a0c <_printf_common+0xa4>
 8007a3e:	3601      	adds	r6, #1
 8007a40:	e7d9      	b.n	80079f6 <_printf_common+0x8e>
	...

08007a44 <_printf_i>:
 8007a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	460c      	mov	r4, r1
 8007a4a:	4691      	mov	r9, r2
 8007a4c:	7e27      	ldrb	r7, [r4, #24]
 8007a4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a50:	2f78      	cmp	r7, #120	; 0x78
 8007a52:	4680      	mov	r8, r0
 8007a54:	469a      	mov	sl, r3
 8007a56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a5a:	d807      	bhi.n	8007a6c <_printf_i+0x28>
 8007a5c:	2f62      	cmp	r7, #98	; 0x62
 8007a5e:	d80a      	bhi.n	8007a76 <_printf_i+0x32>
 8007a60:	2f00      	cmp	r7, #0
 8007a62:	f000 80d8 	beq.w	8007c16 <_printf_i+0x1d2>
 8007a66:	2f58      	cmp	r7, #88	; 0x58
 8007a68:	f000 80a3 	beq.w	8007bb2 <_printf_i+0x16e>
 8007a6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a74:	e03a      	b.n	8007aec <_printf_i+0xa8>
 8007a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a7a:	2b15      	cmp	r3, #21
 8007a7c:	d8f6      	bhi.n	8007a6c <_printf_i+0x28>
 8007a7e:	a001      	add	r0, pc, #4	; (adr r0, 8007a84 <_printf_i+0x40>)
 8007a80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a84:	08007add 	.word	0x08007add
 8007a88:	08007af1 	.word	0x08007af1
 8007a8c:	08007a6d 	.word	0x08007a6d
 8007a90:	08007a6d 	.word	0x08007a6d
 8007a94:	08007a6d 	.word	0x08007a6d
 8007a98:	08007a6d 	.word	0x08007a6d
 8007a9c:	08007af1 	.word	0x08007af1
 8007aa0:	08007a6d 	.word	0x08007a6d
 8007aa4:	08007a6d 	.word	0x08007a6d
 8007aa8:	08007a6d 	.word	0x08007a6d
 8007aac:	08007a6d 	.word	0x08007a6d
 8007ab0:	08007bfd 	.word	0x08007bfd
 8007ab4:	08007b21 	.word	0x08007b21
 8007ab8:	08007bdf 	.word	0x08007bdf
 8007abc:	08007a6d 	.word	0x08007a6d
 8007ac0:	08007a6d 	.word	0x08007a6d
 8007ac4:	08007c1f 	.word	0x08007c1f
 8007ac8:	08007a6d 	.word	0x08007a6d
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007a6d 	.word	0x08007a6d
 8007ad4:	08007a6d 	.word	0x08007a6d
 8007ad8:	08007be7 	.word	0x08007be7
 8007adc:	680b      	ldr	r3, [r1, #0]
 8007ade:	1d1a      	adds	r2, r3, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	600a      	str	r2, [r1, #0]
 8007ae4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aec:	2301      	movs	r3, #1
 8007aee:	e0a3      	b.n	8007c38 <_printf_i+0x1f4>
 8007af0:	6825      	ldr	r5, [r4, #0]
 8007af2:	6808      	ldr	r0, [r1, #0]
 8007af4:	062e      	lsls	r6, r5, #24
 8007af6:	f100 0304 	add.w	r3, r0, #4
 8007afa:	d50a      	bpl.n	8007b12 <_printf_i+0xce>
 8007afc:	6805      	ldr	r5, [r0, #0]
 8007afe:	600b      	str	r3, [r1, #0]
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	da03      	bge.n	8007b0c <_printf_i+0xc8>
 8007b04:	232d      	movs	r3, #45	; 0x2d
 8007b06:	426d      	negs	r5, r5
 8007b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b0c:	485e      	ldr	r0, [pc, #376]	; (8007c88 <_printf_i+0x244>)
 8007b0e:	230a      	movs	r3, #10
 8007b10:	e019      	b.n	8007b46 <_printf_i+0x102>
 8007b12:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b16:	6805      	ldr	r5, [r0, #0]
 8007b18:	600b      	str	r3, [r1, #0]
 8007b1a:	bf18      	it	ne
 8007b1c:	b22d      	sxthne	r5, r5
 8007b1e:	e7ef      	b.n	8007b00 <_printf_i+0xbc>
 8007b20:	680b      	ldr	r3, [r1, #0]
 8007b22:	6825      	ldr	r5, [r4, #0]
 8007b24:	1d18      	adds	r0, r3, #4
 8007b26:	6008      	str	r0, [r1, #0]
 8007b28:	0628      	lsls	r0, r5, #24
 8007b2a:	d501      	bpl.n	8007b30 <_printf_i+0xec>
 8007b2c:	681d      	ldr	r5, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <_printf_i+0xf2>
 8007b30:	0669      	lsls	r1, r5, #25
 8007b32:	d5fb      	bpl.n	8007b2c <_printf_i+0xe8>
 8007b34:	881d      	ldrh	r5, [r3, #0]
 8007b36:	4854      	ldr	r0, [pc, #336]	; (8007c88 <_printf_i+0x244>)
 8007b38:	2f6f      	cmp	r7, #111	; 0x6f
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2308      	moveq	r3, #8
 8007b3e:	230a      	movne	r3, #10
 8007b40:	2100      	movs	r1, #0
 8007b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b46:	6866      	ldr	r6, [r4, #4]
 8007b48:	60a6      	str	r6, [r4, #8]
 8007b4a:	2e00      	cmp	r6, #0
 8007b4c:	bfa2      	ittt	ge
 8007b4e:	6821      	ldrge	r1, [r4, #0]
 8007b50:	f021 0104 	bicge.w	r1, r1, #4
 8007b54:	6021      	strge	r1, [r4, #0]
 8007b56:	b90d      	cbnz	r5, 8007b5c <_printf_i+0x118>
 8007b58:	2e00      	cmp	r6, #0
 8007b5a:	d04d      	beq.n	8007bf8 <_printf_i+0x1b4>
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b62:	fb03 5711 	mls	r7, r3, r1, r5
 8007b66:	5dc7      	ldrb	r7, [r0, r7]
 8007b68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b6c:	462f      	mov	r7, r5
 8007b6e:	42bb      	cmp	r3, r7
 8007b70:	460d      	mov	r5, r1
 8007b72:	d9f4      	bls.n	8007b5e <_printf_i+0x11a>
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d10b      	bne.n	8007b90 <_printf_i+0x14c>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	07df      	lsls	r7, r3, #31
 8007b7c:	d508      	bpl.n	8007b90 <_printf_i+0x14c>
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	6861      	ldr	r1, [r4, #4]
 8007b82:	4299      	cmp	r1, r3
 8007b84:	bfde      	ittt	le
 8007b86:	2330      	movle	r3, #48	; 0x30
 8007b88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b90:	1b92      	subs	r2, r2, r6
 8007b92:	6122      	str	r2, [r4, #16]
 8007b94:	f8cd a000 	str.w	sl, [sp]
 8007b98:	464b      	mov	r3, r9
 8007b9a:	aa03      	add	r2, sp, #12
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	f7ff fee2 	bl	8007968 <_printf_common>
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	d14c      	bne.n	8007c42 <_printf_i+0x1fe>
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	b004      	add	sp, #16
 8007bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb2:	4835      	ldr	r0, [pc, #212]	; (8007c88 <_printf_i+0x244>)
 8007bb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	680e      	ldr	r6, [r1, #0]
 8007bbc:	061f      	lsls	r7, r3, #24
 8007bbe:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bc2:	600e      	str	r6, [r1, #0]
 8007bc4:	d514      	bpl.n	8007bf0 <_printf_i+0x1ac>
 8007bc6:	07d9      	lsls	r1, r3, #31
 8007bc8:	bf44      	itt	mi
 8007bca:	f043 0320 	orrmi.w	r3, r3, #32
 8007bce:	6023      	strmi	r3, [r4, #0]
 8007bd0:	b91d      	cbnz	r5, 8007bda <_printf_i+0x196>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f023 0320 	bic.w	r3, r3, #32
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	2310      	movs	r3, #16
 8007bdc:	e7b0      	b.n	8007b40 <_printf_i+0xfc>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f043 0320 	orr.w	r3, r3, #32
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	2378      	movs	r3, #120	; 0x78
 8007be8:	4828      	ldr	r0, [pc, #160]	; (8007c8c <_printf_i+0x248>)
 8007bea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bee:	e7e3      	b.n	8007bb8 <_printf_i+0x174>
 8007bf0:	065e      	lsls	r6, r3, #25
 8007bf2:	bf48      	it	mi
 8007bf4:	b2ad      	uxthmi	r5, r5
 8007bf6:	e7e6      	b.n	8007bc6 <_printf_i+0x182>
 8007bf8:	4616      	mov	r6, r2
 8007bfa:	e7bb      	b.n	8007b74 <_printf_i+0x130>
 8007bfc:	680b      	ldr	r3, [r1, #0]
 8007bfe:	6826      	ldr	r6, [r4, #0]
 8007c00:	6960      	ldr	r0, [r4, #20]
 8007c02:	1d1d      	adds	r5, r3, #4
 8007c04:	600d      	str	r5, [r1, #0]
 8007c06:	0635      	lsls	r5, r6, #24
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	d501      	bpl.n	8007c10 <_printf_i+0x1cc>
 8007c0c:	6018      	str	r0, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <_printf_i+0x1d2>
 8007c10:	0671      	lsls	r1, r6, #25
 8007c12:	d5fb      	bpl.n	8007c0c <_printf_i+0x1c8>
 8007c14:	8018      	strh	r0, [r3, #0]
 8007c16:	2300      	movs	r3, #0
 8007c18:	6123      	str	r3, [r4, #16]
 8007c1a:	4616      	mov	r6, r2
 8007c1c:	e7ba      	b.n	8007b94 <_printf_i+0x150>
 8007c1e:	680b      	ldr	r3, [r1, #0]
 8007c20:	1d1a      	adds	r2, r3, #4
 8007c22:	600a      	str	r2, [r1, #0]
 8007c24:	681e      	ldr	r6, [r3, #0]
 8007c26:	6862      	ldr	r2, [r4, #4]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f7f8 fad8 	bl	80001e0 <memchr>
 8007c30:	b108      	cbz	r0, 8007c36 <_printf_i+0x1f2>
 8007c32:	1b80      	subs	r0, r0, r6
 8007c34:	6060      	str	r0, [r4, #4]
 8007c36:	6863      	ldr	r3, [r4, #4]
 8007c38:	6123      	str	r3, [r4, #16]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c40:	e7a8      	b.n	8007b94 <_printf_i+0x150>
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	4632      	mov	r2, r6
 8007c46:	4649      	mov	r1, r9
 8007c48:	4640      	mov	r0, r8
 8007c4a:	47d0      	blx	sl
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d0ab      	beq.n	8007ba8 <_printf_i+0x164>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	079b      	lsls	r3, r3, #30
 8007c54:	d413      	bmi.n	8007c7e <_printf_i+0x23a>
 8007c56:	68e0      	ldr	r0, [r4, #12]
 8007c58:	9b03      	ldr	r3, [sp, #12]
 8007c5a:	4298      	cmp	r0, r3
 8007c5c:	bfb8      	it	lt
 8007c5e:	4618      	movlt	r0, r3
 8007c60:	e7a4      	b.n	8007bac <_printf_i+0x168>
 8007c62:	2301      	movs	r3, #1
 8007c64:	4632      	mov	r2, r6
 8007c66:	4649      	mov	r1, r9
 8007c68:	4640      	mov	r0, r8
 8007c6a:	47d0      	blx	sl
 8007c6c:	3001      	adds	r0, #1
 8007c6e:	d09b      	beq.n	8007ba8 <_printf_i+0x164>
 8007c70:	3501      	adds	r5, #1
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	9903      	ldr	r1, [sp, #12]
 8007c76:	1a5b      	subs	r3, r3, r1
 8007c78:	42ab      	cmp	r3, r5
 8007c7a:	dcf2      	bgt.n	8007c62 <_printf_i+0x21e>
 8007c7c:	e7eb      	b.n	8007c56 <_printf_i+0x212>
 8007c7e:	2500      	movs	r5, #0
 8007c80:	f104 0619 	add.w	r6, r4, #25
 8007c84:	e7f5      	b.n	8007c72 <_printf_i+0x22e>
 8007c86:	bf00      	nop
 8007c88:	08009ca5 	.word	0x08009ca5
 8007c8c:	08009cb6 	.word	0x08009cb6

08007c90 <nan>:
 8007c90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007c98 <nan+0x8>
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	00000000 	.word	0x00000000
 8007c9c:	7ff80000 	.word	0x7ff80000

08007ca0 <_sbrk_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4d06      	ldr	r5, [pc, #24]	; (8007cbc <_sbrk_r+0x1c>)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	602b      	str	r3, [r5, #0]
 8007cac:	f7f9 fe44 	bl	8001938 <_sbrk>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <_sbrk_r+0x1a>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b103      	cbz	r3, 8007cba <_sbrk_r+0x1a>
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	20000528 	.word	0x20000528

08007cc0 <strncmp>:
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	b16a      	cbz	r2, 8007ce0 <strncmp+0x20>
 8007cc4:	3901      	subs	r1, #1
 8007cc6:	1884      	adds	r4, r0, r2
 8007cc8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007ccc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d103      	bne.n	8007cdc <strncmp+0x1c>
 8007cd4:	42a0      	cmp	r0, r4
 8007cd6:	d001      	beq.n	8007cdc <strncmp+0x1c>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f5      	bne.n	8007cc8 <strncmp+0x8>
 8007cdc:	1a98      	subs	r0, r3, r2
 8007cde:	bd10      	pop	{r4, pc}
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	e7fc      	b.n	8007cde <strncmp+0x1e>

08007ce4 <__swbuf_r>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	460e      	mov	r6, r1
 8007ce8:	4614      	mov	r4, r2
 8007cea:	4605      	mov	r5, r0
 8007cec:	b118      	cbz	r0, 8007cf6 <__swbuf_r+0x12>
 8007cee:	6983      	ldr	r3, [r0, #24]
 8007cf0:	b90b      	cbnz	r3, 8007cf6 <__swbuf_r+0x12>
 8007cf2:	f000 f9e7 	bl	80080c4 <__sinit>
 8007cf6:	4b21      	ldr	r3, [pc, #132]	; (8007d7c <__swbuf_r+0x98>)
 8007cf8:	429c      	cmp	r4, r3
 8007cfa:	d12b      	bne.n	8007d54 <__swbuf_r+0x70>
 8007cfc:	686c      	ldr	r4, [r5, #4]
 8007cfe:	69a3      	ldr	r3, [r4, #24]
 8007d00:	60a3      	str	r3, [r4, #8]
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	071a      	lsls	r2, r3, #28
 8007d06:	d52f      	bpl.n	8007d68 <__swbuf_r+0x84>
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	b36b      	cbz	r3, 8007d68 <__swbuf_r+0x84>
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	6820      	ldr	r0, [r4, #0]
 8007d10:	1ac0      	subs	r0, r0, r3
 8007d12:	6963      	ldr	r3, [r4, #20]
 8007d14:	b2f6      	uxtb	r6, r6
 8007d16:	4283      	cmp	r3, r0
 8007d18:	4637      	mov	r7, r6
 8007d1a:	dc04      	bgt.n	8007d26 <__swbuf_r+0x42>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 f93c 	bl	8007f9c <_fflush_r>
 8007d24:	bb30      	cbnz	r0, 8007d74 <__swbuf_r+0x90>
 8007d26:	68a3      	ldr	r3, [r4, #8]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	60a3      	str	r3, [r4, #8]
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	6022      	str	r2, [r4, #0]
 8007d32:	701e      	strb	r6, [r3, #0]
 8007d34:	6963      	ldr	r3, [r4, #20]
 8007d36:	3001      	adds	r0, #1
 8007d38:	4283      	cmp	r3, r0
 8007d3a:	d004      	beq.n	8007d46 <__swbuf_r+0x62>
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	07db      	lsls	r3, r3, #31
 8007d40:	d506      	bpl.n	8007d50 <__swbuf_r+0x6c>
 8007d42:	2e0a      	cmp	r6, #10
 8007d44:	d104      	bne.n	8007d50 <__swbuf_r+0x6c>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f000 f927 	bl	8007f9c <_fflush_r>
 8007d4e:	b988      	cbnz	r0, 8007d74 <__swbuf_r+0x90>
 8007d50:	4638      	mov	r0, r7
 8007d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d54:	4b0a      	ldr	r3, [pc, #40]	; (8007d80 <__swbuf_r+0x9c>)
 8007d56:	429c      	cmp	r4, r3
 8007d58:	d101      	bne.n	8007d5e <__swbuf_r+0x7a>
 8007d5a:	68ac      	ldr	r4, [r5, #8]
 8007d5c:	e7cf      	b.n	8007cfe <__swbuf_r+0x1a>
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <__swbuf_r+0xa0>)
 8007d60:	429c      	cmp	r4, r3
 8007d62:	bf08      	it	eq
 8007d64:	68ec      	ldreq	r4, [r5, #12]
 8007d66:	e7ca      	b.n	8007cfe <__swbuf_r+0x1a>
 8007d68:	4621      	mov	r1, r4
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f000 f81a 	bl	8007da4 <__swsetup_r>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d0cb      	beq.n	8007d0c <__swbuf_r+0x28>
 8007d74:	f04f 37ff 	mov.w	r7, #4294967295
 8007d78:	e7ea      	b.n	8007d50 <__swbuf_r+0x6c>
 8007d7a:	bf00      	nop
 8007d7c:	08009ce8 	.word	0x08009ce8
 8007d80:	08009d08 	.word	0x08009d08
 8007d84:	08009cc8 	.word	0x08009cc8

08007d88 <__ascii_wctomb>:
 8007d88:	b149      	cbz	r1, 8007d9e <__ascii_wctomb+0x16>
 8007d8a:	2aff      	cmp	r2, #255	; 0xff
 8007d8c:	bf85      	ittet	hi
 8007d8e:	238a      	movhi	r3, #138	; 0x8a
 8007d90:	6003      	strhi	r3, [r0, #0]
 8007d92:	700a      	strbls	r2, [r1, #0]
 8007d94:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d98:	bf98      	it	ls
 8007d9a:	2001      	movls	r0, #1
 8007d9c:	4770      	bx	lr
 8007d9e:	4608      	mov	r0, r1
 8007da0:	4770      	bx	lr
	...

08007da4 <__swsetup_r>:
 8007da4:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <__swsetup_r+0xcc>)
 8007da6:	b570      	push	{r4, r5, r6, lr}
 8007da8:	681d      	ldr	r5, [r3, #0]
 8007daa:	4606      	mov	r6, r0
 8007dac:	460c      	mov	r4, r1
 8007dae:	b125      	cbz	r5, 8007dba <__swsetup_r+0x16>
 8007db0:	69ab      	ldr	r3, [r5, #24]
 8007db2:	b913      	cbnz	r3, 8007dba <__swsetup_r+0x16>
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 f985 	bl	80080c4 <__sinit>
 8007dba:	4b2e      	ldr	r3, [pc, #184]	; (8007e74 <__swsetup_r+0xd0>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	d10f      	bne.n	8007de0 <__swsetup_r+0x3c>
 8007dc0:	686c      	ldr	r4, [r5, #4]
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dc8:	0719      	lsls	r1, r3, #28
 8007dca:	d42c      	bmi.n	8007e26 <__swsetup_r+0x82>
 8007dcc:	06dd      	lsls	r5, r3, #27
 8007dce:	d411      	bmi.n	8007df4 <__swsetup_r+0x50>
 8007dd0:	2309      	movs	r3, #9
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	f04f 30ff 	mov.w	r0, #4294967295
 8007dde:	e03e      	b.n	8007e5e <__swsetup_r+0xba>
 8007de0:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <__swsetup_r+0xd4>)
 8007de2:	429c      	cmp	r4, r3
 8007de4:	d101      	bne.n	8007dea <__swsetup_r+0x46>
 8007de6:	68ac      	ldr	r4, [r5, #8]
 8007de8:	e7eb      	b.n	8007dc2 <__swsetup_r+0x1e>
 8007dea:	4b24      	ldr	r3, [pc, #144]	; (8007e7c <__swsetup_r+0xd8>)
 8007dec:	429c      	cmp	r4, r3
 8007dee:	bf08      	it	eq
 8007df0:	68ec      	ldreq	r4, [r5, #12]
 8007df2:	e7e6      	b.n	8007dc2 <__swsetup_r+0x1e>
 8007df4:	0758      	lsls	r0, r3, #29
 8007df6:	d512      	bpl.n	8007e1e <__swsetup_r+0x7a>
 8007df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dfa:	b141      	cbz	r1, 8007e0e <__swsetup_r+0x6a>
 8007dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e00:	4299      	cmp	r1, r3
 8007e02:	d002      	beq.n	8007e0a <__swsetup_r+0x66>
 8007e04:	4630      	mov	r0, r6
 8007e06:	f7ff fbab 	bl	8007560 <_free_r>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e14:	81a3      	strh	r3, [r4, #12]
 8007e16:	2300      	movs	r3, #0
 8007e18:	6063      	str	r3, [r4, #4]
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	f043 0308 	orr.w	r3, r3, #8
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	b94b      	cbnz	r3, 8007e3e <__swsetup_r+0x9a>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e34:	d003      	beq.n	8007e3e <__swsetup_r+0x9a>
 8007e36:	4621      	mov	r1, r4
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 fa07 	bl	800824c <__smakebuf_r>
 8007e3e:	89a0      	ldrh	r0, [r4, #12]
 8007e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e44:	f010 0301 	ands.w	r3, r0, #1
 8007e48:	d00a      	beq.n	8007e60 <__swsetup_r+0xbc>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60a3      	str	r3, [r4, #8]
 8007e4e:	6963      	ldr	r3, [r4, #20]
 8007e50:	425b      	negs	r3, r3
 8007e52:	61a3      	str	r3, [r4, #24]
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	b943      	cbnz	r3, 8007e6a <__swsetup_r+0xc6>
 8007e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e5c:	d1ba      	bne.n	8007dd4 <__swsetup_r+0x30>
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	0781      	lsls	r1, r0, #30
 8007e62:	bf58      	it	pl
 8007e64:	6963      	ldrpl	r3, [r4, #20]
 8007e66:	60a3      	str	r3, [r4, #8]
 8007e68:	e7f4      	b.n	8007e54 <__swsetup_r+0xb0>
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	e7f7      	b.n	8007e5e <__swsetup_r+0xba>
 8007e6e:	bf00      	nop
 8007e70:	2000000c 	.word	0x2000000c
 8007e74:	08009ce8 	.word	0x08009ce8
 8007e78:	08009d08 	.word	0x08009d08
 8007e7c:	08009cc8 	.word	0x08009cc8

08007e80 <abort>:
 8007e80:	b508      	push	{r3, lr}
 8007e82:	2006      	movs	r0, #6
 8007e84:	f000 fa56 	bl	8008334 <raise>
 8007e88:	2001      	movs	r0, #1
 8007e8a:	f7f9 fcdd 	bl	8001848 <_exit>
	...

08007e90 <__sflush_r>:
 8007e90:	898a      	ldrh	r2, [r1, #12]
 8007e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e96:	4605      	mov	r5, r0
 8007e98:	0710      	lsls	r0, r2, #28
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	d458      	bmi.n	8007f50 <__sflush_r+0xc0>
 8007e9e:	684b      	ldr	r3, [r1, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	dc05      	bgt.n	8007eb0 <__sflush_r+0x20>
 8007ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dc02      	bgt.n	8007eb0 <__sflush_r+0x20>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	d0f9      	beq.n	8007eaa <__sflush_r+0x1a>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ebc:	682f      	ldr	r7, [r5, #0]
 8007ebe:	602b      	str	r3, [r5, #0]
 8007ec0:	d032      	beq.n	8007f28 <__sflush_r+0x98>
 8007ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	075a      	lsls	r2, r3, #29
 8007ec8:	d505      	bpl.n	8007ed6 <__sflush_r+0x46>
 8007eca:	6863      	ldr	r3, [r4, #4]
 8007ecc:	1ac0      	subs	r0, r0, r3
 8007ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ed0:	b10b      	cbz	r3, 8007ed6 <__sflush_r+0x46>
 8007ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ed4:	1ac0      	subs	r0, r0, r3
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4602      	mov	r2, r0
 8007eda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007edc:	6a21      	ldr	r1, [r4, #32]
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b0      	blx	r6
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	d106      	bne.n	8007ef6 <__sflush_r+0x66>
 8007ee8:	6829      	ldr	r1, [r5, #0]
 8007eea:	291d      	cmp	r1, #29
 8007eec:	d82c      	bhi.n	8007f48 <__sflush_r+0xb8>
 8007eee:	4a2a      	ldr	r2, [pc, #168]	; (8007f98 <__sflush_r+0x108>)
 8007ef0:	40ca      	lsrs	r2, r1
 8007ef2:	07d6      	lsls	r6, r2, #31
 8007ef4:	d528      	bpl.n	8007f48 <__sflush_r+0xb8>
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	6062      	str	r2, [r4, #4]
 8007efa:	04d9      	lsls	r1, r3, #19
 8007efc:	6922      	ldr	r2, [r4, #16]
 8007efe:	6022      	str	r2, [r4, #0]
 8007f00:	d504      	bpl.n	8007f0c <__sflush_r+0x7c>
 8007f02:	1c42      	adds	r2, r0, #1
 8007f04:	d101      	bne.n	8007f0a <__sflush_r+0x7a>
 8007f06:	682b      	ldr	r3, [r5, #0]
 8007f08:	b903      	cbnz	r3, 8007f0c <__sflush_r+0x7c>
 8007f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f0e:	602f      	str	r7, [r5, #0]
 8007f10:	2900      	cmp	r1, #0
 8007f12:	d0ca      	beq.n	8007eaa <__sflush_r+0x1a>
 8007f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f18:	4299      	cmp	r1, r3
 8007f1a:	d002      	beq.n	8007f22 <__sflush_r+0x92>
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f7ff fb1f 	bl	8007560 <_free_r>
 8007f22:	2000      	movs	r0, #0
 8007f24:	6360      	str	r0, [r4, #52]	; 0x34
 8007f26:	e7c1      	b.n	8007eac <__sflush_r+0x1c>
 8007f28:	6a21      	ldr	r1, [r4, #32]
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b0      	blx	r6
 8007f30:	1c41      	adds	r1, r0, #1
 8007f32:	d1c7      	bne.n	8007ec4 <__sflush_r+0x34>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0c4      	beq.n	8007ec4 <__sflush_r+0x34>
 8007f3a:	2b1d      	cmp	r3, #29
 8007f3c:	d001      	beq.n	8007f42 <__sflush_r+0xb2>
 8007f3e:	2b16      	cmp	r3, #22
 8007f40:	d101      	bne.n	8007f46 <__sflush_r+0xb6>
 8007f42:	602f      	str	r7, [r5, #0]
 8007f44:	e7b1      	b.n	8007eaa <__sflush_r+0x1a>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	e7ad      	b.n	8007eac <__sflush_r+0x1c>
 8007f50:	690f      	ldr	r7, [r1, #16]
 8007f52:	2f00      	cmp	r7, #0
 8007f54:	d0a9      	beq.n	8007eaa <__sflush_r+0x1a>
 8007f56:	0793      	lsls	r3, r2, #30
 8007f58:	680e      	ldr	r6, [r1, #0]
 8007f5a:	bf08      	it	eq
 8007f5c:	694b      	ldreq	r3, [r1, #20]
 8007f5e:	600f      	str	r7, [r1, #0]
 8007f60:	bf18      	it	ne
 8007f62:	2300      	movne	r3, #0
 8007f64:	eba6 0807 	sub.w	r8, r6, r7
 8007f68:	608b      	str	r3, [r1, #8]
 8007f6a:	f1b8 0f00 	cmp.w	r8, #0
 8007f6e:	dd9c      	ble.n	8007eaa <__sflush_r+0x1a>
 8007f70:	6a21      	ldr	r1, [r4, #32]
 8007f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f74:	4643      	mov	r3, r8
 8007f76:	463a      	mov	r2, r7
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b0      	blx	r6
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	dc06      	bgt.n	8007f8e <__sflush_r+0xfe>
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f86:	81a3      	strh	r3, [r4, #12]
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	e78e      	b.n	8007eac <__sflush_r+0x1c>
 8007f8e:	4407      	add	r7, r0
 8007f90:	eba8 0800 	sub.w	r8, r8, r0
 8007f94:	e7e9      	b.n	8007f6a <__sflush_r+0xda>
 8007f96:	bf00      	nop
 8007f98:	20400001 	.word	0x20400001

08007f9c <_fflush_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	690b      	ldr	r3, [r1, #16]
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	b913      	cbnz	r3, 8007fac <_fflush_r+0x10>
 8007fa6:	2500      	movs	r5, #0
 8007fa8:	4628      	mov	r0, r5
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	b118      	cbz	r0, 8007fb6 <_fflush_r+0x1a>
 8007fae:	6983      	ldr	r3, [r0, #24]
 8007fb0:	b90b      	cbnz	r3, 8007fb6 <_fflush_r+0x1a>
 8007fb2:	f000 f887 	bl	80080c4 <__sinit>
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <_fflush_r+0x6c>)
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	d11b      	bne.n	8007ff4 <_fflush_r+0x58>
 8007fbc:	686c      	ldr	r4, [r5, #4]
 8007fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0ef      	beq.n	8007fa6 <_fflush_r+0xa>
 8007fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fc8:	07d0      	lsls	r0, r2, #31
 8007fca:	d404      	bmi.n	8007fd6 <_fflush_r+0x3a>
 8007fcc:	0599      	lsls	r1, r3, #22
 8007fce:	d402      	bmi.n	8007fd6 <_fflush_r+0x3a>
 8007fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fd2:	f000 f915 	bl	8008200 <__retarget_lock_acquire_recursive>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	4621      	mov	r1, r4
 8007fda:	f7ff ff59 	bl	8007e90 <__sflush_r>
 8007fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fe0:	07da      	lsls	r2, r3, #31
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	d4e0      	bmi.n	8007fa8 <_fflush_r+0xc>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	059b      	lsls	r3, r3, #22
 8007fea:	d4dd      	bmi.n	8007fa8 <_fflush_r+0xc>
 8007fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fee:	f000 f908 	bl	8008202 <__retarget_lock_release_recursive>
 8007ff2:	e7d9      	b.n	8007fa8 <_fflush_r+0xc>
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <_fflush_r+0x70>)
 8007ff6:	429c      	cmp	r4, r3
 8007ff8:	d101      	bne.n	8007ffe <_fflush_r+0x62>
 8007ffa:	68ac      	ldr	r4, [r5, #8]
 8007ffc:	e7df      	b.n	8007fbe <_fflush_r+0x22>
 8007ffe:	4b04      	ldr	r3, [pc, #16]	; (8008010 <_fflush_r+0x74>)
 8008000:	429c      	cmp	r4, r3
 8008002:	bf08      	it	eq
 8008004:	68ec      	ldreq	r4, [r5, #12]
 8008006:	e7da      	b.n	8007fbe <_fflush_r+0x22>
 8008008:	08009ce8 	.word	0x08009ce8
 800800c:	08009d08 	.word	0x08009d08
 8008010:	08009cc8 	.word	0x08009cc8

08008014 <std>:
 8008014:	2300      	movs	r3, #0
 8008016:	b510      	push	{r4, lr}
 8008018:	4604      	mov	r4, r0
 800801a:	e9c0 3300 	strd	r3, r3, [r0]
 800801e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008022:	6083      	str	r3, [r0, #8]
 8008024:	8181      	strh	r1, [r0, #12]
 8008026:	6643      	str	r3, [r0, #100]	; 0x64
 8008028:	81c2      	strh	r2, [r0, #14]
 800802a:	6183      	str	r3, [r0, #24]
 800802c:	4619      	mov	r1, r3
 800802e:	2208      	movs	r2, #8
 8008030:	305c      	adds	r0, #92	; 0x5c
 8008032:	f7fd facd 	bl	80055d0 <memset>
 8008036:	4b05      	ldr	r3, [pc, #20]	; (800804c <std+0x38>)
 8008038:	6263      	str	r3, [r4, #36]	; 0x24
 800803a:	4b05      	ldr	r3, [pc, #20]	; (8008050 <std+0x3c>)
 800803c:	62a3      	str	r3, [r4, #40]	; 0x28
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <std+0x40>)
 8008040:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008042:	4b05      	ldr	r3, [pc, #20]	; (8008058 <std+0x44>)
 8008044:	6224      	str	r4, [r4, #32]
 8008046:	6323      	str	r3, [r4, #48]	; 0x30
 8008048:	bd10      	pop	{r4, pc}
 800804a:	bf00      	nop
 800804c:	0800836d 	.word	0x0800836d
 8008050:	0800838f 	.word	0x0800838f
 8008054:	080083c7 	.word	0x080083c7
 8008058:	080083eb 	.word	0x080083eb

0800805c <_cleanup_r>:
 800805c:	4901      	ldr	r1, [pc, #4]	; (8008064 <_cleanup_r+0x8>)
 800805e:	f000 b8af 	b.w	80081c0 <_fwalk_reent>
 8008062:	bf00      	nop
 8008064:	08007f9d 	.word	0x08007f9d

08008068 <__sfmoreglue>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	1e4a      	subs	r2, r1, #1
 800806c:	2568      	movs	r5, #104	; 0x68
 800806e:	4355      	muls	r5, r2
 8008070:	460e      	mov	r6, r1
 8008072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008076:	f7ff fac3 	bl	8007600 <_malloc_r>
 800807a:	4604      	mov	r4, r0
 800807c:	b140      	cbz	r0, 8008090 <__sfmoreglue+0x28>
 800807e:	2100      	movs	r1, #0
 8008080:	e9c0 1600 	strd	r1, r6, [r0]
 8008084:	300c      	adds	r0, #12
 8008086:	60a0      	str	r0, [r4, #8]
 8008088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800808c:	f7fd faa0 	bl	80055d0 <memset>
 8008090:	4620      	mov	r0, r4
 8008092:	bd70      	pop	{r4, r5, r6, pc}

08008094 <__sfp_lock_acquire>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__sfp_lock_acquire+0x8>)
 8008096:	f000 b8b3 	b.w	8008200 <__retarget_lock_acquire_recursive>
 800809a:	bf00      	nop
 800809c:	20000524 	.word	0x20000524

080080a0 <__sfp_lock_release>:
 80080a0:	4801      	ldr	r0, [pc, #4]	; (80080a8 <__sfp_lock_release+0x8>)
 80080a2:	f000 b8ae 	b.w	8008202 <__retarget_lock_release_recursive>
 80080a6:	bf00      	nop
 80080a8:	20000524 	.word	0x20000524

080080ac <__sinit_lock_acquire>:
 80080ac:	4801      	ldr	r0, [pc, #4]	; (80080b4 <__sinit_lock_acquire+0x8>)
 80080ae:	f000 b8a7 	b.w	8008200 <__retarget_lock_acquire_recursive>
 80080b2:	bf00      	nop
 80080b4:	2000051f 	.word	0x2000051f

080080b8 <__sinit_lock_release>:
 80080b8:	4801      	ldr	r0, [pc, #4]	; (80080c0 <__sinit_lock_release+0x8>)
 80080ba:	f000 b8a2 	b.w	8008202 <__retarget_lock_release_recursive>
 80080be:	bf00      	nop
 80080c0:	2000051f 	.word	0x2000051f

080080c4 <__sinit>:
 80080c4:	b510      	push	{r4, lr}
 80080c6:	4604      	mov	r4, r0
 80080c8:	f7ff fff0 	bl	80080ac <__sinit_lock_acquire>
 80080cc:	69a3      	ldr	r3, [r4, #24]
 80080ce:	b11b      	cbz	r3, 80080d8 <__sinit+0x14>
 80080d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d4:	f7ff bff0 	b.w	80080b8 <__sinit_lock_release>
 80080d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080dc:	6523      	str	r3, [r4, #80]	; 0x50
 80080de:	4b13      	ldr	r3, [pc, #76]	; (800812c <__sinit+0x68>)
 80080e0:	4a13      	ldr	r2, [pc, #76]	; (8008130 <__sinit+0x6c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80080e6:	42a3      	cmp	r3, r4
 80080e8:	bf04      	itt	eq
 80080ea:	2301      	moveq	r3, #1
 80080ec:	61a3      	streq	r3, [r4, #24]
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 f820 	bl	8008134 <__sfp>
 80080f4:	6060      	str	r0, [r4, #4]
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 f81c 	bl	8008134 <__sfp>
 80080fc:	60a0      	str	r0, [r4, #8]
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f818 	bl	8008134 <__sfp>
 8008104:	2200      	movs	r2, #0
 8008106:	60e0      	str	r0, [r4, #12]
 8008108:	2104      	movs	r1, #4
 800810a:	6860      	ldr	r0, [r4, #4]
 800810c:	f7ff ff82 	bl	8008014 <std>
 8008110:	68a0      	ldr	r0, [r4, #8]
 8008112:	2201      	movs	r2, #1
 8008114:	2109      	movs	r1, #9
 8008116:	f7ff ff7d 	bl	8008014 <std>
 800811a:	68e0      	ldr	r0, [r4, #12]
 800811c:	2202      	movs	r2, #2
 800811e:	2112      	movs	r1, #18
 8008120:	f7ff ff78 	bl	8008014 <std>
 8008124:	2301      	movs	r3, #1
 8008126:	61a3      	str	r3, [r4, #24]
 8008128:	e7d2      	b.n	80080d0 <__sinit+0xc>
 800812a:	bf00      	nop
 800812c:	08009890 	.word	0x08009890
 8008130:	0800805d 	.word	0x0800805d

08008134 <__sfp>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	4607      	mov	r7, r0
 8008138:	f7ff ffac 	bl	8008094 <__sfp_lock_acquire>
 800813c:	4b1e      	ldr	r3, [pc, #120]	; (80081b8 <__sfp+0x84>)
 800813e:	681e      	ldr	r6, [r3, #0]
 8008140:	69b3      	ldr	r3, [r6, #24]
 8008142:	b913      	cbnz	r3, 800814a <__sfp+0x16>
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff ffbd 	bl	80080c4 <__sinit>
 800814a:	3648      	adds	r6, #72	; 0x48
 800814c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008150:	3b01      	subs	r3, #1
 8008152:	d503      	bpl.n	800815c <__sfp+0x28>
 8008154:	6833      	ldr	r3, [r6, #0]
 8008156:	b30b      	cbz	r3, 800819c <__sfp+0x68>
 8008158:	6836      	ldr	r6, [r6, #0]
 800815a:	e7f7      	b.n	800814c <__sfp+0x18>
 800815c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008160:	b9d5      	cbnz	r5, 8008198 <__sfp+0x64>
 8008162:	4b16      	ldr	r3, [pc, #88]	; (80081bc <__sfp+0x88>)
 8008164:	60e3      	str	r3, [r4, #12]
 8008166:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800816a:	6665      	str	r5, [r4, #100]	; 0x64
 800816c:	f000 f847 	bl	80081fe <__retarget_lock_init_recursive>
 8008170:	f7ff ff96 	bl	80080a0 <__sfp_lock_release>
 8008174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800817c:	6025      	str	r5, [r4, #0]
 800817e:	61a5      	str	r5, [r4, #24]
 8008180:	2208      	movs	r2, #8
 8008182:	4629      	mov	r1, r5
 8008184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008188:	f7fd fa22 	bl	80055d0 <memset>
 800818c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008194:	4620      	mov	r0, r4
 8008196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008198:	3468      	adds	r4, #104	; 0x68
 800819a:	e7d9      	b.n	8008150 <__sfp+0x1c>
 800819c:	2104      	movs	r1, #4
 800819e:	4638      	mov	r0, r7
 80081a0:	f7ff ff62 	bl	8008068 <__sfmoreglue>
 80081a4:	4604      	mov	r4, r0
 80081a6:	6030      	str	r0, [r6, #0]
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d1d5      	bne.n	8008158 <__sfp+0x24>
 80081ac:	f7ff ff78 	bl	80080a0 <__sfp_lock_release>
 80081b0:	230c      	movs	r3, #12
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	e7ee      	b.n	8008194 <__sfp+0x60>
 80081b6:	bf00      	nop
 80081b8:	08009890 	.word	0x08009890
 80081bc:	ffff0001 	.word	0xffff0001

080081c0 <_fwalk_reent>:
 80081c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c4:	4606      	mov	r6, r0
 80081c6:	4688      	mov	r8, r1
 80081c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081cc:	2700      	movs	r7, #0
 80081ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081d2:	f1b9 0901 	subs.w	r9, r9, #1
 80081d6:	d505      	bpl.n	80081e4 <_fwalk_reent+0x24>
 80081d8:	6824      	ldr	r4, [r4, #0]
 80081da:	2c00      	cmp	r4, #0
 80081dc:	d1f7      	bne.n	80081ce <_fwalk_reent+0xe>
 80081de:	4638      	mov	r0, r7
 80081e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081e4:	89ab      	ldrh	r3, [r5, #12]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d907      	bls.n	80081fa <_fwalk_reent+0x3a>
 80081ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081ee:	3301      	adds	r3, #1
 80081f0:	d003      	beq.n	80081fa <_fwalk_reent+0x3a>
 80081f2:	4629      	mov	r1, r5
 80081f4:	4630      	mov	r0, r6
 80081f6:	47c0      	blx	r8
 80081f8:	4307      	orrs	r7, r0
 80081fa:	3568      	adds	r5, #104	; 0x68
 80081fc:	e7e9      	b.n	80081d2 <_fwalk_reent+0x12>

080081fe <__retarget_lock_init_recursive>:
 80081fe:	4770      	bx	lr

08008200 <__retarget_lock_acquire_recursive>:
 8008200:	4770      	bx	lr

08008202 <__retarget_lock_release_recursive>:
 8008202:	4770      	bx	lr

08008204 <__swhatbuf_r>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	460e      	mov	r6, r1
 8008208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820c:	2900      	cmp	r1, #0
 800820e:	b096      	sub	sp, #88	; 0x58
 8008210:	4614      	mov	r4, r2
 8008212:	461d      	mov	r5, r3
 8008214:	da07      	bge.n	8008226 <__swhatbuf_r+0x22>
 8008216:	2300      	movs	r3, #0
 8008218:	602b      	str	r3, [r5, #0]
 800821a:	89b3      	ldrh	r3, [r6, #12]
 800821c:	061a      	lsls	r2, r3, #24
 800821e:	d410      	bmi.n	8008242 <__swhatbuf_r+0x3e>
 8008220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008224:	e00e      	b.n	8008244 <__swhatbuf_r+0x40>
 8008226:	466a      	mov	r2, sp
 8008228:	f000 f906 	bl	8008438 <_fstat_r>
 800822c:	2800      	cmp	r0, #0
 800822e:	dbf2      	blt.n	8008216 <__swhatbuf_r+0x12>
 8008230:	9a01      	ldr	r2, [sp, #4]
 8008232:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008236:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800823a:	425a      	negs	r2, r3
 800823c:	415a      	adcs	r2, r3
 800823e:	602a      	str	r2, [r5, #0]
 8008240:	e7ee      	b.n	8008220 <__swhatbuf_r+0x1c>
 8008242:	2340      	movs	r3, #64	; 0x40
 8008244:	2000      	movs	r0, #0
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	b016      	add	sp, #88	; 0x58
 800824a:	bd70      	pop	{r4, r5, r6, pc}

0800824c <__smakebuf_r>:
 800824c:	898b      	ldrh	r3, [r1, #12]
 800824e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008250:	079d      	lsls	r5, r3, #30
 8008252:	4606      	mov	r6, r0
 8008254:	460c      	mov	r4, r1
 8008256:	d507      	bpl.n	8008268 <__smakebuf_r+0x1c>
 8008258:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	2301      	movs	r3, #1
 8008262:	6163      	str	r3, [r4, #20]
 8008264:	b002      	add	sp, #8
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	ab01      	add	r3, sp, #4
 800826a:	466a      	mov	r2, sp
 800826c:	f7ff ffca 	bl	8008204 <__swhatbuf_r>
 8008270:	9900      	ldr	r1, [sp, #0]
 8008272:	4605      	mov	r5, r0
 8008274:	4630      	mov	r0, r6
 8008276:	f7ff f9c3 	bl	8007600 <_malloc_r>
 800827a:	b948      	cbnz	r0, 8008290 <__smakebuf_r+0x44>
 800827c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008280:	059a      	lsls	r2, r3, #22
 8008282:	d4ef      	bmi.n	8008264 <__smakebuf_r+0x18>
 8008284:	f023 0303 	bic.w	r3, r3, #3
 8008288:	f043 0302 	orr.w	r3, r3, #2
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	e7e3      	b.n	8008258 <__smakebuf_r+0xc>
 8008290:	4b0d      	ldr	r3, [pc, #52]	; (80082c8 <__smakebuf_r+0x7c>)
 8008292:	62b3      	str	r3, [r6, #40]	; 0x28
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	6020      	str	r0, [r4, #0]
 8008298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	6163      	str	r3, [r4, #20]
 80082a2:	9b01      	ldr	r3, [sp, #4]
 80082a4:	6120      	str	r0, [r4, #16]
 80082a6:	b15b      	cbz	r3, 80082c0 <__smakebuf_r+0x74>
 80082a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ac:	4630      	mov	r0, r6
 80082ae:	f000 f8d5 	bl	800845c <_isatty_r>
 80082b2:	b128      	cbz	r0, 80082c0 <__smakebuf_r+0x74>
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	f043 0301 	orr.w	r3, r3, #1
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	89a0      	ldrh	r0, [r4, #12]
 80082c2:	4305      	orrs	r5, r0
 80082c4:	81a5      	strh	r5, [r4, #12]
 80082c6:	e7cd      	b.n	8008264 <__smakebuf_r+0x18>
 80082c8:	0800805d 	.word	0x0800805d

080082cc <__malloc_lock>:
 80082cc:	4801      	ldr	r0, [pc, #4]	; (80082d4 <__malloc_lock+0x8>)
 80082ce:	f7ff bf97 	b.w	8008200 <__retarget_lock_acquire_recursive>
 80082d2:	bf00      	nop
 80082d4:	20000520 	.word	0x20000520

080082d8 <__malloc_unlock>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__malloc_unlock+0x8>)
 80082da:	f7ff bf92 	b.w	8008202 <__retarget_lock_release_recursive>
 80082de:	bf00      	nop
 80082e0:	20000520 	.word	0x20000520

080082e4 <_raise_r>:
 80082e4:	291f      	cmp	r1, #31
 80082e6:	b538      	push	{r3, r4, r5, lr}
 80082e8:	4604      	mov	r4, r0
 80082ea:	460d      	mov	r5, r1
 80082ec:	d904      	bls.n	80082f8 <_raise_r+0x14>
 80082ee:	2316      	movs	r3, #22
 80082f0:	6003      	str	r3, [r0, #0]
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082fa:	b112      	cbz	r2, 8008302 <_raise_r+0x1e>
 80082fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008300:	b94b      	cbnz	r3, 8008316 <_raise_r+0x32>
 8008302:	4620      	mov	r0, r4
 8008304:	f000 f830 	bl	8008368 <_getpid_r>
 8008308:	462a      	mov	r2, r5
 800830a:	4601      	mov	r1, r0
 800830c:	4620      	mov	r0, r4
 800830e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008312:	f000 b817 	b.w	8008344 <_kill_r>
 8008316:	2b01      	cmp	r3, #1
 8008318:	d00a      	beq.n	8008330 <_raise_r+0x4c>
 800831a:	1c59      	adds	r1, r3, #1
 800831c:	d103      	bne.n	8008326 <_raise_r+0x42>
 800831e:	2316      	movs	r3, #22
 8008320:	6003      	str	r3, [r0, #0]
 8008322:	2001      	movs	r0, #1
 8008324:	e7e7      	b.n	80082f6 <_raise_r+0x12>
 8008326:	2400      	movs	r4, #0
 8008328:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800832c:	4628      	mov	r0, r5
 800832e:	4798      	blx	r3
 8008330:	2000      	movs	r0, #0
 8008332:	e7e0      	b.n	80082f6 <_raise_r+0x12>

08008334 <raise>:
 8008334:	4b02      	ldr	r3, [pc, #8]	; (8008340 <raise+0xc>)
 8008336:	4601      	mov	r1, r0
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	f7ff bfd3 	b.w	80082e4 <_raise_r>
 800833e:	bf00      	nop
 8008340:	2000000c 	.word	0x2000000c

08008344 <_kill_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d07      	ldr	r5, [pc, #28]	; (8008364 <_kill_r+0x20>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	4611      	mov	r1, r2
 8008350:	602b      	str	r3, [r5, #0]
 8008352:	f7f9 fa69 	bl	8001828 <_kill>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	d102      	bne.n	8008360 <_kill_r+0x1c>
 800835a:	682b      	ldr	r3, [r5, #0]
 800835c:	b103      	cbz	r3, 8008360 <_kill_r+0x1c>
 800835e:	6023      	str	r3, [r4, #0]
 8008360:	bd38      	pop	{r3, r4, r5, pc}
 8008362:	bf00      	nop
 8008364:	20000528 	.word	0x20000528

08008368 <_getpid_r>:
 8008368:	f7f9 ba56 	b.w	8001818 <_getpid>

0800836c <__sread>:
 800836c:	b510      	push	{r4, lr}
 800836e:	460c      	mov	r4, r1
 8008370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008374:	f000 f894 	bl	80084a0 <_read_r>
 8008378:	2800      	cmp	r0, #0
 800837a:	bfab      	itete	ge
 800837c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800837e:	89a3      	ldrhlt	r3, [r4, #12]
 8008380:	181b      	addge	r3, r3, r0
 8008382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008386:	bfac      	ite	ge
 8008388:	6563      	strge	r3, [r4, #84]	; 0x54
 800838a:	81a3      	strhlt	r3, [r4, #12]
 800838c:	bd10      	pop	{r4, pc}

0800838e <__swrite>:
 800838e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008392:	461f      	mov	r7, r3
 8008394:	898b      	ldrh	r3, [r1, #12]
 8008396:	05db      	lsls	r3, r3, #23
 8008398:	4605      	mov	r5, r0
 800839a:	460c      	mov	r4, r1
 800839c:	4616      	mov	r6, r2
 800839e:	d505      	bpl.n	80083ac <__swrite+0x1e>
 80083a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a4:	2302      	movs	r3, #2
 80083a6:	2200      	movs	r2, #0
 80083a8:	f000 f868 	bl	800847c <_lseek_r>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	4632      	mov	r2, r6
 80083ba:	463b      	mov	r3, r7
 80083bc:	4628      	mov	r0, r5
 80083be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083c2:	f000 b817 	b.w	80083f4 <_write_r>

080083c6 <__sseek>:
 80083c6:	b510      	push	{r4, lr}
 80083c8:	460c      	mov	r4, r1
 80083ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ce:	f000 f855 	bl	800847c <_lseek_r>
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	bf15      	itete	ne
 80083d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80083da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083e2:	81a3      	strheq	r3, [r4, #12]
 80083e4:	bf18      	it	ne
 80083e6:	81a3      	strhne	r3, [r4, #12]
 80083e8:	bd10      	pop	{r4, pc}

080083ea <__sclose>:
 80083ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ee:	f000 b813 	b.w	8008418 <_close_r>
	...

080083f4 <_write_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4d07      	ldr	r5, [pc, #28]	; (8008414 <_write_r+0x20>)
 80083f8:	4604      	mov	r4, r0
 80083fa:	4608      	mov	r0, r1
 80083fc:	4611      	mov	r1, r2
 80083fe:	2200      	movs	r2, #0
 8008400:	602a      	str	r2, [r5, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	f7f9 fa47 	bl	8001896 <_write>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_write_r+0x1e>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_write_r+0x1e>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	20000528 	.word	0x20000528

08008418 <_close_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4d06      	ldr	r5, [pc, #24]	; (8008434 <_close_r+0x1c>)
 800841c:	2300      	movs	r3, #0
 800841e:	4604      	mov	r4, r0
 8008420:	4608      	mov	r0, r1
 8008422:	602b      	str	r3, [r5, #0]
 8008424:	f7f9 fa53 	bl	80018ce <_close>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_close_r+0x1a>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_close_r+0x1a>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	20000528 	.word	0x20000528

08008438 <_fstat_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d07      	ldr	r5, [pc, #28]	; (8008458 <_fstat_r+0x20>)
 800843c:	2300      	movs	r3, #0
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	4611      	mov	r1, r2
 8008444:	602b      	str	r3, [r5, #0]
 8008446:	f7f9 fa4e 	bl	80018e6 <_fstat>
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	d102      	bne.n	8008454 <_fstat_r+0x1c>
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	b103      	cbz	r3, 8008454 <_fstat_r+0x1c>
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	bd38      	pop	{r3, r4, r5, pc}
 8008456:	bf00      	nop
 8008458:	20000528 	.word	0x20000528

0800845c <_isatty_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d06      	ldr	r5, [pc, #24]	; (8008478 <_isatty_r+0x1c>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	f7f9 fa4d 	bl	8001906 <_isatty>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_isatty_r+0x1a>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_isatty_r+0x1a>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	20000528 	.word	0x20000528

0800847c <_lseek_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4d07      	ldr	r5, [pc, #28]	; (800849c <_lseek_r+0x20>)
 8008480:	4604      	mov	r4, r0
 8008482:	4608      	mov	r0, r1
 8008484:	4611      	mov	r1, r2
 8008486:	2200      	movs	r2, #0
 8008488:	602a      	str	r2, [r5, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	f7f9 fa46 	bl	800191c <_lseek>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_lseek_r+0x1e>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_lseek_r+0x1e>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20000528 	.word	0x20000528

080084a0 <_read_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d07      	ldr	r5, [pc, #28]	; (80084c0 <_read_r+0x20>)
 80084a4:	4604      	mov	r4, r0
 80084a6:	4608      	mov	r0, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	2200      	movs	r2, #0
 80084ac:	602a      	str	r2, [r5, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f7f9 f9d4 	bl	800185c <_read>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_read_r+0x1e>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_read_r+0x1e>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	20000528 	.word	0x20000528
 80084c4:	00000000 	.word	0x00000000

080084c8 <sin>:
 80084c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ca:	ec53 2b10 	vmov	r2, r3, d0
 80084ce:	4826      	ldr	r0, [pc, #152]	; (8008568 <sin+0xa0>)
 80084d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084d4:	4281      	cmp	r1, r0
 80084d6:	dc07      	bgt.n	80084e8 <sin+0x20>
 80084d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008560 <sin+0x98>
 80084dc:	2000      	movs	r0, #0
 80084de:	f000 ff43 	bl	8009368 <__kernel_sin>
 80084e2:	ec51 0b10 	vmov	r0, r1, d0
 80084e6:	e007      	b.n	80084f8 <sin+0x30>
 80084e8:	4820      	ldr	r0, [pc, #128]	; (800856c <sin+0xa4>)
 80084ea:	4281      	cmp	r1, r0
 80084ec:	dd09      	ble.n	8008502 <sin+0x3a>
 80084ee:	ee10 0a10 	vmov	r0, s0
 80084f2:	4619      	mov	r1, r3
 80084f4:	f7f7 fec8 	bl	8000288 <__aeabi_dsub>
 80084f8:	ec41 0b10 	vmov	d0, r0, r1
 80084fc:	b005      	add	sp, #20
 80084fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008502:	4668      	mov	r0, sp
 8008504:	f000 f868 	bl	80085d8 <__ieee754_rem_pio2>
 8008508:	f000 0003 	and.w	r0, r0, #3
 800850c:	2801      	cmp	r0, #1
 800850e:	d008      	beq.n	8008522 <sin+0x5a>
 8008510:	2802      	cmp	r0, #2
 8008512:	d00d      	beq.n	8008530 <sin+0x68>
 8008514:	b9d0      	cbnz	r0, 800854c <sin+0x84>
 8008516:	ed9d 1b02 	vldr	d1, [sp, #8]
 800851a:	ed9d 0b00 	vldr	d0, [sp]
 800851e:	2001      	movs	r0, #1
 8008520:	e7dd      	b.n	80084de <sin+0x16>
 8008522:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008526:	ed9d 0b00 	vldr	d0, [sp]
 800852a:	f000 fb15 	bl	8008b58 <__kernel_cos>
 800852e:	e7d8      	b.n	80084e2 <sin+0x1a>
 8008530:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008534:	ed9d 0b00 	vldr	d0, [sp]
 8008538:	2001      	movs	r0, #1
 800853a:	f000 ff15 	bl	8009368 <__kernel_sin>
 800853e:	ec53 2b10 	vmov	r2, r3, d0
 8008542:	ee10 0a10 	vmov	r0, s0
 8008546:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800854a:	e7d5      	b.n	80084f8 <sin+0x30>
 800854c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008550:	ed9d 0b00 	vldr	d0, [sp]
 8008554:	f000 fb00 	bl	8008b58 <__kernel_cos>
 8008558:	e7f1      	b.n	800853e <sin+0x76>
 800855a:	bf00      	nop
 800855c:	f3af 8000 	nop.w
	...
 8008568:	3fe921fb 	.word	0x3fe921fb
 800856c:	7fefffff 	.word	0x7fefffff

08008570 <sqrt>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	ed2d 8b02 	vpush	{d8}
 8008576:	ec55 4b10 	vmov	r4, r5, d0
 800857a:	f000 fa37 	bl	80089ec <__ieee754_sqrt>
 800857e:	4b15      	ldr	r3, [pc, #84]	; (80085d4 <sqrt+0x64>)
 8008580:	eeb0 8a40 	vmov.f32	s16, s0
 8008584:	eef0 8a60 	vmov.f32	s17, s1
 8008588:	f993 3000 	ldrsb.w	r3, [r3]
 800858c:	3301      	adds	r3, #1
 800858e:	d019      	beq.n	80085c4 <sqrt+0x54>
 8008590:	4622      	mov	r2, r4
 8008592:	462b      	mov	r3, r5
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	f7f8 fac8 	bl	8000b2c <__aeabi_dcmpun>
 800859c:	b990      	cbnz	r0, 80085c4 <sqrt+0x54>
 800859e:	2200      	movs	r2, #0
 80085a0:	2300      	movs	r3, #0
 80085a2:	4620      	mov	r0, r4
 80085a4:	4629      	mov	r1, r5
 80085a6:	f7f8 fa99 	bl	8000adc <__aeabi_dcmplt>
 80085aa:	b158      	cbz	r0, 80085c4 <sqrt+0x54>
 80085ac:	f7fc ffd8 	bl	8005560 <__errno>
 80085b0:	2321      	movs	r3, #33	; 0x21
 80085b2:	6003      	str	r3, [r0, #0]
 80085b4:	2200      	movs	r2, #0
 80085b6:	2300      	movs	r3, #0
 80085b8:	4610      	mov	r0, r2
 80085ba:	4619      	mov	r1, r3
 80085bc:	f7f8 f946 	bl	800084c <__aeabi_ddiv>
 80085c0:	ec41 0b18 	vmov	d8, r0, r1
 80085c4:	eeb0 0a48 	vmov.f32	s0, s16
 80085c8:	eef0 0a68 	vmov.f32	s1, s17
 80085cc:	ecbd 8b02 	vpop	{d8}
 80085d0:	bd38      	pop	{r3, r4, r5, pc}
 80085d2:	bf00      	nop
 80085d4:	200001e0 	.word	0x200001e0

080085d8 <__ieee754_rem_pio2>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	ed2d 8b02 	vpush	{d8}
 80085e0:	ec55 4b10 	vmov	r4, r5, d0
 80085e4:	4bca      	ldr	r3, [pc, #808]	; (8008910 <__ieee754_rem_pio2+0x338>)
 80085e6:	b08b      	sub	sp, #44	; 0x2c
 80085e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80085ec:	4598      	cmp	r8, r3
 80085ee:	4682      	mov	sl, r0
 80085f0:	9502      	str	r5, [sp, #8]
 80085f2:	dc08      	bgt.n	8008606 <__ieee754_rem_pio2+0x2e>
 80085f4:	2200      	movs	r2, #0
 80085f6:	2300      	movs	r3, #0
 80085f8:	ed80 0b00 	vstr	d0, [r0]
 80085fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008600:	f04f 0b00 	mov.w	fp, #0
 8008604:	e028      	b.n	8008658 <__ieee754_rem_pio2+0x80>
 8008606:	4bc3      	ldr	r3, [pc, #780]	; (8008914 <__ieee754_rem_pio2+0x33c>)
 8008608:	4598      	cmp	r8, r3
 800860a:	dc78      	bgt.n	80086fe <__ieee754_rem_pio2+0x126>
 800860c:	9b02      	ldr	r3, [sp, #8]
 800860e:	4ec2      	ldr	r6, [pc, #776]	; (8008918 <__ieee754_rem_pio2+0x340>)
 8008610:	2b00      	cmp	r3, #0
 8008612:	ee10 0a10 	vmov	r0, s0
 8008616:	a3b0      	add	r3, pc, #704	; (adr r3, 80088d8 <__ieee754_rem_pio2+0x300>)
 8008618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861c:	4629      	mov	r1, r5
 800861e:	dd39      	ble.n	8008694 <__ieee754_rem_pio2+0xbc>
 8008620:	f7f7 fe32 	bl	8000288 <__aeabi_dsub>
 8008624:	45b0      	cmp	r8, r6
 8008626:	4604      	mov	r4, r0
 8008628:	460d      	mov	r5, r1
 800862a:	d01b      	beq.n	8008664 <__ieee754_rem_pio2+0x8c>
 800862c:	a3ac      	add	r3, pc, #688	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x308>)
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	f7f7 fe29 	bl	8000288 <__aeabi_dsub>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	e9ca 2300 	strd	r2, r3, [sl]
 800863e:	4620      	mov	r0, r4
 8008640:	4629      	mov	r1, r5
 8008642:	f7f7 fe21 	bl	8000288 <__aeabi_dsub>
 8008646:	a3a6      	add	r3, pc, #664	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x308>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f7f7 fe1c 	bl	8000288 <__aeabi_dsub>
 8008650:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008654:	f04f 0b01 	mov.w	fp, #1
 8008658:	4658      	mov	r0, fp
 800865a:	b00b      	add	sp, #44	; 0x2c
 800865c:	ecbd 8b02 	vpop	{d8}
 8008660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008664:	a3a0      	add	r3, pc, #640	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x310>)
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f7f7 fe0d 	bl	8000288 <__aeabi_dsub>
 800866e:	a3a0      	add	r3, pc, #640	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x318>)
 8008670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008674:	4604      	mov	r4, r0
 8008676:	460d      	mov	r5, r1
 8008678:	f7f7 fe06 	bl	8000288 <__aeabi_dsub>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	e9ca 2300 	strd	r2, r3, [sl]
 8008684:	4620      	mov	r0, r4
 8008686:	4629      	mov	r1, r5
 8008688:	f7f7 fdfe 	bl	8000288 <__aeabi_dsub>
 800868c:	a398      	add	r3, pc, #608	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x318>)
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	e7db      	b.n	800864c <__ieee754_rem_pio2+0x74>
 8008694:	f7f7 fdfa 	bl	800028c <__adddf3>
 8008698:	45b0      	cmp	r8, r6
 800869a:	4604      	mov	r4, r0
 800869c:	460d      	mov	r5, r1
 800869e:	d016      	beq.n	80086ce <__ieee754_rem_pio2+0xf6>
 80086a0:	a38f      	add	r3, pc, #572	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x308>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	f7f7 fdf1 	bl	800028c <__adddf3>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	e9ca 2300 	strd	r2, r3, [sl]
 80086b2:	4620      	mov	r0, r4
 80086b4:	4629      	mov	r1, r5
 80086b6:	f7f7 fde7 	bl	8000288 <__aeabi_dsub>
 80086ba:	a389      	add	r3, pc, #548	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x308>)
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f7f7 fde4 	bl	800028c <__adddf3>
 80086c4:	f04f 3bff 	mov.w	fp, #4294967295
 80086c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086cc:	e7c4      	b.n	8008658 <__ieee754_rem_pio2+0x80>
 80086ce:	a386      	add	r3, pc, #536	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x310>)
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	f7f7 fdda 	bl	800028c <__adddf3>
 80086d8:	a385      	add	r3, pc, #532	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x318>)
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	4604      	mov	r4, r0
 80086e0:	460d      	mov	r5, r1
 80086e2:	f7f7 fdd3 	bl	800028c <__adddf3>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	e9ca 2300 	strd	r2, r3, [sl]
 80086ee:	4620      	mov	r0, r4
 80086f0:	4629      	mov	r1, r5
 80086f2:	f7f7 fdc9 	bl	8000288 <__aeabi_dsub>
 80086f6:	a37e      	add	r3, pc, #504	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x318>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	e7e0      	b.n	80086c0 <__ieee754_rem_pio2+0xe8>
 80086fe:	4b87      	ldr	r3, [pc, #540]	; (800891c <__ieee754_rem_pio2+0x344>)
 8008700:	4598      	cmp	r8, r3
 8008702:	f300 80d9 	bgt.w	80088b8 <__ieee754_rem_pio2+0x2e0>
 8008706:	f000 feed 	bl	80094e4 <fabs>
 800870a:	ec55 4b10 	vmov	r4, r5, d0
 800870e:	ee10 0a10 	vmov	r0, s0
 8008712:	a379      	add	r3, pc, #484	; (adr r3, 80088f8 <__ieee754_rem_pio2+0x320>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	4629      	mov	r1, r5
 800871a:	f7f7 ff6d 	bl	80005f8 <__aeabi_dmul>
 800871e:	4b80      	ldr	r3, [pc, #512]	; (8008920 <__ieee754_rem_pio2+0x348>)
 8008720:	2200      	movs	r2, #0
 8008722:	f7f7 fdb3 	bl	800028c <__adddf3>
 8008726:	f7f8 fa17 	bl	8000b58 <__aeabi_d2iz>
 800872a:	4683      	mov	fp, r0
 800872c:	f7f7 fefa 	bl	8000524 <__aeabi_i2d>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	ec43 2b18 	vmov	d8, r2, r3
 8008738:	a367      	add	r3, pc, #412	; (adr r3, 80088d8 <__ieee754_rem_pio2+0x300>)
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f7f7 ff5b 	bl	80005f8 <__aeabi_dmul>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	f7f7 fd9d 	bl	8000288 <__aeabi_dsub>
 800874e:	a364      	add	r3, pc, #400	; (adr r3, 80088e0 <__ieee754_rem_pio2+0x308>)
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	4606      	mov	r6, r0
 8008756:	460f      	mov	r7, r1
 8008758:	ec51 0b18 	vmov	r0, r1, d8
 800875c:	f7f7 ff4c 	bl	80005f8 <__aeabi_dmul>
 8008760:	f1bb 0f1f 	cmp.w	fp, #31
 8008764:	4604      	mov	r4, r0
 8008766:	460d      	mov	r5, r1
 8008768:	dc0d      	bgt.n	8008786 <__ieee754_rem_pio2+0x1ae>
 800876a:	4b6e      	ldr	r3, [pc, #440]	; (8008924 <__ieee754_rem_pio2+0x34c>)
 800876c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008774:	4543      	cmp	r3, r8
 8008776:	d006      	beq.n	8008786 <__ieee754_rem_pio2+0x1ae>
 8008778:	4622      	mov	r2, r4
 800877a:	462b      	mov	r3, r5
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f7f7 fd82 	bl	8000288 <__aeabi_dsub>
 8008784:	e00f      	b.n	80087a6 <__ieee754_rem_pio2+0x1ce>
 8008786:	462b      	mov	r3, r5
 8008788:	4622      	mov	r2, r4
 800878a:	4630      	mov	r0, r6
 800878c:	4639      	mov	r1, r7
 800878e:	f7f7 fd7b 	bl	8000288 <__aeabi_dsub>
 8008792:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008796:	9303      	str	r3, [sp, #12]
 8008798:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800879c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80087a0:	f1b8 0f10 	cmp.w	r8, #16
 80087a4:	dc02      	bgt.n	80087ac <__ieee754_rem_pio2+0x1d4>
 80087a6:	e9ca 0100 	strd	r0, r1, [sl]
 80087aa:	e039      	b.n	8008820 <__ieee754_rem_pio2+0x248>
 80087ac:	a34e      	add	r3, pc, #312	; (adr r3, 80088e8 <__ieee754_rem_pio2+0x310>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	ec51 0b18 	vmov	r0, r1, d8
 80087b6:	f7f7 ff1f 	bl	80005f8 <__aeabi_dmul>
 80087ba:	4604      	mov	r4, r0
 80087bc:	460d      	mov	r5, r1
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4630      	mov	r0, r6
 80087c4:	4639      	mov	r1, r7
 80087c6:	f7f7 fd5f 	bl	8000288 <__aeabi_dsub>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4680      	mov	r8, r0
 80087d0:	4689      	mov	r9, r1
 80087d2:	4630      	mov	r0, r6
 80087d4:	4639      	mov	r1, r7
 80087d6:	f7f7 fd57 	bl	8000288 <__aeabi_dsub>
 80087da:	4622      	mov	r2, r4
 80087dc:	462b      	mov	r3, r5
 80087de:	f7f7 fd53 	bl	8000288 <__aeabi_dsub>
 80087e2:	a343      	add	r3, pc, #268	; (adr r3, 80088f0 <__ieee754_rem_pio2+0x318>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	4604      	mov	r4, r0
 80087ea:	460d      	mov	r5, r1
 80087ec:	ec51 0b18 	vmov	r0, r1, d8
 80087f0:	f7f7 ff02 	bl	80005f8 <__aeabi_dmul>
 80087f4:	4622      	mov	r2, r4
 80087f6:	462b      	mov	r3, r5
 80087f8:	f7f7 fd46 	bl	8000288 <__aeabi_dsub>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4604      	mov	r4, r0
 8008802:	460d      	mov	r5, r1
 8008804:	4640      	mov	r0, r8
 8008806:	4649      	mov	r1, r9
 8008808:	f7f7 fd3e 	bl	8000288 <__aeabi_dsub>
 800880c:	9a03      	ldr	r2, [sp, #12]
 800880e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b31      	cmp	r3, #49	; 0x31
 8008816:	dc24      	bgt.n	8008862 <__ieee754_rem_pio2+0x28a>
 8008818:	e9ca 0100 	strd	r0, r1, [sl]
 800881c:	4646      	mov	r6, r8
 800881e:	464f      	mov	r7, r9
 8008820:	e9da 8900 	ldrd	r8, r9, [sl]
 8008824:	4630      	mov	r0, r6
 8008826:	4642      	mov	r2, r8
 8008828:	464b      	mov	r3, r9
 800882a:	4639      	mov	r1, r7
 800882c:	f7f7 fd2c 	bl	8000288 <__aeabi_dsub>
 8008830:	462b      	mov	r3, r5
 8008832:	4622      	mov	r2, r4
 8008834:	f7f7 fd28 	bl	8000288 <__aeabi_dsub>
 8008838:	9b02      	ldr	r3, [sp, #8]
 800883a:	2b00      	cmp	r3, #0
 800883c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008840:	f6bf af0a 	bge.w	8008658 <__ieee754_rem_pio2+0x80>
 8008844:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008848:	f8ca 3004 	str.w	r3, [sl, #4]
 800884c:	f8ca 8000 	str.w	r8, [sl]
 8008850:	f8ca 0008 	str.w	r0, [sl, #8]
 8008854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008858:	f8ca 300c 	str.w	r3, [sl, #12]
 800885c:	f1cb 0b00 	rsb	fp, fp, #0
 8008860:	e6fa      	b.n	8008658 <__ieee754_rem_pio2+0x80>
 8008862:	a327      	add	r3, pc, #156	; (adr r3, 8008900 <__ieee754_rem_pio2+0x328>)
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	ec51 0b18 	vmov	r0, r1, d8
 800886c:	f7f7 fec4 	bl	80005f8 <__aeabi_dmul>
 8008870:	4604      	mov	r4, r0
 8008872:	460d      	mov	r5, r1
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4640      	mov	r0, r8
 800887a:	4649      	mov	r1, r9
 800887c:	f7f7 fd04 	bl	8000288 <__aeabi_dsub>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4606      	mov	r6, r0
 8008886:	460f      	mov	r7, r1
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	f7f7 fcfc 	bl	8000288 <__aeabi_dsub>
 8008890:	4622      	mov	r2, r4
 8008892:	462b      	mov	r3, r5
 8008894:	f7f7 fcf8 	bl	8000288 <__aeabi_dsub>
 8008898:	a31b      	add	r3, pc, #108	; (adr r3, 8008908 <__ieee754_rem_pio2+0x330>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	4604      	mov	r4, r0
 80088a0:	460d      	mov	r5, r1
 80088a2:	ec51 0b18 	vmov	r0, r1, d8
 80088a6:	f7f7 fea7 	bl	80005f8 <__aeabi_dmul>
 80088aa:	4622      	mov	r2, r4
 80088ac:	462b      	mov	r3, r5
 80088ae:	f7f7 fceb 	bl	8000288 <__aeabi_dsub>
 80088b2:	4604      	mov	r4, r0
 80088b4:	460d      	mov	r5, r1
 80088b6:	e75f      	b.n	8008778 <__ieee754_rem_pio2+0x1a0>
 80088b8:	4b1b      	ldr	r3, [pc, #108]	; (8008928 <__ieee754_rem_pio2+0x350>)
 80088ba:	4598      	cmp	r8, r3
 80088bc:	dd36      	ble.n	800892c <__ieee754_rem_pio2+0x354>
 80088be:	ee10 2a10 	vmov	r2, s0
 80088c2:	462b      	mov	r3, r5
 80088c4:	4620      	mov	r0, r4
 80088c6:	4629      	mov	r1, r5
 80088c8:	f7f7 fcde 	bl	8000288 <__aeabi_dsub>
 80088cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088d0:	e9ca 0100 	strd	r0, r1, [sl]
 80088d4:	e694      	b.n	8008600 <__ieee754_rem_pio2+0x28>
 80088d6:	bf00      	nop
 80088d8:	54400000 	.word	0x54400000
 80088dc:	3ff921fb 	.word	0x3ff921fb
 80088e0:	1a626331 	.word	0x1a626331
 80088e4:	3dd0b461 	.word	0x3dd0b461
 80088e8:	1a600000 	.word	0x1a600000
 80088ec:	3dd0b461 	.word	0x3dd0b461
 80088f0:	2e037073 	.word	0x2e037073
 80088f4:	3ba3198a 	.word	0x3ba3198a
 80088f8:	6dc9c883 	.word	0x6dc9c883
 80088fc:	3fe45f30 	.word	0x3fe45f30
 8008900:	2e000000 	.word	0x2e000000
 8008904:	3ba3198a 	.word	0x3ba3198a
 8008908:	252049c1 	.word	0x252049c1
 800890c:	397b839a 	.word	0x397b839a
 8008910:	3fe921fb 	.word	0x3fe921fb
 8008914:	4002d97b 	.word	0x4002d97b
 8008918:	3ff921fb 	.word	0x3ff921fb
 800891c:	413921fb 	.word	0x413921fb
 8008920:	3fe00000 	.word	0x3fe00000
 8008924:	08009d28 	.word	0x08009d28
 8008928:	7fefffff 	.word	0x7fefffff
 800892c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008930:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008934:	ee10 0a10 	vmov	r0, s0
 8008938:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800893c:	ee10 6a10 	vmov	r6, s0
 8008940:	460f      	mov	r7, r1
 8008942:	f7f8 f909 	bl	8000b58 <__aeabi_d2iz>
 8008946:	f7f7 fded 	bl	8000524 <__aeabi_i2d>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4630      	mov	r0, r6
 8008950:	4639      	mov	r1, r7
 8008952:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008956:	f7f7 fc97 	bl	8000288 <__aeabi_dsub>
 800895a:	4b22      	ldr	r3, [pc, #136]	; (80089e4 <__ieee754_rem_pio2+0x40c>)
 800895c:	2200      	movs	r2, #0
 800895e:	f7f7 fe4b 	bl	80005f8 <__aeabi_dmul>
 8008962:	460f      	mov	r7, r1
 8008964:	4606      	mov	r6, r0
 8008966:	f7f8 f8f7 	bl	8000b58 <__aeabi_d2iz>
 800896a:	f7f7 fddb 	bl	8000524 <__aeabi_i2d>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4630      	mov	r0, r6
 8008974:	4639      	mov	r1, r7
 8008976:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800897a:	f7f7 fc85 	bl	8000288 <__aeabi_dsub>
 800897e:	4b19      	ldr	r3, [pc, #100]	; (80089e4 <__ieee754_rem_pio2+0x40c>)
 8008980:	2200      	movs	r2, #0
 8008982:	f7f7 fe39 	bl	80005f8 <__aeabi_dmul>
 8008986:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800898a:	ad04      	add	r5, sp, #16
 800898c:	f04f 0803 	mov.w	r8, #3
 8008990:	46a9      	mov	r9, r5
 8008992:	2600      	movs	r6, #0
 8008994:	2700      	movs	r7, #0
 8008996:	4632      	mov	r2, r6
 8008998:	463b      	mov	r3, r7
 800899a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800899e:	46c3      	mov	fp, r8
 80089a0:	3d08      	subs	r5, #8
 80089a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80089a6:	f7f8 f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d1f3      	bne.n	8008996 <__ieee754_rem_pio2+0x3be>
 80089ae:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <__ieee754_rem_pio2+0x410>)
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	2302      	movs	r3, #2
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	4622      	mov	r2, r4
 80089b8:	465b      	mov	r3, fp
 80089ba:	4651      	mov	r1, sl
 80089bc:	4648      	mov	r0, r9
 80089be:	f000 f993 	bl	8008ce8 <__kernel_rem_pio2>
 80089c2:	9b02      	ldr	r3, [sp, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	4683      	mov	fp, r0
 80089c8:	f6bf ae46 	bge.w	8008658 <__ieee754_rem_pio2+0x80>
 80089cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80089d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089d4:	f8ca 3004 	str.w	r3, [sl, #4]
 80089d8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80089dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089e0:	e73a      	b.n	8008858 <__ieee754_rem_pio2+0x280>
 80089e2:	bf00      	nop
 80089e4:	41700000 	.word	0x41700000
 80089e8:	08009da8 	.word	0x08009da8

080089ec <__ieee754_sqrt>:
 80089ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f0:	ec55 4b10 	vmov	r4, r5, d0
 80089f4:	4e56      	ldr	r6, [pc, #344]	; (8008b50 <__ieee754_sqrt+0x164>)
 80089f6:	43ae      	bics	r6, r5
 80089f8:	ee10 0a10 	vmov	r0, s0
 80089fc:	ee10 3a10 	vmov	r3, s0
 8008a00:	4629      	mov	r1, r5
 8008a02:	462a      	mov	r2, r5
 8008a04:	d110      	bne.n	8008a28 <__ieee754_sqrt+0x3c>
 8008a06:	ee10 2a10 	vmov	r2, s0
 8008a0a:	462b      	mov	r3, r5
 8008a0c:	f7f7 fdf4 	bl	80005f8 <__aeabi_dmul>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4620      	mov	r0, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	f7f7 fc38 	bl	800028c <__adddf3>
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	460d      	mov	r5, r1
 8008a20:	ec45 4b10 	vmov	d0, r4, r5
 8008a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	dc10      	bgt.n	8008a4e <__ieee754_sqrt+0x62>
 8008a2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a30:	4330      	orrs	r0, r6
 8008a32:	d0f5      	beq.n	8008a20 <__ieee754_sqrt+0x34>
 8008a34:	b15d      	cbz	r5, 8008a4e <__ieee754_sqrt+0x62>
 8008a36:	ee10 2a10 	vmov	r2, s0
 8008a3a:	462b      	mov	r3, r5
 8008a3c:	ee10 0a10 	vmov	r0, s0
 8008a40:	f7f7 fc22 	bl	8000288 <__aeabi_dsub>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	f7f7 ff00 	bl	800084c <__aeabi_ddiv>
 8008a4c:	e7e6      	b.n	8008a1c <__ieee754_sqrt+0x30>
 8008a4e:	1509      	asrs	r1, r1, #20
 8008a50:	d076      	beq.n	8008b40 <__ieee754_sqrt+0x154>
 8008a52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008a56:	07ce      	lsls	r6, r1, #31
 8008a58:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008a5c:	bf5e      	ittt	pl
 8008a5e:	0fda      	lsrpl	r2, r3, #31
 8008a60:	005b      	lslpl	r3, r3, #1
 8008a62:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008a66:	0fda      	lsrs	r2, r3, #31
 8008a68:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008a6c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008a70:	2000      	movs	r0, #0
 8008a72:	106d      	asrs	r5, r5, #1
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	f04f 0e16 	mov.w	lr, #22
 8008a7a:	4684      	mov	ip, r0
 8008a7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a80:	eb0c 0401 	add.w	r4, ip, r1
 8008a84:	4294      	cmp	r4, r2
 8008a86:	bfde      	ittt	le
 8008a88:	1b12      	suble	r2, r2, r4
 8008a8a:	eb04 0c01 	addle.w	ip, r4, r1
 8008a8e:	1840      	addle	r0, r0, r1
 8008a90:	0052      	lsls	r2, r2, #1
 8008a92:	f1be 0e01 	subs.w	lr, lr, #1
 8008a96:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008a9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008a9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008aa2:	d1ed      	bne.n	8008a80 <__ieee754_sqrt+0x94>
 8008aa4:	4671      	mov	r1, lr
 8008aa6:	2720      	movs	r7, #32
 8008aa8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008aac:	4562      	cmp	r2, ip
 8008aae:	eb04 060e 	add.w	r6, r4, lr
 8008ab2:	dc02      	bgt.n	8008aba <__ieee754_sqrt+0xce>
 8008ab4:	d113      	bne.n	8008ade <__ieee754_sqrt+0xf2>
 8008ab6:	429e      	cmp	r6, r3
 8008ab8:	d811      	bhi.n	8008ade <__ieee754_sqrt+0xf2>
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	eb06 0e04 	add.w	lr, r6, r4
 8008ac0:	da43      	bge.n	8008b4a <__ieee754_sqrt+0x15e>
 8008ac2:	f1be 0f00 	cmp.w	lr, #0
 8008ac6:	db40      	blt.n	8008b4a <__ieee754_sqrt+0x15e>
 8008ac8:	f10c 0801 	add.w	r8, ip, #1
 8008acc:	eba2 020c 	sub.w	r2, r2, ip
 8008ad0:	429e      	cmp	r6, r3
 8008ad2:	bf88      	it	hi
 8008ad4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008ad8:	1b9b      	subs	r3, r3, r6
 8008ada:	4421      	add	r1, r4
 8008adc:	46c4      	mov	ip, r8
 8008ade:	0052      	lsls	r2, r2, #1
 8008ae0:	3f01      	subs	r7, #1
 8008ae2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008ae6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008aea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008aee:	d1dd      	bne.n	8008aac <__ieee754_sqrt+0xc0>
 8008af0:	4313      	orrs	r3, r2
 8008af2:	d006      	beq.n	8008b02 <__ieee754_sqrt+0x116>
 8008af4:	1c4c      	adds	r4, r1, #1
 8008af6:	bf13      	iteet	ne
 8008af8:	3101      	addne	r1, #1
 8008afa:	3001      	addeq	r0, #1
 8008afc:	4639      	moveq	r1, r7
 8008afe:	f021 0101 	bicne.w	r1, r1, #1
 8008b02:	1043      	asrs	r3, r0, #1
 8008b04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008b08:	0849      	lsrs	r1, r1, #1
 8008b0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008b0e:	07c2      	lsls	r2, r0, #31
 8008b10:	bf48      	it	mi
 8008b12:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008b16:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	463d      	mov	r5, r7
 8008b1e:	e77f      	b.n	8008a20 <__ieee754_sqrt+0x34>
 8008b20:	0ada      	lsrs	r2, r3, #11
 8008b22:	3815      	subs	r0, #21
 8008b24:	055b      	lsls	r3, r3, #21
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	d0fa      	beq.n	8008b20 <__ieee754_sqrt+0x134>
 8008b2a:	02d7      	lsls	r7, r2, #11
 8008b2c:	d50a      	bpl.n	8008b44 <__ieee754_sqrt+0x158>
 8008b2e:	f1c1 0420 	rsb	r4, r1, #32
 8008b32:	fa23 f404 	lsr.w	r4, r3, r4
 8008b36:	1e4d      	subs	r5, r1, #1
 8008b38:	408b      	lsls	r3, r1
 8008b3a:	4322      	orrs	r2, r4
 8008b3c:	1b41      	subs	r1, r0, r5
 8008b3e:	e788      	b.n	8008a52 <__ieee754_sqrt+0x66>
 8008b40:	4608      	mov	r0, r1
 8008b42:	e7f0      	b.n	8008b26 <__ieee754_sqrt+0x13a>
 8008b44:	0052      	lsls	r2, r2, #1
 8008b46:	3101      	adds	r1, #1
 8008b48:	e7ef      	b.n	8008b2a <__ieee754_sqrt+0x13e>
 8008b4a:	46e0      	mov	r8, ip
 8008b4c:	e7be      	b.n	8008acc <__ieee754_sqrt+0xe0>
 8008b4e:	bf00      	nop
 8008b50:	7ff00000 	.word	0x7ff00000
 8008b54:	00000000 	.word	0x00000000

08008b58 <__kernel_cos>:
 8008b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	ec57 6b10 	vmov	r6, r7, d0
 8008b60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008b64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008b68:	ed8d 1b00 	vstr	d1, [sp]
 8008b6c:	da07      	bge.n	8008b7e <__kernel_cos+0x26>
 8008b6e:	ee10 0a10 	vmov	r0, s0
 8008b72:	4639      	mov	r1, r7
 8008b74:	f7f7 fff0 	bl	8000b58 <__aeabi_d2iz>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	f000 8088 	beq.w	8008c8e <__kernel_cos+0x136>
 8008b7e:	4632      	mov	r2, r6
 8008b80:	463b      	mov	r3, r7
 8008b82:	4630      	mov	r0, r6
 8008b84:	4639      	mov	r1, r7
 8008b86:	f7f7 fd37 	bl	80005f8 <__aeabi_dmul>
 8008b8a:	4b51      	ldr	r3, [pc, #324]	; (8008cd0 <__kernel_cos+0x178>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	4604      	mov	r4, r0
 8008b90:	460d      	mov	r5, r1
 8008b92:	f7f7 fd31 	bl	80005f8 <__aeabi_dmul>
 8008b96:	a340      	add	r3, pc, #256	; (adr r3, 8008c98 <__kernel_cos+0x140>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	468b      	mov	fp, r1
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	f7f7 fd28 	bl	80005f8 <__aeabi_dmul>
 8008ba8:	a33d      	add	r3, pc, #244	; (adr r3, 8008ca0 <__kernel_cos+0x148>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f7f7 fb6d 	bl	800028c <__adddf3>
 8008bb2:	4622      	mov	r2, r4
 8008bb4:	462b      	mov	r3, r5
 8008bb6:	f7f7 fd1f 	bl	80005f8 <__aeabi_dmul>
 8008bba:	a33b      	add	r3, pc, #236	; (adr r3, 8008ca8 <__kernel_cos+0x150>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f7f7 fb62 	bl	8000288 <__aeabi_dsub>
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	462b      	mov	r3, r5
 8008bc8:	f7f7 fd16 	bl	80005f8 <__aeabi_dmul>
 8008bcc:	a338      	add	r3, pc, #224	; (adr r3, 8008cb0 <__kernel_cos+0x158>)
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	f7f7 fb5b 	bl	800028c <__adddf3>
 8008bd6:	4622      	mov	r2, r4
 8008bd8:	462b      	mov	r3, r5
 8008bda:	f7f7 fd0d 	bl	80005f8 <__aeabi_dmul>
 8008bde:	a336      	add	r3, pc, #216	; (adr r3, 8008cb8 <__kernel_cos+0x160>)
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	f7f7 fb50 	bl	8000288 <__aeabi_dsub>
 8008be8:	4622      	mov	r2, r4
 8008bea:	462b      	mov	r3, r5
 8008bec:	f7f7 fd04 	bl	80005f8 <__aeabi_dmul>
 8008bf0:	a333      	add	r3, pc, #204	; (adr r3, 8008cc0 <__kernel_cos+0x168>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fb49 	bl	800028c <__adddf3>
 8008bfa:	4622      	mov	r2, r4
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	f7f7 fcfb 	bl	80005f8 <__aeabi_dmul>
 8008c02:	4622      	mov	r2, r4
 8008c04:	462b      	mov	r3, r5
 8008c06:	f7f7 fcf7 	bl	80005f8 <__aeabi_dmul>
 8008c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c0e:	4604      	mov	r4, r0
 8008c10:	460d      	mov	r5, r1
 8008c12:	4630      	mov	r0, r6
 8008c14:	4639      	mov	r1, r7
 8008c16:	f7f7 fcef 	bl	80005f8 <__aeabi_dmul>
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	4629      	mov	r1, r5
 8008c20:	4620      	mov	r0, r4
 8008c22:	f7f7 fb31 	bl	8000288 <__aeabi_dsub>
 8008c26:	4b2b      	ldr	r3, [pc, #172]	; (8008cd4 <__kernel_cos+0x17c>)
 8008c28:	4598      	cmp	r8, r3
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	460f      	mov	r7, r1
 8008c2e:	dc10      	bgt.n	8008c52 <__kernel_cos+0xfa>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4650      	mov	r0, sl
 8008c36:	4659      	mov	r1, fp
 8008c38:	f7f7 fb26 	bl	8000288 <__aeabi_dsub>
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4926      	ldr	r1, [pc, #152]	; (8008cd8 <__kernel_cos+0x180>)
 8008c40:	4602      	mov	r2, r0
 8008c42:	2000      	movs	r0, #0
 8008c44:	f7f7 fb20 	bl	8000288 <__aeabi_dsub>
 8008c48:	ec41 0b10 	vmov	d0, r0, r1
 8008c4c:	b003      	add	sp, #12
 8008c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c52:	4b22      	ldr	r3, [pc, #136]	; (8008cdc <__kernel_cos+0x184>)
 8008c54:	4920      	ldr	r1, [pc, #128]	; (8008cd8 <__kernel_cos+0x180>)
 8008c56:	4598      	cmp	r8, r3
 8008c58:	bfcc      	ite	gt
 8008c5a:	4d21      	ldrgt	r5, [pc, #132]	; (8008ce0 <__kernel_cos+0x188>)
 8008c5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008c60:	2400      	movs	r4, #0
 8008c62:	4622      	mov	r2, r4
 8008c64:	462b      	mov	r3, r5
 8008c66:	2000      	movs	r0, #0
 8008c68:	f7f7 fb0e 	bl	8000288 <__aeabi_dsub>
 8008c6c:	4622      	mov	r2, r4
 8008c6e:	4680      	mov	r8, r0
 8008c70:	4689      	mov	r9, r1
 8008c72:	462b      	mov	r3, r5
 8008c74:	4650      	mov	r0, sl
 8008c76:	4659      	mov	r1, fp
 8008c78:	f7f7 fb06 	bl	8000288 <__aeabi_dsub>
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	463b      	mov	r3, r7
 8008c80:	f7f7 fb02 	bl	8000288 <__aeabi_dsub>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4640      	mov	r0, r8
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	e7da      	b.n	8008c44 <__kernel_cos+0xec>
 8008c8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008cc8 <__kernel_cos+0x170>
 8008c92:	e7db      	b.n	8008c4c <__kernel_cos+0xf4>
 8008c94:	f3af 8000 	nop.w
 8008c98:	be8838d4 	.word	0xbe8838d4
 8008c9c:	bda8fae9 	.word	0xbda8fae9
 8008ca0:	bdb4b1c4 	.word	0xbdb4b1c4
 8008ca4:	3e21ee9e 	.word	0x3e21ee9e
 8008ca8:	809c52ad 	.word	0x809c52ad
 8008cac:	3e927e4f 	.word	0x3e927e4f
 8008cb0:	19cb1590 	.word	0x19cb1590
 8008cb4:	3efa01a0 	.word	0x3efa01a0
 8008cb8:	16c15177 	.word	0x16c15177
 8008cbc:	3f56c16c 	.word	0x3f56c16c
 8008cc0:	5555554c 	.word	0x5555554c
 8008cc4:	3fa55555 	.word	0x3fa55555
 8008cc8:	00000000 	.word	0x00000000
 8008ccc:	3ff00000 	.word	0x3ff00000
 8008cd0:	3fe00000 	.word	0x3fe00000
 8008cd4:	3fd33332 	.word	0x3fd33332
 8008cd8:	3ff00000 	.word	0x3ff00000
 8008cdc:	3fe90000 	.word	0x3fe90000
 8008ce0:	3fd20000 	.word	0x3fd20000
 8008ce4:	00000000 	.word	0x00000000

08008ce8 <__kernel_rem_pio2>:
 8008ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cec:	ed2d 8b02 	vpush	{d8}
 8008cf0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008cf4:	f112 0f14 	cmn.w	r2, #20
 8008cf8:	9308      	str	r3, [sp, #32]
 8008cfa:	9101      	str	r1, [sp, #4]
 8008cfc:	4bc6      	ldr	r3, [pc, #792]	; (8009018 <__kernel_rem_pio2+0x330>)
 8008cfe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008d00:	9009      	str	r0, [sp, #36]	; 0x24
 8008d02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	9b08      	ldr	r3, [sp, #32]
 8008d0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d0e:	bfa8      	it	ge
 8008d10:	1ed4      	subge	r4, r2, #3
 8008d12:	9306      	str	r3, [sp, #24]
 8008d14:	bfb2      	itee	lt
 8008d16:	2400      	movlt	r4, #0
 8008d18:	2318      	movge	r3, #24
 8008d1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008d1e:	f06f 0317 	mvn.w	r3, #23
 8008d22:	fb04 3303 	mla	r3, r4, r3, r3
 8008d26:	eb03 0a02 	add.w	sl, r3, r2
 8008d2a:	9b04      	ldr	r3, [sp, #16]
 8008d2c:	9a06      	ldr	r2, [sp, #24]
 8008d2e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009008 <__kernel_rem_pio2+0x320>
 8008d32:	eb03 0802 	add.w	r8, r3, r2
 8008d36:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008d38:	1aa7      	subs	r7, r4, r2
 8008d3a:	ae20      	add	r6, sp, #128	; 0x80
 8008d3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008d40:	2500      	movs	r5, #0
 8008d42:	4545      	cmp	r5, r8
 8008d44:	dd18      	ble.n	8008d78 <__kernel_rem_pio2+0x90>
 8008d46:	9b08      	ldr	r3, [sp, #32]
 8008d48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008d4c:	aa20      	add	r2, sp, #128	; 0x80
 8008d4e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009008 <__kernel_rem_pio2+0x320>
 8008d52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008d56:	f1c3 0301 	rsb	r3, r3, #1
 8008d5a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008d5e:	9307      	str	r3, [sp, #28]
 8008d60:	9b07      	ldr	r3, [sp, #28]
 8008d62:	9a04      	ldr	r2, [sp, #16]
 8008d64:	4443      	add	r3, r8
 8008d66:	429a      	cmp	r2, r3
 8008d68:	db2f      	blt.n	8008dca <__kernel_rem_pio2+0xe2>
 8008d6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d6e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008d72:	462f      	mov	r7, r5
 8008d74:	2600      	movs	r6, #0
 8008d76:	e01b      	b.n	8008db0 <__kernel_rem_pio2+0xc8>
 8008d78:	42ef      	cmn	r7, r5
 8008d7a:	d407      	bmi.n	8008d8c <__kernel_rem_pio2+0xa4>
 8008d7c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008d80:	f7f7 fbd0 	bl	8000524 <__aeabi_i2d>
 8008d84:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008d88:	3501      	adds	r5, #1
 8008d8a:	e7da      	b.n	8008d42 <__kernel_rem_pio2+0x5a>
 8008d8c:	ec51 0b18 	vmov	r0, r1, d8
 8008d90:	e7f8      	b.n	8008d84 <__kernel_rem_pio2+0x9c>
 8008d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d96:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008d9a:	f7f7 fc2d 	bl	80005f8 <__aeabi_dmul>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008da6:	f7f7 fa71 	bl	800028c <__adddf3>
 8008daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dae:	3601      	adds	r6, #1
 8008db0:	9b06      	ldr	r3, [sp, #24]
 8008db2:	429e      	cmp	r6, r3
 8008db4:	f1a7 0708 	sub.w	r7, r7, #8
 8008db8:	ddeb      	ble.n	8008d92 <__kernel_rem_pio2+0xaa>
 8008dba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dbe:	3508      	adds	r5, #8
 8008dc0:	ecab 7b02 	vstmia	fp!, {d7}
 8008dc4:	f108 0801 	add.w	r8, r8, #1
 8008dc8:	e7ca      	b.n	8008d60 <__kernel_rem_pio2+0x78>
 8008dca:	9b04      	ldr	r3, [sp, #16]
 8008dcc:	aa0c      	add	r2, sp, #48	; 0x30
 8008dce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dd4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008dd6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008dda:	9c04      	ldr	r4, [sp, #16]
 8008ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8008dde:	ab98      	add	r3, sp, #608	; 0x260
 8008de0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008de4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008de8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008dec:	f8cd b008 	str.w	fp, [sp, #8]
 8008df0:	4625      	mov	r5, r4
 8008df2:	2d00      	cmp	r5, #0
 8008df4:	dc78      	bgt.n	8008ee8 <__kernel_rem_pio2+0x200>
 8008df6:	ec47 6b10 	vmov	d0, r6, r7
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	f000 fbfc 	bl	80095f8 <scalbn>
 8008e00:	ec57 6b10 	vmov	r6, r7, d0
 8008e04:	2200      	movs	r2, #0
 8008e06:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008e0a:	ee10 0a10 	vmov	r0, s0
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7f7 fbf2 	bl	80005f8 <__aeabi_dmul>
 8008e14:	ec41 0b10 	vmov	d0, r0, r1
 8008e18:	f000 fb6e 	bl	80094f8 <floor>
 8008e1c:	4b7f      	ldr	r3, [pc, #508]	; (800901c <__kernel_rem_pio2+0x334>)
 8008e1e:	ec51 0b10 	vmov	r0, r1, d0
 8008e22:	2200      	movs	r2, #0
 8008e24:	f7f7 fbe8 	bl	80005f8 <__aeabi_dmul>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	4639      	mov	r1, r7
 8008e30:	f7f7 fa2a 	bl	8000288 <__aeabi_dsub>
 8008e34:	460f      	mov	r7, r1
 8008e36:	4606      	mov	r6, r0
 8008e38:	f7f7 fe8e 	bl	8000b58 <__aeabi_d2iz>
 8008e3c:	9007      	str	r0, [sp, #28]
 8008e3e:	f7f7 fb71 	bl	8000524 <__aeabi_i2d>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4630      	mov	r0, r6
 8008e48:	4639      	mov	r1, r7
 8008e4a:	f7f7 fa1d 	bl	8000288 <__aeabi_dsub>
 8008e4e:	f1ba 0f00 	cmp.w	sl, #0
 8008e52:	4606      	mov	r6, r0
 8008e54:	460f      	mov	r7, r1
 8008e56:	dd70      	ble.n	8008f3a <__kernel_rem_pio2+0x252>
 8008e58:	1e62      	subs	r2, r4, #1
 8008e5a:	ab0c      	add	r3, sp, #48	; 0x30
 8008e5c:	9d07      	ldr	r5, [sp, #28]
 8008e5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008e62:	f1ca 0118 	rsb	r1, sl, #24
 8008e66:	fa40 f301 	asr.w	r3, r0, r1
 8008e6a:	441d      	add	r5, r3
 8008e6c:	408b      	lsls	r3, r1
 8008e6e:	1ac0      	subs	r0, r0, r3
 8008e70:	ab0c      	add	r3, sp, #48	; 0x30
 8008e72:	9507      	str	r5, [sp, #28]
 8008e74:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008e78:	f1ca 0317 	rsb	r3, sl, #23
 8008e7c:	fa40 f303 	asr.w	r3, r0, r3
 8008e80:	9302      	str	r3, [sp, #8]
 8008e82:	9b02      	ldr	r3, [sp, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	dd66      	ble.n	8008f56 <__kernel_rem_pio2+0x26e>
 8008e88:	9b07      	ldr	r3, [sp, #28]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	9307      	str	r3, [sp, #28]
 8008e90:	4615      	mov	r5, r2
 8008e92:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008e96:	4294      	cmp	r4, r2
 8008e98:	f300 8099 	bgt.w	8008fce <__kernel_rem_pio2+0x2e6>
 8008e9c:	f1ba 0f00 	cmp.w	sl, #0
 8008ea0:	dd07      	ble.n	8008eb2 <__kernel_rem_pio2+0x1ca>
 8008ea2:	f1ba 0f01 	cmp.w	sl, #1
 8008ea6:	f000 80a5 	beq.w	8008ff4 <__kernel_rem_pio2+0x30c>
 8008eaa:	f1ba 0f02 	cmp.w	sl, #2
 8008eae:	f000 80c1 	beq.w	8009034 <__kernel_rem_pio2+0x34c>
 8008eb2:	9b02      	ldr	r3, [sp, #8]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d14e      	bne.n	8008f56 <__kernel_rem_pio2+0x26e>
 8008eb8:	4632      	mov	r2, r6
 8008eba:	463b      	mov	r3, r7
 8008ebc:	4958      	ldr	r1, [pc, #352]	; (8009020 <__kernel_rem_pio2+0x338>)
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	f7f7 f9e2 	bl	8000288 <__aeabi_dsub>
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460f      	mov	r7, r1
 8008ec8:	2d00      	cmp	r5, #0
 8008eca:	d044      	beq.n	8008f56 <__kernel_rem_pio2+0x26e>
 8008ecc:	4650      	mov	r0, sl
 8008ece:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009010 <__kernel_rem_pio2+0x328>
 8008ed2:	f000 fb91 	bl	80095f8 <scalbn>
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	4639      	mov	r1, r7
 8008eda:	ec53 2b10 	vmov	r2, r3, d0
 8008ede:	f7f7 f9d3 	bl	8000288 <__aeabi_dsub>
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460f      	mov	r7, r1
 8008ee6:	e036      	b.n	8008f56 <__kernel_rem_pio2+0x26e>
 8008ee8:	4b4e      	ldr	r3, [pc, #312]	; (8009024 <__kernel_rem_pio2+0x33c>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	4630      	mov	r0, r6
 8008eee:	4639      	mov	r1, r7
 8008ef0:	f7f7 fb82 	bl	80005f8 <__aeabi_dmul>
 8008ef4:	f7f7 fe30 	bl	8000b58 <__aeabi_d2iz>
 8008ef8:	f7f7 fb14 	bl	8000524 <__aeabi_i2d>
 8008efc:	4b4a      	ldr	r3, [pc, #296]	; (8009028 <__kernel_rem_pio2+0x340>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	4680      	mov	r8, r0
 8008f02:	4689      	mov	r9, r1
 8008f04:	f7f7 fb78 	bl	80005f8 <__aeabi_dmul>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	4639      	mov	r1, r7
 8008f10:	f7f7 f9ba 	bl	8000288 <__aeabi_dsub>
 8008f14:	f7f7 fe20 	bl	8000b58 <__aeabi_d2iz>
 8008f18:	9b02      	ldr	r3, [sp, #8]
 8008f1a:	f843 0b04 	str.w	r0, [r3], #4
 8008f1e:	3d01      	subs	r5, #1
 8008f20:	9302      	str	r3, [sp, #8]
 8008f22:	ab70      	add	r3, sp, #448	; 0x1c0
 8008f24:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	4640      	mov	r0, r8
 8008f2e:	4649      	mov	r1, r9
 8008f30:	f7f7 f9ac 	bl	800028c <__adddf3>
 8008f34:	4606      	mov	r6, r0
 8008f36:	460f      	mov	r7, r1
 8008f38:	e75b      	b.n	8008df2 <__kernel_rem_pio2+0x10a>
 8008f3a:	d105      	bne.n	8008f48 <__kernel_rem_pio2+0x260>
 8008f3c:	1e63      	subs	r3, r4, #1
 8008f3e:	aa0c      	add	r2, sp, #48	; 0x30
 8008f40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008f44:	15c3      	asrs	r3, r0, #23
 8008f46:	e79b      	b.n	8008e80 <__kernel_rem_pio2+0x198>
 8008f48:	4b38      	ldr	r3, [pc, #224]	; (800902c <__kernel_rem_pio2+0x344>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f7f7 fdda 	bl	8000b04 <__aeabi_dcmpge>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d139      	bne.n	8008fc8 <__kernel_rem_pio2+0x2e0>
 8008f54:	9002      	str	r0, [sp, #8]
 8008f56:	2200      	movs	r2, #0
 8008f58:	2300      	movs	r3, #0
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	f7f7 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	f000 80b4 	beq.w	80090d0 <__kernel_rem_pio2+0x3e8>
 8008f68:	f104 3bff 	add.w	fp, r4, #4294967295
 8008f6c:	465b      	mov	r3, fp
 8008f6e:	2200      	movs	r2, #0
 8008f70:	9904      	ldr	r1, [sp, #16]
 8008f72:	428b      	cmp	r3, r1
 8008f74:	da65      	bge.n	8009042 <__kernel_rem_pio2+0x35a>
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	d07b      	beq.n	8009072 <__kernel_rem_pio2+0x38a>
 8008f7a:	ab0c      	add	r3, sp, #48	; 0x30
 8008f7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008f80:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 80a0 	beq.w	80090ca <__kernel_rem_pio2+0x3e2>
 8008f8a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009010 <__kernel_rem_pio2+0x328>
 8008f8e:	4650      	mov	r0, sl
 8008f90:	f000 fb32 	bl	80095f8 <scalbn>
 8008f94:	4f23      	ldr	r7, [pc, #140]	; (8009024 <__kernel_rem_pio2+0x33c>)
 8008f96:	ec55 4b10 	vmov	r4, r5, d0
 8008f9a:	46d8      	mov	r8, fp
 8008f9c:	2600      	movs	r6, #0
 8008f9e:	f1b8 0f00 	cmp.w	r8, #0
 8008fa2:	f280 80cf 	bge.w	8009144 <__kernel_rem_pio2+0x45c>
 8008fa6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009008 <__kernel_rem_pio2+0x320>
 8008faa:	465f      	mov	r7, fp
 8008fac:	f04f 0800 	mov.w	r8, #0
 8008fb0:	2f00      	cmp	r7, #0
 8008fb2:	f2c0 80fd 	blt.w	80091b0 <__kernel_rem_pio2+0x4c8>
 8008fb6:	ab70      	add	r3, sp, #448	; 0x1c0
 8008fb8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009030 <__kernel_rem_pio2+0x348>
 8008fbc:	ec55 4b18 	vmov	r4, r5, d8
 8008fc0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008fc4:	2600      	movs	r6, #0
 8008fc6:	e0e5      	b.n	8009194 <__kernel_rem_pio2+0x4ac>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	9302      	str	r3, [sp, #8]
 8008fcc:	e75c      	b.n	8008e88 <__kernel_rem_pio2+0x1a0>
 8008fce:	f8db 3000 	ldr.w	r3, [fp]
 8008fd2:	b955      	cbnz	r5, 8008fea <__kernel_rem_pio2+0x302>
 8008fd4:	b123      	cbz	r3, 8008fe0 <__kernel_rem_pio2+0x2f8>
 8008fd6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008fda:	f8cb 3000 	str.w	r3, [fp]
 8008fde:	2301      	movs	r3, #1
 8008fe0:	3201      	adds	r2, #1
 8008fe2:	f10b 0b04 	add.w	fp, fp, #4
 8008fe6:	461d      	mov	r5, r3
 8008fe8:	e755      	b.n	8008e96 <__kernel_rem_pio2+0x1ae>
 8008fea:	1acb      	subs	r3, r1, r3
 8008fec:	f8cb 3000 	str.w	r3, [fp]
 8008ff0:	462b      	mov	r3, r5
 8008ff2:	e7f5      	b.n	8008fe0 <__kernel_rem_pio2+0x2f8>
 8008ff4:	1e62      	subs	r2, r4, #1
 8008ff6:	ab0c      	add	r3, sp, #48	; 0x30
 8008ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009000:	a90c      	add	r1, sp, #48	; 0x30
 8009002:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009006:	e754      	b.n	8008eb2 <__kernel_rem_pio2+0x1ca>
	...
 8009014:	3ff00000 	.word	0x3ff00000
 8009018:	08009ef0 	.word	0x08009ef0
 800901c:	40200000 	.word	0x40200000
 8009020:	3ff00000 	.word	0x3ff00000
 8009024:	3e700000 	.word	0x3e700000
 8009028:	41700000 	.word	0x41700000
 800902c:	3fe00000 	.word	0x3fe00000
 8009030:	08009eb0 	.word	0x08009eb0
 8009034:	1e62      	subs	r2, r4, #1
 8009036:	ab0c      	add	r3, sp, #48	; 0x30
 8009038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009040:	e7de      	b.n	8009000 <__kernel_rem_pio2+0x318>
 8009042:	a90c      	add	r1, sp, #48	; 0x30
 8009044:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009048:	3b01      	subs	r3, #1
 800904a:	430a      	orrs	r2, r1
 800904c:	e790      	b.n	8008f70 <__kernel_rem_pio2+0x288>
 800904e:	3301      	adds	r3, #1
 8009050:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009054:	2900      	cmp	r1, #0
 8009056:	d0fa      	beq.n	800904e <__kernel_rem_pio2+0x366>
 8009058:	9a08      	ldr	r2, [sp, #32]
 800905a:	18e3      	adds	r3, r4, r3
 800905c:	18a6      	adds	r6, r4, r2
 800905e:	aa20      	add	r2, sp, #128	; 0x80
 8009060:	1c65      	adds	r5, r4, #1
 8009062:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009066:	9302      	str	r3, [sp, #8]
 8009068:	9b02      	ldr	r3, [sp, #8]
 800906a:	42ab      	cmp	r3, r5
 800906c:	da04      	bge.n	8009078 <__kernel_rem_pio2+0x390>
 800906e:	461c      	mov	r4, r3
 8009070:	e6b5      	b.n	8008dde <__kernel_rem_pio2+0xf6>
 8009072:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009074:	2301      	movs	r3, #1
 8009076:	e7eb      	b.n	8009050 <__kernel_rem_pio2+0x368>
 8009078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800907a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800907e:	f7f7 fa51 	bl	8000524 <__aeabi_i2d>
 8009082:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009088:	46b3      	mov	fp, r6
 800908a:	461c      	mov	r4, r3
 800908c:	2700      	movs	r7, #0
 800908e:	f04f 0800 	mov.w	r8, #0
 8009092:	f04f 0900 	mov.w	r9, #0
 8009096:	9b06      	ldr	r3, [sp, #24]
 8009098:	429f      	cmp	r7, r3
 800909a:	dd06      	ble.n	80090aa <__kernel_rem_pio2+0x3c2>
 800909c:	ab70      	add	r3, sp, #448	; 0x1c0
 800909e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80090a2:	e9c3 8900 	strd	r8, r9, [r3]
 80090a6:	3501      	adds	r5, #1
 80090a8:	e7de      	b.n	8009068 <__kernel_rem_pio2+0x380>
 80090aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80090ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80090b2:	f7f7 faa1 	bl	80005f8 <__aeabi_dmul>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4640      	mov	r0, r8
 80090bc:	4649      	mov	r1, r9
 80090be:	f7f7 f8e5 	bl	800028c <__adddf3>
 80090c2:	3701      	adds	r7, #1
 80090c4:	4680      	mov	r8, r0
 80090c6:	4689      	mov	r9, r1
 80090c8:	e7e5      	b.n	8009096 <__kernel_rem_pio2+0x3ae>
 80090ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090ce:	e754      	b.n	8008f7a <__kernel_rem_pio2+0x292>
 80090d0:	ec47 6b10 	vmov	d0, r6, r7
 80090d4:	f1ca 0000 	rsb	r0, sl, #0
 80090d8:	f000 fa8e 	bl	80095f8 <scalbn>
 80090dc:	ec57 6b10 	vmov	r6, r7, d0
 80090e0:	4b9f      	ldr	r3, [pc, #636]	; (8009360 <__kernel_rem_pio2+0x678>)
 80090e2:	ee10 0a10 	vmov	r0, s0
 80090e6:	2200      	movs	r2, #0
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 fd0b 	bl	8000b04 <__aeabi_dcmpge>
 80090ee:	b300      	cbz	r0, 8009132 <__kernel_rem_pio2+0x44a>
 80090f0:	4b9c      	ldr	r3, [pc, #624]	; (8009364 <__kernel_rem_pio2+0x67c>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	4630      	mov	r0, r6
 80090f6:	4639      	mov	r1, r7
 80090f8:	f7f7 fa7e 	bl	80005f8 <__aeabi_dmul>
 80090fc:	f7f7 fd2c 	bl	8000b58 <__aeabi_d2iz>
 8009100:	4605      	mov	r5, r0
 8009102:	f7f7 fa0f 	bl	8000524 <__aeabi_i2d>
 8009106:	4b96      	ldr	r3, [pc, #600]	; (8009360 <__kernel_rem_pio2+0x678>)
 8009108:	2200      	movs	r2, #0
 800910a:	f7f7 fa75 	bl	80005f8 <__aeabi_dmul>
 800910e:	460b      	mov	r3, r1
 8009110:	4602      	mov	r2, r0
 8009112:	4639      	mov	r1, r7
 8009114:	4630      	mov	r0, r6
 8009116:	f7f7 f8b7 	bl	8000288 <__aeabi_dsub>
 800911a:	f7f7 fd1d 	bl	8000b58 <__aeabi_d2iz>
 800911e:	f104 0b01 	add.w	fp, r4, #1
 8009122:	ab0c      	add	r3, sp, #48	; 0x30
 8009124:	f10a 0a18 	add.w	sl, sl, #24
 8009128:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800912c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009130:	e72b      	b.n	8008f8a <__kernel_rem_pio2+0x2a2>
 8009132:	4630      	mov	r0, r6
 8009134:	4639      	mov	r1, r7
 8009136:	f7f7 fd0f 	bl	8000b58 <__aeabi_d2iz>
 800913a:	ab0c      	add	r3, sp, #48	; 0x30
 800913c:	46a3      	mov	fp, r4
 800913e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009142:	e722      	b.n	8008f8a <__kernel_rem_pio2+0x2a2>
 8009144:	ab70      	add	r3, sp, #448	; 0x1c0
 8009146:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800914a:	ab0c      	add	r3, sp, #48	; 0x30
 800914c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009150:	f7f7 f9e8 	bl	8000524 <__aeabi_i2d>
 8009154:	4622      	mov	r2, r4
 8009156:	462b      	mov	r3, r5
 8009158:	f7f7 fa4e 	bl	80005f8 <__aeabi_dmul>
 800915c:	4632      	mov	r2, r6
 800915e:	e9c9 0100 	strd	r0, r1, [r9]
 8009162:	463b      	mov	r3, r7
 8009164:	4620      	mov	r0, r4
 8009166:	4629      	mov	r1, r5
 8009168:	f7f7 fa46 	bl	80005f8 <__aeabi_dmul>
 800916c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009170:	4604      	mov	r4, r0
 8009172:	460d      	mov	r5, r1
 8009174:	e713      	b.n	8008f9e <__kernel_rem_pio2+0x2b6>
 8009176:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800917a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800917e:	f7f7 fa3b 	bl	80005f8 <__aeabi_dmul>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f7f7 f87f 	bl	800028c <__adddf3>
 800918e:	3601      	adds	r6, #1
 8009190:	4604      	mov	r4, r0
 8009192:	460d      	mov	r5, r1
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	429e      	cmp	r6, r3
 8009198:	dc01      	bgt.n	800919e <__kernel_rem_pio2+0x4b6>
 800919a:	45b0      	cmp	r8, r6
 800919c:	daeb      	bge.n	8009176 <__kernel_rem_pio2+0x48e>
 800919e:	ab48      	add	r3, sp, #288	; 0x120
 80091a0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80091a4:	e9c3 4500 	strd	r4, r5, [r3]
 80091a8:	3f01      	subs	r7, #1
 80091aa:	f108 0801 	add.w	r8, r8, #1
 80091ae:	e6ff      	b.n	8008fb0 <__kernel_rem_pio2+0x2c8>
 80091b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	dc0b      	bgt.n	80091ce <__kernel_rem_pio2+0x4e6>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dc6e      	bgt.n	8009298 <__kernel_rem_pio2+0x5b0>
 80091ba:	d045      	beq.n	8009248 <__kernel_rem_pio2+0x560>
 80091bc:	9b07      	ldr	r3, [sp, #28]
 80091be:	f003 0007 	and.w	r0, r3, #7
 80091c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80091c6:	ecbd 8b02 	vpop	{d8}
 80091ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d1f3      	bne.n	80091bc <__kernel_rem_pio2+0x4d4>
 80091d4:	ab48      	add	r3, sp, #288	; 0x120
 80091d6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80091da:	46d0      	mov	r8, sl
 80091dc:	46d9      	mov	r9, fp
 80091de:	f1b9 0f00 	cmp.w	r9, #0
 80091e2:	f1a8 0808 	sub.w	r8, r8, #8
 80091e6:	dc64      	bgt.n	80092b2 <__kernel_rem_pio2+0x5ca>
 80091e8:	465c      	mov	r4, fp
 80091ea:	2c01      	cmp	r4, #1
 80091ec:	f1aa 0a08 	sub.w	sl, sl, #8
 80091f0:	dc7e      	bgt.n	80092f0 <__kernel_rem_pio2+0x608>
 80091f2:	2000      	movs	r0, #0
 80091f4:	2100      	movs	r1, #0
 80091f6:	f1bb 0f01 	cmp.w	fp, #1
 80091fa:	f300 8097 	bgt.w	800932c <__kernel_rem_pio2+0x644>
 80091fe:	9b02      	ldr	r3, [sp, #8]
 8009200:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8009204:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009208:	2b00      	cmp	r3, #0
 800920a:	f040 8099 	bne.w	8009340 <__kernel_rem_pio2+0x658>
 800920e:	9b01      	ldr	r3, [sp, #4]
 8009210:	e9c3 5600 	strd	r5, r6, [r3]
 8009214:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009218:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800921c:	e7ce      	b.n	80091bc <__kernel_rem_pio2+0x4d4>
 800921e:	ab48      	add	r3, sp, #288	; 0x120
 8009220:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f7 f830 	bl	800028c <__adddf3>
 800922c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009230:	f1bb 0f00 	cmp.w	fp, #0
 8009234:	daf3      	bge.n	800921e <__kernel_rem_pio2+0x536>
 8009236:	9b02      	ldr	r3, [sp, #8]
 8009238:	b113      	cbz	r3, 8009240 <__kernel_rem_pio2+0x558>
 800923a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800923e:	4619      	mov	r1, r3
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	e9c3 0100 	strd	r0, r1, [r3]
 8009246:	e7b9      	b.n	80091bc <__kernel_rem_pio2+0x4d4>
 8009248:	2000      	movs	r0, #0
 800924a:	2100      	movs	r1, #0
 800924c:	e7f0      	b.n	8009230 <__kernel_rem_pio2+0x548>
 800924e:	ab48      	add	r3, sp, #288	; 0x120
 8009250:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f7f7 f818 	bl	800028c <__adddf3>
 800925c:	3c01      	subs	r4, #1
 800925e:	2c00      	cmp	r4, #0
 8009260:	daf5      	bge.n	800924e <__kernel_rem_pio2+0x566>
 8009262:	9b02      	ldr	r3, [sp, #8]
 8009264:	b1e3      	cbz	r3, 80092a0 <__kernel_rem_pio2+0x5b8>
 8009266:	4602      	mov	r2, r0
 8009268:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800926c:	9c01      	ldr	r4, [sp, #4]
 800926e:	e9c4 2300 	strd	r2, r3, [r4]
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800927a:	f7f7 f805 	bl	8000288 <__aeabi_dsub>
 800927e:	ad4a      	add	r5, sp, #296	; 0x128
 8009280:	2401      	movs	r4, #1
 8009282:	45a3      	cmp	fp, r4
 8009284:	da0f      	bge.n	80092a6 <__kernel_rem_pio2+0x5be>
 8009286:	9b02      	ldr	r3, [sp, #8]
 8009288:	b113      	cbz	r3, 8009290 <__kernel_rem_pio2+0x5a8>
 800928a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800928e:	4619      	mov	r1, r3
 8009290:	9b01      	ldr	r3, [sp, #4]
 8009292:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009296:	e791      	b.n	80091bc <__kernel_rem_pio2+0x4d4>
 8009298:	465c      	mov	r4, fp
 800929a:	2000      	movs	r0, #0
 800929c:	2100      	movs	r1, #0
 800929e:	e7de      	b.n	800925e <__kernel_rem_pio2+0x576>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	e7e2      	b.n	800926c <__kernel_rem_pio2+0x584>
 80092a6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80092aa:	f7f6 ffef 	bl	800028c <__adddf3>
 80092ae:	3401      	adds	r4, #1
 80092b0:	e7e7      	b.n	8009282 <__kernel_rem_pio2+0x59a>
 80092b2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80092b6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80092ba:	4620      	mov	r0, r4
 80092bc:	4632      	mov	r2, r6
 80092be:	463b      	mov	r3, r7
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f6 ffe3 	bl	800028c <__adddf3>
 80092c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4620      	mov	r0, r4
 80092d0:	4629      	mov	r1, r5
 80092d2:	f7f6 ffd9 	bl	8000288 <__aeabi_dsub>
 80092d6:	4632      	mov	r2, r6
 80092d8:	463b      	mov	r3, r7
 80092da:	f7f6 ffd7 	bl	800028c <__adddf3>
 80092de:	ed9d 7b04 	vldr	d7, [sp, #16]
 80092e2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80092e6:	ed88 7b00 	vstr	d7, [r8]
 80092ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80092ee:	e776      	b.n	80091de <__kernel_rem_pio2+0x4f6>
 80092f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80092f4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80092f8:	4640      	mov	r0, r8
 80092fa:	4632      	mov	r2, r6
 80092fc:	463b      	mov	r3, r7
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f6 ffc4 	bl	800028c <__adddf3>
 8009304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4640      	mov	r0, r8
 800930e:	4649      	mov	r1, r9
 8009310:	f7f6 ffba 	bl	8000288 <__aeabi_dsub>
 8009314:	4632      	mov	r2, r6
 8009316:	463b      	mov	r3, r7
 8009318:	f7f6 ffb8 	bl	800028c <__adddf3>
 800931c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009320:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009324:	ed8a 7b00 	vstr	d7, [sl]
 8009328:	3c01      	subs	r4, #1
 800932a:	e75e      	b.n	80091ea <__kernel_rem_pio2+0x502>
 800932c:	ab48      	add	r3, sp, #288	; 0x120
 800932e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	f7f6 ffa9 	bl	800028c <__adddf3>
 800933a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800933e:	e75a      	b.n	80091f6 <__kernel_rem_pio2+0x50e>
 8009340:	9b01      	ldr	r3, [sp, #4]
 8009342:	9a01      	ldr	r2, [sp, #4]
 8009344:	601d      	str	r5, [r3, #0]
 8009346:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800934a:	605c      	str	r4, [r3, #4]
 800934c:	609f      	str	r7, [r3, #8]
 800934e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009352:	60d3      	str	r3, [r2, #12]
 8009354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009358:	6110      	str	r0, [r2, #16]
 800935a:	6153      	str	r3, [r2, #20]
 800935c:	e72e      	b.n	80091bc <__kernel_rem_pio2+0x4d4>
 800935e:	bf00      	nop
 8009360:	41700000 	.word	0x41700000
 8009364:	3e700000 	.word	0x3e700000

08009368 <__kernel_sin>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	ed2d 8b04 	vpush	{d8-d9}
 8009370:	eeb0 8a41 	vmov.f32	s16, s2
 8009374:	eef0 8a61 	vmov.f32	s17, s3
 8009378:	ec55 4b10 	vmov	r4, r5, d0
 800937c:	b083      	sub	sp, #12
 800937e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009382:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009386:	9001      	str	r0, [sp, #4]
 8009388:	da06      	bge.n	8009398 <__kernel_sin+0x30>
 800938a:	ee10 0a10 	vmov	r0, s0
 800938e:	4629      	mov	r1, r5
 8009390:	f7f7 fbe2 	bl	8000b58 <__aeabi_d2iz>
 8009394:	2800      	cmp	r0, #0
 8009396:	d051      	beq.n	800943c <__kernel_sin+0xd4>
 8009398:	4622      	mov	r2, r4
 800939a:	462b      	mov	r3, r5
 800939c:	4620      	mov	r0, r4
 800939e:	4629      	mov	r1, r5
 80093a0:	f7f7 f92a 	bl	80005f8 <__aeabi_dmul>
 80093a4:	4682      	mov	sl, r0
 80093a6:	468b      	mov	fp, r1
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4620      	mov	r0, r4
 80093ae:	4629      	mov	r1, r5
 80093b0:	f7f7 f922 	bl	80005f8 <__aeabi_dmul>
 80093b4:	a341      	add	r3, pc, #260	; (adr r3, 80094bc <__kernel_sin+0x154>)
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	4680      	mov	r8, r0
 80093bc:	4689      	mov	r9, r1
 80093be:	4650      	mov	r0, sl
 80093c0:	4659      	mov	r1, fp
 80093c2:	f7f7 f919 	bl	80005f8 <__aeabi_dmul>
 80093c6:	a33f      	add	r3, pc, #252	; (adr r3, 80094c4 <__kernel_sin+0x15c>)
 80093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093cc:	f7f6 ff5c 	bl	8000288 <__aeabi_dsub>
 80093d0:	4652      	mov	r2, sl
 80093d2:	465b      	mov	r3, fp
 80093d4:	f7f7 f910 	bl	80005f8 <__aeabi_dmul>
 80093d8:	a33c      	add	r3, pc, #240	; (adr r3, 80094cc <__kernel_sin+0x164>)
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f7f6 ff55 	bl	800028c <__adddf3>
 80093e2:	4652      	mov	r2, sl
 80093e4:	465b      	mov	r3, fp
 80093e6:	f7f7 f907 	bl	80005f8 <__aeabi_dmul>
 80093ea:	a33a      	add	r3, pc, #232	; (adr r3, 80094d4 <__kernel_sin+0x16c>)
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f7f6 ff4a 	bl	8000288 <__aeabi_dsub>
 80093f4:	4652      	mov	r2, sl
 80093f6:	465b      	mov	r3, fp
 80093f8:	f7f7 f8fe 	bl	80005f8 <__aeabi_dmul>
 80093fc:	a337      	add	r3, pc, #220	; (adr r3, 80094dc <__kernel_sin+0x174>)
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	f7f6 ff43 	bl	800028c <__adddf3>
 8009406:	9b01      	ldr	r3, [sp, #4]
 8009408:	4606      	mov	r6, r0
 800940a:	460f      	mov	r7, r1
 800940c:	b9eb      	cbnz	r3, 800944a <__kernel_sin+0xe2>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4650      	mov	r0, sl
 8009414:	4659      	mov	r1, fp
 8009416:	f7f7 f8ef 	bl	80005f8 <__aeabi_dmul>
 800941a:	a325      	add	r3, pc, #148	; (adr r3, 80094b0 <__kernel_sin+0x148>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f6 ff32 	bl	8000288 <__aeabi_dsub>
 8009424:	4642      	mov	r2, r8
 8009426:	464b      	mov	r3, r9
 8009428:	f7f7 f8e6 	bl	80005f8 <__aeabi_dmul>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4620      	mov	r0, r4
 8009432:	4629      	mov	r1, r5
 8009434:	f7f6 ff2a 	bl	800028c <__adddf3>
 8009438:	4604      	mov	r4, r0
 800943a:	460d      	mov	r5, r1
 800943c:	ec45 4b10 	vmov	d0, r4, r5
 8009440:	b003      	add	sp, #12
 8009442:	ecbd 8b04 	vpop	{d8-d9}
 8009446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944a:	4b1b      	ldr	r3, [pc, #108]	; (80094b8 <__kernel_sin+0x150>)
 800944c:	ec51 0b18 	vmov	r0, r1, d8
 8009450:	2200      	movs	r2, #0
 8009452:	f7f7 f8d1 	bl	80005f8 <__aeabi_dmul>
 8009456:	4632      	mov	r2, r6
 8009458:	ec41 0b19 	vmov	d9, r0, r1
 800945c:	463b      	mov	r3, r7
 800945e:	4640      	mov	r0, r8
 8009460:	4649      	mov	r1, r9
 8009462:	f7f7 f8c9 	bl	80005f8 <__aeabi_dmul>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	ec51 0b19 	vmov	r0, r1, d9
 800946e:	f7f6 ff0b 	bl	8000288 <__aeabi_dsub>
 8009472:	4652      	mov	r2, sl
 8009474:	465b      	mov	r3, fp
 8009476:	f7f7 f8bf 	bl	80005f8 <__aeabi_dmul>
 800947a:	ec53 2b18 	vmov	r2, r3, d8
 800947e:	f7f6 ff03 	bl	8000288 <__aeabi_dsub>
 8009482:	a30b      	add	r3, pc, #44	; (adr r3, 80094b0 <__kernel_sin+0x148>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	4606      	mov	r6, r0
 800948a:	460f      	mov	r7, r1
 800948c:	4640      	mov	r0, r8
 800948e:	4649      	mov	r1, r9
 8009490:	f7f7 f8b2 	bl	80005f8 <__aeabi_dmul>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4630      	mov	r0, r6
 800949a:	4639      	mov	r1, r7
 800949c:	f7f6 fef6 	bl	800028c <__adddf3>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4620      	mov	r0, r4
 80094a6:	4629      	mov	r1, r5
 80094a8:	f7f6 feee 	bl	8000288 <__aeabi_dsub>
 80094ac:	e7c4      	b.n	8009438 <__kernel_sin+0xd0>
 80094ae:	bf00      	nop
 80094b0:	55555549 	.word	0x55555549
 80094b4:	3fc55555 	.word	0x3fc55555
 80094b8:	3fe00000 	.word	0x3fe00000
 80094bc:	5acfd57c 	.word	0x5acfd57c
 80094c0:	3de5d93a 	.word	0x3de5d93a
 80094c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80094c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80094cc:	57b1fe7d 	.word	0x57b1fe7d
 80094d0:	3ec71de3 	.word	0x3ec71de3
 80094d4:	19c161d5 	.word	0x19c161d5
 80094d8:	3f2a01a0 	.word	0x3f2a01a0
 80094dc:	1110f8a6 	.word	0x1110f8a6
 80094e0:	3f811111 	.word	0x3f811111

080094e4 <fabs>:
 80094e4:	ec51 0b10 	vmov	r0, r1, d0
 80094e8:	ee10 2a10 	vmov	r2, s0
 80094ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094f0:	ec43 2b10 	vmov	d0, r2, r3
 80094f4:	4770      	bx	lr
	...

080094f8 <floor>:
 80094f8:	ec51 0b10 	vmov	r0, r1, d0
 80094fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009500:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009504:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009508:	2e13      	cmp	r6, #19
 800950a:	ee10 5a10 	vmov	r5, s0
 800950e:	ee10 8a10 	vmov	r8, s0
 8009512:	460c      	mov	r4, r1
 8009514:	dc32      	bgt.n	800957c <floor+0x84>
 8009516:	2e00      	cmp	r6, #0
 8009518:	da14      	bge.n	8009544 <floor+0x4c>
 800951a:	a333      	add	r3, pc, #204	; (adr r3, 80095e8 <floor+0xf0>)
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f7f6 feb4 	bl	800028c <__adddf3>
 8009524:	2200      	movs	r2, #0
 8009526:	2300      	movs	r3, #0
 8009528:	f7f7 faf6 	bl	8000b18 <__aeabi_dcmpgt>
 800952c:	b138      	cbz	r0, 800953e <floor+0x46>
 800952e:	2c00      	cmp	r4, #0
 8009530:	da57      	bge.n	80095e2 <floor+0xea>
 8009532:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009536:	431d      	orrs	r5, r3
 8009538:	d001      	beq.n	800953e <floor+0x46>
 800953a:	4c2d      	ldr	r4, [pc, #180]	; (80095f0 <floor+0xf8>)
 800953c:	2500      	movs	r5, #0
 800953e:	4621      	mov	r1, r4
 8009540:	4628      	mov	r0, r5
 8009542:	e025      	b.n	8009590 <floor+0x98>
 8009544:	4f2b      	ldr	r7, [pc, #172]	; (80095f4 <floor+0xfc>)
 8009546:	4137      	asrs	r7, r6
 8009548:	ea01 0307 	and.w	r3, r1, r7
 800954c:	4303      	orrs	r3, r0
 800954e:	d01f      	beq.n	8009590 <floor+0x98>
 8009550:	a325      	add	r3, pc, #148	; (adr r3, 80095e8 <floor+0xf0>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	f7f6 fe99 	bl	800028c <__adddf3>
 800955a:	2200      	movs	r2, #0
 800955c:	2300      	movs	r3, #0
 800955e:	f7f7 fadb 	bl	8000b18 <__aeabi_dcmpgt>
 8009562:	2800      	cmp	r0, #0
 8009564:	d0eb      	beq.n	800953e <floor+0x46>
 8009566:	2c00      	cmp	r4, #0
 8009568:	bfbe      	ittt	lt
 800956a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800956e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009572:	19a4      	addlt	r4, r4, r6
 8009574:	ea24 0407 	bic.w	r4, r4, r7
 8009578:	2500      	movs	r5, #0
 800957a:	e7e0      	b.n	800953e <floor+0x46>
 800957c:	2e33      	cmp	r6, #51	; 0x33
 800957e:	dd0b      	ble.n	8009598 <floor+0xa0>
 8009580:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009584:	d104      	bne.n	8009590 <floor+0x98>
 8009586:	ee10 2a10 	vmov	r2, s0
 800958a:	460b      	mov	r3, r1
 800958c:	f7f6 fe7e 	bl	800028c <__adddf3>
 8009590:	ec41 0b10 	vmov	d0, r0, r1
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009598:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800959c:	f04f 33ff 	mov.w	r3, #4294967295
 80095a0:	fa23 f707 	lsr.w	r7, r3, r7
 80095a4:	4207      	tst	r7, r0
 80095a6:	d0f3      	beq.n	8009590 <floor+0x98>
 80095a8:	a30f      	add	r3, pc, #60	; (adr r3, 80095e8 <floor+0xf0>)
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f7f6 fe6d 	bl	800028c <__adddf3>
 80095b2:	2200      	movs	r2, #0
 80095b4:	2300      	movs	r3, #0
 80095b6:	f7f7 faaf 	bl	8000b18 <__aeabi_dcmpgt>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d0bf      	beq.n	800953e <floor+0x46>
 80095be:	2c00      	cmp	r4, #0
 80095c0:	da02      	bge.n	80095c8 <floor+0xd0>
 80095c2:	2e14      	cmp	r6, #20
 80095c4:	d103      	bne.n	80095ce <floor+0xd6>
 80095c6:	3401      	adds	r4, #1
 80095c8:	ea25 0507 	bic.w	r5, r5, r7
 80095cc:	e7b7      	b.n	800953e <floor+0x46>
 80095ce:	2301      	movs	r3, #1
 80095d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80095d4:	fa03 f606 	lsl.w	r6, r3, r6
 80095d8:	4435      	add	r5, r6
 80095da:	4545      	cmp	r5, r8
 80095dc:	bf38      	it	cc
 80095de:	18e4      	addcc	r4, r4, r3
 80095e0:	e7f2      	b.n	80095c8 <floor+0xd0>
 80095e2:	2500      	movs	r5, #0
 80095e4:	462c      	mov	r4, r5
 80095e6:	e7aa      	b.n	800953e <floor+0x46>
 80095e8:	8800759c 	.word	0x8800759c
 80095ec:	7e37e43c 	.word	0x7e37e43c
 80095f0:	bff00000 	.word	0xbff00000
 80095f4:	000fffff 	.word	0x000fffff

080095f8 <scalbn>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	ec55 4b10 	vmov	r4, r5, d0
 80095fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009602:	4606      	mov	r6, r0
 8009604:	462b      	mov	r3, r5
 8009606:	b99a      	cbnz	r2, 8009630 <scalbn+0x38>
 8009608:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800960c:	4323      	orrs	r3, r4
 800960e:	d036      	beq.n	800967e <scalbn+0x86>
 8009610:	4b39      	ldr	r3, [pc, #228]	; (80096f8 <scalbn+0x100>)
 8009612:	4629      	mov	r1, r5
 8009614:	ee10 0a10 	vmov	r0, s0
 8009618:	2200      	movs	r2, #0
 800961a:	f7f6 ffed 	bl	80005f8 <__aeabi_dmul>
 800961e:	4b37      	ldr	r3, [pc, #220]	; (80096fc <scalbn+0x104>)
 8009620:	429e      	cmp	r6, r3
 8009622:	4604      	mov	r4, r0
 8009624:	460d      	mov	r5, r1
 8009626:	da10      	bge.n	800964a <scalbn+0x52>
 8009628:	a32b      	add	r3, pc, #172	; (adr r3, 80096d8 <scalbn+0xe0>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	e03a      	b.n	80096a6 <scalbn+0xae>
 8009630:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009634:	428a      	cmp	r2, r1
 8009636:	d10c      	bne.n	8009652 <scalbn+0x5a>
 8009638:	ee10 2a10 	vmov	r2, s0
 800963c:	4620      	mov	r0, r4
 800963e:	4629      	mov	r1, r5
 8009640:	f7f6 fe24 	bl	800028c <__adddf3>
 8009644:	4604      	mov	r4, r0
 8009646:	460d      	mov	r5, r1
 8009648:	e019      	b.n	800967e <scalbn+0x86>
 800964a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800964e:	460b      	mov	r3, r1
 8009650:	3a36      	subs	r2, #54	; 0x36
 8009652:	4432      	add	r2, r6
 8009654:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009658:	428a      	cmp	r2, r1
 800965a:	dd08      	ble.n	800966e <scalbn+0x76>
 800965c:	2d00      	cmp	r5, #0
 800965e:	a120      	add	r1, pc, #128	; (adr r1, 80096e0 <scalbn+0xe8>)
 8009660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009664:	da1c      	bge.n	80096a0 <scalbn+0xa8>
 8009666:	a120      	add	r1, pc, #128	; (adr r1, 80096e8 <scalbn+0xf0>)
 8009668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966c:	e018      	b.n	80096a0 <scalbn+0xa8>
 800966e:	2a00      	cmp	r2, #0
 8009670:	dd08      	ble.n	8009684 <scalbn+0x8c>
 8009672:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009676:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800967a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800967e:	ec45 4b10 	vmov	d0, r4, r5
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009688:	da19      	bge.n	80096be <scalbn+0xc6>
 800968a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800968e:	429e      	cmp	r6, r3
 8009690:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009694:	dd0a      	ble.n	80096ac <scalbn+0xb4>
 8009696:	a112      	add	r1, pc, #72	; (adr r1, 80096e0 <scalbn+0xe8>)
 8009698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e2      	bne.n	8009666 <scalbn+0x6e>
 80096a0:	a30f      	add	r3, pc, #60	; (adr r3, 80096e0 <scalbn+0xe8>)
 80096a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a6:	f7f6 ffa7 	bl	80005f8 <__aeabi_dmul>
 80096aa:	e7cb      	b.n	8009644 <scalbn+0x4c>
 80096ac:	a10a      	add	r1, pc, #40	; (adr r1, 80096d8 <scalbn+0xe0>)
 80096ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0b8      	beq.n	8009628 <scalbn+0x30>
 80096b6:	a10e      	add	r1, pc, #56	; (adr r1, 80096f0 <scalbn+0xf8>)
 80096b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096bc:	e7b4      	b.n	8009628 <scalbn+0x30>
 80096be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80096c2:	3236      	adds	r2, #54	; 0x36
 80096c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80096cc:	4620      	mov	r0, r4
 80096ce:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <scalbn+0x108>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	e7e8      	b.n	80096a6 <scalbn+0xae>
 80096d4:	f3af 8000 	nop.w
 80096d8:	c2f8f359 	.word	0xc2f8f359
 80096dc:	01a56e1f 	.word	0x01a56e1f
 80096e0:	8800759c 	.word	0x8800759c
 80096e4:	7e37e43c 	.word	0x7e37e43c
 80096e8:	8800759c 	.word	0x8800759c
 80096ec:	fe37e43c 	.word	0xfe37e43c
 80096f0:	c2f8f359 	.word	0xc2f8f359
 80096f4:	81a56e1f 	.word	0x81a56e1f
 80096f8:	43500000 	.word	0x43500000
 80096fc:	ffff3cb0 	.word	0xffff3cb0
 8009700:	3c900000 	.word	0x3c900000

08009704 <_init>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	bf00      	nop
 8009708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970a:	bc08      	pop	{r3}
 800970c:	469e      	mov	lr, r3
 800970e:	4770      	bx	lr

08009710 <_fini>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	bf00      	nop
 8009714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009716:	bc08      	pop	{r3}
 8009718:	469e      	mov	lr, r3
 800971a:	4770      	bx	lr
