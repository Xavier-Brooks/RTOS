
p1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001248  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080013d8  080013d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001678  08001678  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001678  08001678  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001678  08001678  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001678  08001678  00011678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800167c  0800167c  0001167c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08001680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000006c  080016ec  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080016ec  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027dd  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000897  00000000  00000000  00022879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00023110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00023270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8bf  00000000  00000000  00023380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002272  00000000  00000000  00040c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a30b4  00000000  00000000  00042eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5f65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000834  00000000  00000000  000e5fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080013c0 	.word	0x080013c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080013c0 	.word	0x080013c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <gpio_init>:
#include "gpio.h"

//initializes PA1 for high/low gpio
void gpio_init(){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	//GPIO PA0 to TIM2_CH1
	GPIOA->MODER &= ~(0x01u);
 8000274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800027e:	f023 0301 	bic.w	r3, r3, #1
 8000282:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x02); //PA0 alternative mode
 8000284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (0x01);  //alternative function 1 selected
 8000294:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000298:	6a1b      	ldr	r3, [r3, #32]
 800029a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6213      	str	r3, [r2, #32]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
	...

080002b0 <main>:

int curr_min = 50;
static uint32_t histogram[101];
static int buckets  = 0;

int main(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	//perform some hardware initialization here1
	usart2_init();
 80002b4:	f000 fa4a 	bl	800074c <usart2_init>
	gpio_init();
 80002b8:	f7ff ffda 	bl	8000270 <gpio_init>
	usart2_putc(0x0C); //clears putty terminal
 80002bc:	200c      	movs	r0, #12
 80002be:	f000 faf3 	bl	80008a8 <usart2_putc>

	usart2_put("Will begin post test...\r\n");
 80002c2:	4816      	ldr	r0, [pc, #88]	; (800031c <main+0x6c>)
 80002c4:	f000 fb0a 	bl	80008dc <usart2_put>

    // Main loop runs forever
    while(1)
    {
    	while(!post()){
 80002c8:	e004      	b.n	80002d4 <main+0x24>
    		usart2_put("post test has failed please, press any key to re-run\r\n");
 80002ca:	4815      	ldr	r0, [pc, #84]	; (8000320 <main+0x70>)
 80002cc:	f000 fb06 	bl	80008dc <usart2_put>
    		wait();
 80002d0:	f000 fb30 	bl	8000934 <wait>
    	while(!post()){
 80002d4:	f000 f98a 	bl	80005ec <post>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0f5      	beq.n	80002ca <main+0x1a>
    	}
    	usart2_put("post was successful");
 80002de:	4811      	ldr	r0, [pc, #68]	; (8000324 <main+0x74>)
 80002e0:	f000 fafc 	bl	80008dc <usart2_put>
		usart2_put("The Current Lower Limit for the Program is: ");
 80002e4:	4810      	ldr	r0, [pc, #64]	; (8000328 <main+0x78>)
 80002e6:	f000 faf9 	bl	80008dc <usart2_put>
		print_num(curr_min);
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <main+0x7c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 f95e 	bl	80005b0 <print_num>
		usart2_put("\r\n");
 80002f4:	480e      	ldr	r0, [pc, #56]	; (8000330 <main+0x80>)
 80002f6:	f000 faf1 	bl	80008dc <usart2_put>

    	//prompts the user if they would like to update settings
    	curr_min = request_adj(curr_min);
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <main+0x7c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f918 	bl	8000534 <request_adj>
 8000304:	4603      	mov	r3, r0
 8000306:	4a09      	ldr	r2, [pc, #36]	; (800032c <main+0x7c>)
 8000308:	6013      	str	r3, [r2, #0]

    	//start recording
    	record(histogram);
 800030a:	480a      	ldr	r0, [pc, #40]	; (8000334 <main+0x84>)
 800030c:	f000 f84c 	bl	80003a8 <record>

    	//print results.
    	print_hist(histogram);
 8000310:	4808      	ldr	r0, [pc, #32]	; (8000334 <main+0x84>)
 8000312:	f000 f811 	bl	8000338 <print_hist>
    	wait();
 8000316:	f000 fb0d 	bl	8000934 <wait>
    	while(!post()){
 800031a:	e7db      	b.n	80002d4 <main+0x24>
 800031c:	080013d8 	.word	0x080013d8
 8000320:	080013f4 	.word	0x080013f4
 8000324:	0800142c 	.word	0x0800142c
 8000328:	08001440 	.word	0x08001440
 800032c:	20000000 	.word	0x20000000
 8000330:	08001470 	.word	0x08001470
 8000334:	20000088 	.word	0x20000088

08000338 <print_hist>:
    }
}

void print_hist(uint32_t* results){
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	 char s[20] = {0};
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	f107 030c 	add.w	r3, r7, #12
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
	for(int i = 0; i < 100; i++){
 8000352:	2300      	movs	r3, #0
 8000354:	61fb      	str	r3, [r7, #28]
 8000356:	e016      	b.n	8000386 <print_hist+0x4e>
		sprintf(s, "%d:%d\r\n",(int)(i + curr_min),(int)results[i]);
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <print_hist+0x68>)
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	18d1      	adds	r1, r2, r3
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	4413      	add	r3, r2
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f107 0008 	add.w	r0, r7, #8
 800036e:	460a      	mov	r2, r1
 8000370:	490c      	ldr	r1, [pc, #48]	; (80003a4 <print_hist+0x6c>)
 8000372:	f000 fb55 	bl	8000a20 <siprintf>
		usart2_put(s);
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	4618      	mov	r0, r3
 800037c:	f000 faae 	bl	80008dc <usart2_put>
	for(int i = 0; i < 100; i++){
 8000380:	69fb      	ldr	r3, [r7, #28]
 8000382:	3301      	adds	r3, #1
 8000384:	61fb      	str	r3, [r7, #28]
 8000386:	69fb      	ldr	r3, [r7, #28]
 8000388:	2b63      	cmp	r3, #99	; 0x63
 800038a:	dde5      	ble.n	8000358 <print_hist+0x20>
	}
	memset(results, '0', 100);
 800038c:	2264      	movs	r2, #100	; 0x64
 800038e:	2130      	movs	r1, #48	; 0x30
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f000 fb3d 	bl	8000a10 <memset>
}
 8000396:	bf00      	nop
 8000398:	3720      	adds	r7, #32
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000000 	.word	0x20000000
 80003a4:	08001474 	.word	0x08001474

080003a8 <record>:

void record(uint32_t* buff){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	int start_flag = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]
	uint32_t temprg = TIM2->CCR1;
 80003b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ba:	613b      	str	r3, [r7, #16]
	memset(buff, '\0', (sizeof(uint32_t)*101));
 80003bc:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80003c0:	2100      	movs	r1, #0
 80003c2:	6878      	ldr	r0, [r7, #4]
 80003c4:	f000 fb24 	bl	8000a10 <memset>
	for(int buckets = 0; buckets < 1000; buckets++){
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	e03d      	b.n	800044a <record+0xa2>
		if(!start_flag && (TIM2->SR & TIM_SR_CC1IF)){
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d10d      	bne.n	80003f0 <record+0x48>
 80003d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d8:	691b      	ldr	r3, [r3, #16]
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d006      	beq.n	80003f0 <record+0x48>
			start_flag = 1;
 80003e2:	2301      	movs	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
			temprg = TIM2->CCR1;
 80003e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ec:	613b      	str	r3, [r7, #16]
			continue;
 80003ee:	e029      	b.n	8000444 <record+0x9c>
		}
		else if(start_flag && (TIM2->SR & TIM_SR_CC1IF)){
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d026      	beq.n	8000444 <record+0x9c>
 80003f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	f003 0302 	and.w	r3, r3, #2
 8000400:	2b00      	cmp	r3, #0
 8000402:	d01f      	beq.n	8000444 <record+0x9c>
			temprg = TIM2->CCR1 - temprg;
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	613b      	str	r3, [r7, #16]
			if(((temprg - curr_min) > 99) || ((temprg - curr_min) < 0)){
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <record+0xb8>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	693b      	ldr	r3, [r7, #16]
 8000418:	1a9b      	subs	r3, r3, r2
 800041a:	2b63      	cmp	r3, #99	; 0x63
 800041c:	d81a      	bhi.n	8000454 <record+0xac>
				break;
			}
			buff[temprg - (uint32_t)curr_min] += 1;
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <record+0xb8>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	461a      	mov	r2, r3
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <record+0xb8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4619      	mov	r1, r3
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	1a5b      	subs	r3, r3, r1
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	6879      	ldr	r1, [r7, #4]
 800043e:	440b      	add	r3, r1
 8000440:	3201      	adds	r2, #1
 8000442:	601a      	str	r2, [r3, #0]
	for(int buckets = 0; buckets < 1000; buckets++){
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000450:	dbbd      	blt.n	80003ce <record+0x26>
		}
	}
	return;
 8000452:	e000      	b.n	8000456 <record+0xae>
				break;
 8000454:	bf00      	nop
	return;
 8000456:	bf00      	nop
}
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000000 	.word	0x20000000

08000464 <set_timer_base>:

//retrieves the new lower limit from the user 
int set_timer_base(int min){
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	char input[6] = {0};
 800046c:	2300      	movs	r3, #0
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	2300      	movs	r3, #0
 8000472:	81bb      	strh	r3, [r7, #12]
	//runs until user gives proper lower limit
	while(1){
		usart2_put("Please Provide a Lower Limit Between 50 & 9950us\r\n");
 8000474:	4810      	ldr	r0, [pc, #64]	; (80004b8 <set_timer_base+0x54>)
 8000476:	f000 fa31 	bl	80008dc <usart2_put>
		usart2_put("The Lower Limit: ");
 800047a:	4810      	ldr	r0, [pc, #64]	; (80004bc <set_timer_base+0x58>)
 800047c:	f000 fa2e 	bl	80008dc <usart2_put>
		get_line(input, 6);
 8000480:	f107 0308 	add.w	r3, r7, #8
 8000484:	2106      	movs	r1, #6
 8000486:	4618      	mov	r0, r3
 8000488:	f000 f81a 	bl	80004c0 <get_line>
		min = atoi(input);
 800048c:	f107 0308 	add.w	r3, r7, #8
 8000490:	4618      	mov	r0, r3
 8000492:	f000 fa94 	bl	80009be <atoi>
 8000496:	6078      	str	r0, [r7, #4]
		if(min >= 50 && min <= 9950){break;}
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b31      	cmp	r3, #49	; 0x31
 800049c:	ddea      	ble.n	8000474 <set_timer_base+0x10>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f242 62de 	movw	r2, #9950	; 0x26de
 80004a4:	4293      	cmp	r3, r2
 80004a6:	dd00      	ble.n	80004aa <set_timer_base+0x46>
		usart2_put("Please Provide a Lower Limit Between 50 & 9950us\r\n");
 80004a8:	e7e4      	b.n	8000474 <set_timer_base+0x10>
		if(min >= 50 && min <= 9950){break;}
 80004aa:	bf00      	nop
	}
	return min;
 80004ac:	687b      	ldr	r3, [r7, #4]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	0800147c 	.word	0x0800147c
 80004bc:	080014b0 	.word	0x080014b0

080004c0 <get_line>:

//gets a string of text from the user in teh putty terminal
void get_line(char* buf, int len){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	int i = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
	while(i < len){
 80004ce:	e023      	b.n	8000518 <get_line+0x58>
		char ch = usart2_getc();
 80004d0:	f000 fa1a 	bl	8000908 <usart2_getc>
 80004d4:	4603      	mov	r3, r0
 80004d6:	72fb      	strb	r3, [r7, #11]
		if(ch == '\r' || ch == '\n'){
 80004d8:	7afb      	ldrb	r3, [r7, #11]
 80004da:	2b0d      	cmp	r3, #13
 80004dc:	d002      	beq.n	80004e4 <get_line+0x24>
 80004de:	7afb      	ldrb	r3, [r7, #11]
 80004e0:	2b0a      	cmp	r3, #10
 80004e2:	d103      	bne.n	80004ec <get_line+0x2c>
			usart2_put("\r\n");
 80004e4:	4812      	ldr	r0, [pc, #72]	; (8000530 <get_line+0x70>)
 80004e6:	f000 f9f9 	bl	80008dc <usart2_put>
			break;
 80004ea:	e019      	b.n	8000520 <get_line+0x60>
		}
		else if(ch < 48 || ch > 57){
 80004ec:	7afb      	ldrb	r3, [r7, #11]
 80004ee:	2b2f      	cmp	r3, #47	; 0x2f
 80004f0:	d902      	bls.n	80004f8 <get_line+0x38>
 80004f2:	7afb      	ldrb	r3, [r7, #11]
 80004f4:	2b39      	cmp	r3, #57	; 0x39
 80004f6:	d903      	bls.n	8000500 <get_line+0x40>
			i--;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	60fb      	str	r3, [r7, #12]
			continue;
 80004fe:	e00b      	b.n	8000518 <get_line+0x58>
		}
		usart2_putc(ch);
 8000500:	7afb      	ldrb	r3, [r7, #11]
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f9d0 	bl	80008a8 <usart2_putc>
		buf[i] = ch;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	7afa      	ldrb	r2, [r7, #11]
 8000510:	701a      	strb	r2, [r3, #0]
		i++;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
	while(i < len){
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	dbd7      	blt.n	80004d0 <get_line+0x10>
	}
	usart2_put("\r\n");
 8000520:	4803      	ldr	r0, [pc, #12]	; (8000530 <get_line+0x70>)
 8000522:	f000 f9db 	bl	80008dc <usart2_put>
}
 8000526:	bf00      	nop
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	08001470 	.word	0x08001470

08000534 <request_adj>:

//prompts the user if they want to change limit settings and responds accordingly
int request_adj(int per){
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	char c = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]
	usart2_put("The Current lower limit is: ");
 8000540:	4818      	ldr	r0, [pc, #96]	; (80005a4 <request_adj+0x70>)
 8000542:	f000 f9cb 	bl	80008dc <usart2_put>
	print_num(per);
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f832 	bl	80005b0 <print_num>
	usart2_put("\r\nWould You Like To Update This Limit (y/n)?: ");
 800054c:	4816      	ldr	r0, [pc, #88]	; (80005a8 <request_adj+0x74>)
 800054e:	f000 f9c5 	bl	80008dc <usart2_put>
	while(c == 0x00){
 8000552:	e01e      	b.n	8000592 <request_adj+0x5e>
		c = usart2_getc();
 8000554:	f000 f9d8 	bl	8000908 <usart2_getc>
 8000558:	4603      	mov	r3, r0
 800055a:	73fb      	strb	r3, [r7, #15]
		if(c == 'y'){
 800055c:	7bfb      	ldrb	r3, [r7, #15]
 800055e:	2b79      	cmp	r3, #121	; 0x79
 8000560:	d10c      	bne.n	800057c <request_adj+0x48>
			usart2_putc(c);
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 f99f 	bl	80008a8 <usart2_putc>
			usart2_put("\r\n");
 800056a:	4810      	ldr	r0, [pc, #64]	; (80005ac <request_adj+0x78>)
 800056c:	f000 f9b6 	bl	80008dc <usart2_put>
			per = set_timer_base(per);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff ff77 	bl	8000464 <set_timer_base>
 8000576:	6078      	str	r0, [r7, #4]
			return per;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	e00e      	b.n	800059a <request_adj+0x66>
		}
		else if(c == 'n'){
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	2b6e      	cmp	r3, #110	; 0x6e
 8000580:	d104      	bne.n	800058c <request_adj+0x58>
			usart2_putc(c);
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f98f 	bl	80008a8 <usart2_putc>
			break;
 800058a:	e005      	b.n	8000598 <request_adj+0x64>
		}
		c = 0x00;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
		continue; //do nothing and print nothing until y/n is typed
 8000590:	bf00      	nop
	while(c == 0x00){
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0dd      	beq.n	8000554 <request_adj+0x20>
	}
	return per; 
 8000598:	687b      	ldr	r3, [r7, #4]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	080014c4 	.word	0x080014c4
 80005a8:	080014e4 	.word	0x080014e4
 80005ac:	08001470 	.word	0x08001470

080005b0 <print_num>:

void print_num(int min){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	char num[10] = {0};
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	809a      	strh	r2, [r3, #4]
	sprintf(num, "%d", min);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	4906      	ldr	r1, [pc, #24]	; (80005e8 <print_num+0x38>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa26 	bl	8000a20 <siprintf>
	usart2_put(num);
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f97f 	bl	80008dc <usart2_put>
}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	08001514 	.word	0x08001514

080005ec <post>:
#include "../inc/post.h"

int post(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	timer_init();
 80005f2:	f000 f857 	bl	80006a4 <timer_init>
	uint32_t cnt = TIM2->CCR1;
 80005f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fc:	607b      	str	r3, [r7, #4]
	while((TIM2->CNT <= cnt + 100000) && !(TIM2->SR & TIM_SR_CC1IF)){
 80005fe:	e000      	b.n	8000602 <post+0x16>
			continue;
 8000600:	bf00      	nop
	while((TIM2->CNT <= cnt + 100000) && !(TIM2->SR & TIM_SR_CC1IF)){
 8000602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800060e:	33a0      	adds	r3, #160	; 0xa0
 8000610:	429a      	cmp	r2, r3
 8000612:	d806      	bhi.n	8000622 <post+0x36>
 8000614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000618:	691b      	ldr	r3, [r3, #16]
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0ee      	beq.n	8000600 <post+0x14>
	}
	if((TIM2->SR & TIM_SR_CC1IF)){
 8000622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	f003 0302 	and.w	r3, r3, #2
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <post+0x48>
			return 1;	
 8000630:	2301      	movs	r3, #1
 8000632:	e000      	b.n	8000636 <post+0x4a>
	}
	return 0;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <SystemInit+0x5c>)
 8000646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <SystemInit+0x5c>)
 800064c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <SystemInit+0x60>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <SystemInit+0x60>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <SystemInit+0x60>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <SystemInit+0x60>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <SystemInit+0x60>)
 800066c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000670:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000674:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <SystemInit+0x60>)
 8000678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800067c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <SystemInit+0x60>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <SystemInit+0x60>)
 8000684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000688:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <SystemInit+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	40021000 	.word	0x40021000

080006a4 <timer_init>:
#include "timers.h"

/*
/initializes TIM2 for PA0 to generate an interrupt every ms
*/
void timer_init(){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	//enable timer 2 module
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <timer_init+0xa4>)
 80006aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ac:	4a26      	ldr	r2, [pc, #152]	; (8000748 <timer_init+0xa4>)
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	6593      	str	r3, [r2, #88]	; 0x58
	
	TIM2->CR1 &= ~(TIM_CR1_CEN); //disables the timer for config.
 80006b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006be:	f023 0301 	bic.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]
	TIM2->CCER &= ~(TIM_CCER_CC1E); //disables input capture mode for config
 80006c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ce:	f023 0301 	bic.w	r3, r3, #1
 80006d2:	6213      	str	r3, [r2, #32]
	
	//selects active input mode
	TIM2->CCMR1 |= (TIM_CCMR1_CC1S_0);
 80006d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6193      	str	r3, [r2, #24]

	//no filter
	TIM2->CCMR1 &= ~TIM_CCMR1_IC1F;
 80006e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006f2:	6193      	str	r3, [r2, #24]

	TIM2->PSC =  15;
 80006f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f8:	220f      	movs	r2, #15
 80006fa:	629a      	str	r2, [r3, #40]	; 0x28

	//no prescalar
	TIM2->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80006fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000706:	f023 030c 	bic.w	r3, r3, #12
 800070a:	6193      	str	r3, [r2, #24]
	
	//select edge of active transition in ccer with cc1p/np
	TIM2->CCER |= (TIM_CCER_CC1NP|TIM_CCER_CC1P);	
 800070c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000710:	6a1b      	ldr	r3, [r3, #32]
 8000712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000716:	f043 030a 	orr.w	r3, r3, #10
 800071a:	6213      	str	r3, [r2, #32]

	//enables capture from the counter into the capture register
	TIM2->CCER |= (TIM_CCER_CC1E);
 800071c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	6213      	str	r3, [r2, #32]
	
	TIM2->CR1 |= (TIM_CR1_CEN); //re-enable timer
 800072c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	6013      	str	r3, [r2, #0]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <usart2_init>:
#include "usart.h"

void usart2_init(){
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
	// enable USART2 CLK
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000750:	4b50      	ldr	r3, [pc, #320]	; (8000894 <usart2_init+0x148>)
 8000752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000754:	4a4f      	ldr	r2, [pc, #316]	; (8000894 <usart2_init+0x148>)
 8000756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075a:	6593      	str	r3, [r2, #88]	; 0x58

	// enable GPIOA CLK
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800075c:	4b4d      	ldr	r3, [pc, #308]	; (8000894 <usart2_init+0x148>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000760:	4a4c      	ldr	r2, [pc, #304]	; (8000894 <usart2_init+0x148>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	64d3      	str	r3, [r2, #76]	; 0x4c
	
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2_Msk | GPIO_OSPEEDR_OSPEED3_Msk);
 8000768:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000776:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED2_Pos;
 8000778:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800077c:	689b      	ldr	r3, [r3, #8]
 800077e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000782:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000786:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED3_Pos;
 8000788:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000792:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000796:	6093      	str	r3, [r2, #8]

	/* Configure the IO Output Type to Push-Pull */
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2_Msk | GPIO_OTYPER_OT3_Msk);
 8000798:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007a2:	f023 030c 	bic.w	r3, r3, #12
 80007a6:	6053      	str	r3, [r2, #4]

	/* Set the Pull-up/down  to none */
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
 80007a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007b6:	60d3      	str	r3, [r2, #12]

	/* Configure Alternate functions */
	GPIOA->AFR[0] &=  ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);
 80007b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007bc:	6a1b      	ldr	r3, [r3, #32]
 80007be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80007c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL2_Pos;
 80007c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80007d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL3_Pos;
 80007d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007dc:	6a1b      	ldr	r3, [r3, #32]
 80007de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007e2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80007e6:	6213      	str	r3, [r2, #32]

	/* Configure IO Direction mode to Alternate */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk  | GPIO_MODER_MODE3_Msk);
 80007e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE2_Pos;
 80007f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000802:	f043 0320 	orr.w	r3, r3, #32
 8000806:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE3_Pos;
 8000808:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000816:	6013      	str	r3, [r2, #0]
	
	//disable usart for configuration
	USART2->CR1 &= ~USART_CR1_UE;
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <usart2_init+0x14c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <usart2_init+0x14c>)
 800081e:	f023 0301 	bic.w	r3, r3, #1
 8000822:	6013      	str	r3, [r2, #0]
	
	//8 bit word, no parity, disable interrupts, transmitter, and receiver
	USART2->CR1 &= ~(USART_CR1_M1|USART_CR1_M0|USART_CR1_PCE|USART_CR1_TE|USART_CR1_RE);
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <usart2_init+0x14c>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	491b      	ldr	r1, [pc, #108]	; (8000898 <usart2_init+0x14c>)
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <usart2_init+0x150>)
 800082c:	4013      	ands	r3, r2
 800082e:	600b      	str	r3, [r1, #0]
	USART2->CR1 &= ~(0x1F0);	
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <usart2_init+0x14c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a18      	ldr	r2, [pc, #96]	; (8000898 <usart2_init+0x14c>)
 8000836:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800083a:	6013      	str	r3, [r2, #0]
	
	//one stop bit
	USART2->CR2 &= ~(3 << 12);
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <usart2_init+0x14c>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	4a15      	ldr	r2, [pc, #84]	; (8000898 <usart2_init+0x14c>)
 8000842:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000846:	6053      	str	r3, [r2, #4]
	
	//baud rate - 115200
	USART2->BRR = (uint32_t)(SystemCoreClock/115200);
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <usart2_init+0x154>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <usart2_init+0x14c>)
 800084e:	4915      	ldr	r1, [pc, #84]	; (80008a4 <usart2_init+0x158>)
 8000850:	fba1 1303 	umull	r1, r3, r1, r3
 8000854:	0c1b      	lsrs	r3, r3, #16
 8000856:	60d3      	str	r3, [r2, #12]
	
  /* In asynchronous mode, the following bits must be kept cleared:
	 *  - LINEN and CLKEN bits in the USART_CR2 register
	 *  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <usart2_init+0x14c>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <usart2_init+0x14c>)
 800085e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000862:	6053      	str	r3, [r2, #4]
	USART2->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <usart2_init+0x14c>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <usart2_init+0x14c>)
 800086a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800086e:	6093      	str	r3, [r2, #8]
	
	//re-enable transmitter and receiver
	USART2->CR1 |= (USART_CR1_TE|USART_CR1_RE);
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <usart2_init+0x14c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a08      	ldr	r2, [pc, #32]	; (8000898 <usart2_init+0x14c>)
 8000876:	f043 030c 	orr.w	r3, r3, #12
 800087a:	6013      	str	r3, [r2, #0]
	
	//lastly re-enable usart
	USART2->CR1 |= USART_CR1_UE;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <usart2_init+0x14c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <usart2_init+0x14c>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000
 8000898:	40004400 	.word	0x40004400
 800089c:	efffebf3 	.word	0xefffebf3
 80008a0:	20000004 	.word	0x20000004
 80008a4:	91a2b3c5 	.word	0x91a2b3c5

080008a8 <usart2_putc>:
	
//prints a single character over serial
void usart2_putc(char ch){
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
		while (!(USART2->ISR & USART_ISR_TXE)){continue;}
 80008b2:	e000      	b.n	80008b6 <usart2_putc+0xe>
 80008b4:	bf00      	nop
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <usart2_putc+0x30>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f8      	beq.n	80008b4 <usart2_putc+0xc>
		USART2->TDR = ch;
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <usart2_putc+0x30>)
 80008c4:	79fa      	ldrb	r2, [r7, #7]
 80008c6:	b292      	uxth	r2, r2
 80008c8:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40004400 	.word	0x40004400

080008dc <usart2_put>:

//prints an entire string to serial
void usart2_put(char* str){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	/*use putchar to print string*/
	while(*str){
 80008e4:	e007      	b.n	80008f6 <usart2_put+0x1a>
		usart2_putc(*str);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ffdc 	bl	80008a8 <usart2_putc>
		str++;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
	while(*str){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1f3      	bne.n	80008e6 <usart2_put+0xa>
	}	
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <usart2_getc>:

//gets a single character over serial
char usart2_getc(){
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USART2->ISR & USART_ISR_RXNE)){continue;}  // Wait until RXNE (RX not empty) bit is set
 800090c:	e000      	b.n	8000910 <usart2_getc+0x8>
 800090e:	bf00      	nop
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <usart2_getc+0x28>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	f003 0320 	and.w	r3, r3, #32
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f8      	beq.n	800090e <usart2_getc+0x6>
	// USART resets the RXNE flag automatically after reading DR
	return (char)(USART2->RDR);
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <usart2_getc+0x28>)
 800091e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000920:	b29b      	uxth	r3, r3
 8000922:	b2db      	uxtb	r3, r3
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400

08000934 <wait>:

//wait indefinitely until user presses any key
void wait(){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	char c = 0x00;
 800093a:	2300      	movs	r3, #0
 800093c:	71fb      	strb	r3, [r7, #7]
	usart2_put("press any key to re-run the program...");
 800093e:	4809      	ldr	r0, [pc, #36]	; (8000964 <wait+0x30>)
 8000940:	f7ff ffcc 	bl	80008dc <usart2_put>
	while (c == 0x00){
 8000944:	e003      	b.n	800094e <wait+0x1a>
		c = usart2_getc();
 8000946:	f7ff ffdf 	bl	8000908 <usart2_getc>
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	while (c == 0x00){
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0f8      	beq.n	8000946 <wait+0x12>
	}
	usart2_put("\r\n ");
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <wait+0x34>)
 8000956:	f7ff ffc1 	bl	80008dc <usart2_put>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	08001518 	.word	0x08001518
 8000968:	08001540 	.word	0x08001540

0800096c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800096c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000970:	f7ff fe66 	bl	8000640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000974:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000976:	e003      	b.n	8000980 <LoopCopyDataInit>

08000978 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800097a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800097c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800097e:	3104      	adds	r1, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000980:	480a      	ldr	r0, [pc, #40]	; (80009ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000984:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000986:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000988:	d3f6      	bcc.n	8000978 <CopyDataInit>
	ldr	r2, =_sbss
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800098c:	e002      	b.n	8000994 <LoopFillZerobss>

0800098e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800098e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000990:	f842 3b04 	str.w	r3, [r2], #4

08000994 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000996:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000998:	d3f9      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099a:	f000 f815 	bl	80009c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800099e:	f7ff fc87 	bl	80002b0 <main>

080009a2 <LoopForever>:

LoopForever:
    b LoopForever
 80009a2:	e7fe      	b.n	80009a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009a4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80009a8:	08001680 	.word	0x08001680
	ldr	r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009b0:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 80009b4:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 80009b8:	20000238 	.word	0x20000238

080009bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009bc:	e7fe      	b.n	80009bc <ADC1_2_IRQHandler>

080009be <atoi>:
 80009be:	220a      	movs	r2, #10
 80009c0:	2100      	movs	r1, #0
 80009c2:	f000 b8d1 	b.w	8000b68 <strtol>
	...

080009c8 <__libc_init_array>:
 80009c8:	b570      	push	{r4, r5, r6, lr}
 80009ca:	4d0d      	ldr	r5, [pc, #52]	; (8000a00 <__libc_init_array+0x38>)
 80009cc:	4c0d      	ldr	r4, [pc, #52]	; (8000a04 <__libc_init_array+0x3c>)
 80009ce:	1b64      	subs	r4, r4, r5
 80009d0:	10a4      	asrs	r4, r4, #2
 80009d2:	2600      	movs	r6, #0
 80009d4:	42a6      	cmp	r6, r4
 80009d6:	d109      	bne.n	80009ec <__libc_init_array+0x24>
 80009d8:	4d0b      	ldr	r5, [pc, #44]	; (8000a08 <__libc_init_array+0x40>)
 80009da:	4c0c      	ldr	r4, [pc, #48]	; (8000a0c <__libc_init_array+0x44>)
 80009dc:	f000 fcf0 	bl	80013c0 <_init>
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	10a4      	asrs	r4, r4, #2
 80009e4:	2600      	movs	r6, #0
 80009e6:	42a6      	cmp	r6, r4
 80009e8:	d105      	bne.n	80009f6 <__libc_init_array+0x2e>
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f0:	4798      	blx	r3
 80009f2:	3601      	adds	r6, #1
 80009f4:	e7ee      	b.n	80009d4 <__libc_init_array+0xc>
 80009f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009fa:	4798      	blx	r3
 80009fc:	3601      	adds	r6, #1
 80009fe:	e7f2      	b.n	80009e6 <__libc_init_array+0x1e>
 8000a00:	08001678 	.word	0x08001678
 8000a04:	08001678 	.word	0x08001678
 8000a08:	08001678 	.word	0x08001678
 8000a0c:	0800167c 	.word	0x0800167c

08000a10 <memset>:
 8000a10:	4402      	add	r2, r0
 8000a12:	4603      	mov	r3, r0
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d100      	bne.n	8000a1a <memset+0xa>
 8000a18:	4770      	bx	lr
 8000a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a1e:	e7f9      	b.n	8000a14 <memset+0x4>

08000a20 <siprintf>:
 8000a20:	b40e      	push	{r1, r2, r3}
 8000a22:	b500      	push	{lr}
 8000a24:	b09c      	sub	sp, #112	; 0x70
 8000a26:	ab1d      	add	r3, sp, #116	; 0x74
 8000a28:	9002      	str	r0, [sp, #8]
 8000a2a:	9006      	str	r0, [sp, #24]
 8000a2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <siprintf+0x38>)
 8000a32:	9107      	str	r1, [sp, #28]
 8000a34:	9104      	str	r1, [sp, #16]
 8000a36:	4909      	ldr	r1, [pc, #36]	; (8000a5c <siprintf+0x3c>)
 8000a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a3c:	9105      	str	r1, [sp, #20]
 8000a3e:	6800      	ldr	r0, [r0, #0]
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	a902      	add	r1, sp, #8
 8000a44:	f000 f8fc 	bl	8000c40 <_svfiprintf_r>
 8000a48:	9b02      	ldr	r3, [sp, #8]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	b01c      	add	sp, #112	; 0x70
 8000a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a54:	b003      	add	sp, #12
 8000a56:	4770      	bx	lr
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	ffff0208 	.word	0xffff0208

08000a60 <_strtol_l.isra.0>:
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a66:	d001      	beq.n	8000a6c <_strtol_l.isra.0+0xc>
 8000a68:	2b24      	cmp	r3, #36	; 0x24
 8000a6a:	d906      	bls.n	8000a7a <_strtol_l.isra.0+0x1a>
 8000a6c:	f000 f886 	bl	8000b7c <__errno>
 8000a70:	2316      	movs	r3, #22
 8000a72:	6003      	str	r3, [r0, #0]
 8000a74:	2000      	movs	r0, #0
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	4f3a      	ldr	r7, [pc, #232]	; (8000b64 <_strtol_l.isra.0+0x104>)
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	4676      	mov	r6, lr
 8000a80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8000a84:	5de5      	ldrb	r5, [r4, r7]
 8000a86:	f015 0508 	ands.w	r5, r5, #8
 8000a8a:	d1f8      	bne.n	8000a7e <_strtol_l.isra.0+0x1e>
 8000a8c:	2c2d      	cmp	r4, #45	; 0x2d
 8000a8e:	d134      	bne.n	8000afa <_strtol_l.isra.0+0x9a>
 8000a90:	f89e 4000 	ldrb.w	r4, [lr]
 8000a94:	f04f 0801 	mov.w	r8, #1
 8000a98:	f106 0e02 	add.w	lr, r6, #2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d05c      	beq.n	8000b5a <_strtol_l.isra.0+0xfa>
 8000aa0:	2b10      	cmp	r3, #16
 8000aa2:	d10c      	bne.n	8000abe <_strtol_l.isra.0+0x5e>
 8000aa4:	2c30      	cmp	r4, #48	; 0x30
 8000aa6:	d10a      	bne.n	8000abe <_strtol_l.isra.0+0x5e>
 8000aa8:	f89e 4000 	ldrb.w	r4, [lr]
 8000aac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8000ab0:	2c58      	cmp	r4, #88	; 0x58
 8000ab2:	d14d      	bne.n	8000b50 <_strtol_l.isra.0+0xf0>
 8000ab4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8000ab8:	2310      	movs	r3, #16
 8000aba:	f10e 0e02 	add.w	lr, lr, #2
 8000abe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8000ac2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	fbbc f9f3 	udiv	r9, ip, r3
 8000acc:	4635      	mov	r5, r6
 8000ace:	fb03 ca19 	mls	sl, r3, r9, ip
 8000ad2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8000ad6:	2f09      	cmp	r7, #9
 8000ad8:	d818      	bhi.n	8000b0c <_strtol_l.isra.0+0xac>
 8000ada:	463c      	mov	r4, r7
 8000adc:	42a3      	cmp	r3, r4
 8000ade:	dd24      	ble.n	8000b2a <_strtol_l.isra.0+0xca>
 8000ae0:	2e00      	cmp	r6, #0
 8000ae2:	db1f      	blt.n	8000b24 <_strtol_l.isra.0+0xc4>
 8000ae4:	45a9      	cmp	r9, r5
 8000ae6:	d31d      	bcc.n	8000b24 <_strtol_l.isra.0+0xc4>
 8000ae8:	d101      	bne.n	8000aee <_strtol_l.isra.0+0x8e>
 8000aea:	45a2      	cmp	sl, r4
 8000aec:	db1a      	blt.n	8000b24 <_strtol_l.isra.0+0xc4>
 8000aee:	fb05 4503 	mla	r5, r5, r3, r4
 8000af2:	2601      	movs	r6, #1
 8000af4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8000af8:	e7eb      	b.n	8000ad2 <_strtol_l.isra.0+0x72>
 8000afa:	2c2b      	cmp	r4, #43	; 0x2b
 8000afc:	bf08      	it	eq
 8000afe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8000b02:	46a8      	mov	r8, r5
 8000b04:	bf08      	it	eq
 8000b06:	f106 0e02 	addeq.w	lr, r6, #2
 8000b0a:	e7c7      	b.n	8000a9c <_strtol_l.isra.0+0x3c>
 8000b0c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8000b10:	2f19      	cmp	r7, #25
 8000b12:	d801      	bhi.n	8000b18 <_strtol_l.isra.0+0xb8>
 8000b14:	3c37      	subs	r4, #55	; 0x37
 8000b16:	e7e1      	b.n	8000adc <_strtol_l.isra.0+0x7c>
 8000b18:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8000b1c:	2f19      	cmp	r7, #25
 8000b1e:	d804      	bhi.n	8000b2a <_strtol_l.isra.0+0xca>
 8000b20:	3c57      	subs	r4, #87	; 0x57
 8000b22:	e7db      	b.n	8000adc <_strtol_l.isra.0+0x7c>
 8000b24:	f04f 36ff 	mov.w	r6, #4294967295
 8000b28:	e7e4      	b.n	8000af4 <_strtol_l.isra.0+0x94>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	da05      	bge.n	8000b3a <_strtol_l.isra.0+0xda>
 8000b2e:	2322      	movs	r3, #34	; 0x22
 8000b30:	6003      	str	r3, [r0, #0]
 8000b32:	4665      	mov	r5, ip
 8000b34:	b942      	cbnz	r2, 8000b48 <_strtol_l.isra.0+0xe8>
 8000b36:	4628      	mov	r0, r5
 8000b38:	e79d      	b.n	8000a76 <_strtol_l.isra.0+0x16>
 8000b3a:	f1b8 0f00 	cmp.w	r8, #0
 8000b3e:	d000      	beq.n	8000b42 <_strtol_l.isra.0+0xe2>
 8000b40:	426d      	negs	r5, r5
 8000b42:	2a00      	cmp	r2, #0
 8000b44:	d0f7      	beq.n	8000b36 <_strtol_l.isra.0+0xd6>
 8000b46:	b10e      	cbz	r6, 8000b4c <_strtol_l.isra.0+0xec>
 8000b48:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000b4c:	6011      	str	r1, [r2, #0]
 8000b4e:	e7f2      	b.n	8000b36 <_strtol_l.isra.0+0xd6>
 8000b50:	2430      	movs	r4, #48	; 0x30
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1b3      	bne.n	8000abe <_strtol_l.isra.0+0x5e>
 8000b56:	2308      	movs	r3, #8
 8000b58:	e7b1      	b.n	8000abe <_strtol_l.isra.0+0x5e>
 8000b5a:	2c30      	cmp	r4, #48	; 0x30
 8000b5c:	d0a4      	beq.n	8000aa8 <_strtol_l.isra.0+0x48>
 8000b5e:	230a      	movs	r3, #10
 8000b60:	e7ad      	b.n	8000abe <_strtol_l.isra.0+0x5e>
 8000b62:	bf00      	nop
 8000b64:	08001545 	.word	0x08001545

08000b68 <strtol>:
 8000b68:	4613      	mov	r3, r2
 8000b6a:	460a      	mov	r2, r1
 8000b6c:	4601      	mov	r1, r0
 8000b6e:	4802      	ldr	r0, [pc, #8]	; (8000b78 <strtol+0x10>)
 8000b70:	6800      	ldr	r0, [r0, #0]
 8000b72:	f7ff bf75 	b.w	8000a60 <_strtol_l.isra.0>
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008

08000b7c <__errno>:
 8000b7c:	4b01      	ldr	r3, [pc, #4]	; (8000b84 <__errno+0x8>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008

08000b88 <__ssputs_r>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	688e      	ldr	r6, [r1, #8]
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	4682      	mov	sl, r0
 8000b92:	460c      	mov	r4, r1
 8000b94:	4690      	mov	r8, r2
 8000b96:	461f      	mov	r7, r3
 8000b98:	d838      	bhi.n	8000c0c <__ssputs_r+0x84>
 8000b9a:	898a      	ldrh	r2, [r1, #12]
 8000b9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000ba0:	d032      	beq.n	8000c08 <__ssputs_r+0x80>
 8000ba2:	6825      	ldr	r5, [r4, #0]
 8000ba4:	6909      	ldr	r1, [r1, #16]
 8000ba6:	eba5 0901 	sub.w	r9, r5, r1
 8000baa:	6965      	ldr	r5, [r4, #20]
 8000bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000bb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	444b      	add	r3, r9
 8000bb8:	106d      	asrs	r5, r5, #1
 8000bba:	429d      	cmp	r5, r3
 8000bbc:	bf38      	it	cc
 8000bbe:	461d      	movcc	r5, r3
 8000bc0:	0553      	lsls	r3, r2, #21
 8000bc2:	d531      	bpl.n	8000c28 <__ssputs_r+0xa0>
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f000 fb47 	bl	8001258 <_malloc_r>
 8000bca:	4606      	mov	r6, r0
 8000bcc:	b950      	cbnz	r0, 8000be4 <__ssputs_r+0x5c>
 8000bce:	230c      	movs	r3, #12
 8000bd0:	f8ca 3000 	str.w	r3, [sl]
 8000bd4:	89a3      	ldrh	r3, [r4, #12]
 8000bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bda:	81a3      	strh	r3, [r4, #12]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be4:	6921      	ldr	r1, [r4, #16]
 8000be6:	464a      	mov	r2, r9
 8000be8:	f000 fabe 	bl	8001168 <memcpy>
 8000bec:	89a3      	ldrh	r3, [r4, #12]
 8000bee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf6:	81a3      	strh	r3, [r4, #12]
 8000bf8:	6126      	str	r6, [r4, #16]
 8000bfa:	6165      	str	r5, [r4, #20]
 8000bfc:	444e      	add	r6, r9
 8000bfe:	eba5 0509 	sub.w	r5, r5, r9
 8000c02:	6026      	str	r6, [r4, #0]
 8000c04:	60a5      	str	r5, [r4, #8]
 8000c06:	463e      	mov	r6, r7
 8000c08:	42be      	cmp	r6, r7
 8000c0a:	d900      	bls.n	8000c0e <__ssputs_r+0x86>
 8000c0c:	463e      	mov	r6, r7
 8000c0e:	4632      	mov	r2, r6
 8000c10:	6820      	ldr	r0, [r4, #0]
 8000c12:	4641      	mov	r1, r8
 8000c14:	f000 fab6 	bl	8001184 <memmove>
 8000c18:	68a3      	ldr	r3, [r4, #8]
 8000c1a:	6822      	ldr	r2, [r4, #0]
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	4432      	add	r2, r6
 8000c20:	60a3      	str	r3, [r4, #8]
 8000c22:	6022      	str	r2, [r4, #0]
 8000c24:	2000      	movs	r0, #0
 8000c26:	e7db      	b.n	8000be0 <__ssputs_r+0x58>
 8000c28:	462a      	mov	r2, r5
 8000c2a:	f000 fb6f 	bl	800130c <_realloc_r>
 8000c2e:	4606      	mov	r6, r0
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d1e1      	bne.n	8000bf8 <__ssputs_r+0x70>
 8000c34:	6921      	ldr	r1, [r4, #16]
 8000c36:	4650      	mov	r0, sl
 8000c38:	f000 fabe 	bl	80011b8 <_free_r>
 8000c3c:	e7c7      	b.n	8000bce <__ssputs_r+0x46>
	...

08000c40 <_svfiprintf_r>:
 8000c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c44:	4698      	mov	r8, r3
 8000c46:	898b      	ldrh	r3, [r1, #12]
 8000c48:	061b      	lsls	r3, r3, #24
 8000c4a:	b09d      	sub	sp, #116	; 0x74
 8000c4c:	4607      	mov	r7, r0
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4614      	mov	r4, r2
 8000c52:	d50e      	bpl.n	8000c72 <_svfiprintf_r+0x32>
 8000c54:	690b      	ldr	r3, [r1, #16]
 8000c56:	b963      	cbnz	r3, 8000c72 <_svfiprintf_r+0x32>
 8000c58:	2140      	movs	r1, #64	; 0x40
 8000c5a:	f000 fafd 	bl	8001258 <_malloc_r>
 8000c5e:	6028      	str	r0, [r5, #0]
 8000c60:	6128      	str	r0, [r5, #16]
 8000c62:	b920      	cbnz	r0, 8000c6e <_svfiprintf_r+0x2e>
 8000c64:	230c      	movs	r3, #12
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	e0d1      	b.n	8000e12 <_svfiprintf_r+0x1d2>
 8000c6e:	2340      	movs	r3, #64	; 0x40
 8000c70:	616b      	str	r3, [r5, #20]
 8000c72:	2300      	movs	r3, #0
 8000c74:	9309      	str	r3, [sp, #36]	; 0x24
 8000c76:	2320      	movs	r3, #32
 8000c78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c80:	2330      	movs	r3, #48	; 0x30
 8000c82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000e2c <_svfiprintf_r+0x1ec>
 8000c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c8a:	f04f 0901 	mov.w	r9, #1
 8000c8e:	4623      	mov	r3, r4
 8000c90:	469a      	mov	sl, r3
 8000c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c96:	b10a      	cbz	r2, 8000c9c <_svfiprintf_r+0x5c>
 8000c98:	2a25      	cmp	r2, #37	; 0x25
 8000c9a:	d1f9      	bne.n	8000c90 <_svfiprintf_r+0x50>
 8000c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8000ca0:	d00b      	beq.n	8000cba <_svfiprintf_r+0x7a>
 8000ca2:	465b      	mov	r3, fp
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	4638      	mov	r0, r7
 8000caa:	f7ff ff6d 	bl	8000b88 <__ssputs_r>
 8000cae:	3001      	adds	r0, #1
 8000cb0:	f000 80aa 	beq.w	8000e08 <_svfiprintf_r+0x1c8>
 8000cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cb6:	445a      	add	r2, fp
 8000cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8000cba:	f89a 3000 	ldrb.w	r3, [sl]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 80a2 	beq.w	8000e08 <_svfiprintf_r+0x1c8>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cce:	f10a 0a01 	add.w	sl, sl, #1
 8000cd2:	9304      	str	r3, [sp, #16]
 8000cd4:	9307      	str	r3, [sp, #28]
 8000cd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cda:	931a      	str	r3, [sp, #104]	; 0x68
 8000cdc:	4654      	mov	r4, sl
 8000cde:	2205      	movs	r2, #5
 8000ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ce4:	4851      	ldr	r0, [pc, #324]	; (8000e2c <_svfiprintf_r+0x1ec>)
 8000ce6:	f7ff fa73 	bl	80001d0 <memchr>
 8000cea:	9a04      	ldr	r2, [sp, #16]
 8000cec:	b9d8      	cbnz	r0, 8000d26 <_svfiprintf_r+0xe6>
 8000cee:	06d0      	lsls	r0, r2, #27
 8000cf0:	bf44      	itt	mi
 8000cf2:	2320      	movmi	r3, #32
 8000cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cf8:	0711      	lsls	r1, r2, #28
 8000cfa:	bf44      	itt	mi
 8000cfc:	232b      	movmi	r3, #43	; 0x2b
 8000cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d02:	f89a 3000 	ldrb.w	r3, [sl]
 8000d06:	2b2a      	cmp	r3, #42	; 0x2a
 8000d08:	d015      	beq.n	8000d36 <_svfiprintf_r+0xf6>
 8000d0a:	9a07      	ldr	r2, [sp, #28]
 8000d0c:	4654      	mov	r4, sl
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f04f 0c0a 	mov.w	ip, #10
 8000d14:	4621      	mov	r1, r4
 8000d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d1a:	3b30      	subs	r3, #48	; 0x30
 8000d1c:	2b09      	cmp	r3, #9
 8000d1e:	d94e      	bls.n	8000dbe <_svfiprintf_r+0x17e>
 8000d20:	b1b0      	cbz	r0, 8000d50 <_svfiprintf_r+0x110>
 8000d22:	9207      	str	r2, [sp, #28]
 8000d24:	e014      	b.n	8000d50 <_svfiprintf_r+0x110>
 8000d26:	eba0 0308 	sub.w	r3, r0, r8
 8000d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	9304      	str	r3, [sp, #16]
 8000d32:	46a2      	mov	sl, r4
 8000d34:	e7d2      	b.n	8000cdc <_svfiprintf_r+0x9c>
 8000d36:	9b03      	ldr	r3, [sp, #12]
 8000d38:	1d19      	adds	r1, r3, #4
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	9103      	str	r1, [sp, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bfbb      	ittet	lt
 8000d42:	425b      	neglt	r3, r3
 8000d44:	f042 0202 	orrlt.w	r2, r2, #2
 8000d48:	9307      	strge	r3, [sp, #28]
 8000d4a:	9307      	strlt	r3, [sp, #28]
 8000d4c:	bfb8      	it	lt
 8000d4e:	9204      	strlt	r2, [sp, #16]
 8000d50:	7823      	ldrb	r3, [r4, #0]
 8000d52:	2b2e      	cmp	r3, #46	; 0x2e
 8000d54:	d10c      	bne.n	8000d70 <_svfiprintf_r+0x130>
 8000d56:	7863      	ldrb	r3, [r4, #1]
 8000d58:	2b2a      	cmp	r3, #42	; 0x2a
 8000d5a:	d135      	bne.n	8000dc8 <_svfiprintf_r+0x188>
 8000d5c:	9b03      	ldr	r3, [sp, #12]
 8000d5e:	1d1a      	adds	r2, r3, #4
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	9203      	str	r2, [sp, #12]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bfb8      	it	lt
 8000d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d6c:	3402      	adds	r4, #2
 8000d6e:	9305      	str	r3, [sp, #20]
 8000d70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000e3c <_svfiprintf_r+0x1fc>
 8000d74:	7821      	ldrb	r1, [r4, #0]
 8000d76:	2203      	movs	r2, #3
 8000d78:	4650      	mov	r0, sl
 8000d7a:	f7ff fa29 	bl	80001d0 <memchr>
 8000d7e:	b140      	cbz	r0, 8000d92 <_svfiprintf_r+0x152>
 8000d80:	2340      	movs	r3, #64	; 0x40
 8000d82:	eba0 000a 	sub.w	r0, r0, sl
 8000d86:	fa03 f000 	lsl.w	r0, r3, r0
 8000d8a:	9b04      	ldr	r3, [sp, #16]
 8000d8c:	4303      	orrs	r3, r0
 8000d8e:	3401      	adds	r4, #1
 8000d90:	9304      	str	r3, [sp, #16]
 8000d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d96:	4826      	ldr	r0, [pc, #152]	; (8000e30 <_svfiprintf_r+0x1f0>)
 8000d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d9c:	2206      	movs	r2, #6
 8000d9e:	f7ff fa17 	bl	80001d0 <memchr>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d038      	beq.n	8000e18 <_svfiprintf_r+0x1d8>
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <_svfiprintf_r+0x1f4>)
 8000da8:	bb1b      	cbnz	r3, 8000df2 <_svfiprintf_r+0x1b2>
 8000daa:	9b03      	ldr	r3, [sp, #12]
 8000dac:	3307      	adds	r3, #7
 8000dae:	f023 0307 	bic.w	r3, r3, #7
 8000db2:	3308      	adds	r3, #8
 8000db4:	9303      	str	r3, [sp, #12]
 8000db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000db8:	4433      	add	r3, r6
 8000dba:	9309      	str	r3, [sp, #36]	; 0x24
 8000dbc:	e767      	b.n	8000c8e <_svfiprintf_r+0x4e>
 8000dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	e7a5      	b.n	8000d14 <_svfiprintf_r+0xd4>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	3401      	adds	r4, #1
 8000dcc:	9305      	str	r3, [sp, #20]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f04f 0c0a 	mov.w	ip, #10
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dda:	3a30      	subs	r2, #48	; 0x30
 8000ddc:	2a09      	cmp	r2, #9
 8000dde:	d903      	bls.n	8000de8 <_svfiprintf_r+0x1a8>
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0c5      	beq.n	8000d70 <_svfiprintf_r+0x130>
 8000de4:	9105      	str	r1, [sp, #20]
 8000de6:	e7c3      	b.n	8000d70 <_svfiprintf_r+0x130>
 8000de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000dec:	4604      	mov	r4, r0
 8000dee:	2301      	movs	r3, #1
 8000df0:	e7f0      	b.n	8000dd4 <_svfiprintf_r+0x194>
 8000df2:	ab03      	add	r3, sp, #12
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	462a      	mov	r2, r5
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <_svfiprintf_r+0x1f8>)
 8000dfa:	a904      	add	r1, sp, #16
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	f3af 8000 	nop.w
 8000e02:	1c42      	adds	r2, r0, #1
 8000e04:	4606      	mov	r6, r0
 8000e06:	d1d6      	bne.n	8000db6 <_svfiprintf_r+0x176>
 8000e08:	89ab      	ldrh	r3, [r5, #12]
 8000e0a:	065b      	lsls	r3, r3, #25
 8000e0c:	f53f af2c 	bmi.w	8000c68 <_svfiprintf_r+0x28>
 8000e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e12:	b01d      	add	sp, #116	; 0x74
 8000e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e18:	ab03      	add	r3, sp, #12
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	462a      	mov	r2, r5
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <_svfiprintf_r+0x1f8>)
 8000e20:	a904      	add	r1, sp, #16
 8000e22:	4638      	mov	r0, r7
 8000e24:	f000 f87a 	bl	8000f1c <_printf_i>
 8000e28:	e7eb      	b.n	8000e02 <_svfiprintf_r+0x1c2>
 8000e2a:	bf00      	nop
 8000e2c:	08001645 	.word	0x08001645
 8000e30:	0800164f 	.word	0x0800164f
 8000e34:	00000000 	.word	0x00000000
 8000e38:	08000b89 	.word	0x08000b89
 8000e3c:	0800164b 	.word	0x0800164b

08000e40 <_printf_common>:
 8000e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e44:	4616      	mov	r6, r2
 8000e46:	4699      	mov	r9, r3
 8000e48:	688a      	ldr	r2, [r1, #8]
 8000e4a:	690b      	ldr	r3, [r1, #16]
 8000e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e50:	4293      	cmp	r3, r2
 8000e52:	bfb8      	it	lt
 8000e54:	4613      	movlt	r3, r2
 8000e56:	6033      	str	r3, [r6, #0]
 8000e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	460c      	mov	r4, r1
 8000e60:	b10a      	cbz	r2, 8000e66 <_printf_common+0x26>
 8000e62:	3301      	adds	r3, #1
 8000e64:	6033      	str	r3, [r6, #0]
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	0699      	lsls	r1, r3, #26
 8000e6a:	bf42      	ittt	mi
 8000e6c:	6833      	ldrmi	r3, [r6, #0]
 8000e6e:	3302      	addmi	r3, #2
 8000e70:	6033      	strmi	r3, [r6, #0]
 8000e72:	6825      	ldr	r5, [r4, #0]
 8000e74:	f015 0506 	ands.w	r5, r5, #6
 8000e78:	d106      	bne.n	8000e88 <_printf_common+0x48>
 8000e7a:	f104 0a19 	add.w	sl, r4, #25
 8000e7e:	68e3      	ldr	r3, [r4, #12]
 8000e80:	6832      	ldr	r2, [r6, #0]
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	42ab      	cmp	r3, r5
 8000e86:	dc26      	bgt.n	8000ed6 <_printf_common+0x96>
 8000e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e8c:	1e13      	subs	r3, r2, #0
 8000e8e:	6822      	ldr	r2, [r4, #0]
 8000e90:	bf18      	it	ne
 8000e92:	2301      	movne	r3, #1
 8000e94:	0692      	lsls	r2, r2, #26
 8000e96:	d42b      	bmi.n	8000ef0 <_printf_common+0xb0>
 8000e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	4638      	mov	r0, r7
 8000ea0:	47c0      	blx	r8
 8000ea2:	3001      	adds	r0, #1
 8000ea4:	d01e      	beq.n	8000ee4 <_printf_common+0xa4>
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	68e5      	ldr	r5, [r4, #12]
 8000eaa:	6832      	ldr	r2, [r6, #0]
 8000eac:	f003 0306 	and.w	r3, r3, #6
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	bf08      	it	eq
 8000eb4:	1aad      	subeq	r5, r5, r2
 8000eb6:	68a3      	ldr	r3, [r4, #8]
 8000eb8:	6922      	ldr	r2, [r4, #16]
 8000eba:	bf0c      	ite	eq
 8000ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ec0:	2500      	movne	r5, #0
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	bfc4      	itt	gt
 8000ec6:	1a9b      	subgt	r3, r3, r2
 8000ec8:	18ed      	addgt	r5, r5, r3
 8000eca:	2600      	movs	r6, #0
 8000ecc:	341a      	adds	r4, #26
 8000ece:	42b5      	cmp	r5, r6
 8000ed0:	d11a      	bne.n	8000f08 <_printf_common+0xc8>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	e008      	b.n	8000ee8 <_printf_common+0xa8>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	4652      	mov	r2, sl
 8000eda:	4649      	mov	r1, r9
 8000edc:	4638      	mov	r0, r7
 8000ede:	47c0      	blx	r8
 8000ee0:	3001      	adds	r0, #1
 8000ee2:	d103      	bne.n	8000eec <_printf_common+0xac>
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eec:	3501      	adds	r5, #1
 8000eee:	e7c6      	b.n	8000e7e <_printf_common+0x3e>
 8000ef0:	18e1      	adds	r1, r4, r3
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	2030      	movs	r0, #48	; 0x30
 8000ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000efa:	4422      	add	r2, r4
 8000efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f04:	3302      	adds	r3, #2
 8000f06:	e7c7      	b.n	8000e98 <_printf_common+0x58>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	4638      	mov	r0, r7
 8000f10:	47c0      	blx	r8
 8000f12:	3001      	adds	r0, #1
 8000f14:	d0e6      	beq.n	8000ee4 <_printf_common+0xa4>
 8000f16:	3601      	adds	r6, #1
 8000f18:	e7d9      	b.n	8000ece <_printf_common+0x8e>
	...

08000f1c <_printf_i>:
 8000f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f20:	460c      	mov	r4, r1
 8000f22:	4691      	mov	r9, r2
 8000f24:	7e27      	ldrb	r7, [r4, #24]
 8000f26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000f28:	2f78      	cmp	r7, #120	; 0x78
 8000f2a:	4680      	mov	r8, r0
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f32:	d807      	bhi.n	8000f44 <_printf_i+0x28>
 8000f34:	2f62      	cmp	r7, #98	; 0x62
 8000f36:	d80a      	bhi.n	8000f4e <_printf_i+0x32>
 8000f38:	2f00      	cmp	r7, #0
 8000f3a:	f000 80d8 	beq.w	80010ee <_printf_i+0x1d2>
 8000f3e:	2f58      	cmp	r7, #88	; 0x58
 8000f40:	f000 80a3 	beq.w	800108a <_printf_i+0x16e>
 8000f44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f4c:	e03a      	b.n	8000fc4 <_printf_i+0xa8>
 8000f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f52:	2b15      	cmp	r3, #21
 8000f54:	d8f6      	bhi.n	8000f44 <_printf_i+0x28>
 8000f56:	a001      	add	r0, pc, #4	; (adr r0, 8000f5c <_printf_i+0x40>)
 8000f58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000f5c:	08000fb5 	.word	0x08000fb5
 8000f60:	08000fc9 	.word	0x08000fc9
 8000f64:	08000f45 	.word	0x08000f45
 8000f68:	08000f45 	.word	0x08000f45
 8000f6c:	08000f45 	.word	0x08000f45
 8000f70:	08000f45 	.word	0x08000f45
 8000f74:	08000fc9 	.word	0x08000fc9
 8000f78:	08000f45 	.word	0x08000f45
 8000f7c:	08000f45 	.word	0x08000f45
 8000f80:	08000f45 	.word	0x08000f45
 8000f84:	08000f45 	.word	0x08000f45
 8000f88:	080010d5 	.word	0x080010d5
 8000f8c:	08000ff9 	.word	0x08000ff9
 8000f90:	080010b7 	.word	0x080010b7
 8000f94:	08000f45 	.word	0x08000f45
 8000f98:	08000f45 	.word	0x08000f45
 8000f9c:	080010f7 	.word	0x080010f7
 8000fa0:	08000f45 	.word	0x08000f45
 8000fa4:	08000ff9 	.word	0x08000ff9
 8000fa8:	08000f45 	.word	0x08000f45
 8000fac:	08000f45 	.word	0x08000f45
 8000fb0:	080010bf 	.word	0x080010bf
 8000fb4:	680b      	ldr	r3, [r1, #0]
 8000fb6:	1d1a      	adds	r2, r3, #4
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	600a      	str	r2, [r1, #0]
 8000fbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0a3      	b.n	8001110 <_printf_i+0x1f4>
 8000fc8:	6825      	ldr	r5, [r4, #0]
 8000fca:	6808      	ldr	r0, [r1, #0]
 8000fcc:	062e      	lsls	r6, r5, #24
 8000fce:	f100 0304 	add.w	r3, r0, #4
 8000fd2:	d50a      	bpl.n	8000fea <_printf_i+0xce>
 8000fd4:	6805      	ldr	r5, [r0, #0]
 8000fd6:	600b      	str	r3, [r1, #0]
 8000fd8:	2d00      	cmp	r5, #0
 8000fda:	da03      	bge.n	8000fe4 <_printf_i+0xc8>
 8000fdc:	232d      	movs	r3, #45	; 0x2d
 8000fde:	426d      	negs	r5, r5
 8000fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fe4:	485e      	ldr	r0, [pc, #376]	; (8001160 <_printf_i+0x244>)
 8000fe6:	230a      	movs	r3, #10
 8000fe8:	e019      	b.n	800101e <_printf_i+0x102>
 8000fea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000fee:	6805      	ldr	r5, [r0, #0]
 8000ff0:	600b      	str	r3, [r1, #0]
 8000ff2:	bf18      	it	ne
 8000ff4:	b22d      	sxthne	r5, r5
 8000ff6:	e7ef      	b.n	8000fd8 <_printf_i+0xbc>
 8000ff8:	680b      	ldr	r3, [r1, #0]
 8000ffa:	6825      	ldr	r5, [r4, #0]
 8000ffc:	1d18      	adds	r0, r3, #4
 8000ffe:	6008      	str	r0, [r1, #0]
 8001000:	0628      	lsls	r0, r5, #24
 8001002:	d501      	bpl.n	8001008 <_printf_i+0xec>
 8001004:	681d      	ldr	r5, [r3, #0]
 8001006:	e002      	b.n	800100e <_printf_i+0xf2>
 8001008:	0669      	lsls	r1, r5, #25
 800100a:	d5fb      	bpl.n	8001004 <_printf_i+0xe8>
 800100c:	881d      	ldrh	r5, [r3, #0]
 800100e:	4854      	ldr	r0, [pc, #336]	; (8001160 <_printf_i+0x244>)
 8001010:	2f6f      	cmp	r7, #111	; 0x6f
 8001012:	bf0c      	ite	eq
 8001014:	2308      	moveq	r3, #8
 8001016:	230a      	movne	r3, #10
 8001018:	2100      	movs	r1, #0
 800101a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800101e:	6866      	ldr	r6, [r4, #4]
 8001020:	60a6      	str	r6, [r4, #8]
 8001022:	2e00      	cmp	r6, #0
 8001024:	bfa2      	ittt	ge
 8001026:	6821      	ldrge	r1, [r4, #0]
 8001028:	f021 0104 	bicge.w	r1, r1, #4
 800102c:	6021      	strge	r1, [r4, #0]
 800102e:	b90d      	cbnz	r5, 8001034 <_printf_i+0x118>
 8001030:	2e00      	cmp	r6, #0
 8001032:	d04d      	beq.n	80010d0 <_printf_i+0x1b4>
 8001034:	4616      	mov	r6, r2
 8001036:	fbb5 f1f3 	udiv	r1, r5, r3
 800103a:	fb03 5711 	mls	r7, r3, r1, r5
 800103e:	5dc7      	ldrb	r7, [r0, r7]
 8001040:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001044:	462f      	mov	r7, r5
 8001046:	42bb      	cmp	r3, r7
 8001048:	460d      	mov	r5, r1
 800104a:	d9f4      	bls.n	8001036 <_printf_i+0x11a>
 800104c:	2b08      	cmp	r3, #8
 800104e:	d10b      	bne.n	8001068 <_printf_i+0x14c>
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	07df      	lsls	r7, r3, #31
 8001054:	d508      	bpl.n	8001068 <_printf_i+0x14c>
 8001056:	6923      	ldr	r3, [r4, #16]
 8001058:	6861      	ldr	r1, [r4, #4]
 800105a:	4299      	cmp	r1, r3
 800105c:	bfde      	ittt	le
 800105e:	2330      	movle	r3, #48	; 0x30
 8001060:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001064:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001068:	1b92      	subs	r2, r2, r6
 800106a:	6122      	str	r2, [r4, #16]
 800106c:	f8cd a000 	str.w	sl, [sp]
 8001070:	464b      	mov	r3, r9
 8001072:	aa03      	add	r2, sp, #12
 8001074:	4621      	mov	r1, r4
 8001076:	4640      	mov	r0, r8
 8001078:	f7ff fee2 	bl	8000e40 <_printf_common>
 800107c:	3001      	adds	r0, #1
 800107e:	d14c      	bne.n	800111a <_printf_i+0x1fe>
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	b004      	add	sp, #16
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	4835      	ldr	r0, [pc, #212]	; (8001160 <_printf_i+0x244>)
 800108c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	680e      	ldr	r6, [r1, #0]
 8001094:	061f      	lsls	r7, r3, #24
 8001096:	f856 5b04 	ldr.w	r5, [r6], #4
 800109a:	600e      	str	r6, [r1, #0]
 800109c:	d514      	bpl.n	80010c8 <_printf_i+0x1ac>
 800109e:	07d9      	lsls	r1, r3, #31
 80010a0:	bf44      	itt	mi
 80010a2:	f043 0320 	orrmi.w	r3, r3, #32
 80010a6:	6023      	strmi	r3, [r4, #0]
 80010a8:	b91d      	cbnz	r5, 80010b2 <_printf_i+0x196>
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	f023 0320 	bic.w	r3, r3, #32
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	2310      	movs	r3, #16
 80010b4:	e7b0      	b.n	8001018 <_printf_i+0xfc>
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	6023      	str	r3, [r4, #0]
 80010be:	2378      	movs	r3, #120	; 0x78
 80010c0:	4828      	ldr	r0, [pc, #160]	; (8001164 <_printf_i+0x248>)
 80010c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80010c6:	e7e3      	b.n	8001090 <_printf_i+0x174>
 80010c8:	065e      	lsls	r6, r3, #25
 80010ca:	bf48      	it	mi
 80010cc:	b2ad      	uxthmi	r5, r5
 80010ce:	e7e6      	b.n	800109e <_printf_i+0x182>
 80010d0:	4616      	mov	r6, r2
 80010d2:	e7bb      	b.n	800104c <_printf_i+0x130>
 80010d4:	680b      	ldr	r3, [r1, #0]
 80010d6:	6826      	ldr	r6, [r4, #0]
 80010d8:	6960      	ldr	r0, [r4, #20]
 80010da:	1d1d      	adds	r5, r3, #4
 80010dc:	600d      	str	r5, [r1, #0]
 80010de:	0635      	lsls	r5, r6, #24
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	d501      	bpl.n	80010e8 <_printf_i+0x1cc>
 80010e4:	6018      	str	r0, [r3, #0]
 80010e6:	e002      	b.n	80010ee <_printf_i+0x1d2>
 80010e8:	0671      	lsls	r1, r6, #25
 80010ea:	d5fb      	bpl.n	80010e4 <_printf_i+0x1c8>
 80010ec:	8018      	strh	r0, [r3, #0]
 80010ee:	2300      	movs	r3, #0
 80010f0:	6123      	str	r3, [r4, #16]
 80010f2:	4616      	mov	r6, r2
 80010f4:	e7ba      	b.n	800106c <_printf_i+0x150>
 80010f6:	680b      	ldr	r3, [r1, #0]
 80010f8:	1d1a      	adds	r2, r3, #4
 80010fa:	600a      	str	r2, [r1, #0]
 80010fc:	681e      	ldr	r6, [r3, #0]
 80010fe:	6862      	ldr	r2, [r4, #4]
 8001100:	2100      	movs	r1, #0
 8001102:	4630      	mov	r0, r6
 8001104:	f7ff f864 	bl	80001d0 <memchr>
 8001108:	b108      	cbz	r0, 800110e <_printf_i+0x1f2>
 800110a:	1b80      	subs	r0, r0, r6
 800110c:	6060      	str	r0, [r4, #4]
 800110e:	6863      	ldr	r3, [r4, #4]
 8001110:	6123      	str	r3, [r4, #16]
 8001112:	2300      	movs	r3, #0
 8001114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001118:	e7a8      	b.n	800106c <_printf_i+0x150>
 800111a:	6923      	ldr	r3, [r4, #16]
 800111c:	4632      	mov	r2, r6
 800111e:	4649      	mov	r1, r9
 8001120:	4640      	mov	r0, r8
 8001122:	47d0      	blx	sl
 8001124:	3001      	adds	r0, #1
 8001126:	d0ab      	beq.n	8001080 <_printf_i+0x164>
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	079b      	lsls	r3, r3, #30
 800112c:	d413      	bmi.n	8001156 <_printf_i+0x23a>
 800112e:	68e0      	ldr	r0, [r4, #12]
 8001130:	9b03      	ldr	r3, [sp, #12]
 8001132:	4298      	cmp	r0, r3
 8001134:	bfb8      	it	lt
 8001136:	4618      	movlt	r0, r3
 8001138:	e7a4      	b.n	8001084 <_printf_i+0x168>
 800113a:	2301      	movs	r3, #1
 800113c:	4632      	mov	r2, r6
 800113e:	4649      	mov	r1, r9
 8001140:	4640      	mov	r0, r8
 8001142:	47d0      	blx	sl
 8001144:	3001      	adds	r0, #1
 8001146:	d09b      	beq.n	8001080 <_printf_i+0x164>
 8001148:	3501      	adds	r5, #1
 800114a:	68e3      	ldr	r3, [r4, #12]
 800114c:	9903      	ldr	r1, [sp, #12]
 800114e:	1a5b      	subs	r3, r3, r1
 8001150:	42ab      	cmp	r3, r5
 8001152:	dcf2      	bgt.n	800113a <_printf_i+0x21e>
 8001154:	e7eb      	b.n	800112e <_printf_i+0x212>
 8001156:	2500      	movs	r5, #0
 8001158:	f104 0619 	add.w	r6, r4, #25
 800115c:	e7f5      	b.n	800114a <_printf_i+0x22e>
 800115e:	bf00      	nop
 8001160:	08001656 	.word	0x08001656
 8001164:	08001667 	.word	0x08001667

08001168 <memcpy>:
 8001168:	440a      	add	r2, r1
 800116a:	4291      	cmp	r1, r2
 800116c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001170:	d100      	bne.n	8001174 <memcpy+0xc>
 8001172:	4770      	bx	lr
 8001174:	b510      	push	{r4, lr}
 8001176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800117a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800117e:	4291      	cmp	r1, r2
 8001180:	d1f9      	bne.n	8001176 <memcpy+0xe>
 8001182:	bd10      	pop	{r4, pc}

08001184 <memmove>:
 8001184:	4288      	cmp	r0, r1
 8001186:	b510      	push	{r4, lr}
 8001188:	eb01 0402 	add.w	r4, r1, r2
 800118c:	d902      	bls.n	8001194 <memmove+0x10>
 800118e:	4284      	cmp	r4, r0
 8001190:	4623      	mov	r3, r4
 8001192:	d807      	bhi.n	80011a4 <memmove+0x20>
 8001194:	1e43      	subs	r3, r0, #1
 8001196:	42a1      	cmp	r1, r4
 8001198:	d008      	beq.n	80011ac <memmove+0x28>
 800119a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800119e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80011a2:	e7f8      	b.n	8001196 <memmove+0x12>
 80011a4:	4402      	add	r2, r0
 80011a6:	4601      	mov	r1, r0
 80011a8:	428a      	cmp	r2, r1
 80011aa:	d100      	bne.n	80011ae <memmove+0x2a>
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80011b6:	e7f7      	b.n	80011a8 <memmove+0x24>

080011b8 <_free_r>:
 80011b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80011ba:	2900      	cmp	r1, #0
 80011bc:	d048      	beq.n	8001250 <_free_r+0x98>
 80011be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011c2:	9001      	str	r0, [sp, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f1a1 0404 	sub.w	r4, r1, #4
 80011ca:	bfb8      	it	lt
 80011cc:	18e4      	addlt	r4, r4, r3
 80011ce:	f000 f8d3 	bl	8001378 <__malloc_lock>
 80011d2:	4a20      	ldr	r2, [pc, #128]	; (8001254 <_free_r+0x9c>)
 80011d4:	9801      	ldr	r0, [sp, #4]
 80011d6:	6813      	ldr	r3, [r2, #0]
 80011d8:	4615      	mov	r5, r2
 80011da:	b933      	cbnz	r3, 80011ea <_free_r+0x32>
 80011dc:	6063      	str	r3, [r4, #4]
 80011de:	6014      	str	r4, [r2, #0]
 80011e0:	b003      	add	sp, #12
 80011e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80011e6:	f000 b8cd 	b.w	8001384 <__malloc_unlock>
 80011ea:	42a3      	cmp	r3, r4
 80011ec:	d90b      	bls.n	8001206 <_free_r+0x4e>
 80011ee:	6821      	ldr	r1, [r4, #0]
 80011f0:	1862      	adds	r2, r4, r1
 80011f2:	4293      	cmp	r3, r2
 80011f4:	bf04      	itt	eq
 80011f6:	681a      	ldreq	r2, [r3, #0]
 80011f8:	685b      	ldreq	r3, [r3, #4]
 80011fa:	6063      	str	r3, [r4, #4]
 80011fc:	bf04      	itt	eq
 80011fe:	1852      	addeq	r2, r2, r1
 8001200:	6022      	streq	r2, [r4, #0]
 8001202:	602c      	str	r4, [r5, #0]
 8001204:	e7ec      	b.n	80011e0 <_free_r+0x28>
 8001206:	461a      	mov	r2, r3
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	b10b      	cbz	r3, 8001210 <_free_r+0x58>
 800120c:	42a3      	cmp	r3, r4
 800120e:	d9fa      	bls.n	8001206 <_free_r+0x4e>
 8001210:	6811      	ldr	r1, [r2, #0]
 8001212:	1855      	adds	r5, r2, r1
 8001214:	42a5      	cmp	r5, r4
 8001216:	d10b      	bne.n	8001230 <_free_r+0x78>
 8001218:	6824      	ldr	r4, [r4, #0]
 800121a:	4421      	add	r1, r4
 800121c:	1854      	adds	r4, r2, r1
 800121e:	42a3      	cmp	r3, r4
 8001220:	6011      	str	r1, [r2, #0]
 8001222:	d1dd      	bne.n	80011e0 <_free_r+0x28>
 8001224:	681c      	ldr	r4, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	6053      	str	r3, [r2, #4]
 800122a:	4421      	add	r1, r4
 800122c:	6011      	str	r1, [r2, #0]
 800122e:	e7d7      	b.n	80011e0 <_free_r+0x28>
 8001230:	d902      	bls.n	8001238 <_free_r+0x80>
 8001232:	230c      	movs	r3, #12
 8001234:	6003      	str	r3, [r0, #0]
 8001236:	e7d3      	b.n	80011e0 <_free_r+0x28>
 8001238:	6825      	ldr	r5, [r4, #0]
 800123a:	1961      	adds	r1, r4, r5
 800123c:	428b      	cmp	r3, r1
 800123e:	bf04      	itt	eq
 8001240:	6819      	ldreq	r1, [r3, #0]
 8001242:	685b      	ldreq	r3, [r3, #4]
 8001244:	6063      	str	r3, [r4, #4]
 8001246:	bf04      	itt	eq
 8001248:	1949      	addeq	r1, r1, r5
 800124a:	6021      	streq	r1, [r4, #0]
 800124c:	6054      	str	r4, [r2, #4]
 800124e:	e7c7      	b.n	80011e0 <_free_r+0x28>
 8001250:	b003      	add	sp, #12
 8001252:	bd30      	pop	{r4, r5, pc}
 8001254:	2000021c 	.word	0x2000021c

08001258 <_malloc_r>:
 8001258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125a:	1ccd      	adds	r5, r1, #3
 800125c:	f025 0503 	bic.w	r5, r5, #3
 8001260:	3508      	adds	r5, #8
 8001262:	2d0c      	cmp	r5, #12
 8001264:	bf38      	it	cc
 8001266:	250c      	movcc	r5, #12
 8001268:	2d00      	cmp	r5, #0
 800126a:	4606      	mov	r6, r0
 800126c:	db01      	blt.n	8001272 <_malloc_r+0x1a>
 800126e:	42a9      	cmp	r1, r5
 8001270:	d903      	bls.n	800127a <_malloc_r+0x22>
 8001272:	230c      	movs	r3, #12
 8001274:	6033      	str	r3, [r6, #0]
 8001276:	2000      	movs	r0, #0
 8001278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800127a:	f000 f87d 	bl	8001378 <__malloc_lock>
 800127e:	4921      	ldr	r1, [pc, #132]	; (8001304 <_malloc_r+0xac>)
 8001280:	680a      	ldr	r2, [r1, #0]
 8001282:	4614      	mov	r4, r2
 8001284:	b99c      	cbnz	r4, 80012ae <_malloc_r+0x56>
 8001286:	4f20      	ldr	r7, [pc, #128]	; (8001308 <_malloc_r+0xb0>)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b923      	cbnz	r3, 8001296 <_malloc_r+0x3e>
 800128c:	4621      	mov	r1, r4
 800128e:	4630      	mov	r0, r6
 8001290:	f000 f862 	bl	8001358 <_sbrk_r>
 8001294:	6038      	str	r0, [r7, #0]
 8001296:	4629      	mov	r1, r5
 8001298:	4630      	mov	r0, r6
 800129a:	f000 f85d 	bl	8001358 <_sbrk_r>
 800129e:	1c43      	adds	r3, r0, #1
 80012a0:	d123      	bne.n	80012ea <_malloc_r+0x92>
 80012a2:	230c      	movs	r3, #12
 80012a4:	6033      	str	r3, [r6, #0]
 80012a6:	4630      	mov	r0, r6
 80012a8:	f000 f86c 	bl	8001384 <__malloc_unlock>
 80012ac:	e7e3      	b.n	8001276 <_malloc_r+0x1e>
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	1b5b      	subs	r3, r3, r5
 80012b2:	d417      	bmi.n	80012e4 <_malloc_r+0x8c>
 80012b4:	2b0b      	cmp	r3, #11
 80012b6:	d903      	bls.n	80012c0 <_malloc_r+0x68>
 80012b8:	6023      	str	r3, [r4, #0]
 80012ba:	441c      	add	r4, r3
 80012bc:	6025      	str	r5, [r4, #0]
 80012be:	e004      	b.n	80012ca <_malloc_r+0x72>
 80012c0:	6863      	ldr	r3, [r4, #4]
 80012c2:	42a2      	cmp	r2, r4
 80012c4:	bf0c      	ite	eq
 80012c6:	600b      	streq	r3, [r1, #0]
 80012c8:	6053      	strne	r3, [r2, #4]
 80012ca:	4630      	mov	r0, r6
 80012cc:	f000 f85a 	bl	8001384 <__malloc_unlock>
 80012d0:	f104 000b 	add.w	r0, r4, #11
 80012d4:	1d23      	adds	r3, r4, #4
 80012d6:	f020 0007 	bic.w	r0, r0, #7
 80012da:	1ac2      	subs	r2, r0, r3
 80012dc:	d0cc      	beq.n	8001278 <_malloc_r+0x20>
 80012de:	1a1b      	subs	r3, r3, r0
 80012e0:	50a3      	str	r3, [r4, r2]
 80012e2:	e7c9      	b.n	8001278 <_malloc_r+0x20>
 80012e4:	4622      	mov	r2, r4
 80012e6:	6864      	ldr	r4, [r4, #4]
 80012e8:	e7cc      	b.n	8001284 <_malloc_r+0x2c>
 80012ea:	1cc4      	adds	r4, r0, #3
 80012ec:	f024 0403 	bic.w	r4, r4, #3
 80012f0:	42a0      	cmp	r0, r4
 80012f2:	d0e3      	beq.n	80012bc <_malloc_r+0x64>
 80012f4:	1a21      	subs	r1, r4, r0
 80012f6:	4630      	mov	r0, r6
 80012f8:	f000 f82e 	bl	8001358 <_sbrk_r>
 80012fc:	3001      	adds	r0, #1
 80012fe:	d1dd      	bne.n	80012bc <_malloc_r+0x64>
 8001300:	e7cf      	b.n	80012a2 <_malloc_r+0x4a>
 8001302:	bf00      	nop
 8001304:	2000021c 	.word	0x2000021c
 8001308:	20000220 	.word	0x20000220

0800130c <_realloc_r>:
 800130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130e:	4607      	mov	r7, r0
 8001310:	4614      	mov	r4, r2
 8001312:	460e      	mov	r6, r1
 8001314:	b921      	cbnz	r1, 8001320 <_realloc_r+0x14>
 8001316:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800131a:	4611      	mov	r1, r2
 800131c:	f7ff bf9c 	b.w	8001258 <_malloc_r>
 8001320:	b922      	cbnz	r2, 800132c <_realloc_r+0x20>
 8001322:	f7ff ff49 	bl	80011b8 <_free_r>
 8001326:	4625      	mov	r5, r4
 8001328:	4628      	mov	r0, r5
 800132a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800132c:	f000 f830 	bl	8001390 <_malloc_usable_size_r>
 8001330:	42a0      	cmp	r0, r4
 8001332:	d20f      	bcs.n	8001354 <_realloc_r+0x48>
 8001334:	4621      	mov	r1, r4
 8001336:	4638      	mov	r0, r7
 8001338:	f7ff ff8e 	bl	8001258 <_malloc_r>
 800133c:	4605      	mov	r5, r0
 800133e:	2800      	cmp	r0, #0
 8001340:	d0f2      	beq.n	8001328 <_realloc_r+0x1c>
 8001342:	4631      	mov	r1, r6
 8001344:	4622      	mov	r2, r4
 8001346:	f7ff ff0f 	bl	8001168 <memcpy>
 800134a:	4631      	mov	r1, r6
 800134c:	4638      	mov	r0, r7
 800134e:	f7ff ff33 	bl	80011b8 <_free_r>
 8001352:	e7e9      	b.n	8001328 <_realloc_r+0x1c>
 8001354:	4635      	mov	r5, r6
 8001356:	e7e7      	b.n	8001328 <_realloc_r+0x1c>

08001358 <_sbrk_r>:
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4d06      	ldr	r5, [pc, #24]	; (8001374 <_sbrk_r+0x1c>)
 800135c:	2300      	movs	r3, #0
 800135e:	4604      	mov	r4, r0
 8001360:	4608      	mov	r0, r1
 8001362:	602b      	str	r3, [r5, #0]
 8001364:	f000 f81e 	bl	80013a4 <_sbrk>
 8001368:	1c43      	adds	r3, r0, #1
 800136a:	d102      	bne.n	8001372 <_sbrk_r+0x1a>
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	b103      	cbz	r3, 8001372 <_sbrk_r+0x1a>
 8001370:	6023      	str	r3, [r4, #0]
 8001372:	bd38      	pop	{r3, r4, r5, pc}
 8001374:	20000228 	.word	0x20000228

08001378 <__malloc_lock>:
 8001378:	4801      	ldr	r0, [pc, #4]	; (8001380 <__malloc_lock+0x8>)
 800137a:	f000 b811 	b.w	80013a0 <__retarget_lock_acquire_recursive>
 800137e:	bf00      	nop
 8001380:	20000230 	.word	0x20000230

08001384 <__malloc_unlock>:
 8001384:	4801      	ldr	r0, [pc, #4]	; (800138c <__malloc_unlock+0x8>)
 8001386:	f000 b80c 	b.w	80013a2 <__retarget_lock_release_recursive>
 800138a:	bf00      	nop
 800138c:	20000230 	.word	0x20000230

08001390 <_malloc_usable_size_r>:
 8001390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001394:	1f18      	subs	r0, r3, #4
 8001396:	2b00      	cmp	r3, #0
 8001398:	bfbc      	itt	lt
 800139a:	580b      	ldrlt	r3, [r1, r0]
 800139c:	18c0      	addlt	r0, r0, r3
 800139e:	4770      	bx	lr

080013a0 <__retarget_lock_acquire_recursive>:
 80013a0:	4770      	bx	lr

080013a2 <__retarget_lock_release_recursive>:
 80013a2:	4770      	bx	lr

080013a4 <_sbrk>:
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <_sbrk+0x14>)
 80013a6:	6819      	ldr	r1, [r3, #0]
 80013a8:	4602      	mov	r2, r0
 80013aa:	b909      	cbnz	r1, 80013b0 <_sbrk+0xc>
 80013ac:	4903      	ldr	r1, [pc, #12]	; (80013bc <_sbrk+0x18>)
 80013ae:	6019      	str	r1, [r3, #0]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	4402      	add	r2, r0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	4770      	bx	lr
 80013b8:	20000224 	.word	0x20000224
 80013bc:	20000238 	.word	0x20000238

080013c0 <_init>:
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	bf00      	nop
 80013c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c6:	bc08      	pop	{r3}
 80013c8:	469e      	mov	lr, r3
 80013ca:	4770      	bx	lr

080013cc <_fini>:
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ce:	bf00      	nop
 80013d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d2:	bc08      	pop	{r3}
 80013d4:	469e      	mov	lr, r3
 80013d6:	4770      	bx	lr
